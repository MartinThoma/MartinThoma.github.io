<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Martin Thoma - Security</title><link>https://martin-thoma.com/</link><description>A blog about Code, the Web and Cyberculture</description><lastBuildDate>Sat, 01 Jan 2022 20:00:00 +0100</lastBuildDate><item><title>ReDoS ‚Äî Denial of Service by RegEx üòà</title><link>https://martin-thoma.com/redos/</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2022/03/redos-title.png"&gt;&lt;img alt="A redos example" src="../images/2022/03/redos-title.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A redos example&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Regular expressions (RegEx) are a formal language to define simple patterns. It is commonly used to find interesting parts within a larger body of text or to validate data. It is typically fast and sometimes a clean solution. However, in some cases, an attacker can craft input ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 01 Jan 2022 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2022-01-01:/redos/</guid><category>Security</category></item><item><title>Docker Security üòá</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/docker-security-5f4df118948c</link><description>&lt;p&gt;&lt;img alt="Photo by Andrey Sharpilo on Unsplash" src="https://cdn-images-1.medium.com/max/9600/0*r4ZMVDm0J0WtgNKQ"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@sharpiloa?utm_source=medium&amp;amp;utm_medium=referral"&gt;Andrey Sharpilo&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most companies I have seen deploy Docker images in at least one project or service. Docker is great because it makes stuff reproducible by specifying the environment to a big degree. However, you still have to think about security. Let&amp;rsquo;s have a closer ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 06 Feb 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-02-06:/https://levelup.gitconnected.com/docker-security-5f4df118948c</guid><category>Security</category><category>Docker</category><category>AppSec</category></item><item><title>Insecure Deserialization üòàüêù</title><link>https://martin-thoma.com/https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e</link><description>&lt;p&gt;Serialization is the act of transforming objects from an internal
representation to a stream of characters or bytes. The representation of the
serialized object should be platform- and language-independent. Data is
serialized and deserialized in applications to &lt;strong&gt;store&lt;/strong&gt; or &lt;strong&gt;transport&lt;/strong&gt; it.
In web applications, &lt;strong&gt;JSON&lt;/strong&gt; or &lt;strong&gt;XML&lt;/strong&gt; is often used ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 28 Jan 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-01-28:/https://medium.com/bugbountywriteup/insecure-deserialization-5c64e9943f0e</guid><category>Security</category><category>AppSec</category><category>Cybersecurity</category></item><item><title>Full Disk Encryption üòá</title><link>https://martin-thoma.com/https://medium.com/faun/full-disk-encryption-2090489f9760</link><description>&lt;p&gt;Having an attacker with physical access to your device is one of the worst
scenarios. If the data is not encrypted on the disk, then the attacker can
simply disassemble your device, get the HDD/SDD, put it in his machine, and
read the data. For this reason, encrypting your ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 28 Dec 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-12-28:/https://medium.com/faun/full-disk-encryption-2090489f9760</guid><category>Security</category><category>Security</category><category>Cybersecurity</category><category>IT Security</category><category>InfoSec</category></item><item><title>DOS via a billion laughs üòà</title><link>https://martin-thoma.com/https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139</link><description>&lt;p&gt;&lt;img alt="Image by the author" src="https://cdn-images-1.medium.com/max/3708/1*Mlli4bOg_zK6Jbllje6bFQ.png"/&gt;&lt;em&gt;Image by the author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The billion laughs attack is known since 2003 (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1564"&gt;source&lt;/a&gt;). The attack uses the references in XML files to make a small source file be huge in memory if all references are expanded. It&amp;rsquo;s also known as a LOL bomb, XML bomb, or in a variation ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 23 Dec 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-12-23:/https://medium.com/bugbountywriteup/dos-via-a-billion-laughs-9a79be96e139</guid><category>Security</category><category>InfoSec</category><category>AppSec</category><category>Security</category><category>Cybersecurity</category></item><item><title>Effective Access Control üòá</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/effective-access-control-331f883cb0ff</link><description>&lt;p&gt;Access control is the act of restricting access to a selected group of people or systems. That group is authorized to access the system. To check if a person is authorized to access, the person typically has to be authenticated.&lt;/p&gt;
&lt;p&gt;In this article, I focus on web services. Access to ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 23 Dec 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-12-23:/https://levelup.gitconnected.com/effective-access-control-331f883cb0ff</guid><category>Security</category><category>InfoSec</category><category>AppSec</category><category>Security</category><category>Cybersecurity</category><category>OWASP</category></item><item><title>The Cyber Security Triad</title><link>https://martin-thoma.com/https://medium.com/plain-and-simple/the-cyber-security-triad-df9911f85955</link><description>&lt;p&gt;&lt;img alt="Photo by Tobias Tullius on Unsplash" src="https://cdn-images-1.medium.com/max/9824/0*y0XhVZB7bT94OK4T"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@tobiastu?utm_source=medium&amp;amp;utm_medium=referral"&gt;Tobias Tullius&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Cyber Security Triad, also called the CIA triad, is a set of three goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt;: Information or resources can only be accessed by
  authorized parties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: Information can only be added, edited, or removed by
  authorized parties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Systems are available to their ‚Ä¶&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 11 Dec 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-12-11:/https://medium.com/plain-and-simple/the-cyber-security-triad-df9911f85955</guid><category>Security</category><category>Security</category><category>Cybersecurity</category></item><item><title>Software Composition Analysis (SCA)</title><link>https://martin-thoma.com/sca/</link><description>&lt;p&gt;The job as a software developer is pretty crazy: You need to learn constantly
about new technologies, understand topics within the domain you&amp;rsquo;re working,
estimate how long it will take to build stuff you have never built before,
explain issues to people who have absolutely no clue. On top ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 04 Dec 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-12-04:/sca/</guid><category>Security</category><category>Security</category><category>Cybersecurity</category><category>InfoSec</category><category>SCA</category></item><item><title>Email Spoofing üòà</title><link>https://martin-thoma.com/https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf</link><description>&lt;p&gt;Email spoofing is the creation of emails with a forged sender address. Faking the senders&amp;rsquo; address is often a part of a &lt;strong&gt;phishing&lt;/strong&gt; attack. There are different ways to fool the victim of a phishing attack about who is the real sender: Using slightly different sender domains like security@paypal ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 02 Dec 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-12-02:/https://medium.com/bugbountywriteup/email-spoofing-9da8d33406bf</guid><category>Security</category><category>Security</category><category>email</category><category>InfoSec</category><category>CyberSecurity</category></item><item><title>ZIP Bombs üí£üòà</title><link>https://martin-thoma.com/https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112</link><description>&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Zip_bomb"&gt;zip bomb&lt;/a&gt; is a zip file that is designed to take an enormous amount of space once it is unpacked. The best-known one is called 42.zip and has a size of &lt;strong&gt;42kB&lt;/strong&gt;. It contains recursively nested zip-files. On the lowest level, there is a single file which decompresses ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 28 Oct 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-28:/https://medium.com/bugbountywriteup/zip-bombs-30337a1b0112</guid><category>Security</category><category>Security</category><category>AppSec</category><category>DOS</category></item><item><title>Password Hashing üòá</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/password-hashing-eb3b97684636</link><description>&lt;p&gt;Software gets hacked, data breaches happen, data is leaked. It&amp;rsquo;s not a rare exception but happens all the time. We need to acknowledge that software is not perfect. This is where the concept of defense in depth comes into play.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="defense-in-depth-means-we-dont-rely-on-a-single-security-mechanism-but-have-multiple-layers-of-security-instead"&gt;Defense in depth means we don&amp;rsquo;t rely on ‚Ä¶&lt;/h1&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 19 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-19:/https://levelup.gitconnected.com/password-hashing-eb3b97684636</guid><category>Security</category><category>InfoSec</category><category>AppSec</category><category>Security</category><category>Cybersecurity</category><category>Password</category></item><item><title>Cross-site Scripting (XSS) üòà</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f</link><description>&lt;p&gt;Cross-site scripting (XSS) is a type of attack on websites where the attacker can make the attacked website deliver JavaScript to the user. This malicious JavaScript is then executed on the users&amp;rsquo; machine.&lt;/p&gt;
&lt;p&gt;Various types of XSS are distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stored XSS&lt;/strong&gt;: The attacker can make the website store the XSS ‚Ä¶&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 16 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-16:/https://levelup.gitconnected.com/cross-site-scripting-xss-fd374ce71b2f</guid><category>Security</category><category>InfoSec</category><category>AppSec</category><category>Security</category><category>Cybersecurity</category></item><item><title>Leaking Secrets üòá</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/leaking-secrets-240a3484cb80</link><description>&lt;p&gt;One of the worst mistakes one can make in application security is to publicly post secrets. That can be API keys, database credentials, service tokens, or private keys for asymmetric cryptography such as RSA as used for GPG.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s best to prevent leaking credentials completely, but if it&amp;rsquo;s ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 13 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-13:/https://levelup.gitconnected.com/leaking-secrets-240a3484cb80</guid><category>Security</category><category>InfoSec</category><category>AppSec</category><category>Security</category><category>Cybersecurity</category></item><item><title>SQL Injections üòà</title><link>https://martin-thoma.com/https://medium.com/faun/sql-injections-e8bc9a14c95</link><description>&lt;p&gt;An SQL injection is an attack on a web system with a database. The attack is done by injecting unexpected commands into parameters. Don&amp;rsquo;t worry, I&amp;rsquo;ll explain that later in detail.&lt;/p&gt;
&lt;p&gt;After reading this article you will understand what the effect of being vulnerable to SQL injections can ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 12 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-12:/https://medium.com/faun/sql-injections-e8bc9a14c95</guid><category>Security</category><category>InfoSec</category><category>AppSec</category><category>Security</category><category>Cybersecurity</category></item><item><title>XXE attacks üòà</title><link>https://martin-thoma.com/https://medium.com/faun/xxe-attacks-750e91448e8f</link><description>&lt;p&gt;XML is probably the most commonly used markup language. It&amp;rsquo;s organized around tags &lt;code&gt;&amp;lt;example&amp;gt;foo&amp;lt;/example&amp;gt;&lt;/code&gt; and allows pretty complicated structures&lt;/p&gt;
&lt;p&gt;One interesting property about XML is that you can reference external entities, e.g. you can include another file. That is where the name XXE comes from: &lt;strong&gt;X ‚Ä¶&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 17 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-17:/https://medium.com/faun/xxe-attacks-750e91448e8f</guid><category>Security</category><category>Cybersecurity</category><category>AppSec</category></item><item><title>CAPTCHA</title><link>https://martin-thoma.com/captcha/</link><description>&lt;p&gt;Spam is really a problem if you have a WordPress blog, a forum or a guestbook. A very common approach to solve this problem are CAPTCHAs - &lt;strong&gt;C&lt;/strong&gt;ompletely &lt;strong&gt;A&lt;/strong&gt;utomated &lt;strong&gt;P&lt;/strong&gt;ublic &lt;strong&gt;T&lt;/strong&gt;uring test to tell &lt;strong&gt;C&lt;/strong&gt;omputers and &lt;strong&gt;H&lt;/strong&gt;umans &lt;strong&gt;A&lt;/strong&gt;part.&lt;/p&gt;
&lt;p&gt;The idea behind CAPTCHAs is to ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 29 Sep 2011 09:20:35 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2011-09-29:/captcha/</guid><category>Security</category><category>CAPTCHA</category><category>Spam</category><category>Security</category><category>Cybersecurity</category></item></channel></rss>