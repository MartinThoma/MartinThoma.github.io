<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Martin Thoma - Machine Learning</title><link href="https://martin-thoma.com/" rel="alternate"></link><link href="https://martin-thoma.com/feeds/machine-learning.atom.xml" rel="self"></link><id>https://martin-thoma.com/</id><updated>2019-12-02T20:00:00+01:00</updated><subtitle>A blog about Code, the Web and Cyberculture</subtitle><entry><title>Data Applications</title><link href="https://martin-thoma.com/data-applications/" rel="alternate"></link><published>2019-12-02T20:00:00+01:00</published><updated>2019-12-02T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-02:/data-applications/</id><summary type="html">&lt;p&gt;"Data is the new oil", "we need to be data driven",
"we need to apply AI to keep being competitive" are some of the prashes I hear
a lot. As I haven't seen yet a clear article pointing out what is done with
the data ... here you are ðŸ™‚&lt;/p&gt;
&lt;h2 id="why-its-complicated"&gt;Why it's â€¦&lt;/h2&gt;</summary><content type="html">&lt;p&gt;"Data is the new oil", "we need to be data driven",
"we need to apply AI to keep being competitive" are some of the prashes I hear
a lot. As I haven't seen yet a clear article pointing out what is done with
the data ... here you are ðŸ™‚&lt;/p&gt;
&lt;h2 id="why-its-complicated"&gt;Why it's complicated&lt;/h2&gt;
&lt;p&gt;Coorporations have a lot of data which is analyzed under different aspects
all the time. Micro services are built which have their own data flows,
applications and services are updated while they are running. Bugs get fixed.
All of this makes the data very heterogenous.&lt;/p&gt;
&lt;p&gt;Data quality problems include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mixed attribute availability&lt;/strong&gt;: Changes and bugs lead to NULL values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Changes&lt;/strong&gt;: The applications which produce the data might change.
  Maybe you have "price" column somewhere. At one point it included tax, at
  another it doesn't. Time might be local, server and UTC. Durations might be
  seconds and milliseconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: The data format might change. Maybe the user name is sometimes "FIRSTNAME
  LASTNAME" and in other cases "LASTNAME, FIRSTNAME".&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duplicates&lt;/strong&gt;: Some entries might be duplicated, e.g. multiple form submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Engineering problems include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Big Data&lt;/strong&gt;: The amount of data might be bigger than what fits into memory.
  Maybe even bigger than what fits on a single machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast Data&lt;/strong&gt;: The incoming data might need to be processed in a few
  milliseconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt;: How do we make the platform GDPR complient?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Authentifiction and Authorization&lt;/li&gt;
&lt;/ul&gt;
&lt;!--

Buzz-Words: label label-warning
Technologies: label label-primary
Roles: label label-info
    ---&gt;
&lt;h2 id="data-warehouse"&gt;Data Warehouse&lt;/h2&gt;
&lt;p&gt;If you have many different data sources and you want to analyze them often, you
want a &lt;a href="https://en.wikipedia.org/wiki/Data_warehouse"&gt;Data Warehouse&lt;/a&gt; (DWH). A
central place where the data lives. It is likely not completely recent, but
should not be too old either. One Data Warehousing solution as a service
is &lt;a href="https://en.wikipedia.org/wiki/Snowflake_Inc."&gt;&lt;span class="label label-primary"&gt;Snowflake&lt;/span&gt;&lt;/a&gt;.
&lt;a href="https://en.wikipedia.org/wiki/Amazon_Redshift"&gt;&lt;span class="label label-primary"&gt;Amazon Redshift&lt;/span&gt;&lt;/a&gt; is another one
(&lt;a href="https://www.youtube.com/watch?v=_qKm6o1zK3U"&gt;promo video&lt;/a&gt;).
You can execute SQL queries in those warehouses. So you can already make use of
that data to answer simple questions.&lt;/p&gt;
&lt;h2 id="reports-and-dashboards"&gt;Reports and Dashboards&lt;/h2&gt;
&lt;p&gt;Sometimes a table as a result is not enough. You need graphics. The first step
might be Excel, but very often this is cumbersome as the data load is too big,
as one needs to download the data from the warehouse. Then
&lt;a href="https://en.wikipedia.org/wiki/Tableau_Software"&gt;&lt;span class="label label-primary"&gt;Tableau&lt;/span&gt;&lt;/a&gt;
(&lt;a href="https://www.youtube.com/watch?v=VUVqj7YsWmU"&gt;promo&amp;nbsp;video&lt;/a&gt;) and
&lt;a href="https://en.wikipedia.org/wiki/Qlik"&gt;&lt;span class="label label-primary"&gt;QlikView&lt;/span&gt;&lt;/a&gt;
(&lt;a href="https://www.youtube.com/watch?v=sqILcEwlHSI"&gt;promo&amp;nbsp;video&lt;/a&gt;) come into
play. The Buzzword here are &lt;span class="label label-danger"&gt;data driven&lt;/span&gt; and &lt;span class="label label-danger"&gt;self-service BI&lt;/span&gt;. People using
this software are often called &lt;span class="label label-info"&gt;Business
Analysts&lt;/span&gt; and work in an &lt;i&gt;BI department&lt;/i&gt;. They usually create
dashboards and reports which drive business decisions.&lt;/p&gt;
&lt;p&gt;If the company has a lot of very different data, a
&lt;span class="label label-primary"&gt;data dictionary&lt;/span&gt; might help. In the
simplest case, it could be a word document. A bit more advanced would be to
use the comment attribute for columns in databases. Then there are tools
like &lt;a href="https://dataedo.com/"&gt;dataedo&lt;/a&gt; as well.&lt;/p&gt;
&lt;h2 id="poc-model-creation"&gt;POC: Model creation&lt;/h2&gt;
&lt;p&gt;Sometimes, analysis of the past behavior is not enough. You need a predictive
model for future cases. Maybe even have it as a part of a customer-facing
product. Now you need a &lt;span class="label label-info"&gt;Data Scientist&lt;/span&gt;.
The work starts at the warehouse. As the warehouses and QlikView / Tableaus
options are too limited, the data scientist gets a dump of the relevant parts.
This might include some aggregtions, filtering and unions in the warehouse
before, but at some point it will likely be imported in an environment where
Python can be used. The Data Scientist analyzes the data, e.g. with a
&lt;a href="https://en.wikipedia.org/wiki/Project_Jupyter"&gt;&lt;span class="label label-primary"&gt;Jupyter&amp;nbsp;Notebook&lt;/span&gt;&lt;/a&gt;. Usually
the data contains many problems like unrealistic values or missing data (NULL
values). Then the model creation part starts. This could still happen in the
Notebook. To solve the prediction task, the data scientist might use models
such as &lt;a class="label label-danger" href="https://en.wikipedia.org/wiki/Support-vector_machine"&gt;SVMs&lt;/a&gt;, &lt;a class="label label-danger" href="https://en.wikipedia.org/wiki/Artificial_neural_network"&gt;neural networks&lt;/a&gt; or &lt;a class="label label-danger" href="https://en.wikipedia.org/wiki/Random_forest"&gt;Random Forests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data scientists create a &lt;dfn&gt;Proof of Concept (PoC)&lt;/dfn&gt;. The model is
not in a state to be used directly in production, because a lot of the cables
might not be connected. But it should be clear from the PoC if the data allows
building the kind of model you want to have. A valid outcome of the PoC is that
it is (currently) not possible.&lt;/p&gt;
&lt;p&gt;The two parts that can consume arbitrary much time are data cleaning and model
optimization. Even after the PoC. If you're interested in that topic, ping me
in the comments.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/12/data-warehouse-analytics.png"&gt;&lt;img alt="Relationship between Data Warehouse, Reports, Dashboards and Notebooks" src="../images/2019/12/data-warehouse-analytics.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Relationship between Data Warehouse, Reports, Dashboards and Notebooks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="from-poc-to-mvp"&gt;From POC to MVP&lt;/h2&gt;
&lt;div class="info"&gt;There might be a "prototype" step in between. It might be that the data science work looks promising, but too many questions are still unclear from the look-and-feel of the product. For the real product one needs a lot of developer time for making sure it scales well, having a nice design and making sure to get the security parts right. Instead of investing that time right away, one might create a prototype which cuts corners and gives internal stakeholders a better impression of the end product. They can then decide if they want to invest the money to create an MVP.&lt;/div&gt;
&lt;p&gt;Once the model is ready and seems to work well enough for practice, a &lt;span class="label label-info"&gt;Data&amp;nbsp;Engineer&lt;/span&gt; gets involved. The mentioned
delay a Data Warehouse often has and the different kind of workload the model
typically requires makes it necessary to get the data from a different source.
If it should be event-based, it might be &lt;a class="label label-primary" href="https://en.wikipedia.org/wiki/Apache_Kafka"&gt;Apache&amp;nbsp;Kafka&lt;/a&gt; for
messaging or &lt;a class="label label-primary" href="https://en.wikipedia.org/wiki/Apache_Flink"&gt;Apache&amp;nbsp;Flink&lt;/a&gt;.
The important point to notice here is that machine learning models typically
contain two seperate phases: Model training and model inference. At training
time, one needs to process a lot of data and needs a lot of computational
power. At inference time, each requests data is tiny. The amount of computation
necessary is small. So it is a mixed execution mode: Regularly re-train a model
in a batch-way and have a continuously running service for inference.
They might build things like &lt;a class="label label-danger" href="https://milinda.pathirage.org/kappa-architecture.com/"&gt;Kappa Architectures&lt;/a&gt; or &lt;a class="label label-danger" href="https://en.wikipedia.org/wiki/Lambda_architecture"&gt;Lambda Architectures&lt;/a&gt;. To
do so, many cloud technologies can be used (see "Cloud Service Overview").&lt;/p&gt;
&lt;p&gt;If you wish to get more information about this part, ping me in the comments.&lt;/p&gt;
&lt;h2 id="cloud-service-overview"&gt;Cloud Service Overview&lt;/h2&gt;
&lt;p&gt;The following cloud services might be used to create services which run in
the cloud:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn&gt;AWS Lambda&lt;/dfn&gt; &lt;span class="label label-primary"&gt;Compute&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;Running small and short scripts after a triggering event. Has a delay of a couple of seconds. Provides Computational Resources.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS Cloudformation&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Infrastructure as Code (IaC) Tool&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS EC2&lt;/dfn&gt; &lt;span class="label label-primary"&gt;Compute&lt;/span&gt; (&lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html"&gt;AWS&lt;/a&gt;)&lt;/dt&gt;
&lt;dd&gt;provides scalable computing capacity; &lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS S3&lt;/dfn&gt; &lt;span class="label label-primary"&gt;Storage&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;Store Files&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS InnoDB&lt;/dfn&gt; &lt;span class="label label-primary"&gt;Storage&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;Key-Value Store&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS SSM&lt;/dfn&gt; &lt;span class="label label-primary"&gt;Storage&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;Store Passwords and configuration&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS Athena&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;run interactive queries directly against data in Amazon S3&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS Kinesis&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;a real-time data processing platform&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;AWS Redshift&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;fully managed, petabyte-scale data warehouse to run complex queries on collections of structured data&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;Amazon EMR&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;deploy open source, big data frameworks like Apache Hadoop, Spark, Presto, HBase, and Flink&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;There are a couple of follow-up topics which might result in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to deploy machine learning models&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stuff I would like to share / look into for enhancing this article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.predictiveanalyticstoday.com/top-open-source-commercial-stream-analytics-platforms/"&gt;Top 20 Free, Open Source and Premium Stream Analytics Platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyBay2018: &lt;a href="https://www.youtube.com/watch?v=lmP75mp3-Rg"&gt;How to Instantly Publish Data to the Internet with Datasette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/ml-reproducibility/"&gt;Reproducibility in Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carl Anderson: &lt;a href="https://medium.com/@leapingllamas/data-dictionary-a-how-to-and-best-practices-a09a685dcd61"&gt;Data Dictionary: a how to and best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Vv6Ksqitfc8"&gt;Connecting Scientific Models across Scales &amp;amp; Languages w/ Python&lt;/a&gt;, SciPy 2018.&lt;/li&gt;
&lt;li&gt;Mark Keinh&amp;ouml;rster: &lt;a href="https://www.youtube.com/watch?v=jRkW5Uf58K4"&gt;Production ready Data-Science with Python and Luigi&lt;/a&gt;, PyData 2018.&lt;/li&gt;
&lt;li&gt;Dr. Benjamin Weigel: &lt;a href="https://www.youtube.com/watch?v=4ocbx9IeBMU"&gt;Deploying a machine learning model to the cloud using AWS Lambda&lt;/a&gt;, PyData 2018.&lt;/li&gt;
&lt;li&gt;Dmitry Petrov: &lt;a href="https://www.youtube.com/watch?v=BneW7jgB298"&gt;Data versioning in machine learning projects&lt;/a&gt; PyData 2018.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-prefect-blog/why-not-airflow-4cfa423299c4"&gt;Why Not Airflow?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/containers-on-aws/deploy-the-voting-app-to-aws-ecs-with-fargate-cb75f226408f"&gt;How to deploy a Docker app to Amazon ECS using AWS Fargate&lt;/a&gt;, 2018.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@anupam.ncsu/deploying-on-aws-fargate-using-cloudformation-3bf33cefbf18"&gt;Deploying on AWS Fargate using Cloudformation&lt;/a&gt;, 2018.&lt;/li&gt;
&lt;li&gt;Jen Underwood: &lt;a href="https://www.jenunderwood.com/2017/08/30/need-data-catalog-select-one/"&gt;Why You Need a Data Catalog and How to Select One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nick Schrock: &lt;a href="https://medium.com/dagster-io/introducing-dagster-dbd28442b2b7"&gt;Introducing Dagster&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;li&gt;Github Issue: &lt;a href="https://github.com/dagster-io/dagster/issues/1593"&gt;Dagster vs. Rest&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Data"></category><category term="IaC"></category><category term="AWS"></category><category term="Kafka"></category><category term="Data Science"></category><category term="Data Engineering"></category></entry><entry><title>Siamese Networks</title><link href="https://martin-thoma.com/siamese-networks/" rel="alternate"></link><published>2019-04-27T20:00:00+02:00</published><updated>2019-04-27T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-04-27:/siamese-networks/</id><summary type="html">&lt;p&gt;Siamese Networks are feature extractors trained to learn an embedding in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;
where not the absolute output is important, but the relative one.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/04/siamese-networks.png"&gt;&lt;img alt="Schema of a Siamese Network" src="../images/2019/04/siamese-networks.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Schema of a Siamese Network $m_1$.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The original paper&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; was about signature verification. You have one original
signature and one that might be the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siamese Networks are feature extractors trained to learn an embedding in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;
where not the absolute output is important, but the relative one.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/04/siamese-networks.png"&gt;&lt;img alt="Schema of a Siamese Network" src="../images/2019/04/siamese-networks.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Schema of a Siamese Network $m_1$.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The original paper&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; was about signature verification. You have one original
signature and one that might be the same or might be a different one. Instead
of having one output that directly says "same" or "different", they decided to
have one network that maps the input to &lt;span class="math"&gt;\(\mathbb{R}^{4 \times 19}\)&lt;/span&gt; and then use
euclidean distance with some threshold&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Today, the nicest usage I know is DeepFace&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;. It is a neural network which maps
faces to &lt;span class="math"&gt;\(\mathbb{R}^{128}\)&lt;/span&gt; by combining a lot of clever ideas.&lt;/p&gt;
&lt;h2 id="key-idea"&gt;Key Idea&lt;/h2&gt;
&lt;p&gt;You have one network &lt;span class="math"&gt;\(m_1\)&lt;/span&gt; which is embedded into another network which
combines two inputs of &lt;span class="math"&gt;\(m_1\)&lt;/span&gt;. So for training a triplet &lt;span class="math"&gt;\((d_1, d_2, t)\)&lt;/span&gt; is
used, where &lt;span class="math"&gt;\(d_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(d_2\)&lt;/span&gt; are both processed individually by &lt;span class="math"&gt;\(m_1\)&lt;/span&gt;. The two
outputs &lt;span class="math"&gt;\(d_{1}'\)&lt;/span&gt; and &lt;span class="math"&gt;\(d_{2}'\)&lt;/span&gt; are then combined by another network &lt;span class="math"&gt;\(m_2\)&lt;/span&gt;. &lt;span class="math"&gt;\(m_2\)&lt;/span&gt;
can simply be a merging layer. The loss is then calculated based on the output
of &lt;span class="math"&gt;\(m_2\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Signature Verification: Given two signatures, do they belong to the same person?&lt;/li&gt;
&lt;li&gt;Face Verification: Given two faces, are they the same person?&lt;/li&gt;
&lt;li&gt;Koch, G., Zemel, R., &amp;amp; Salakhutdinov, R. (2015, July). &lt;a href="https://www.cs.cmu.edu/~rsalakhu/papers/oneshot1.pdf"&gt;Siamese neural networks for one-shot image recognition&lt;/a&gt;. In ICML deep learning workshop (Vol. 2).&lt;/li&gt;
&lt;li&gt;Leal-Taix&amp;eacute;, L., Canton-Ferrer, C., &amp;amp; Schindler, K. (2016). &lt;a href="https://www.ethz.ch/content/dam/ethz/special-interest/baug/igp/photogrammetry-remote-sensing-dam/documents/pdf/learning-tracking-siamese.pdf"&gt;Learning by tracking: Siamese CNN for robust target association&lt;/a&gt;. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition Workshops (pp. 33-40).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="application-landmark-distances"&gt;Application: Landmark Distances&lt;/h2&gt;
&lt;p&gt;Think of autonomous cars. They might know some landmarks and be able to
identify them. Then they can measure the distance to those landmarks. And maybe
some landmarks are added later. I wondered how well a neural network does in
finding coordinates for landmarks, given distances to existing landmarks.&lt;/p&gt;
&lt;p&gt;While this problem is better solved with another approach, I was just curious
how well a simple neural network would do. The answer was ... underwhelming.
I guess I made an error, but at the moment I can't find it:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Train a neural network on distances and see how well it figures out coordinates.&lt;/span&gt;

&lt;span class="sd"&gt;Roughly siamese networks.&lt;/span&gt;

&lt;span class="sd"&gt;The "reference points" are landmarks&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="c1"&gt;# core modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;keras.backend&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;K&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Concatenate&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.metrics.pairwise&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;euclidean_distances&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.spatial.distance&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;euclidean&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Configure Problem&lt;/span&gt;
    &lt;span class="n"&gt;n_reference_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
    &lt;span class="n"&gt;n_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n_reference_points&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;n_dim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

    &lt;span class="c1"&gt;# Define Network for mapping distances to landmarks to point coordinates&lt;/span&gt;
    &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_network&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Make the network trainable&lt;/span&gt;
    &lt;span class="n"&gt;dists1_in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;dists2_in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;point1_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dists1_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;point2_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dists2_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;merged_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)([&lt;/span&gt;&lt;span class="n"&gt;point1_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;point2_out&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dists1_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dists2_in&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;merged_vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dual_loss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'adam'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Generate Data&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_distances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;train_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train_distances&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
        &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;distances_p1s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distances_p2s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pair_distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
        &lt;span class="n"&gt;get_train_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train_distances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;distances_p1s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distances_p2s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
              &lt;span class="n"&gt;pair_distances&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;predicted_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_distances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;measure_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicted_points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error: {:0.3f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;measure_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generate_random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicted_points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error (random): {:0.3f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Generate n_points of dimension n_dim.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; generate_data(1, 2).tolist()&lt;/span&gt;
&lt;span class="sd"&gt;    [[0.5488135039273248, 0.7151893663724195]]&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Generate a random point coordinate prediction."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_distances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get the distance of points to the n reference points.&lt;/span&gt;

&lt;span class="sd"&gt;    This includes the pair-wise distance between the reference points.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;ref_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ref_point&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ref_points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;euclidean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ref_point&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_network&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;input_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_reference_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'sigmoid'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dual_loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Define the loss function based on two points.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    y_true : ndarray&lt;/span&gt;
&lt;span class="sd"&gt;        The real distance&lt;/span&gt;
&lt;span class="sd"&gt;    y_pred : ndarray&lt;/span&gt;
&lt;span class="sd"&gt;        The first n_dim elements are the first points coordinates,&lt;/span&gt;
&lt;span class="sd"&gt;        the seoncd n_dim elements are the second points coordinates&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;point2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;n_dim&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="c1"&gt;# distance between the points&lt;/span&gt;
    &lt;span class="n"&gt;embedding_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# compute loss&lt;/span&gt;
    &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embedding_dist&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_train_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create training data.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    points : List&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    (distances_p1, distances_p2, pair_distances) : tuple&lt;/span&gt;
&lt;span class="sd"&gt;        distances_p1 and distances_p2 have the same structure (point 1 and&lt;/span&gt;
&lt;span class="sd"&gt;        point 2) The contens of those two lists are the distances to the&lt;/span&gt;
&lt;span class="sd"&gt;        reference points&lt;/span&gt;

&lt;span class="sd"&gt;        pair_distances : The i-th entry contains the distance between&lt;/span&gt;
&lt;span class="sd"&gt;         distance_pairs[i][0] and distance_pairs[i][1]&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;distances_p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;distances_p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;pair_distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pi1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p1_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pi1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;p2_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pi2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;distances_p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1_dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;distances_p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2_dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pair_distances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;euclidean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pi1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pi2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distances_p1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distances_p2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair_distances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;measure_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicted_points&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Measure an error between the real points and the predicted points.&lt;/span&gt;

&lt;span class="sd"&gt;    This does not punish the points being shifted / rotated.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;real_distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tril&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;euclidean_distances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real_points&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pred_point_distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tril&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;euclidean_distances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicted_points&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;real_distances&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pred_point_distances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real_points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Bromley, Jane, et al. "Signature verification using a" siamese" time delay neural network." Advances in neural information processing systems. 1994.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;I'm actually not sure which metric they used to calculate the distance between to signature feature matrices. Please ping me if you know more.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;Taigman, Yaniv, et al. "&lt;a href="https://www.cs.toronto.edu/~ranzato/publications/taigman_cvpr14.pdf"&gt;Deepface: Closing the gap to human-level performance in face verification.&lt;/a&gt;" Proceedings of the IEEE conference on computer vision and pattern recognition. 2014. (&lt;a href="https://www.shortscience.org/paper?bibtexKey=conf/cvpr/TaigmanYRW14"&gt;summary&lt;/a&gt;)&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category><category term="Neural Networks"></category></entry><entry><title>WiLI-2018</title><link href="https://martin-thoma.com/wili/" rel="alternate"></link><published>2019-01-13T20:00:00+01:00</published><updated>2019-01-13T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-01-13:/wili/</id><summary type="html">&lt;p&gt;WiLI-2018, the Wikipedia Language Identification database, is a collection of
sentences from Wikipedia of different languages. It can be used to test how hard
it is to distinguish different languages.&lt;/p&gt;
&lt;p&gt;If you want to get to the data, go to &lt;a href="https://zenodo.org/record/841984"&gt;zenodo.org&lt;/a&gt;.
If you want to get to the publication â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;WiLI-2018, the Wikipedia Language Identification database, is a collection of
sentences from Wikipedia of different languages. It can be used to test how hard
it is to distinguish different languages.&lt;/p&gt;
&lt;p&gt;If you want to get to the data, go to &lt;a href="https://zenodo.org/record/841984"&gt;zenodo.org&lt;/a&gt;.
If you want to get to the publication, go to &lt;a href="https://arxiv.org/pdf/1801.07779.pdf"&gt;archive.org&lt;/a&gt;.
If you want to give feedback or a comment, just comment below.&lt;/p&gt;
&lt;p&gt;If you want to add to the errata, you have a couple of options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send me an e-mail (info@martin-thoma.de) - if I don't respond within 3 days,
  just ping me again. I get a lot of messages and if I read it during work I might
  not answer right away. I'm sorry if that happens.&lt;/li&gt;
&lt;li&gt;Add an &lt;a href="https://github.com/MartinThoma/wili-2018/issues"&gt;issue on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make a Pull Request on Github - that is best, because it makes sure that you
  get credit for your work as well!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="errata"&gt;Errata&lt;/h2&gt;
&lt;p&gt;If you want to share corrected labels, the following format is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file;line;wrong label;correct label;comment;contributor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt;: either &lt;code&gt;y_test.txt&lt;/code&gt; or &lt;code&gt;y_train.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt;: Zero-based - your editor might show something different!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrong label&lt;/code&gt;: what is in &lt;code&gt;y_test.txt&lt;/code&gt; / &lt;code&gt;y_train.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;correct label&lt;/code&gt;: what should be in &lt;code&gt;y_test.txt&lt;/code&gt; / &lt;code&gt;y_train.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comment&lt;/code&gt;: How you found it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contributor&lt;/code&gt;: Your name / e-mail address / pseudonym - whatever you want, as long as it is not insulting or otherwise improper such as advertisement&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category></entry><entry><title>Expert Systems</title><link href="https://martin-thoma.com/expert-systems/" rel="alternate"></link><published>2018-12-30T20:00:00+01:00</published><updated>2018-12-30T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-12-30:/expert-systems/</id><summary type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Science fiction movies are full of advanced systems for medical analysis and
treatment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stargate SG1: The â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Science fiction movies are full of advanced systems for medical analysis and
treatment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stargate SG1: The &lt;a href="http://stargate.wikia.com/wiki/Goa%27uld_healing_device"&gt;Goa'uld healing device&lt;/a&gt;
  is a box in which you lay, it scans yourself and after a few hours you are
  just healed. From basically anything, &lt;abbr title="if I remember correctly"&gt;IIRC&lt;/abbr&gt;.&lt;/li&gt;
&lt;li&gt;Elysium: A &lt;a href="https://www.youtube.com/watch?v=RyMoJHf7rCQ"&gt;healing pod&lt;/a&gt; which
  looks a bit like a CT scan.&lt;/li&gt;
&lt;li&gt;Prometheus: A medical robot pod performing a surgery (WARNING: The &lt;a href="https://www.youtube.com/watch?v=6-DOeEkqOZg"&gt;clip&lt;/a&gt; is from a horror movie)&lt;/li&gt;
&lt;li&gt;Star Trek: A hand-held medical scanner (Tricoder?) which scans you for diseases (&lt;a href="https://www.youtube.com/watch?v=IHd9bYGJtoI"&gt;clip&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can imagine parts of those really well. Especially I think there is much room
for improvement in the analysis by using machine learning.&lt;/p&gt;
&lt;p&gt;The answer to "what's wrong with me" has many possible answers and depending on
this many different treatments. As it is such a complex problem, I think an
expert system is the right approach for it.&lt;/p&gt;
&lt;p&gt;In the following, I try to structure some thoughts around it.&lt;/p&gt;
&lt;h2 id="problem-overview"&gt;Problem overview&lt;/h2&gt;
&lt;p&gt;What we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The patient: Age, sex, job, social background, ethnicity might be some of the
               important features everybody has.&lt;/li&gt;
&lt;li&gt;Patient record: A list of tuples&lt;ul&gt;
&lt;li&gt;Tests: (date time, test, test outcome)&lt;/li&gt;
&lt;li&gt;Treatement: (date time, treatment) - I would include pills, surgeries, excercise, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diseases: Possible answers to "what's wrong with me". Examples of this category
  are:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Genetic_disorder"&gt;Genetic ones&lt;/a&gt;: Sickle cell anaemia, Huntington's disease, ...&lt;/li&gt;
&lt;li&gt;Viruses: HIV, Hepatitis D, Polio, Cowpox, Measles&lt;/li&gt;
&lt;li&gt;Bacteria: Yersinia pestis (black death), Haverhill fever&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- ## Other stuff

You might have expected something about logical inference,  --&gt;
&lt;h2 id="expert-systems"&gt;Expert Systems&lt;/h2&gt;
&lt;p&gt;Expert Systems typically consist of 3 parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;knowledge base: logical rules&lt;/li&gt;
&lt;li&gt;inference engine&lt;/li&gt;
&lt;li&gt;interface to human&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/ml-get-data/"&gt;How to get Data for ML systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/informationsfusion/"&gt;Informationsfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stack Overflow:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/1687734/562769"&gt;Rules Engine vs Expert System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Expert Systems"></category></entry><entry><title>Techniques for Analyzing ML models</title><link href="https://martin-thoma.com/model-analysis/" rel="alternate"></link><published>2018-12-30T20:00:00+01:00</published><updated>2018-12-30T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-12-30:/model-analysis/</id><summary type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Techniques for model analysis:&lt;/p&gt;
&lt;p&gt;Prediction-Based:
&lt;em&gt; Decision boundaries
&lt;/em&gt; LIME
&lt;em&gt; &lt;a href="https://martin-thoma.com/feature-importance/"&gt;Feature importance&lt;/a&gt;
&lt;/em&gt; &lt;a href="https://www.kaggle.com/dansbecker/shap-values"&gt;SHAP values&lt;/a&gt;
&lt;em&gt; &lt;a href="https://www.kaggle.com/dansbecker/partial-plots"&gt;Partial Dependence Plots&lt;/a&gt;
&lt;/em&gt; Sensitivity â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Techniques for model analysis:&lt;/p&gt;
&lt;p&gt;Prediction-Based:
&lt;em&gt; Decision boundaries
&lt;/em&gt; LIME
&lt;em&gt; &lt;a href="https://martin-thoma.com/feature-importance/"&gt;Feature importance&lt;/a&gt;
&lt;/em&gt; &lt;a href="https://www.kaggle.com/dansbecker/shap-values"&gt;SHAP values&lt;/a&gt;
&lt;em&gt; &lt;a href="https://www.kaggle.com/dansbecker/partial-plots"&gt;Partial Dependence Plots&lt;/a&gt;
&lt;/em&gt; Sensitivity analysis / perturbation importance
&lt;em&gt; Model parameter analysis
&lt;/em&gt; &lt;a href="https://eli5.readthedocs.io/en/latest/overview.html"&gt;ELI 5&lt;/a&gt;
* Attention mapping / saliency mapping&lt;/p&gt;
&lt;p&gt;Error-Based:
* Confusion matrix&lt;/p&gt;
&lt;p&gt;Data-Based:
&lt;em&gt; Dimensionality reduction
&lt;/em&gt; Feature correlations&lt;/p&gt;
&lt;p&gt;If you're interested in analysis of CNNs, have a look at my masters thesis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/pdf/1707.09725.pdf"&gt;Analysis and Optimization of Convolutional Neural Network Architectures&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="decision-boundaries"&gt;Decision boundaries&lt;/h2&gt;
&lt;p&gt;Drawing this is only an option if you have 3 or less features. So not really
useful in most problem settings.&lt;/p&gt;
&lt;h2 id="shap-values"&gt;SHAP values&lt;/h2&gt;
&lt;p&gt;SHAP Values (an acronym from SHapley Additive exPlanations) go in the direction
of feature importance.&lt;/p&gt;
&lt;p&gt;Let me explain them with an example of the Titanic dataset: You have a survival
probability of a given person, e.g. 76%. You want to understand why it is 76%.&lt;/p&gt;
&lt;p&gt;So what you can do is to twiddle the features. How does the survival
probability change when the person has less / more siblings? When the person
has the median number of siblings?&lt;/p&gt;
&lt;p&gt;There is the &lt;a href="https://github.com/slundberg/shap"&gt;&lt;code&gt;shap&lt;/code&gt; package&lt;/a&gt; for
calculating the shap values.&lt;/p&gt;</content><category term="Machine Learning"></category></entry><entry><title>Code Challenges in ML</title><link href="https://martin-thoma.com/code-challenges-in-ml/" rel="alternate"></link><published>2018-12-25T20:00:00+01:00</published><updated>2018-12-25T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-12-25:/code-challenges-in-ml/</id><summary type="html">&lt;p&gt;Having machines that can write software is the wet dreem of probably every
company. Instead of having years of development you just tell the machine what
to do and it automatically creates the software.&lt;/p&gt;
&lt;p&gt;As you might have guessed, we are not there yet. Not even close. But a friend â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having machines that can write software is the wet dreem of probably every
company. Instead of having years of development you just tell the machine what
to do and it automatically creates the software.&lt;/p&gt;
&lt;p&gt;As you might have guessed, we are not there yet. Not even close. But a friend
of mine made me think about this problem. Being a software engineer, I tried to
split up the problem into smaller chunks that might be in reach.&lt;/p&gt;
&lt;p&gt;Before we dive into those sub-problems, let me roughly describe how developing
big software works.&lt;/p&gt;
&lt;h2 id="software-engineering-101"&gt;Software Engineering 101&lt;/h2&gt;
&lt;p&gt;You have an idea. Let's take one of the &lt;a href="https://martin-thoma.com/projects-i-never-realized/"&gt;projects I never realized&lt;/a&gt;: A book portal.&lt;/p&gt;
&lt;p&gt;We have a name for it, that's good. Book portal. But now we need to get some
details. One tool for that are user stories:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a science fiction book enthusiast, I would like to find more books I love.
I am willing to note a couple of other books I loved, give some general
restrictions like the language, minimum and maximum length and price range.
Then I expect some recommendations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome, now we get a rough idea! So it actually is not a store, but a
recommendation engine!&lt;/p&gt;
&lt;p&gt;But non-functional requirements often play a crucial role. Realizing this
project means you have to make sure you know what you want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many books should be recommendable?&lt;/li&gt;
&lt;li&gt;How fast should the user be able to add new books?&lt;/li&gt;
&lt;li&gt;How much time does the recommender have between adding ratings for books and
  spitting out a recommendation?&lt;/li&gt;
&lt;li&gt;What is the minimum quality the recommendation engin needs to be useful?&lt;/li&gt;
&lt;li&gt;How many users are expected at peak times within 15 minutes?&lt;/li&gt;
&lt;li&gt;Is privacy a concern? What are we legaly obliged to do?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once those questions are answered (especially the load-based ones), you can
draw an architecture. This means you try to find components that can be
developed largely independently. You have to define interfaces; so how those
components are supposed to communicate.&lt;/p&gt;
&lt;p&gt;After the architecture, you develop the defined components.&lt;/p&gt;
&lt;p&gt;Congratulations, you have an alpha version! Now you can go through the &lt;a href="https://martin-thoma.com/software-development-stages/"&gt;other stages of Software Development&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="code-challenges"&gt;Code Challenges&lt;/h2&gt;
&lt;p&gt;Many of the code-challenges are hard because it's not clear how to evaluate the
solutions. There are many possible (acceptable) solutions, but there is no way
to enumerate all of them.&lt;/p&gt;
&lt;h3 id="architecture-generatation-problem"&gt;Architecture Generatation Problem&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a document describing the idea, user stories and non-functional
requirements, generate an architecutre diagram.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm not sure how hard this is. It certainly is super hard to evaluate how well
the solution is.&lt;/p&gt;
&lt;h3 id="equivalence-problem"&gt;Equivalence Problem&lt;/h3&gt;
&lt;p&gt;Given two functions with the same signatures, are they equivalent?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why it's hard: Equivalence cannot be proven; hard to construct non-trivial cases&lt;/li&gt;
&lt;li&gt;What's good about it: Non-euqivalence can be proven with one counter-example&lt;/li&gt;
&lt;li&gt;Usefullness: 2/5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="auto-doc-problem"&gt;Auto-Doc Problem&lt;/h3&gt;
&lt;p&gt;Given a function, write the documentation of it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why it's hard: Many equivalent solutions&lt;/li&gt;
&lt;li&gt;What's good about it: Getting training data might be easy&lt;/li&gt;
&lt;li&gt;Usefullness: 5/5&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-generation-problem"&gt;Code-Generation Problem&lt;/h3&gt;
&lt;p&gt;Given formal specification, generate code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why it's hard: I'm not sure about the formal specification - how exactly would they look like?&lt;/li&gt;
&lt;li&gt;Usefullness: 3/5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason why I think this is not so useful is the specification. At the end,
the most exact specification is a program. Hence, if you need a very formal,
exact specification there is actually no code to generate. When the
specification is imprecise (like natural language), then there is (too much)
room for error.&lt;/p&gt;
&lt;h3 id="code-translation-problem"&gt;Code-Translation Problem&lt;/h3&gt;
&lt;p&gt;Given code in language A, translate it to equivalent code in language B.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why it's hard: Some things might not be possible at all. This would likely be
  the case when you translate C to Python.&lt;/li&gt;
&lt;li&gt;Usefullness: 5/5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason why this is super usefull are apps. Imagine if you only had to develop
an App for Android and could automatically translate it to iOS. (By the way: Is that possible with &lt;a href="https://en.wikipedia.org/wiki/React_(JavaScript_library)#React_Native"&gt;React Native&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;The key challenge here is to make the translated code maintainable. In some
sense You could say that the &lt;em&gt;Auto-doc problem&lt;/em&gt; is part of this challenge.&lt;/p&gt;
&lt;h4 id="code-style-translation-problem"&gt;Code-Style translation Problem&lt;/h4&gt;
&lt;p&gt;Code-Style translation Problem is a subtask of the more general
Code-Translation Problem. Imagine a Java-developer writing (correct) Python code.
Things you might see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OverlyLongVariableNamesLikeGermanWords&lt;/li&gt;
&lt;li&gt;Too many classes / subclasses where you could simply use &lt;code&gt;collections.namedtuple&lt;/code&gt; / functions.&lt;/li&gt;
&lt;li&gt;Missing use of syntactic sugar such as &lt;code&gt;enumerate&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, list comprehensions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactoring-problem"&gt;Refactoring-problem&lt;/h3&gt;
&lt;p&gt;Given code, generate code with the same functionality which is (a) easier to
maintain (b) faster / more memory efficient (c) applicable to more cases.&lt;/p&gt;</content><category term="Machine Learning"></category></entry><entry><title>Perfect Models</title><link href="https://martin-thoma.com/perfect-models/" rel="alternate"></link><published>2018-12-14T20:00:00+01:00</published><updated>2018-12-14T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-12-14:/perfect-models/</id><summary type="html">&lt;p&gt;When you develop a model, you want the optimal model. The perfect one.&lt;/p&gt;
&lt;p&gt;The first problem with that desire are diagonal goals:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/12/model-pick-2.png"&gt;&lt;img alt="A jellyfish" src="../images/2018/12/model-pick-2.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Diagonal goals in model development&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Typical goals when designing a model are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quality: Have a high accuracy, low error, high &lt;span class="math"&gt;\(F_\beta\)&lt;/span&gt; score, ...&lt;/li&gt;
&lt;li&gt;Production&lt;ul&gt;
&lt;li&gt;Inference speed: The faster â€¦&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;When you develop a model, you want the optimal model. The perfect one.&lt;/p&gt;
&lt;p&gt;The first problem with that desire are diagonal goals:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/12/model-pick-2.png"&gt;&lt;img alt="A jellyfish" src="../images/2018/12/model-pick-2.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Diagonal goals in model development&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Typical goals when designing a model are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quality: Have a high accuracy, low error, high &lt;span class="math"&gt;\(F_\beta\)&lt;/span&gt; score, ...&lt;/li&gt;
&lt;li&gt;Production&lt;ul&gt;
&lt;li&gt;Inference speed: The faster it is in production, the better&lt;/li&gt;
&lt;li&gt;Inference memory consumtion: Super important if it should run on small machines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Training:&lt;ul&gt;
&lt;li&gt;Training speed: The more episodes you can train in 1h, the better&lt;/li&gt;
&lt;li&gt;Convergence speed: The less episodes you need until convergence, the better&lt;/li&gt;
&lt;li&gt;Training memory consumption: You might have a small GPU for training&lt;/li&gt;
&lt;li&gt;Stability: If you train with 10 different initializations, you want to get 10 similar results&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes, however, you can build perfect models. It is basically when you
know how the data generating process works.&lt;/p&gt;
&lt;h2 id="tensorflow-playground"&gt;Tensorflow Playground&lt;/h2&gt;
&lt;p&gt;Let's get some perfect solutions for Tensorflow playground.&lt;/p&gt;
&lt;p&gt;All of the datasets have points &lt;span class="math"&gt;\((x_1, x_2)\)&lt;/span&gt; which are assigned to either the
blue class or to the orange class.&lt;/p&gt;
&lt;p&gt;The only input-features you can choose are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_1, x_2\)&lt;/span&gt;: Linear&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_1^2, x_2^2\)&lt;/span&gt;: Quadratic&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_1 \cdot x_2\)&lt;/span&gt;: Multiplication&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\sin(x_1), \sin(x_2)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exclusive-or"&gt;Exclusive Or&lt;/h3&gt;
&lt;p&gt;You can generate this dataset by drawing &lt;span class="math"&gt;\((x_1, x_2)\)&lt;/span&gt; from &lt;span class="math"&gt;\([-1, 1] \times [-1, 1]\)&lt;/span&gt;
and assigning the classes by&lt;/p&gt;
&lt;div class="math"&gt;\begin{cases}
    (x_1 &amp;gt; 0 \text{ AND } x_2 &amp;gt; 0) OR (x_1 &amp;lt; 0 \text{ AND } x_2 &amp;lt; 0)&amp;amp;\text{orange}\\
    (x_1 &amp;gt; 0 \text{ AND } x_2 &amp;lt; 0) OR (x_1 &amp;lt; 0 \text{ AND } x_2 &amp;gt; 0)&amp;amp;\text{blue}\\
\end{cases}&lt;/div&gt;
&lt;p&gt;It happens to be that this property is the case when you multiply the two values:&lt;/p&gt;
&lt;div class="math"&gt;\begin{cases}
    x_1 \cdot x_2 &amp;gt; 0&amp;amp;\text{orange}\\
    x_1 \cdot x_2 &amp;lt; 0&amp;amp;\text{blue}\\
\end{cases}&lt;/div&gt;
&lt;p&gt;Hence with multiplication you can get the function directly:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/12/xor-dataset.png"&gt;&lt;img alt="XOR dataset solution" src="../images/2018/12/xor-dataset.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;XOR dataset solution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="circle-dataset"&gt;Circle Dataset&lt;/h3&gt;
&lt;p&gt;The circle dataset can be generated by drawing &lt;span class="math"&gt;\(r \in [0, 6]\)&lt;/span&gt; and &lt;span class="math"&gt;\(\theta \in [0, 1]\)&lt;/span&gt;.
The rule to assign the class is then&lt;/p&gt;
&lt;p&gt;$$
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
x_1 &amp;amp;= r \cdot \cos(\theta)\\
x_2 &amp;amp;= r \cdot \sin(\theta)
\end{align}&lt;/div&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{cases}
    x_1^2 + x_2^2 &amp;lt; t&amp;amp;\text{blue}\\
    x_1^2 + x_2^2 \geq t &amp;amp; \text{orange}
\end{cases}
$$&lt;/div&gt;
&lt;p&gt;Here the solution is pretty obvious: It's a linear model of the squared inputs:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/12/circles-dataset.png"&gt;&lt;img alt="Circles dataset solution" src="../images/2018/12/circles-dataset.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Circles dataset solution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="gaussian"&gt;Gaussian&lt;/h3&gt;
&lt;p&gt;The Gaussian dataset seems to have the blue center in &lt;span class="math"&gt;\((2, 2)\)&lt;/span&gt; and the orange
center in &lt;span class="math"&gt;\((-2, -2)\)&lt;/span&gt;. This is a bit more difficult to generate, but you can see
that the optimal decision boundary is &lt;span class="math"&gt;\(x_2 = -x_1\)&lt;/span&gt;. Everything below is more
likely to be orange, everything above is more likely to be blue.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{cases}
    x_2 &amp;lt; - x_1&amp;amp;\text{orange}\\
    x_2 &amp;gt; - x_1 &amp;amp; \text{blue}
\end{cases}
$$&lt;/div&gt;
&lt;p&gt;and hence the model:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/12/gaussian-dataset.png"&gt;&lt;img alt="Gaussian dataset solution" src="../images/2018/12/gaussian-dataset.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Gaussian dataset solution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="spirals"&gt;Spirals&lt;/h3&gt;
&lt;p&gt;Generating the spirals is a bit more complicated. I've added a &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/playground/dataset_generation.py"&gt;gist&lt;/a&gt; which generates a dataset
which is super similar.&lt;/p&gt;
&lt;p&gt;Basically, it is choosing &lt;span class="math"&gt;\(r \in R_{\geq 0}\)&lt;/span&gt;. The &lt;span class="math"&gt;\(\alpha \in [0, 360)\)&lt;/span&gt; defines
the class, e.g. &lt;span class="math"&gt;\(\alpha_\text{orange}=180\)&lt;/span&gt; and &lt;span class="math"&gt;\(\alpha_\text{blue}=90\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{algin}
x_1 &amp;amp;= -r \cdot \cos(\alpha)\\
x_2 &amp;amp;= r \cdot \sin(\alpha)
\end{align}
$$&lt;/div&gt;
&lt;p&gt;Hence finding the class is related to finding the &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{algin}
\cos^{-1}(-\frac{x_1}{r}) &amp;amp;= \alpha\\
\sin^{-1}(\frac{x_2}{r}) &amp;amp;= \alpha
\end{align}
$$&lt;/div&gt;
&lt;p&gt;But neither &lt;span class="math"&gt;\(\cos^{-1}\)&lt;/span&gt; nor &lt;span class="math"&gt;\(\sin^{-1}\)&lt;/span&gt; are available as input features. And,
more relevant, we don't have &lt;span class="math"&gt;\(r\)&lt;/span&gt;. &lt;span class="math"&gt;\(r\)&lt;/span&gt; is basically the distance from the &lt;span class="math"&gt;\((0, 0)\)&lt;/span&gt;.
So &lt;span class="math"&gt;\(r = \sqrt{x_1^2 + x_2^2}\)&lt;/span&gt;. Hence we need &lt;span class="math"&gt;\(x_1^2\)&lt;/span&gt; and &lt;span class="math"&gt;\(x_2^2\)&lt;/span&gt; as features.&lt;/p&gt;
&lt;p&gt;This is where I'm stuck. My intuition tells me that tanh is a nice activation
function for this problem, because it is one of the geometric functions. Let's
see how far we get with that:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/12/spiral-dataset.png"&gt;&lt;img alt="Spiral dataset solution" src="../images/2018/12/spiral-dataset.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Spiral dataset solution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So with 2 hidden layers, it can be done in about 250 episodes. No
regularization, only squared and linear features. But looking at the features
of the first hidden layer, we can see that it mostly builds circle-like
features. The spiral has only 3 rotations, so it is rather easy to fit it. My
guess is that the number of rotations directly influences the number of neurons
you need in the first hidden layer.&lt;/p&gt;
&lt;p&gt;The training with a batch size of 8 often has a phase of big instability (high jumps in the loss curve).
Increasing the batch size leads to a more smooth loss curve.&lt;/p&gt;
&lt;p&gt;Typically, after around 1000 epochs the training is done and the result looks
fine.&lt;/p&gt;
&lt;h2 id="how-regularization-can-destroy-your-model_1"&gt;How Regularization can destroy your model&lt;/h2&gt;
&lt;p&gt;Look at &lt;a href="https://playground.tensorflow.org/#activation=tanh&amp;amp;batchSize=10&amp;amp;dataset=spiral&amp;amp;regDataset=reg-plane&amp;amp;learningRate=0.03&amp;amp;regularizationRate=0.03&amp;amp;noise=0&amp;amp;networkShape=8,2&amp;amp;seed=0.13062&amp;amp;showTestData=false&amp;amp;discretize=false&amp;amp;percTrainData=50&amp;amp;x=true&amp;amp;y=true&amp;amp;xTimesY=false&amp;amp;xSquared=false&amp;amp;ySquared=false&amp;amp;cosX=false&amp;amp;sinX=true&amp;amp;cosY=false&amp;amp;sinY=true&amp;amp;collectStats=false&amp;amp;problem=classification&amp;amp;initZero=false&amp;amp;hideText=false"&gt;this network&lt;/a&gt;.
If you add any regularization with a rate of 0.003 or more, it is not able to learn anymore.&lt;/p&gt;</content><category term="Machine Learning"></category></entry><entry><title>Recommender Systems</title><link href="https://martin-thoma.com/recommender-systems/" rel="alternate"></link><published>2018-10-07T20:00:00+02:00</published><updated>2018-10-07T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-10-07:/recommender-systems/</id><summary type="html">&lt;p&gt;I recently became interested in recommender systems. You know, the thing on
Amazon that tells you which products you might be interested in. Or the stuff
on Spotify that gives you a song you might like. On YouTube the next videos
shown. On StumbleUpon, your next stumble. On a news â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently became interested in recommender systems. You know, the thing on
Amazon that tells you which products you might be interested in. Or the stuff
on Spotify that gives you a song you might like. On YouTube the next videos
shown. On StumbleUpon, your next stumble. On a news page, another article.&lt;/p&gt;
&lt;h2 id="conceptual-approaches"&gt;Conceptual Approaches&lt;/h2&gt;
&lt;p&gt;There are three basic approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product Similarity: You watched Saw I, Saw II and Saw III. All of them are
  similar to Saw IV.&lt;/li&gt;
&lt;li&gt;User similarity: Users that liked Saw I, Saw II and Saw III usually also liked
  Saw IV.&lt;/li&gt;
&lt;li&gt;Basket analysis: You bought eggs and sugar, maybe you want to buy milk as
  well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recommender systems based on product similarity are also called "content-based recommender systems".
The New York Times article recommendation is an example for that.&lt;/p&gt;
&lt;p&gt;Recommander systems based on user similarity are also called "collaborative
filtering". &lt;a href="https://movielens.org/"&gt;movielens.org&lt;/a&gt; is an example
for that.&lt;/p&gt;
&lt;p&gt;Pandora is an example for content-based recommendation + collaborative filtering.&lt;/p&gt;
&lt;h2 id="basic-content-based-recommendations"&gt;Basic Content-based Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Edit_distance"&gt;Levenshteins edit distance&lt;/a&gt;
applied on the product name is probably the simplest approach that has a
mimimal chance of some reasonable results.&lt;/p&gt;
&lt;p&gt;The next level in complexity are rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Movies by a director you liked&lt;/li&gt;
&lt;li&gt;Movies with a actor you liked&lt;/li&gt;
&lt;li&gt;Count "links" (actors, directors, producers, ...) and rank by most links&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One more level of complexity is using clustering algorithms. One way is to make
a product to a vector and use a similarity measure (e.g. cosine similarity). If
you have natural laguage descriptions you can use tf-idf features and then use
a similarity measure. You would then recommend the most similar products.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Cosine-Similarity&lt;/dt&gt;
&lt;dd&gt;Let $x$ and $y$ be items. Their cosine similarity is defined as $$f(x, y) := \frac{\sum_i x_i y_i}{\sqrt{\sum_i x_i^2} \sqrt{\sum_i y_i^2}}$$&lt;/dd&gt;
&lt;dt&gt;Centered Cosine Similarity&lt;/dt&gt;
&lt;dd&gt;Subtract the mean value from all elements. If you have null values, don't change anything there. Then apply the cosine similarity.&lt;/dd&gt;
&lt;dt&gt;Jaccard Similarity&lt;/dt&gt;
&lt;dd&gt;Let $x$ and $y$ be items and $r_x, r_y$ be their attributes. Their jaccard similarity is defined as $$f(x, y) := \frac{|r_x \cap r_y|}{|r_x \cup r_y|}$$&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Minkowski_distance"&gt;Minkowski Distance&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;$$f(x, y) := \left ( \sum_{i=1}^n {|x_i - y_i|}^p \right )^{1/p}$$&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Mahalanobis_distance"&gt;Mahalanobis distance&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The Mahalanobis distance of an observation &lt;math&gt;\vec{x} = ( x_1, x_2, x_3, \dots, x_N )^T&lt;/math&gt; from a set of observations with mean $\vec{\mu} = ( \mu_1, \mu_2, \mu_3, \dots , \mu_N )^T$ and covariance matrix $S$ is defined as:
    $$D_M(\vec{x}) = \sqrt{(\vec{x} - \vec{\mu})^T S^{-1} (\vec{x}-\vec{\mu})}$$&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="user-based-collaborative-filtering"&gt;User-Based Collaborative Filtering&lt;/h2&gt;
&lt;p&gt;Users can have different scales on which they rate stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary: Like / Dislike (and "not seen")&lt;/li&gt;
&lt;li&gt;Ternary: Like / Neutral / Dislike (and "not seen")&lt;/li&gt;
&lt;li&gt;5 Stars&lt;/li&gt;
&lt;li&gt;100 points&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you want to find the utility function &lt;span class="math"&gt;\(u: C \times I \rightarrow R\)&lt;/span&gt; where
&lt;span class="math"&gt;\(C\)&lt;/span&gt; is the set of customers, &lt;span class="math"&gt;\(I\)&lt;/span&gt; is the set of items and &lt;span class="math"&gt;\(R\)&lt;/span&gt; is the &lt;em&gt;ordered&lt;/em&gt;
set of ratings. By a simple transformation you can make it &lt;span class="math"&gt;\(R = [0, 1]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The utility function &lt;span class="math"&gt;\(u\)&lt;/span&gt; can be fully defined by a user-item rating matrix.
Most elements of the matrix are not known, though.&lt;/p&gt;
&lt;p&gt;Based on the user-item rating matrix &lt;span class="math"&gt;\(R\)&lt;/span&gt; you build up a user-user similarity matrix.&lt;/p&gt;
&lt;p&gt;You look up similar users, generate candidates for recommendation, score and filter candidates (items the user already knows).&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="https://martin-thoma.com/collaborative-filtering/"&gt;Collaborative Filtering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In some sense, bestellsers are a special case of collaborative filtering:
Simply recommending what got sold most.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Adjusted Cosine&lt;/dt&gt;
&lt;dd&gt;$$f(x, y) := \frac{\sum_i (x_i -\bar{x}) (y_i - \bar{y})}{\sqrt{\sum_i (x_i - \bar{x})^2} \sqrt{\sum_i (y_i - \bar{y})^2}}$$
    Applicable mostly to get a similar user based on ratings. The idea is that different people have different baselines from which they operate, e.g. in a 5 star rating you could always give 5 stars if nothing is wrong. Or always 3 stars and if there is something really good, give more.&lt;/dd&gt;
&lt;dt&gt;item-based pearson similarity&lt;/dt&gt;
&lt;dd&gt;$$f(x, y) := \frac{\sum_i (x_i - \bar{j})(y_i - \bar{j})}{\sqrt{\sum_i (x_i - \bar{j})^2} \sqrt{\sum_i (y_i - \bar{j})^2}}$$&lt;/dd&gt;
&lt;dt&gt;Spearman rank correlation&lt;/dt&gt;
&lt;dd&gt;Pearson similarity based on ranks (position in the recommendation), not ratings. Usually not use in practice.&lt;/dd&gt;
&lt;dt&gt;Mean Squared Difference Similarity&lt;/dt&gt;
&lt;dd&gt;$$MSD(x, y) := \frac{\sum_{i \in I_{x, y}} (x_i - y_i)^2}{|I_{x, y}|}$$
        and the similarity:
        $$MSDsim(x, y) := \frac{1}{MSD(x, y) + 1}$$&lt;/dd&gt;
&lt;dt&gt;Jaccard Similarity&lt;/dt&gt;
&lt;dd&gt;$$\frac{A \cap B}{A \cup B}$$&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="basic-basket-analysis"&gt;Basic Basket Analysis&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://martin-thoma.com/analysetechniken-grosser-datenbestaende/#association-rules"&gt;Association Rule Mining&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="more-collaborative-filtering"&gt;More Collaborative Filtering&lt;/h2&gt;
&lt;p&gt;There are many &lt;a href="https://en.wikipedia.org/wiki/Collaborative_filtering"&gt;Collaborative filtering&lt;/a&gt; (CF) approaches&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Item-based collaborative filtering&lt;/dt&gt;
&lt;dd&gt;"users who liked what you liked, also like..."&lt;ol&gt;
&lt;li&gt;Build an item-item matrix determining relationships between pairs of items&lt;/li&gt;
&lt;li&gt;Infer the tastes of the current user by examining the matrix and matching that user's data&lt;/li&gt;
&lt;/ol&gt;&lt;a href="https://en.wikipedia.org/wiki/Slope_One"&gt;Slope One&lt;/a&gt; is an example&lt;/dd&gt;
&lt;dt&gt;Matrix Factorization&lt;/dt&gt;
&lt;dd&gt;Factorize the rating matrix $R$ into a user-embedding matrix $U$ and an item embedding matrix $V$ such that $R = U \times \Sigma \times V$.&lt;/dd&gt;
&lt;dt&gt;User-based collaborative filtering&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;Look for users who share the same rating patterns with the active user (the user whom the prediction is for).&lt;/li&gt;
&lt;li&gt;Use the ratings from those like-minded users found in step 1 to calculate a prediction for the active user&lt;/li&gt;
&lt;/ol&gt;
&lt;a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm"&gt;k-NN&lt;/a&gt; is one example.
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;One line of work goes in the direction of matrix factorization with alternating
least squares (ALS).[^5,^6] They have a training algorithm with has a time complexity
of &lt;span class="math"&gt;\(\mathcal{O}(MNK^2)\)&lt;/span&gt; for one iteration, where &lt;span class="math"&gt;\(M\)&lt;/span&gt; is the number of users,
&lt;span class="math"&gt;\(N\)&lt;/span&gt; is the number of items and &lt;span class="math"&gt;\(K\)&lt;/span&gt; is the dimension of the latent space.&lt;/p&gt;
&lt;h2 id="evaluation"&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;There are two conceptually very different ways to think about recommender systems&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Matrix Completion: You have a matrix of user-item ratings. This matrix has
  many NULL values. You want to fill them.&lt;/li&gt;
&lt;li&gt;Ranking: Recommend the top-k items for a given user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="matrix-completion"&gt;Matrix Completion&lt;/h3&gt;
&lt;p&gt;One way to evaluate if recommendation systems work is by the typical train-test split.&lt;/p&gt;
&lt;p&gt;Possible Metrics, where &lt;span class="math"&gt;\(y\)&lt;/span&gt; is the real value and &lt;span class="math"&gt;\(p(x)\)&lt;/span&gt; is the predicted value:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Mean Absolute Error (MAE)&lt;/dt&gt;
&lt;dd&gt;$\frac{1}{n} \sum_{i=1}^n |y_i - p(x_i)| \in [0, 1]$, where lower is better&lt;/dd&gt;
&lt;dt&gt;Root Mean Square Error (RMSE)&lt;/dt&gt;
&lt;dd&gt;$\sqrt{\frac{1}{n} \sum_{i=1}^n {(y_i - p(x_i))}^2} \in [0, \infty)$, where lower is better&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="ranking"&gt;Ranking&lt;/h3&gt;
&lt;p&gt;The problem with those two ways is that low-rated items don't matter much. If
95% of the users look at &lt;span class="math"&gt;\(n\)&lt;/span&gt; items, then you want the Top-&lt;span class="math"&gt;\(n\)&lt;/span&gt; recommendations
to be (1) more relevant than the rest for the user and (2) the order of the
top-&lt;span class="math"&gt;\(n\)&lt;/span&gt; elements to be correct.&lt;/p&gt;
&lt;p&gt;Metrics for top-n recommenders:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Precision@k&lt;/dt&gt;
&lt;dd&gt;$\frac{\text{recommended items @k that are relevant}}{k}$. This gives
        you the portion of items that are relevant to your user.&lt;/dd&gt;
&lt;dt&gt;Recall@k&lt;/dt&gt;
&lt;dd&gt;$\frac{\text{recommended items @k that are relevant}}{total relevant items}$. If precision is high and recall is low, it might indicate that $k$ is just very small. If recall is high and precision is low it might show that not so many items are relevant in comparison to the choice of $k$.&lt;/dd&gt;
&lt;dt&gt;Average Precision@k&lt;/dt&gt;
&lt;dd&gt;TODO&lt;/dd&gt;
&lt;dt&gt;Hit Rate&lt;/dt&gt;
&lt;dd&gt;Number of hits in your $n$ recommendations, divided by the number of users&lt;/dd&gt;
&lt;dt&gt;Average Reciprocal Hit Rank (ARHR)&lt;/dt&gt;
&lt;dd&gt;$\frac{1}{|Users| \cdot \sum_{i=1}^n \frac{1}{rank_i}}$&lt;/dd&gt;
&lt;dt&gt;Cumulative Hit Rate (cHR)&lt;/dt&gt;
&lt;dd&gt;Throw away low-ranking stuff (hence you need a threshold)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="other"&gt;Other&lt;/h3&gt;
&lt;p&gt;Other quality indicators for a recommendation system&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Diversity&lt;/dt&gt;
&lt;dd&gt;How broad is the variety of items recommended to people?&lt;/dd&gt;
&lt;dt&gt;Novelty&lt;/dt&gt;
&lt;dd&gt;How many new/unfamiliar things do get recommended to a user? The higher the novelty, the more likely the user will discover something new. If it is too high, the user doesn't trust the recommendation anymore.&lt;/dd&gt;
&lt;dt&gt;Churn&lt;/dt&gt;
&lt;dd&gt;How often do recommendations for a user change?&lt;/dd&gt;
&lt;dt&gt;Responsiveness&lt;/dt&gt;
&lt;dd&gt;How quickly are recommendations adjusted?&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="user-feedback"&gt;User Feedback&lt;/h3&gt;
&lt;p&gt;Another way to evaluate is to ask the user:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/05/youtube-feedback-1.png"&gt;&lt;img alt="A jellyfish" src="../images/2019/05/youtube-feedback-1.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;YouTube Asking for feedback: 1 Star&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/05/youtube-feedback-2.png"&gt;&lt;img alt="A jellyfish" src="../images/2019/05/youtube-feedback-2.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;YouTube Asking for feedback: 2 Star&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/05/youtube-feedback-3.png"&gt;&lt;img alt="A jellyfish" src="../images/2019/05/youtube-feedback-3.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;YouTube Asking for feedback: 3 Star&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/05/youtube-feedback-4.png"&gt;&lt;img alt="A jellyfish" src="../images/2019/05/youtube-feedback-4.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;YouTube Asking for feedback: 4 Star&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/05/youtube-feedback-5.png"&gt;&lt;img alt="A jellyfish" src="../images/2019/05/youtube-feedback-5.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;YouTube Asking for feedback: 5 Star&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="typical-problems_1"&gt;Typical Problems&lt;/h2&gt;
&lt;h3 id="cold-start-problem"&gt;Cold-Start Problem&lt;/h3&gt;
&lt;p&gt;The cold-start problem is central and only fixable by content-based
recommendation. If there is a new product, not a single user has rated it. It
is not possible by collaborative filtering to recommend it.&lt;/p&gt;
&lt;h3 id="sparsity"&gt;Sparsity&lt;/h3&gt;
&lt;p&gt;You have so many items, that two users have no item in common and two items usually
don't have properties in common.&lt;/p&gt;
&lt;h3 id="wrong-recommendation-mode"&gt;Wrong Recommendation Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You have bought the DVD "Lord of the Rings" and get the Blue Ray recommended.&lt;/li&gt;
&lt;li&gt;You have liked the normal version of a song and you get the
  techno/rap/christmas version recommended&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-bubble"&gt;The Bubble&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You will never be recommended a movie where you didn't like the genre before.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="surrogate-problem"&gt;Surrogate-Problem&lt;/h3&gt;
&lt;p&gt;Ultimatively, we want to maximize user engagement. In order to achieve this, we
define a surrogate (e.g. accuracy of predicting user ratings).&lt;/p&gt;
&lt;p&gt;The problem is that the choice of the surrogate matters a lot. A different
surrogate might have way bigger impact on our real goal than an improvement in
achieving the surrogate goal.&lt;/p&gt;
&lt;h1 id="vocabulary"&gt;Vocabulary&lt;/h1&gt;
&lt;dl&gt;
&lt;dt&gt;Top-N Recommendation&lt;/dt&gt;
&lt;dd&gt;Recommend N items&lt;/dd&gt;
&lt;dt&gt;mise en sc&amp;egrave;ne&lt;/dt&gt;
&lt;dd&gt;The idea in content-based filtering for movies to extract properties
        directly from the movie itself. It includes:
        Average shot length, color variance, mean motion average across all the
        frames, lightning, number of shots&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="matrix-factorization_1"&gt;Matrix Factorization&lt;/h2&gt;
&lt;p&gt;Matrix Factorization is factorization in the same way as with natural numbers:
Take a matrix &lt;span class="math"&gt;\(R\)&lt;/span&gt; and factorize it in &lt;span class="math"&gt;\(U\)&lt;/span&gt; and &lt;span class="math"&gt;\(V\)&lt;/span&gt; such that &lt;span class="math"&gt;\(R = U \cdot V\)&lt;/span&gt;. If
the complete matrix &lt;span class="math"&gt;\(R\)&lt;/span&gt; is given, &lt;span class="math"&gt;\(R\)&lt;/span&gt; can be factorized with Singular Value
Decomposition (SVD) or Probabilistic Latent Semantic Analysis (PLSA).&lt;/p&gt;
&lt;p&gt;Matrix Factorization is also one way to do collaborative filtering. It was done
for the Netflix prize and is described in &lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;. A &lt;a href="https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD"&gt;neat short description&lt;/a&gt; is in
SurpriseLib.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;: The ratings of &lt;span class="math"&gt;\(n\)&lt;/span&gt; users for &lt;span class="math"&gt;\(m\)&lt;/span&gt; movies in a matrix &lt;span class="math"&gt;\(R \in \mathbb{R}^{n \times m}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;: Singular value decomposition (SVD) takes &lt;span class="math"&gt;\(R\)&lt;/span&gt; and gives three matrices &lt;span class="math"&gt;\(U \in \mathbb{R}^{n \times r}\)&lt;/span&gt;, a descendingly sorted diagonal matrix &lt;span class="math"&gt;\(\Sigma \in \mathbb{R}^{r \times r}\)&lt;/span&gt; and &lt;span class="math"&gt;\(V \in \mathbb{R}^{r \times m}\)&lt;/span&gt;
such that &lt;span class="math"&gt;\(R = U \cdot \Sigma \cdot V\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The rows in &lt;span class="math"&gt;\(U\)&lt;/span&gt; represent the users. It's called the "latent space". Latent is
math slang for "hidden" (see &lt;a href="https://en.wikipedia.org/wiki/Latent_variable"&gt;latent variable&lt;/a&gt;). This means we have a reasonable way to represent users.&lt;/p&gt;
&lt;p&gt;The rows in &lt;span class="math"&gt;\(V\)&lt;/span&gt; represent the movies in the latent space.&lt;/p&gt;
&lt;p&gt;You crop at some point of &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt; to the first &lt;span class="math"&gt;\(k\)&lt;/span&gt; singular features (with &lt;span class="math"&gt;\(k &amp;lt; r\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;The problem is that many values of &lt;span class="math"&gt;\(R\)&lt;/span&gt; are missing. Simon Funk found a solution
to that problem. Instead of imputing the values (filling the matrix), he re-formulated the problem
to&lt;/p&gt;
&lt;div class="math"&gt;$$\min_{u_i, v_i} \sum_{p_{ij}} \left ( p_{ij} - u_i \cdot v_j \right )^2 \text{ with } u_i \in \mathbb{R}^{1 \times r}, v_j \in \mathbb{R}^{r \times 1}$$&lt;/div&gt;
&lt;p&gt;This is a minimization problem that can be solved by gradient descent. As you
only consider values &lt;span class="math"&gt;\(p_{ij}\)&lt;/span&gt; that are not zero, you don't have to invent the
remainding ones.&lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/topics/recommender-system?l=python"&gt;recommender-system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benfred/implicit"&gt;benfred/implicit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="datasets"&gt;Datasets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grouplens.org/datasets/movielens/100k/"&gt;MovieLens 100K Dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/neferfufi/lastfm"&gt;Last.fm dataset&lt;/a&gt; / &lt;a href="https://www.upf.edu/web/mtg/lastfm360k"&gt;Last.fm 360k&lt;/a&gt; / &lt;a href="https://gist.github.com/victorkohler/0931d181ef126e0740d8aac6933f13f4"&gt;Last.fm 1k&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-resources"&gt;Other Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://datascience.stackexchange.com/q/749/8820"&gt;Meaning of latent features?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon Funk: &lt;a href="https://sifter.org/~simon/journal/20061211.html"&gt;Netflix Update: Try This at Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Houtao Deng: &lt;a href="https://towardsdatascience.com/recommender-systems-in-practice-cef9033bb23a"&gt;Recommender Systems in Practice&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;li&gt;Victor: &lt;a href="https://medium.com/radon-dev/als-implicit-collaborative-filtering-5ed653ba39fe"&gt;ALS Implicit Collaborative Filtering&lt;/a&gt;, 2017 - explains &lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt; neatly.&lt;/li&gt;
&lt;li&gt;Implicit&lt;ul&gt;
&lt;li&gt;Ben Frederickson: &lt;a href="http://www.benfrederickson.com/fast-implicit-matrix-factorization/"&gt;Faster Implicit Matrix Factorization&lt;/a&gt;, 12.12.2016.&lt;/li&gt;
&lt;li&gt;Ben Frederickson: &lt;a href="http://www.benfrederickson.com/matrix-factorization/"&gt;Finding Similar Music using Matrix Factorization&lt;/a&gt;, 02.10.2017.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not read so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leskovec, Rajaraman, Ullman: &lt;a href="https://www.youtube.com/watch?v=h9gpufJFF-0"&gt;Collaborative Filtering&lt;/a&gt;. Lecture 43 of "Mininig of Massive Datasets". Stanford University.&lt;/li&gt;
&lt;li&gt;Maher Malaeb: &lt;a href="https://medium.com/@m_n_malaeb/the-easy-guide-for-building-python-collaborative-filtering-recommendation-system-in-2017-d2736d2e92a8"&gt;The easy guide for building python collaborative filtering recommendation system&lt;/a&gt;, 2017.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://surprise.readthedocs.io/en/stable/notation_standards.html#salakhutdinov2008a"&gt;surprise docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.githubusercontent.com/mahermalaeb/3d03feb1bbada7e7e1438f86b1a8abb9/raw/781f21f7591d99f5197a83799594a02f524dd6e4/surprise_tutorial.py"&gt;surprise gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Houtao Deng: &lt;a href="https://towardsdatascience.com/recommender-systems-in-practice-cef9033bb23a"&gt;Recommender Systems in Practice&lt;/a&gt;, 2013&lt;/li&gt;
&lt;li&gt;Kaggle: &lt;a href="https://www.kaggle.com/duykhanh99/tutorials-recommendation-system"&gt;Tutorials Recommendation System&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="papers"&gt;Papers&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Paul Covington, Jay Adams, Emre Sargin: &lt;a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/45530.pdf"&gt;Deep Neural Networks for YouTube Recommendations&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Yashar Deldjoo, Mehdi Elahi, Paolo Cremonesi: Using Visual Features and Latent Factors for Movie Recommendations, 2016.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;Ruslan Salakhutdinov and Andriy Mnih: &lt;a href="http://papers.nips.cc/paper/3208-probabilistic-matrix-factorization.pdf"&gt;Probabilistic Matrix Factorization&lt;/a&gt;, 2008.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;C. C. Aggarwal: Recommender systems, 2016. Springer International Publishing. Pages 1-28.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;Xiangnan He, Hanwang Zhang, Min-Yen Kan, Tat-Seng Chua: &lt;a href="https://arxiv.org/pdf/1708.05024.pdf"&gt;Fast Matrix Factorization for Online Recommendation with Implicit Feedback&lt;/a&gt;, 2017.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;Yifan Hu, Yehuda Koren, Chris Volinsky: &lt;a href="http://yifanhu.net/PUB/cf.pdf"&gt;Collaborative Filtering for Implicit Feedback Datasets&lt;/a&gt;, 2008. (&lt;a href="https://www.shortscience.org/paper?bibtexKey=koren:icdm08&amp;amp;a=martinthoma"&gt;summary&lt;/a&gt;)&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;Robert M. Bell, Yehuda Koren and Chris Volinsky: &lt;a href="https://www.netflixprize.com/assets/ProgressPrize2007_KorBell.pdf"&gt;The BellKor solution to the Netflix Prize&lt;/a&gt;, 2007.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category></entry><entry><title>Regression</title><link href="https://martin-thoma.com/regression/" rel="alternate"></link><published>2018-07-18T20:00:00+02:00</published><updated>2018-07-18T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-07-18:/regression/</id><summary type="html">&lt;div class="info"&gt;A while ago, this link pointed to the content which is now in the &lt;a href="https://martin-thoma.com/forecasting/"&gt;Forecasting article&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;Regression is one of the core tasks in machine learning. In this task, you get
some input and your target variable is a single floating point number. For
example, predicting the price of a â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;A while ago, this link pointed to the content which is now in the &lt;a href="https://martin-thoma.com/forecasting/"&gt;Forecasting article&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;Regression is one of the core tasks in machine learning. In this task, you get
some input and your target variable is a single floating point number. For
example, predicting the price of a house, estimating the &lt;a href="http://www.u.arizona.edu/~kuchi/Courses/MAT167/Files/LH_LEC.0710.Models.Regression.pdf"&gt;age of the universe&lt;/a&gt; or calculating the probability that an image shows a dog. The age of the universe
example shows that it regression is not only used in machine learning and the
dog image example shows that regression and classification can be very similar.
A &lt;a href="https://en.wikipedia.org/wiki/Logistic_regression"&gt;logistic regression&lt;/a&gt;
can be converted to a classifier by choosing a threshold value (e.g. 0.5).&lt;/p&gt;
&lt;p&gt;A big difference between regression and classification are scoring functions
and targets. The targets in classification are just a few finite ones, while
you have infinite possible targets for regression. Below, you can see a list
of scoring functions.&lt;/p&gt;
&lt;h2 id="scoring-functions"&gt;Scoring functions&lt;/h2&gt;
&lt;p&gt;In the following, &lt;span class="math"&gt;\(y\)&lt;/span&gt; is the ordered list of target, &lt;span class="math"&gt;\(y^P\)&lt;/span&gt; is the list
of predictions in the same order and &lt;span class="math"&gt;\(\bar{y}\)&lt;/span&gt; is the mean of &lt;span class="math"&gt;\(y\)&lt;/span&gt;.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;th&gt;X is better&lt;/th&gt;
&lt;th&gt;Definition and Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MAE&lt;/td&gt;
&lt;td&gt;$[0, \infty)$&lt;/td&gt;
&lt;td&gt;lower&lt;/td&gt;
&lt;td&gt;$f(y, y^P) = \frac{1}{|y|} \sum_{y_i, y_i^P \in (y, y^P)} |y_i - y_i^P|$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MSE&lt;/td&gt;
&lt;td&gt;$[0, \infty)$&lt;/td&gt;
&lt;td&gt;lower&lt;/td&gt;
&lt;td&gt;$f(y, y^P) = \frac{1}{|y|} \sum_{y_i, y_i^P \in (y, y^P)} (y_i - y_i^P)^2$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$R^2$&lt;/td&gt;
&lt;td&gt;$[0, 1]$&lt;/td&gt;
&lt;td&gt;higher&lt;/td&gt;
&lt;td&gt;$f(y, y^P) = 1 - \frac{\sum (y_i - y_i^P)^2}{\sum (y_i - \bar{y})^2}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explained Variance&lt;/td&gt;
&lt;td&gt;$(-\infty, 1]$&lt;/td&gt;
&lt;td&gt;higher&lt;/td&gt;
&lt;td&gt;$f(y, y^P) = 1 - \frac{Var(y - y^P)}{Var(y)}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stats.stackexchange.com/q/32596/25741"&gt;What is the difference between &amp;ldquo;coefficient of determination&amp;rdquo; and &amp;ldquo;mean squared error&amp;rdquo;?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="regression-models"&gt;Regression Models&lt;/h2&gt;
&lt;h3 id="trivial-models"&gt;Trivial Models&lt;/h3&gt;
&lt;p&gt;There are some straight-forward "models" for regression. They do learn, but
they ignore the input completely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arithmetic_mean"&gt;Arithmetic mean&lt;/a&gt;: &lt;span class="math"&gt;\(\frac{1}{n}\sum_{i=1}^n {y_i}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Median"&gt;Median&lt;/a&gt;: Sort all &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; and take the value in the middle&lt;/li&gt;
&lt;li&gt;minimum and maximum&lt;/li&gt;
&lt;li&gt;q-Quantile: Sort the &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; and take the first value after going through &lt;span class="math"&gt;\(q \in [0, 1]\)&lt;/span&gt; of the input. For &lt;span class="math"&gt;\(q = 0.5\)&lt;/span&gt;, this
  is the median.&lt;/li&gt;
&lt;li&gt;Other "means" like the geometric mean&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linear-regression"&gt;Linear regression&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Linear_regression"&gt;Linear regression&lt;/a&gt;
tries to fit a line to the input by minimizing the squared quadradic distance
between the input points and the line. This usually gives pretty good results.&lt;/p&gt;
&lt;p&gt;The model looks like this:&lt;/p&gt;
&lt;div class="math"&gt;$$\hat{y}(x) = \sum_{i=1}^n b_i \cdot x_i \text{ with }b_i \in \mathbb{R}$$&lt;/div&gt;
&lt;p&gt;If one defines &lt;span class="math"&gt;\(X \in \mathbb{R}^n\)&lt;/span&gt; one can also write it in a vectorized form:&lt;/p&gt;
&lt;div class="math"&gt;$$\hat{y}(X) = X \cdot \beta \text{ with }\beta \in \mathbb{R}^n$$&lt;/div&gt;
&lt;p&gt;It can be "learned" (calculated) with&lt;/p&gt;
&lt;div class="math"&gt;$$\beta = {(X^T X)}^{-1} X^T y$$&lt;/div&gt;
&lt;h3 id="logistic-regression"&gt;Logistic regression&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Logistic_regression"&gt;Logistic regression&lt;/a&gt;
tries to fit the logistic function &lt;span class="math"&gt;\(y(x) = \frac{1}{1+e^{-x}}\)&lt;/span&gt; to the input.
This function is nice as it is within &lt;span class="math"&gt;\([0, 1]\)&lt;/span&gt; and thus can be used to
represent a probability.&lt;/p&gt;
&lt;h3 id="trees"&gt;Trees&lt;/h3&gt;
&lt;p&gt;You can also use trees for regression. One idea how to do that is by
"bucketing" observations and applying one of the trivial models to each bucket.
Such models can only predict values between what they observed before.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/auto_examples/tree/plot_tree_regression.html"&gt;sklearn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Regression"></category></entry><entry><title>Evaluation of binary classifiers</title><link href="https://martin-thoma.com/binary-classifier-evaluation/" rel="alternate"></link><published>2018-06-23T20:00:00+02:00</published><updated>2018-06-23T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-23:/binary-classifier-evaluation/</id><summary type="html">&lt;p&gt;Binary classification is likely the simplest task in machine learning. It is
typically solved with Random Forests, Neural Networks, SVMs or a
&lt;a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier"&gt;naive Bayes classifier&lt;/a&gt;.
For all of them, you have to measure how well you are doing. In this article,
I give an overview over the different metrics for â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Binary classification is likely the simplest task in machine learning. It is
typically solved with Random Forests, Neural Networks, SVMs or a
&lt;a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier"&gt;naive Bayes classifier&lt;/a&gt;.
For all of them, you have to measure how well you are doing. In this article,
I give an overview over the different metrics for evaluating the quality of
binary classifiers, their advantages and drawbacks.&lt;/p&gt;
&lt;h2 id="scenarios"&gt;Scenarios&lt;/h2&gt;
&lt;p&gt;There are a couple of simple scenarios for which I want to show how the different
measures are suitable or not.&lt;/p&gt;
&lt;h3 id="spam"&gt;Spam&lt;/h3&gt;
&lt;p&gt;You want to detect if an E-Mail is spam.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;&lt;/th&gt;
&lt;th colspan="2" style="text-align:center"&gt;Predicted&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Spam&lt;/th&gt;
&lt;th&gt;Ham&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;th&gt;Spam&lt;/th&gt;
&lt;td&gt;&lt;span style="color:green"&gt;515&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;50&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Ham&lt;/th&gt;
&lt;td&gt;&lt;span style="color:red"&gt;12&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;20&amp;thinsp;160&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="fraudulent-transactions"&gt;Fraudulent Transactions&lt;/h3&gt;
&lt;p&gt;We want to classify if a transaction is fraud. Let's say we have 99% non-fraud
transactions and 1% fraud transactions. To keep things simple, let's say we
have 1000 transactions. Then we know:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
TP + FN &amp;amp;= 10\\
TN + FP &amp;amp;= 990
\end{align}
$$&lt;/div&gt;
&lt;h3 id="website-advertisement"&gt;Website Advertisement&lt;/h3&gt;
&lt;p&gt;You want to make advertisement and different websites send you information
about users and the website they are currently surfing. You have to decide if
you want to show them advertisement.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;&lt;/th&gt;
&lt;th colspan="2" style="text-align:center"&gt;Predicted&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Worth it&lt;/th&gt;
&lt;th&gt;Not worth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;User clicks ad&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;990&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;10&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User doesn't click&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;4000&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;5000&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="fire-alarm"&gt;Fire Alarm&lt;/h3&gt;
&lt;p&gt;Let's say a smoke detector makes one measurement every 10&amp;nbsp;seconds and runs
over 8&amp;nbsp;years. Let's say it goes of 8&amp;nbsp;times at random. This means you
would have:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;&lt;/th&gt;
&lt;th colspan="2" style="text-align:center"&gt;Predicted&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Positive&lt;/th&gt;
&lt;th&gt;Negative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;Positive&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;0&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;0&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Negative&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;8&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;25&amp;thinsp;228&amp;thinsp;792&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="cats-vs-dogs"&gt;Cats vs Dogs&lt;/h3&gt;
&lt;p&gt;You have 50 cat images and 50 dog images. Decide which one it is.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;&lt;/th&gt;
&lt;th colspan="2" style="text-align:center"&gt;Predicted&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Cat&lt;/th&gt;
&lt;th&gt;Dog&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Cat&lt;/th&gt;
&lt;td&gt;&lt;span style="color:green"&gt;47&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;3&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Dog&lt;/th&gt;
&lt;td&gt;&lt;span style="color:red"&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;35&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="rare-cancer-detection"&gt;Rare Cancer Detection&lt;/h3&gt;
&lt;p&gt;You want to build a classifier for cancer. The cancer can be treated, but is
deadly when undetected. The type of cancer is also super rare: Out of 100,000
participants where you collected the data, only 10 had this type of cancer.&lt;/p&gt;
&lt;h2 id="confusion-matrix_1"&gt;Confusion matrix&lt;/h2&gt;
&lt;p&gt;The confusion matrix is not a metric, but a lot of metrics are based on it.
TP, TN, FP, FN are all counts. Together, they sum up to the number of elements
in the test set:&lt;/p&gt;
&lt;div class="math"&gt;$$n := TP + TN + FP + FN$$&lt;/div&gt;
&lt;p&gt;Optimally, everything is on the diagonal and FP and FN are zero.&lt;/p&gt;
&lt;p&gt;Please note that this gives you almost all of the information. The only kind
of information that is hidden from the confusion matrix is the certainty of
the classifier in its decision.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan="2" rowspan="2"&gt;&lt;/th&gt;
&lt;th colspan="2" style="text-align:center"&gt;Predicted&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Positive&lt;/th&gt;
&lt;th&gt;Negative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;th rowspan="2" style="transform: rotate(-90deg);text-align: center;"&gt;Real&lt;/th&gt;
&lt;th&gt;Positive&lt;/th&gt;
&lt;td&gt;&lt;span style="color:green"&gt;TP&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red"&gt;FN&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Negative&lt;/th&gt;
&lt;td&gt;&lt;span style="color:red"&gt;FP&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green"&gt;TN&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To make it more concrete, think of a fire detector. The TP means there is a
fire and the alarm rings. The FN is the worst case in this scenario: Although
there is a fire, it is not detected.
The FP means we falsely say it is positive, although
it isn't (the alarm rings, but there is no fire). And True Negative (TN) is
most of the time the case: No fire, not alarm.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Confusion matrix for the smoke detector case" src="../images/2018/06/confusion-matrix.jpg" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Confusion matrix for the smoke detector case&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="accuracy"&gt;Accuracy&lt;/h2&gt;
&lt;p&gt;The accuracy of a binary classifier &lt;span class="math"&gt;\(C\)&lt;/span&gt; is defined as&lt;/p&gt;
&lt;div class="math"&gt;$$\text{accuracy}(C) := \frac{TP + TN}{FP + FN} \in [0, 1] \text{ (higher is better)}$$&lt;/div&gt;
&lt;p&gt;If the accuracy is high, then the classifier is right in many cases. If the
accuracy is low, then the classifier is wrong in many cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where it fails&lt;/strong&gt;: In heavily inbalanced cases such as "Fraudulent
Transactions". Thus the classifier could simply ignore the features and always
predict it's not fraud. This classifier would have an accuracy of 99% and still
be useless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When it's nice&lt;/strong&gt;: When you have a balanced problem like "cats vs dogs". From
gut feeling, I would say at most 70% / 30% of imbalance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Baselines&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predict the most common class: accuracy &lt;span class="math"&gt;\(= \max(\frac{TP + FN}{n}, \frac{TN + FP}{n})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Random classifier (each class with 50%): 50%&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="precision"&gt;Precision&lt;/h2&gt;
&lt;p&gt;Precision says how many of the predicted true elements are actually true:&lt;/p&gt;
&lt;div class="math"&gt;$$\text{precision}(C) := \frac{TP}{TP + FP} \in [0, 1] \cup \{\text{undefined}\}] \text{ (higher is better)}$$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When it fails&lt;/strong&gt;: When you have few positives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When it's nice&lt;/strong&gt;: When each try costs something, but missing a chance is not
a big deal. For example, think of recruitement. Inviting a single recruit costs
something as you have to have interviewers. You might have a lot more
candidates, but you don't care so much about filtering good candidates as you
only need to get one of probably several douzens which would fit. But inviting
one of the hundreds that don't fit is expensive. Meaning a high-precision
classifier tells you that once it gives you a candidate, it is also likely you
will not have to reject the candidate afterwards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Baselines&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predict always false: accuracy &lt;span class="math"&gt;\(= \max(\frac{TP + FN}{n}, \frac{TN + FP}{n})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Random classifier (each class with 50%): 50%&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="recall"&gt;Recall&lt;/h2&gt;
&lt;p&gt;Recall tells you how many of the actual true elements your classifier predicted
to be true:&lt;/p&gt;
&lt;div class="math"&gt;$$\text{recall}(C) := \begin{cases}\frac{TP}{TP + FN} &amp;amp;\text{if } TP + FN &amp;gt; 0\\\text{undefined} &amp;amp;\text{otherwise}\end{cases}$$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When it fails&lt;/strong&gt;: When the classifier is biased towards positive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When it's nice&lt;/strong&gt;: When the cost of missing a positve one is high. For
example, think of the rare cancer detection case. If the tests says yes, you
could simply apply another test to be more sure about it. But missing a person
who actually has cancer could cost a persons life.&lt;/p&gt;
&lt;h2 id="cost"&gt;Cost&lt;/h2&gt;
&lt;p&gt;You could be able to assign a cost to TP, TN, FP, FN. If you can do that, then
this is most likely your best way to score your classifier. Averaging the
result will lead to your average cost per decision and thus directly tell you
which gives you more money. And money should ideally be aligned with other
important constraints (e.g. not causing harm to people).&lt;/p&gt;
&lt;h2 id="f1-score"&gt;F1-Score&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/F1_score"&gt;F1-Score&lt;/a&gt; is a combination of
precision and recall.&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
F_1(C) :&amp;amp;= 2 \cdot \frac{\mathrm{precision} \cdot \mathrm{recall}}{\mathrm{precision} + \mathrm{recall}}\\
&amp;amp;= 2 \cdot \frac{\frac{TP}{TP + FP} \cdot \frac{TP}{TP + FN}}{\frac{TP}{TP + FP} + \frac{TP}{TP + FN}}\\
&amp;amp;= 2 \cdot \frac{\frac{TP^2}{(TP + FP) (TP + FN)}}{\frac{TP (TP + FN) + TP (TP + FP)}{(TP + FP) (TP + FN)}}\\
&amp;amp;= 2 \cdot \frac{TP^2}{TP (TP+FN) + TP(TP+FP)}\\
&amp;amp;= \frac{2 \cdot TP}{2 \cdot TP + FN + FP}
\end{align}
$$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;When it fails&lt;/strong&gt;: The F1-Score does only consider TN indirectly by FP. If you
change the dataset, then the F1 score changes as well. Or if you simply change
the definition. Let's take the website advertisement case, where you predict if
a user is a good target. The confusion matrix is &lt;code&gt;c = {0: {0: 990, 1: 10}, 1: {0: 4000, 1: 5000}}&lt;/code&gt;
for this case and thus the F1-score is 0.33. Now, if you switch to predicting
which users are not interested, the confusion matrix is:
&lt;code&gt;c = {0: {0: 5000, 1: 4000}, 1: {0: 10, 1: 990}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Thus the F1-score is 0.71. Two things are worth mentioning about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Although the classifier is essentially the same, the score looks very
  different.&lt;/li&gt;
&lt;li&gt;Both scores do not sum up to 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have absolutely no intuition what a good F1 score is in different scenarios.
Although I prefer having only one score for evaluating my machine learning
systems, I usually also want to have a bit of intuition what this means.&lt;/p&gt;
&lt;h2 id="roc-curve"&gt;ROC Curve&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic"&gt;ROC curve&lt;/a&gt;
is a graphical plot that shows how a binary classifier changes when a threshold
value is changed.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="ROC curve" src="../images/2018/06/roc-draft-xkcd-style.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;ROC curve&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="final-notes"&gt;Final Notes&lt;/h2&gt;
&lt;p&gt;Think about the smoke detector case. We don't have a positive example here, so
we can't estimate the classifiers quality on it. Please note that there is
literature about estimating the probability of a rare event - even if you have
never observed it. But estimating the probability in general is something
different then classifying it - for the classification part you need to know
some characteristics of the event.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Evaluation_of_binary_classifiers"&gt;Evaluation of binary classifiers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category></entry><entry><title>Data Scientist Interviews</title><link href="https://martin-thoma.com/ds-interview/" rel="alternate"></link><published>2018-06-14T20:00:00+02:00</published><updated>2018-06-14T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-14:/ds-interview/</id><summary type="html">&lt;p&gt;Interviews for Data Scientists - which traits and skills are important for a
Data Scientist? Which questions should you be able to answer as a Data
Scientist?&lt;/p&gt;
&lt;h2 id="skillset"&gt;Skillset&lt;/h2&gt;
&lt;p&gt;The following is a typical skillset I expect from a data scientist. It might be
that there are some data scientists with a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Interviews for Data Scientists - which traits and skills are important for a
Data Scientist? Which questions should you be able to answer as a Data
Scientist?&lt;/p&gt;
&lt;h2 id="skillset"&gt;Skillset&lt;/h2&gt;
&lt;p&gt;The following is a typical skillset I expect from a data scientist. It might be
that there are some data scientists with a different skillset. This is
absolutely ok, but I would certainly ask why it is the case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statistics: A/B Testing, Confidence intervalls&lt;/li&gt;
&lt;li&gt;Programming Languages: Python or R - the following points are only for
  Python, as I don't know R well enough for them.&lt;/li&gt;
&lt;li&gt;Exploratory Data Analysis: Pandas, Jupyter Notebooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;
&lt;h3 id="conversation-starters"&gt;Conversation Starters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What are you passionate about?&lt;/li&gt;
&lt;li&gt;How would you explain an A/B test to an engineer with no statistics background?&lt;/li&gt;
&lt;li&gt;Do you think Data Science is important? Why so?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="concepts"&gt;Concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What is the curse of dimensionality? &amp;rarr; &lt;a href="https://martin-thoma.com/curse-of-dimensionality/"&gt;answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How can you reduce the dimensionality? &amp;rarr; PCA, LDA, Auto-Encoders. See &lt;a href="https://en.wikipedia.org/wiki/Dimensionality_reduction"&gt;Wikipedia&lt;/a&gt; for more.&lt;/li&gt;
&lt;li&gt;Is more data always better?&lt;ul&gt;
&lt;li&gt;It depends on the quality of your data.&lt;/li&gt;
&lt;li&gt;It depends on your model.&lt;/li&gt;
&lt;li&gt;You have to deal with this amount as well (storage, memory, computational power)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="classification"&gt;Classification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Which scoring/distance/similarity functions do you know? &amp;rarr; Euclidean distance, cosine distance, MSE, MAE, ...&lt;/li&gt;
&lt;li&gt;You do you deal with imbalenced data? &amp;rarr; Oversampling; different error metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="eda"&gt;EDA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How can you start EDA?&lt;ul&gt;
&lt;li&gt;CSV-data: Feature ranges, null-values, covariance&lt;/li&gt;
&lt;li&gt;Image-data: Eigenfaces, Fisher-Faces, Average image, &lt;a href="https://ml4a.github.io/guides/ImageTSNEViewer/"&gt;t-SNE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When do you stop EDA?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="model-building"&gt;Model Building&lt;/h3&gt;
&lt;p&gt;This is about building regression models or classifiers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which models do you know &amp;rarr; Linear Regression, Gradient Boosting, Neural Network, Random Forests, Decision Trees, ...&lt;/li&gt;
&lt;li&gt;How do you decide which model to use?&lt;/li&gt;
&lt;li&gt;How can you improve a model? &amp;rarr; &lt;a href="https://arxiv.org/pdf/1707.09725.pdf"&gt;page 15, point I1 to I7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How can you determine which features are the most im- portant in your model? &amp;rarr; &lt;a href="https://martin-thoma.com/feature-importance/"&gt;answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Data Science"></category></entry><entry><title>Feature Importance</title><link href="https://martin-thoma.com/feature-importance/" rel="alternate"></link><published>2018-06-05T20:00:00+02:00</published><updated>2018-06-05T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-05:/feature-importance/</id><summary type="html">&lt;p&gt;Trust is important for a Data Scientist. If you are in a position where you can
apply a classification / regression model where the company used rules before,
you have to be able to build trust why your model is better than the old
system. Stakeholders want to understand what the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Trust is important for a Data Scientist. If you are in a position where you can
apply a classification / regression model where the company used rules before,
you have to be able to build trust why your model is better than the old
system. Stakeholders want to understand what the model does. If you have a
rule-based system in your mind, a very natural question is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the most important feature?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This question is problematic and having a feature importance example for trees in &lt;a href="http://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html"&gt;sklearn&lt;/a&gt; without a fat warning doesn't help. I failed to give a simple conclusive answer in
the past why this is problematic. This article fixes this issue.&lt;/p&gt;
&lt;h2 id="feature-selection"&gt;Feature Selection&lt;/h2&gt;
&lt;p&gt;Before I come to the examples, I want to introduce two simple ways of feature
selection. Feature selection is the process of selecting which features you
want to use for your models. The intention of having a small feature set is to
keep the model as simple as possible. Simpler models tend to be more robust and
easier to understand. In the simplest case, this is done manually. But there
are also two intuitive ways to do it automatically: A constructive approach and
a destructive approach.&lt;/p&gt;
&lt;p&gt;Both are greedy algorithms.&lt;/p&gt;
&lt;p&gt;You can find more &lt;a href="http://scikit-learn.org/stable/modules/feature_selection.html"&gt;feature selection algorithms in sklearn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="feature-construction"&gt;Feature Construction&lt;/h3&gt;
&lt;p&gt;Let's say you have &lt;span class="math"&gt;\(n\)&lt;/span&gt; features in total and a model of type &lt;span class="math"&gt;\(m\)&lt;/span&gt; (e.g. a
Decision Tree). Then you train &lt;span class="math"&gt;\(n\)&lt;/span&gt; instances of &lt;span class="math"&gt;\(m\)&lt;/span&gt;, each of them on a
different feature. You select the feature of the best model and repeat the
process. Stop once your improvement is below a threshold.&lt;/p&gt;
&lt;p&gt;In pythonic Pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def construct_features(feature_list, BaseModel, threshold, score):
    """
    Constructive feature selection algorithm

    Parameters
    ----------
    feature_list : list
    base_model : class
    threshold : float
    score : function
        Takes model as input and returns a float between 0 and infty, where
        higher is better.

    Returns
    -------
    features : list
    """
    trained_models = []
    features = []  # Set of current best features
    nb_features = 1
    condition = True
    last_score = 0
    while condition:
        for feature in feature_list:
            m = BaseModel(nb_features)
            m.train(features + [feature])
            trained_models.append((score(m), m, feature))
        features.append(sorted(trained_models)[0])

        # Check if it is time to stop
        condition = score(m) - last_score &amp;gt; threshold
        last_score = score(m)
    return features
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="feature-elimination"&gt;Feature Elimination&lt;/h3&gt;
&lt;p&gt;The same as construction, but the other way around: You start with the complete
feature set and remove one feature at a time, trying to keep the score as high
as possible.&lt;/p&gt;
&lt;h2 id="xor-example_1"&gt;XOR-Example&lt;/h2&gt;
&lt;h3 id="2-features"&gt;2 Features&lt;/h3&gt;
&lt;p&gt;Let's start simple: We have 2 binary features and one target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x1  x2    y
------------
0   0     0
0   1     1
1   0     1
1   1     0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, what is the most important feature in this case? x1 or x2?&lt;/p&gt;
&lt;p&gt;You can easily see that having only one feature cannot be better than
random in this case!
&lt;strong&gt;You need both features and a non-linear classifier to get better than random!&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="3-features"&gt;3 Features&lt;/h3&gt;
&lt;p&gt;A similar setting as before: 3 binary features and the target is XOR of all
of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;x1  x2  x3    y&lt;/span&gt;
&lt;span class="gh"&gt;---------------&lt;/span&gt;
0   0   0     0
0   0   1     1
0   1   0     1
0   1   1     0
1   0   0     1
1   0   1     0
1   1   0     0
1   1   1     1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things to note here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you take only one feature, then the target &lt;span class="math"&gt;\(y\)&lt;/span&gt; is exatly 50% of the time
  equal to that feature and exactly 50% of the time the opposite. No matter
  which feature you take.&lt;/li&gt;
&lt;li&gt;If you take two features, you don't get any more information as the target
  then completely depends on the last one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From those observations, you can conclude that neither one nor two features can
be better than random at predicting the target. No matter which type of model
you take. It's plain and simple impossible. The important information is there,
but only in combination.&lt;/p&gt;
&lt;h3 id="n-features"&gt;n Features&lt;/h3&gt;
&lt;p&gt;The principle shown in the two examples above generalizes. If your target is
XOR of the features, then you need all features to be better than random!&lt;/p&gt;
&lt;h3 id="soft-xor"&gt;Soft-XOR&lt;/h3&gt;
&lt;p&gt;You might argue that this is an artificial example. I agree.&lt;/p&gt;
&lt;p&gt;So let's make it less artificial. Take the features and labels from the 3-XOR
example. It is essentially a &lt;span class="math"&gt;\(8 \times 4\)&lt;/span&gt; matrix. Just add a random value in
&lt;span class="math"&gt;\([-0.01, 0.01]\)&lt;/span&gt; to each value. The problem itself didn't change, but it looks
less artificial.&lt;/p&gt;
&lt;p&gt;Now, you might argue that XOR-like feature behaviour is artificial. That might
be true as well, but especially business data could also simply count as
artificial.&lt;/p&gt;
&lt;h2 id="what-are-alternatives_1"&gt;What are alternatives?&lt;/h2&gt;
&lt;p&gt;Now that I've explained why feature importance is misleading and needs to be
taken with big caution, what are alternatives to explain what the model does?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model lab&lt;/strong&gt;: See &lt;a href="https://martin-thoma.com/ds-project-guide/#model-lab"&gt;here&lt;/a&gt;. Letting stakeholders poke the model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lime&lt;/strong&gt;: &lt;a href="https://github.com/marcotcr/lime"&gt;Local Interpretable Model-Agnostic Explanations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Common Language&lt;/strong&gt;: Use the same language as your stakeholders / the community to explain what your model does. Especially when it comes to the metrics you use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="when-can-we-use-feature-importance"&gt;When can we use feature importance?&lt;/h2&gt;
&lt;p&gt;If the problem is linear / has a big linear part. So if a linear model gives
good results, then the feature importance makes sense. A linear model is of the
form&lt;/p&gt;
&lt;div class="math"&gt;$$y := \sum_{i=1}^n a_i \cdot x_i$$&lt;/div&gt;
&lt;p&gt;So each feature &lt;span class="math"&gt;\(x_i \in \mathbb{R}\)&lt;/span&gt; has a weight &lt;span class="math"&gt;\(a_i \in \mathbb{R}\)&lt;/span&gt;. This
weight is the importance of the feature.&lt;/p&gt;
&lt;h2 id="todos"&gt;TODOs&lt;/h2&gt;
&lt;p&gt;Explain how sklearn / &lt;a href="https://github.com/catboost/catboost"&gt;catboost&lt;/a&gt; calculates feature importances&lt;/p&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Feature importances don't make any sense if the problem is non-linear enough.
Many problems, however, could potentially be described in a linear way.&lt;/p&gt;</content><category term="Machine Learning"></category><category term="Data Science"></category></entry><entry><title>Data Science Project Guide</title><link href="https://martin-thoma.com/ds-project-guide/" rel="alternate"></link><published>2018-06-03T20:00:00+02:00</published><updated>2018-06-03T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-03:/ds-project-guide/</id><summary type="html">&lt;p&gt;Data Science projects are either pure analytics projects, or Software projects,
or both.&lt;/p&gt;
&lt;p&gt;Three typical data science project phases are understanding the data, creating
a software component and then a story telling part:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Typical Data Science project phases" src="../images/2018/06/ds-flowchart.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Typical Data Science project phases&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are two other steps which I left out as I don't â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Data Science projects are either pure analytics projects, or Software projects,
or both.&lt;/p&gt;
&lt;p&gt;Three typical data science project phases are understanding the data, creating
a software component and then a story telling part:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Typical Data Science project phases" src="../images/2018/06/ds-flowchart.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Typical Data Science project phases&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are two other steps which I left out as I don't have any rules to follow
or tools that simplify the job: Getting access to the data and data cleaning.&lt;/p&gt;
&lt;p&gt;Please also note that waterfall does not work: The project phases are likely
not "pure", but slightly mixed. While you will have an exploratory phase in the
beginning, you will also need to communicate your findings (story telling).&lt;/p&gt;
&lt;p&gt;In the following, I will highlight some of the tools to simplify the project
phases and mention what you should do to make the project successful.&lt;/p&gt;
&lt;h2 id="understanding-the-setting"&gt;Understanding the Setting&lt;/h2&gt;
&lt;p&gt;Before there is Data, you have a proces which generates the data. You have a
business with a history. Changes which needed to be done. Not the nice and
clean way, but ASAP. Understanding how the setting helps you to ask reasonable
questions in the next step.&lt;/p&gt;
&lt;h2 id="understanding-the-data"&gt;Understanding the Data&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://martin-thoma.com/eda/"&gt;Exploratory Data Analysis&lt;/a&gt; happens when you
first get a dataset and already have it in a format you can work with. The
linked article already contains quite a bit of software, especially
Pandas, Ipython notebooks and &lt;a href="https://github.com/MartinThoma/edapy"&gt;&lt;code&gt;edapy&lt;/code&gt;&lt;/a&gt;
are useful at this step.&lt;/p&gt;
&lt;p&gt;I would create an own repository for this phase. This repository contains code
and some artifacts like images or maybe small parts of the dataset and is
unlike typical software repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No tests&lt;/strong&gt;: What exactly would you test for? The only thing I could think
  of is boundary and distribution checks, e.g. defining that an "age" has to be
  non-negative and below 200 and should have its median between 20 and 40.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No reviews&lt;/strong&gt;: It is super hard to review IPython notebooks. Don't get me
  wrong - you should talk about your findings and you should give co-workers
  access to your code, but it does not make sense to expect them to fully go
  through your code. Code for understanding data is likely dirty, because most
  data is dirty.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's hard to tell when this project phase is over. One artifact that should be
created at the end of this project phase is a &lt;strong&gt;data loading script&lt;/strong&gt;. It
should take the data from your typical sources and return it in a format you
can directly work with. This could be CSV to Pandas dataframes. The dataframe
should be cleaned already. The data loading script will be pasted in the
subsequent software project and should get a software review as it is a core
part of the software development.&lt;/p&gt;
&lt;p&gt;If you happen to be in a pure exporatory project - meaning somebody told you to
have a look in the data and find interesting things - be aware that this is
hard. Make clear that stakeholders understand that you need regular feedback to
see if you are on the right track. I would say at least once a day. Pure EDA
projects have a high potential to be unsatisfying for everybody.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ask Stakeholders for Hypotheses&lt;/strong&gt;. Hypothesis checking is a lot more "work as
usual" where you can build up knowledge and finish the task.&lt;/p&gt;
&lt;h2 id="software-projects"&gt;Software Projects&lt;/h2&gt;
&lt;p&gt;For forecasting, classification and regression you are in a supervised machine
learning tasks. As it is machine learning, you have to have an optimization
metric. In some cases it will be possible to have the same optimization metric
as what your stakeholders use to measure how well this part is doing. If this
is possible, do it: Use the same metric!&lt;/p&gt;
&lt;p&gt;Having the same metric to optimize likely leads to better results and gives
your stakeholders an easier time understanding your results. It directly
contributes to the "story telling" aspect.&lt;/p&gt;
&lt;p&gt;As with any software project, you should have tests, code reviews, a
&lt;a href="https://martin-thoma.com/python-projects/#project-structure"&gt;proper project structure&lt;/a&gt;
and get deployed / used somewhere.&lt;/p&gt;
&lt;p&gt;The main difference to typical software projects is the model you create. That
model is perceived as a black box by stakeholders. In the worst case, they
think YOU don't know what the model is doing! I recommend reading
&lt;a href="https://arxiv.org/pdf/1606.03490.pdf"&gt;The Mythos of Model Interpretability&lt;/a&gt; to
get some nice conceptual ideas about black boxes. To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Scientists understand their models&lt;/strong&gt;: We wrote them. There is no way
  to create a complex piece of software that works without understanding it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Black Boxes are common&lt;/strong&gt;: If we define a black box as something where we
  don't know 100% instantly and intuitively what happens, then there are a lot
  of black boxes. Humans, for example. But still you trust your doctor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error types are important&lt;/strong&gt;: For a human doctor, you know in which way he
  might do errors. He might be psychologically ill, most likely he will just
  not pay enough attention and thus diagnose something common where you might
  have an issue which is uncommon. For machine learning models, it can be the
  other way around. While overfitting is a problem we are aware of, the
  &lt;a href="http://www.cleverhans.io/security/privacy/ml/2017/02/15/why-attacking-machine-learning-is-easier-than-defending-it.html"&gt;model can be fooled&lt;/a&gt; to make a very unusual prediction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there are two sides of this problem: On the one hand, it is hard to make
sure that a model is trustworthy. You have to have the right metric(s), you
have to make sure the software works as expected. On the other hand, if you
have a trustworthy model, you have to convince your stakeholders that it is
trustworthy.&lt;/p&gt;
&lt;h3 id="building-trust"&gt;Building Trust&lt;/h3&gt;
&lt;p&gt;For this part, you have to talk a lot with your stakeholders. They have to get
a basic understanding how your model works. It is especially important to
emphasize that &lt;strong&gt;a model is not a rule-based system&lt;/strong&gt;. At least not
necessarily. Decisions can be made in a non-linear way which makes questions
such as "what is the most important feature" problematic.&lt;/p&gt;
&lt;h4 id="model-lab"&gt;Model Lab&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/MartinThoma/model-lab"&gt;I've started the development!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can build trust by giving access to your model. If you can give your
stakeholders an easy to use interface in which they can enter / manipulate
features and see the output of a model, they will either build more trust in
your model or you will get some examples where your model fails. Either way, it
is a win for the project.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/06/model-playground.png"&gt;&lt;img alt="Poking a model" src="../images/2018/06/model-playground.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Poking a model&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This wireframe is an idea for a web service which allows data scientists to
share models with stakeholders in a way that they can "poke" it. They see what
the input of the model is, they can manipulate the input and see the output.
Please also note that &lt;strong&gt;the URL contains the models parameters and thus can be
shared&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How can such a web service look from a software perspective?&lt;/p&gt;
&lt;p&gt;Each model consists of a package with a &lt;code&gt;model.py&lt;/code&gt; which contains an
&lt;code&gt;infer(input_dict)&lt;/code&gt; function and a &lt;code&gt;description.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    "name": "Titanic Survival Model",
    "parameters": [
        {
            "name": "Pclass",
            "label": "Pclass",
            "type": "int",
            "comment": "Passenger Class: 1 (First Class) is the most expensive one, 3 is the cheapest"
        },
        {
            "name": "age",
            "label": "age",
            "type": "float",
            "comment": ""
        },
        {
            "name": "SibSp",
            "label": "SibSp",
            "type": "float",
            "comment": "# of siblings / spouses aboard the Titanic"
        },
        {
            "name": "Parch",
            "label": "Parch",
            "type": "float",
            "comment": "# of parents / children aboard the Titanic"
        },
        {
            "name": "Fare",
            "label": "Fare",
            "type": "float",
            "comment": ""
        }
    ],
    "output": [
        {
            "name": "Survival Probability",
            "comment": "Survival probability in [0, 1], where 0 means the model is certain that the passenger did not survive and 1 means it is certain that the passenger survived."
        }
    ],
    "archetypes": [
        {
            "name": "The mother",
            "parameters": {
                "Pclass": 1,
                "age": 42,
                "SibSp": 12.34,
                "Parch": 3.141,
                "Fare": 2.141
            }
        }
    ],
    "info": {
        "text": "The model was trained on the values of 123 passangers of the titanic where it is known if the did / did not survive.\n\nThe model is an SVM with C = 1.234."
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Types that should be supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary&lt;/code&gt; (any file upload)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ext:FOO&lt;/code&gt; (files with the extension FOO)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="story-telling_1"&gt;Story Telling&lt;/h2&gt;
&lt;p&gt;Story Telling is the part where you, as a data scientist, make your insights
accessible, easy to understand and interpret in the correct way by your
stakeholders. It can be about visualizations, but also about choosing the right
metrics and reasonable numbers to share. I think I'll make another blog post
about this topic as &lt;a href="https://martin-thoma.com/python-data-visualization/"&gt;Python has many visualization packages&lt;/a&gt;.&lt;/p&gt;</content><category term="Machine Learning"></category><category term="Data Science"></category></entry><entry><title>Data Science - An Overview</title><link href="https://martin-thoma.com/data-science/" rel="alternate"></link><published>2018-06-02T20:00:00+02:00</published><updated>2018-06-02T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-02:/data-science/</id><summary type="html">&lt;p&gt;Data Science recently became popular. Currently are 154 open job positions on
Indeed.com for Data Scientists in Munich. To put it into context: There are 186
Android developer positions open, 527 Dev Ops, 753 frontend, 812 backend. So
it's still fairly small, but in the same ballpark.&lt;/p&gt;
&lt;p&gt;I wanted â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Data Science recently became popular. Currently are 154 open job positions on
Indeed.com for Data Scientists in Munich. To put it into context: There are 186
Android developer positions open, 527 Dev Ops, 753 frontend, 812 backend. So
it's still fairly small, but in the same ballpark.&lt;/p&gt;
&lt;p&gt;I wanted to have a data-based answer to what a data scientist actually is and
created a list of the skill set employers ask for, but it turns out that this
would lead to a lengthy and hard to digest blog post.&lt;/p&gt;
&lt;p&gt;I don't really like the term "data science" as it is too vague to me, but here
is how I would define it: A data scientist is a person who applies data
science. Data science is an academic field which deals with the extraction of
knowledge and insights from data.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/06/data-science-ngram.png"&gt;&lt;img alt="Popularity of Data Science and related terms in books." src="../images/2018/06/data-science-ngram.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Popularity of Data Science and related terms in books. One can see a linear increase for "machine learning" since about 1975, the term "data mining" exploded from 1992 to 2003. Other related terms like "big data", "deep learning", "information extraction" and "data science" are much less popular in books.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I would also say it is a term used much more often in industry than in
academia. The requirements between different job postings differ, but there are
some general themes:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/06/word-cloud-skillset.png"&gt;&lt;img alt="Word Cloud of the Skillset in 10 different Data Scientist job postings" src="../images/2018/06/word-cloud-skillset.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Word Cloud of the Skillset in 10 different Data Scientist job postings. If you're interested how to create word clouds, look &lt;a href="https://gist.github.com/MartinThoma/d325e3cdc2fd68133241efa21d3205b4"&gt;here&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Some of the requirements are typical senior software developer skills, such as
knowledge in Scrum and Waterfall and good knowledge of spoken and written
English and German. And some are rather special such as several skills around
machine learning (sklearn, scipy, nltk, Theno / Tensorflow / Keras / MXNet) or
Big Data (AWS, Hadoop, Spark).&lt;/p&gt;
&lt;p&gt;I've also asked some friends and collegues which kind of tasks they have seen
so far. I gave them a list of six possible responses and asked for more if
there is something that didn't match an entry in the list. I didn't get any answer
outside of it. Here are the answers:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/06/data-science-projects.png"&gt;&lt;img alt="Data Science project types" src="../images/2018/06/data-science-projects.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Data Science project types. EDA is short for "Exploratory Data Analysis". The bar chart was created with &lt;a href="https://www.rapidtables.com/tools/bar-graph.html"&gt;rapidtables.com&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Let's first explain the differnt project types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Forecasts&lt;/strong&gt;: Given a time series of the past, predict the future&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classification (and regression)&lt;/strong&gt;: For example, detect if an e-mail is spam or not&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EDA&lt;/strong&gt;: Exploratory Data Analysis. Here is the data - now find something interesting. This is a very unspecific task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visualizations&lt;/strong&gt;: Data Science can also be a bit about story telling. You
   found something which can be explained with exact terminology and words, but
   it has to be made clear to stakeholders what you found in an simple,
   intuitive, fast way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A/B tests (and hypothesis testing)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clustering&lt;/strong&gt;: Which types of customers do we have? (Customer segmenation)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, back to the bar chart: You can see that bar charts are much more visible /
stick better to peoples mind, although the other tasks are more common. And you
can see that people tend to make too quick conclusions from seeing a pattern in
small numbers ðŸ˜‰&lt;/p&gt;
&lt;p&gt;From personal experience, I would say that forecasts, clustering and regression
are relative common tasks. Of course, one has often to start with exploratory
data analysis.&lt;/p&gt;
&lt;p&gt;I try to avoid clustering and pure EDA tasks as they are ill-defined. You can't
say when you are ready which makes it hard to get satisfying results.&lt;/p&gt;
&lt;h2 id="data-science-vs-business-analytics"&gt;Data Science vs Business Analytics&lt;/h2&gt;
&lt;p&gt;Both, data science and business analytics are closely related. They certainly
have big overlaps. Here are some differences:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Business Intelligence&lt;/th&gt;
&lt;th&gt;Data Science&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Tasks&lt;/th&gt;
&lt;td&gt;Reports&lt;/td&gt;
&lt;td&gt;Predictive models&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tool&lt;/td&gt;
&lt;td&gt;Qlickview, SAP&lt;/td&gt;
&lt;td&gt;Pandas, sklearn, Jupiter notebooks, Tensorflow, Keras, XGBoost, scipy, numpy&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="data-scientist-vs-data-engineer"&gt;Data Scientist vs Data Engineer&lt;/h2&gt;
&lt;p&gt;Both, data scientists and data engineers, deal with data. While the engineer
has more ETL-tasks (extract, transform, load), the scientists has more model
creation and analysis tasks.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Data Engineer&lt;/th&gt;
&lt;th&gt;Data Scientists&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Typical Background&lt;/td&gt;
&lt;td&gt;Computer Science + Software Engineering&lt;/td&gt;
&lt;td&gt;Computer Science + Mathematics&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tasks&lt;/td&gt;
&lt;td&gt;Collect and Transform Data (&lt;abbr title="Extract, Transform, Load"&gt;ETL&lt;/abbr&gt;), Data Warehousing&lt;/td&gt;
&lt;td&gt;Generate Insights from Data; Machine Learning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Typical Frameworks&lt;/td&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Apache_Hadoop"&gt;Hadoop&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Apache_Spark"&gt;Spark&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Apache_Cassandra"&gt;Cassandra&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Apache_Drill"&gt;Apache Drill&lt;/a&gt;, CouchDB, talend, mongoDB, neo4j, MariaDB&lt;/td&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Pandas_(software)"&gt;Pandas&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/NumPy"&gt;Numpy&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/SciPy"&gt;Scipy&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Scikit-learn"&gt;scikit-learn&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="data-scientist-vs-data-analyst"&gt;Data Scientist vs Data Analyst&lt;/h2&gt;
&lt;p&gt;Data Scientists and Data Analysts are pretty similar compared to Data Engineers.
I would say that Data Scientists should also know about Machine Learning algorithms
and Frameworks while I would not expect it from a Data Analyst.&lt;/p&gt;
&lt;h2 id="data-science-vs-ml-vs-ai"&gt;Data Science vs ML vs AI&lt;/h2&gt;
&lt;p&gt;David Robinson made a really nice quote (&lt;a href="https://dzone.com/articles/the-difference-between-data-science-machine-learni"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So in this post, I'm proposing an oversimplified definition of the difference
between the three fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data science produces &lt;strong&gt;insights&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Machine learning produces &lt;strong&gt;predictions&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Artificial intelligence produces &lt;strong&gt;actions&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Usually, I said that ML is a strict subset of AI:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="AI vs ML vs Deep Learning" src="../images/2018/06/ai-ml-deep-learning.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;AI vs ML vs Deep Learning&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;David Robinsons statement is not a contradiction to mine. I would say you need
predictions about the future to take smart actions in a changing world.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="A more detailed view of Data Science, Machine Learning, and AI" src="../images/2018/06/ds-ml-ai.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;A more detailed view of Data Science, Machine Learning, and AI&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;Now that it is clear what kinds of tasks are common in data science, will
continue with blog posts how to make those projects sucessful.&lt;/p&gt;</content><category term="Machine Learning"></category></entry><entry><title>Forecasting</title><link href="https://martin-thoma.com/forecasting/" rel="alternate"></link><published>2018-04-16T20:00:00+02:00</published><updated>2018-04-16T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-04-16:/forecasting/</id><summary type="html">&lt;p&gt;Today, I played a bit with the &lt;a href="https://datamarket.com/data/set/22u3/international-airline-passengers-monthly-totals-in-thousands-jan-49-dec-60#!ds=22u3&amp;amp;display=line"&gt;International airline passengers dataset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's only feature is a date given by year and month. One should predict the
number of passengers (in thousands).&lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/regression/airline-passengers/main.py"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;See the scoring functions are explained in the &lt;a href="https://martin-thoma.com/regression/"&gt;regression article&lt;/a&gt;.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;training time&lt;/th&gt;
&lt;th&gt;testing time â€¦&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;Today, I played a bit with the &lt;a href="https://datamarket.com/data/set/22u3/international-airline-passengers-monthly-totals-in-thousands-jan-49-dec-60#!ds=22u3&amp;amp;display=line"&gt;International airline passengers dataset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's only feature is a date given by year and month. One should predict the
number of passengers (in thousands).&lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/regression/airline-passengers/main.py"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;See the scoring functions are explained in the &lt;a href="https://martin-thoma.com/regression/"&gt;regression article&lt;/a&gt;.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;training time&lt;/th&gt;
&lt;th&gt;testing time&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Mean_absolute_error" title="Mean absolute error"&gt;MAE&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Median_absolute_deviation" title="Median absolute deviation"&gt;MAD&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Coefficient_of_determination"&gt;$R^2$&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.metrics.explained_variance_score.html"&gt;explained variance&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Mean_squared_error" title="Mean squared error"&gt;MSE&lt;/a&gt;&lt;/th&gt;
&lt;tr&gt;
&lt;tr&gt;
&lt;td&gt;GradientBoostingRegressor&lt;/td&gt;
&lt;td&gt;11.6ms&lt;/td&gt;
&lt;td&gt; 0.1ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;40.0&lt;/td&gt;
&lt;td style="background-color: green;"&gt;31.0&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.5689&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.6246&lt;/td&gt;
&lt;td style="background-color: green;"&gt;2631.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GaussianProcessRegressor&lt;/td&gt;
&lt;td&gt; 8.4ms&lt;/td&gt;
&lt;td&gt; 0.2ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;150.9&lt;/td&gt;
&lt;td&gt;85.9&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-8.0324&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-6.7089&lt;/td&gt;
&lt;td style="background-color: red;"&gt;55138.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AdaBoostRegressor&lt;/td&gt;
&lt;td style="background-color: red;"&gt;69.3ms&lt;/td&gt;
&lt;td&gt; 1.1ms&lt;/td&gt;
&lt;td&gt;60.1&lt;/td&gt;
&lt;td&gt;53.3&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.1240&lt;/td&gt;
&lt;td&gt;0.5812&lt;/td&gt;
&lt;td style="background-color: red;"&gt;5347.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGDRegressor&lt;/td&gt;
&lt;td&gt; 0.8ms&lt;/td&gt;
&lt;td&gt; 0.1ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;106.5&lt;/td&gt;
&lt;td&gt;84.8&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-1.7081&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1471&lt;/td&gt;
&lt;td&gt;16531.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://scikit-learn.org/stable/modules/linear_model.html#ransac-random-sample-consensus"&gt;RANSACRegressor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 4.1ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt; 0.0ms&lt;/td&gt;
&lt;td&gt;68.5&lt;/td&gt;
&lt;td&gt;39.4&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-0.4294&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1479&lt;/td&gt;
&lt;td&gt;8726.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://scikit-learn.org/stable/modules/linear_model.html#passive-aggressive"&gt;PassiveAggressiveRegressor&lt;/a&gt;&lt;/td&gt;
&lt;td style="background-color: green;"&gt; 0.2ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt; 0.0ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;115.8&lt;/td&gt;
&lt;td style="background-color: red;"&gt;115.5&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-1.8841&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1268&lt;/td&gt;
&lt;td&gt;17606.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BaggingRegressor&lt;/td&gt;
&lt;td&gt;13.4ms&lt;/td&gt;
&lt;td&gt; 0.9ms&lt;/td&gt;
&lt;td&gt;46.7&lt;/td&gt;
&lt;td&gt;37.1&lt;/td&gt;
&lt;td&gt;0.4162&lt;/td&gt;
&lt;td&gt;0.4912&lt;/td&gt;
&lt;td&gt;3564.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.HuberRegressor.html"&gt;HuberRegressor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 8.0ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt; 0.0ms&lt;/td&gt;
&lt;td&gt;65.4&lt;/td&gt;
&lt;td&gt;59.8&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-0.0745&lt;/td&gt;
&lt;td&gt;0.0395&lt;/td&gt;
&lt;td&gt;6559.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RandomForestRegressor&lt;/td&gt;
&lt;td style="background-color: red;"&gt;18.6ms&lt;/td&gt;
&lt;td&gt; 5.2ms&lt;/td&gt;
&lt;td&gt;48.3&lt;/td&gt;
&lt;td&gt;38.5&lt;/td&gt;
&lt;td&gt;0.4336&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.6535&lt;/td&gt;
&lt;td&gt;3457.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://xgboost.readthedocs.io/en/latest/python/python_api.html"&gt;XGBoost&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 5.5ms&lt;/td&gt;
&lt;td&gt; 0.1ms&lt;/td&gt;
&lt;td&gt;49.3&lt;/td&gt;
&lt;td&gt;37.7&lt;/td&gt;
&lt;td&gt;0.4139&lt;/td&gt;
&lt;td&gt;0.7215&lt;/td&gt;
&lt;td&gt;3578.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ExtraTreesRegressor&lt;/td&gt;
&lt;td style="background-color: red;"&gt;17.2ms&lt;/td&gt;
&lt;td&gt; 4.7ms&lt;/td&gt;
&lt;td&gt;44.1&lt;/td&gt;
&lt;td&gt;33.2&lt;/td&gt;
&lt;td&gt;0.4744&lt;/td&gt;
&lt;td&gt;0.5036&lt;/td&gt;
&lt;td&gt;3208.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://martin-thoma.com/svm-with-sklearn/"&gt;RBF SVR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 2.1ms&lt;/td&gt;
&lt;td&gt; 0.3ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;202.2&lt;/td&gt;
&lt;td style="background-color: red;"&gt;182.0&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-6.6885&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.0105&lt;/td&gt;
&lt;td style="background-color: red;"&gt;46934.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linear SVR + Standardscaler&lt;/td&gt;
&lt;td&gt; 1.4ms&lt;/td&gt;
&lt;td&gt; 0.2ms&lt;/td&gt;
&lt;td&gt;84.1&lt;/td&gt;
&lt;td&gt;60.6&lt;/td&gt;
&lt;td style="background-color: red;"&gt;-0.9573&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1338&lt;/td&gt;
&lt;td&gt;11948.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html"&gt;LinearRegression&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10.8ms&lt;/td&gt;
&lt;td&gt; 0.1ms&lt;/td&gt;
&lt;td&gt;55.9&lt;/td&gt;
&lt;td&gt;41.9&lt;/td&gt;
&lt;td&gt;0.1068&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1700&lt;/td&gt;
&lt;td&gt;5452.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html"&gt;ElasticNet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 0.3ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt; 0.0ms&lt;/td&gt;
&lt;td&gt;56.0&lt;/td&gt;
&lt;td&gt;41.7&lt;/td&gt;
&lt;td&gt;0.1069&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1698&lt;/td&gt;
&lt;td&gt;5452.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html"&gt;Lasso&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 0.4ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt; 0.0ms&lt;/td&gt;
&lt;td&gt;56.0&lt;/td&gt;
&lt;td&gt;41.5&lt;/td&gt;
&lt;td&gt;0.1069&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.1698&lt;/td&gt;
&lt;td&gt;5451.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tr&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;I like the median absolute error best, because it tells me how many passengers
my prediction is typically away from the true prediction.&lt;/p&gt;
&lt;p&gt;Please note that bad results here do not mean the regressor is bad. Some might
just use their full potential with more data, some might be better suited to
different regression problems, e.g. interpolation instead of extrapolation or
working with higher dimensional data.&lt;/p&gt;
&lt;h2 id="graphs"&gt;Graphs&lt;/h2&gt;
&lt;p&gt;Plotting the prediction is crucial for extrapolation. What we can see in those
images is that there are two things to match: A global trend and local
seasonality-effects. To make it easier to digest, I already put them in the
table. Just click on them to see them in full size:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Model&lt;/th&gt;
&lt;th&gt;Trend&lt;/th&gt;
&lt;th&gt;Seasonality&lt;/th&gt;
&lt;th&gt;Graph&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RBF SVR&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-SVR.png"&gt;&lt;img alt="RBF SVR for extrapolation." src="../images/2018/04/airline-passengers-train-SVR.png" style="width: 128px;"/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;td&gt;Doesn't learn anything useful at all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GaussianProcessRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Kind of&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-GaussianProcessRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="GaussianProcessRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-GaussianProcessRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Overshoots extremely&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AdaBoostRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-AdaBoostRegressor.png"&gt;&lt;img alt="AdaBoostRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-AdaBoostRegressor.png" style="width: 128px;"/&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BaggingRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-BaggingRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="BaggingRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-BaggingRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XGBoost&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-XGBoost.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="XGBoost for extrapolation." src="../images/2018/04/airline-passengers-train-XGBoost.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ExtraTreesRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-ExtraTreesRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="ExtraTreesRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-ExtraTreesRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Note the extreme overfitting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RandomForestRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-RandomForestRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="RandomForestRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-RandomForestRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GradientBoostingRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-GradientBoostingRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="GradientBoostingRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-GradientBoostingRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lasso&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-Lasso.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Lasso for extrapolation." src="../images/2018/04/airline-passengers-train-Lasso.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linear SVR&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-Linear SVR.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Linear SVR for extrapolation." src="../images/2018/04/airline-passengers-train-Linear SVR.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RANSACRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-RANSACRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="RANSACRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-RANSACRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinearRegression&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-LinearRegression.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="LinearRegression for extrapolation." src="../images/2018/04/airline-passengers-train-LinearRegression.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ElasticNet&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-ElasticNet.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="ElasticNet for extrapolation." src="../images/2018/04/airline-passengers-train-ElasticNet.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGDRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;âœ˜&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;&lt;a href="../images/2018/04/airline-passengers-train-SGDRegressor.png"&gt;&lt;img alt="SGDRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-SGDRegressor.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HuberRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-HuberRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="HuberRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-HuberRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Both are captured pretty bad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PassiveAggressiveRegressor&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;âœ”&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2018/04/airline-passengers-train-PassiveAggressiveRegressor.png"&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="PassiveAggressiveRegressor for extrapolation." src="../images/2018/04/airline-passengers-train-PassiveAggressiveRegressor.png" style="width: 128px;"/&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Both are captured pretty bad&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Seeing this result, I decided to have two models: One which predicts the trend
and one which predicts seasonality effects.&lt;/p&gt;
&lt;h2 id="combining-models"&gt;Combining models&lt;/h2&gt;
&lt;p&gt;The simplest way to combine two regression models is by&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = f_1(x) + f_2(x)$$&lt;/div&gt;
&lt;p&gt;But I also want to simpify the training. So I decided to have the following
training setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fit &lt;span class="math"&gt;\(f_1\)&lt;/span&gt; on the training dataset, where &lt;span class="math"&gt;\(f_1\)&lt;/span&gt; has to predict the global
   trend and thus solve the extrapolation problem. Lasso seems to be a good
   choice.&lt;/li&gt;
&lt;li&gt;Transform the training data &lt;span class="math"&gt;\((X, y)\)&lt;/span&gt;: &lt;div class="math"&gt;$$y' = y - f_1(X)$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Fit &lt;span class="math"&gt;\(f_2\)&lt;/span&gt; on &lt;span class="math"&gt;\((X, y')\)&lt;/span&gt;. So &lt;span class="math"&gt;\(f_2\)&lt;/span&gt; has to solve an interpolation problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I call this model &lt;code&gt;TrendSeasonRegressor&lt;/code&gt;. Let's try a few combinations:&lt;/p&gt;
&lt;table class="table" id="combinedModelScores"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$f_1$&lt;/th&gt;
&lt;th&gt;$f_2$&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Mean_absolute_error" title="Mean absolute error"&gt;MAE&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Median_absolute_deviation" title="Median absolute deviation"&gt;MAD&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Coefficient_of_determination"&gt;$R^2$&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.metrics.explained_variance_score.html"&gt;explained variance&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/Mean_squared_error" title="Mean squared error"&gt;MSE&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td colspan="2"&gt;GradientBoostingRegressor&lt;/td&gt;
&lt;td style="background-color: red;"&gt;40.0&lt;/td&gt;
&lt;td style="background-color: red;"&gt;31.0&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.5689&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.6246&lt;/td&gt;
&lt;td style="background-color: red;"&gt;2631.9&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-GradientBoostingRegressor.png"&gt;&lt;img alt="Gradient Boosting Regressor" src="../images/2018/04/airline-passengers-train-GradientBoostingRegressor.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linear Regression&lt;/td&gt;
&lt;td&gt;ExtraTrees&lt;/td&gt;
&lt;td style="background-color: green;"&gt;19.1&lt;/td&gt;
&lt;td style="background-color: green;"&gt;14.5&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.8958&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.9096&lt;/td&gt;
&lt;td style="background-color: green;"&gt;636.1&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-ResidualRegressor-LinearExtra.png"&gt;&lt;img alt="Linear Regression combined with Extra Trees" src="../images/2018/04/airline-passengers-train-ResidualRegressor-LinearExtra.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lasso&lt;/td&gt;
&lt;td&gt;ExtraTrees&lt;/td&gt;
&lt;td style="background-color: green;"&gt;20.8&lt;/td&gt;
&lt;td style="background-color: green;"&gt;16.6&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.8803&lt;/td&gt;
&lt;td style="background-color: green;"&gt;0.8992&lt;/td&gt;
&lt;td style="background-color: green;"&gt;730.9&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_Lasso_ExtraTrees.png"&gt;&lt;img alt="Text" src="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_Lasso_ExtraTrees.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ElasticNet&lt;/td&gt;
&lt;td&gt;ExtraTrees&lt;/td&gt;
&lt;td&gt;25.2&lt;/td&gt;
&lt;td&gt;24.4&lt;/td&gt;
&lt;td&gt;0.8382&lt;/td&gt;
&lt;td&gt;0.8403&lt;/td&gt;
&lt;td&gt;988.0&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_ElasticNet_ExtraTrees.png"&gt;&lt;img alt="Text" src="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_ElasticNet_ExtraTrees.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinearSVR&lt;/td&gt;
&lt;td&gt;ExtraTrees&lt;/td&gt;
&lt;td&gt;36.4&lt;/td&gt;
&lt;td style="background-color: red;"&gt;31.1&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.6841&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.7081&lt;/td&gt;
&lt;td style="background-color: red;"&gt;1928.2&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_LinearSVR_ExtraTrees.png"&gt;&lt;img alt="Text" src="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_LinearSVR_ExtraTrees.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinearSVR&lt;/td&gt;
&lt;td&gt;Adaboost&lt;/td&gt;
&lt;td&gt;33.7&lt;/td&gt;
&lt;td style="background-color: red;"&gt;32.6&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.6918&lt;/td&gt;
&lt;td style="background-color: red;"&gt;0.7849&lt;/td&gt;
&lt;td style="background-color: red;"&gt;1881.5&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_LinearSVR_Adaboost.png"&gt;&lt;img alt="Text" src="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_LinearSVR_Adaboost.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lasso&lt;/td&gt;
&lt;td&gt;Adaboost&lt;/td&gt;
&lt;td&gt;26.5&lt;/td&gt;
&lt;td&gt;18.9&lt;/td&gt;
&lt;td&gt;0.8034&lt;/td&gt;
&lt;td&gt;0.8143&lt;/td&gt;
&lt;td style="background-color: red;"&gt;1200.4&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_Lasso_Adaboost.png"&gt;&lt;img alt="Text" src="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_Lasso_Adaboost.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ElasticNet&lt;/td&gt;
&lt;td&gt;Adaboost&lt;/td&gt;
&lt;td&gt;26.5&lt;/td&gt;
&lt;td&gt;19.4&lt;/td&gt;
&lt;td&gt;0.8098&lt;/td&gt;
&lt;td&gt;0.8229&lt;/td&gt;
&lt;td style="background-color: red;"&gt;1161.2&lt;/td&gt;
&lt;td&gt;&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_ElasticNet_Adaboost.png"&gt;&lt;img alt="Text" src="../images/2018/04/airline-passengers-train-TrendSeasonRegressor_ElasticNet_Adaboost.png" style="width: 128px;"/&gt;&lt;/a&gt;
&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This looks a lot better! Note how the best model before is now the worst!&lt;/p&gt;
&lt;p&gt;However, even with this combination the Gaussian Processes were really bad.
Overshooting like hell.&lt;/p&gt;
&lt;p&gt;Next thing to improve: The scaling of the the seasonal trend is not captured so
far.&lt;/p&gt;
&lt;p&gt;Another idea I want to dig into is that of residual learning. Where I have only
one model learning the residual of another model, you can chain arbitary many.
The &lt;code&gt;ResidualRegressor&lt;/code&gt; is a meta-regressor. If it is given one model, it
behaves exactly like that model. If it is given two models, then it behaves
exactly like the &lt;code&gt;TrendSeasonRegressor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sadly, for the given data and the models I've tried, three models behaved not
better than two in the &lt;code&gt;ResidualRegressor&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="human-performance"&gt;Human Performance&lt;/h2&gt;
&lt;p&gt;An interesting excercise is to get a human baseline. This gives you some
insights in how good the models are.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Truth&lt;/th&gt;
&lt;th&gt;Martin&lt;/th&gt;
&lt;th&gt;Person 2&lt;/th&gt;
&lt;th&gt;Person3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1958-08&lt;/td&gt;
&lt;td&gt;505&lt;/td&gt;
&lt;td&gt;490 (+15)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1958-09&lt;/td&gt;
&lt;td&gt;404&lt;/td&gt;
&lt;td&gt;440 (+36)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1958-10&lt;/td&gt;
&lt;td&gt;359&lt;/td&gt;
&lt;td&gt;370 (+11)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1958-11&lt;/td&gt;
&lt;td&gt;310&lt;/td&gt;
&lt;td&gt;340 (+30)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1958-12&lt;/td&gt;
&lt;td&gt;337&lt;/td&gt;
&lt;td&gt;360 (+23)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-01&lt;/td&gt;
&lt;td&gt;360&lt;/td&gt;
&lt;td&gt;375 (+15)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-02&lt;/td&gt;
&lt;td&gt;342&lt;/td&gt;
&lt;td&gt;365 (+23)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-03&lt;/td&gt;
&lt;td&gt;406&lt;/td&gt;
&lt;td&gt;410 (+4)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-04&lt;/td&gt;
&lt;td&gt;396&lt;/td&gt;
&lt;td&gt;365 (+31)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-05&lt;/td&gt;
&lt;td&gt;420&lt;/td&gt;
&lt;td&gt;410 (+10)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-06&lt;/td&gt;
&lt;td&gt;472&lt;/td&gt;
&lt;td&gt;500 (+28)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-07&lt;/td&gt;
&lt;td&gt;548&lt;/td&gt;
&lt;td&gt;570 (+22)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-08&lt;/td&gt;
&lt;td&gt;559&lt;/td&gt;
&lt;td&gt;570 (+11)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-09&lt;/td&gt;
&lt;td&gt;463&lt;/td&gt;
&lt;td&gt;490 (+27)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-10&lt;/td&gt;
&lt;td&gt;407&lt;/td&gt;
&lt;td&gt;433 (+26)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-11&lt;/td&gt;
&lt;td&gt;362&lt;/td&gt;
&lt;td&gt;375 (+13)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1959-12&lt;/td&gt;
&lt;td&gt;405&lt;/td&gt;
&lt;td&gt;400 (+5)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-01&lt;/td&gt;
&lt;td&gt;417&lt;/td&gt;
&lt;td&gt;410 (+7)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-02&lt;/td&gt;
&lt;td&gt;391&lt;/td&gt;
&lt;td&gt;395 (+4)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-03&lt;/td&gt;
&lt;td&gt;419&lt;/td&gt;
&lt;td&gt;460 (+41)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-04&lt;/td&gt;
&lt;td&gt;461&lt;/td&gt;
&lt;td&gt;450 (+11)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-05&lt;/td&gt;
&lt;td&gt;472&lt;/td&gt;
&lt;td&gt;510 (+38)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-06&lt;/td&gt;
&lt;td&gt;535&lt;/td&gt;
&lt;td&gt;570 (+35)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-07&lt;/td&gt;
&lt;td&gt;622&lt;/td&gt;
&lt;td&gt;630 (+8)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-08&lt;/td&gt;
&lt;td&gt;606&lt;/td&gt;
&lt;td&gt;630 (+24)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-09&lt;/td&gt;
&lt;td&gt;508&lt;/td&gt;
&lt;td&gt;550 (+42)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-10&lt;/td&gt;
&lt;td&gt;461&lt;/td&gt;
&lt;td&gt;480 (+19)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-11&lt;/td&gt;
&lt;td&gt;390&lt;/td&gt;
&lt;td&gt;410 (+20)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1960-12&lt;/td&gt;
&lt;td&gt;432&lt;/td&gt;
&lt;td&gt;440 (+8)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;MAE&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;20.24&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;MAD&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;20.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;MSE&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;539.8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;absolute_errors = [15, 36, 11, 30, 23, 15, 23, 4, 31, 10, 28,22,11,27,26,13,5,7,4,41,11,38,35,8,24,42,19,20,8]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="circular-features"&gt;Circular Features&lt;/h2&gt;
&lt;p&gt;Having the month as a single feature with values from 1 to 12 seems not to be
the best choice. Either a one-hot encoding or a circular encoding (two features
with the trigonometric functions &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;cos&lt;/code&gt;) seem to be the better choice.&lt;/p&gt;
&lt;p&gt;Using the circular encoding was interesting. It made the prediction to get
"bumps":&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Linear Regression with two circular-encoded features for the month" src="../images/2018/04/airline-passengers-train-LinearRegressionCircularBumps.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Linear Regression with two circular-encoded features for the month&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, both encodings did not yield better results than the simple integer
encoding of a month for this dataset and all tried regressors.&lt;/p&gt;
&lt;h2 id="todos"&gt;TODOs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make a hand-crafted model&lt;/li&gt;
&lt;li&gt;Get a human baseline&lt;/li&gt;
&lt;li&gt;Make a neural network model&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learnings"&gt;Learnings&lt;/h2&gt;
&lt;p&gt;The following should have become clear from reading this blog post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L1: SGDRegressor without scaling is crazy bad.&lt;/li&gt;
&lt;li&gt;L2: Without hyperparameter optimization (e.g. &lt;a href="https://martin-thoma.com/twiddle/"&gt;twiddling&lt;/a&gt;),
  SVR is shitty.&lt;/li&gt;
&lt;li&gt;L3: Without scaling, linear SVR runs many hours for training. On a dataset with
  3&amp;nbsp;features and less than 150&amp;nbsp;data points.&lt;/li&gt;
&lt;li&gt;L4: Visualizations are powerful for model evaluation and improvement in
      low-dimensional regression problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/comparing-classifiers/"&gt;Comparing Classifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sklearn: &lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html"&gt;Choosing the right estimator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Regression"></category><category term="Time Series"></category></entry><entry><title>SLAM</title><link href="https://martin-thoma.com/slam/" rel="alternate"></link><published>2018-03-26T20:00:00+02:00</published><updated>2018-03-26T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-03-26:/slam/</id><summary type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;SLAM is short of simultaneous localization and mapping. It is a term used to
describe the â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;SLAM is short of simultaneous localization and mapping. It is a term used to
describe the problem of creating a map and locating the mobile agent within the
map at the same time.&lt;/p&gt;
&lt;p&gt;This kind of problem is hard, because of the chicken-and-egg problem: In order
to get a good localization, you need a map. In order to create a map, you need
to localize the agent.&lt;/p&gt;
&lt;p&gt;It can be applied to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indoors: Vacuum cleaner robots&lt;/li&gt;
&lt;li&gt;Outdoors: Self-driving cars&lt;/li&gt;
&lt;li&gt;Underground: Exploration of mines&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="slam-algorithm-parts"&gt;SLAM algorithm parts&lt;/h2&gt;
&lt;h3 id="motion-model"&gt;Motion model&lt;/h3&gt;
&lt;p&gt;A motion model gives the state &lt;span class="math"&gt;\(x\)&lt;/span&gt; at time &lt;span class="math"&gt;\(k\)&lt;/span&gt; after having the state at time
&lt;span class="math"&gt;\(k-1\)&lt;/span&gt; and the control &lt;span class="math"&gt;\(u\)&lt;/span&gt; at time &lt;span class="math"&gt;\(k\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$x_k = f(x_{k-1}, u_k)$$&lt;/div&gt;
&lt;h3 id="observation-model"&gt;Observation model&lt;/h3&gt;
&lt;p&gt;The observation model gives the observation &lt;span class="math"&gt;\(z\)&lt;/span&gt; at time &lt;span class="math"&gt;\(k\)&lt;/span&gt;, given the map &lt;span class="math"&gt;\(m\)&lt;/span&gt;
and the state &lt;span class="math"&gt;\(x\)&lt;/span&gt; at time &lt;span class="math"&gt;\(k\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$z_k = h(x_k, m)$$&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://en.wikipedia.org/wiki/Odometry"&gt;odometry&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="map-representations"&gt;Map Representations&lt;/h3&gt;
&lt;p&gt;Maps can either simply be topological or be metric. The first one means
distances don't matter, only the ordering / number of branches.&lt;/p&gt;
&lt;h3 id="data-association"&gt;Data Association&lt;/h3&gt;
&lt;p&gt;Data association means that we want to identify landmarks. The two-frame
matching problem is called (Correspondence Problem).&lt;/p&gt;
&lt;h2 id="slam-algorithms_1"&gt;SLAM algorithms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Graph SLAM&lt;/li&gt;
&lt;li&gt;EKF-SLAM (Extended Kalman filter)&lt;/li&gt;
&lt;li&gt;Fast SLAM: Rao-Blackwellised particle filters&lt;/li&gt;
&lt;li&gt;Mono SLAM&lt;/li&gt;
&lt;li&gt;Topological SLAM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ekf-slam"&gt;EKF-SLAM&lt;/h3&gt;
&lt;p&gt;Components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The state vector &lt;span class="math"&gt;\(x \in \mathbb{R}^{n}\)&lt;/span&gt; contains the position of the agent (for example: x, y, orientation) as
  well as all landmarks (for example: &lt;span class="math"&gt;\(l_{1,x}, l_{1,y}, l_{2,x}, l_{2,y}\)&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;A covariance matrix &lt;span class="math"&gt;\(C \in \mathbb{R}^{n \times n}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def filter_step(x, m):
    """

    Parameters
    ----------
    x : ndarray
        State vector, including landmark positions
        shape: n
    C : ndarray
        Covariance matrix
        spahe: n x n
    """
    x_pred = predict_state(x)  # odometry
    z_pred = predict_measurement(x)
    z = measure()
    # data association
    # Kalman filter update
    # Integration of new landmarks by extending x and C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Complexity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cost per step: &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt; where &lt;span class="math"&gt;\(n\)&lt;/span&gt; is the number of landmarks&lt;/li&gt;
&lt;li&gt;Total cost to build a map: O(n^3)&lt;/li&gt;
&lt;li&gt;Memory consumption: O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;p&gt;Other blogposts:
* &lt;a href="https://martin-thoma.com/kalman-filter/"&gt;Kalman Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Papers and Slides:
&lt;em&gt; Uni Freiburg: &lt;a href="http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf"&gt;Slides&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=U6vr3iNrwRA&amp;amp;list=PLgnQpQtFTOGQrZ4O5QzbIHgl3b1JHimN_"&gt;YouTube playlist&lt;/a&gt;
&lt;/em&gt; Hugh Durrant-Whyte, Tim Bailey: Simultaneous Localisation and Mapping (SLAM): Part I The Essential Algorithms
&lt;em&gt; Ziegler et. al: Making Bertha Drive &amp;mdash; An Autonomous Journey on a Historic Route
&lt;/em&gt; Grisetti, Kummerle, Stachniss, Burgard: A Tutorial on Graph-Based SLAM&lt;/p&gt;
&lt;p&gt;Datasets:
* &lt;a href="http://www-personal.acfr.usyd.edu.au/nebot/victoria_park.htm"&gt;Victoria Park&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Software:
* Mark Paskin: &lt;a href="http://ai.stanford.edu/~paskin/slam/"&gt;Stanford&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stack Exchange:
&lt;em&gt; &lt;a href="https://robotics.stackexchange.com/questions/tagged/slam"&gt;Robotics&lt;/a&gt;
&lt;/em&gt; &lt;a href="https://stackoverflow.com/questions/tagged/slam"&gt;Stack Overflow&lt;/a&gt;
* &lt;a href="https://ai.stackexchange.com/search?q=slam"&gt;A.I.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other:
* &lt;a href="https://en.wikipedia.org/wiki/Simultaneous_localization_and_mapping"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;</content><category term="Artificial Intelligence"></category><category term="Robotics"></category></entry><entry><title>Sankey Diagrams</title><link href="https://martin-thoma.com/sankey-diagrams/" rel="alternate"></link><published>2018-01-09T20:00:00+01:00</published><updated>2018-01-09T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-01-09:/sankey-diagrams/</id><summary type="html">&lt;p&gt;Sankey diagrams can be used to visualize the breakdown of money / electriciy.
You have a big base value like the energy used by an average single German in
December 2017. Then you build big clusters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transportation&lt;/li&gt;
&lt;li&gt;Household&lt;/li&gt;
&lt;li&gt;Other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and you might be able to split household up again:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heating&lt;/li&gt;
&lt;li&gt;Refrigerator â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Sankey diagrams can be used to visualize the breakdown of money / electriciy.
You have a big base value like the energy used by an average single German in
December 2017. Then you build big clusters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transportation&lt;/li&gt;
&lt;li&gt;Household&lt;/li&gt;
&lt;li&gt;Other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and you might be able to split household up again:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heating&lt;/li&gt;
&lt;li&gt;Refrigerator&lt;/li&gt;
&lt;li&gt;Computer(s)&lt;/li&gt;
&lt;li&gt;Other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The online tool [sankeymatic.comhttp://sankeymatic.com/build/) can build quite
nice Sankey diagrams with a simple interface.&lt;/p&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;A typical workday in Munich:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Study [9] Day
Sleep [8] Day
Commuting [0.4] Day
Breakfast/Dinner/Lunch [1.0] Day
Buying food [0.3] Day
Shower [0.3] Day
TV [0.3] Day
Communication [1] Day
Housekeeping [0.5] Day
Projects [2.5] Day
Day [9] Work
Day [8] Sleep
Day [1.8] Commuting
Day [1] Breakfast/Dinner
Day [0.5] Buying food
Day [0.3] Shower
Day [1] TV
Day [1] Communication
Day [0.5] Housekeeping
Day [0.9] Projects
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="A typical workday in Munich" src="../images/2018/01/typical-workday.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;A typical workday in Munich&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Day [9.5] Study
Study [6] Lectures
Study [1] Self-study
Study [1] Group-study
Study [1] Projects
Study [0.5] Communication
Day [7.5] Sleep
Day [0.4] Commuting
Day [1.0] Breakfast/Dinner/Lunch
Day [0.3] Buying food
Day [0.3] Shower
Day [0.5] TV
Day [1] Sports
Day [0.5] Communication
Day [0.5] Housekeeping
Day [2.5] Projects
&lt;/pre&gt;&lt;/div&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Typical workday in Karlsruhe (while studying)" src="../images/2018/01/typical-study-day.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Typical workday in Karlsruhe (while studying)&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="Data Analysis"></category><category term="Data Visualization"></category></entry><entry><title>Gradient Boosting</title><link href="https://martin-thoma.com/gradient-boosting/" rel="alternate"></link><published>2017-12-29T20:00:00+01:00</published><updated>2017-12-29T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-12-29:/gradient-boosting/</id><summary type="html">&lt;p&gt;Boosting is an ensemble learning technique. Gradient Boosting is a technique
for regressors.&lt;/p&gt;
&lt;p&gt;See the following video "Ensembles (3): Gradient Boosting" by Prof. Alexander
Ihler of the University of California for more information:&lt;/p&gt;
&lt;iframe allow="encrypted-media" allowfullscreen="" frameborder="0" gesture="media" height="315" src="https://www.youtube-nocookie.com/embed/sRktKszFmSk" width="560"&gt;&lt;/iframe&gt;</summary><content type="html">&lt;p&gt;Boosting is an ensemble learning technique. Gradient Boosting is a technique
for regressors.&lt;/p&gt;
&lt;p&gt;See the following video "Ensembles (3): Gradient Boosting" by Prof. Alexander
Ihler of the University of California for more information:&lt;/p&gt;
&lt;iframe allow="encrypted-media" allowfullscreen="" frameborder="0" gesture="media" height="315" src="https://www.youtube-nocookie.com/embed/sRktKszFmSk" width="560"&gt;&lt;/iframe&gt;</content><category term="Machine Learning"></category></entry><entry><title>ML Showcases</title><link href="https://martin-thoma.com/ml-showcases/" rel="alternate"></link><published>2017-12-23T20:00:00+01:00</published><updated>2017-12-23T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-12-23:/ml-showcases/</id><summary type="html">&lt;p&gt;There are many awesome examples out there where you can get a very direct
feeling for what Machine Learning is. I'll collect a couple of them here.&lt;/p&gt;
&lt;h2 id="image-input-data"&gt;Image Input Data&lt;/h2&gt;
&lt;h3 id="math-symbol-recognition"&gt;Math Symbol Recognition&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://write-math.com/"&gt;write-math.com&lt;/a&gt;
web service allows you to recognize mathematical symbols automatically. It is
described in &lt;a href="https://arxiv.org/abs/1511.09030"&gt;my â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many awesome examples out there where you can get a very direct
feeling for what Machine Learning is. I'll collect a couple of them here.&lt;/p&gt;
&lt;h2 id="image-input-data"&gt;Image Input Data&lt;/h2&gt;
&lt;h3 id="math-symbol-recognition"&gt;Math Symbol Recognition&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://write-math.com/"&gt;write-math.com&lt;/a&gt;
web service allows you to recognize mathematical symbols automatically. It is
described in &lt;a href="https://arxiv.org/abs/1511.09030"&gt;my bachelors thesis&lt;/a&gt;.
The &lt;a href="http://www.martin-thoma.de/write-math/data/#thoma2014"&gt;HWRT data is available&lt;/a&gt;,
also in its rendered form as &lt;a href="https://arxiv.org/abs/1701.08380"&gt;HASYv2 dataset&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="http://write-math.com/"&gt;&lt;img alt="write-math.com" src="../images/2017/12/write-math.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;write-math.com&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="drawings"&gt;Drawings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://quickdraw.withgoogle.com"&gt;Quickdraw&lt;/a&gt; lets you recognize
drawings. They built a &lt;a href="https://quickdraw.withgoogle.com/data"&gt;database of 50 million drawings&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://quickdraw.withgoogle.com"&gt;&lt;img alt="Quickdraw" src="../images/2017/12/quickdraw.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Quickdraw&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using this kind of data, you can create an application which recognizes what
was drawn and improves the drawing. &lt;a href="https://www.autodraw.com/"&gt;autodraw.com&lt;/a&gt;
does so:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="autodraw.com: I wanted to draw a mouse (the animal)" src="../images/2017/12/autodraw.com" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;autodraw.com: I wanted to draw a mouse (the animal)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="deep-dream"&gt;Deep Dream&lt;/h3&gt;
&lt;p&gt;Deep Dream is a technique which needs a few more words to explain. You can read
my paper &lt;a href="https://arxiv.org/abs/1601.03642"&gt;Creativity in Machine Learning&lt;/a&gt; if
you are interested in a very high level overview. If you just want to play with
it, have a look at &lt;a href="https://deepdreamgenerator.com"&gt;deepdreamgenerator.com&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://commons.wikimedia.org/wiki/File:Aurelia-aurita-3-0099.jpg"&gt;&lt;img alt="Deep Dream of a Moon jelly" src="../images/2017/12/Aurelia-aurita-3-0099.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Deep Dream of a &lt;a href="https://commons.wikimedia.org/wiki/File:Aurelia-aurita-3.jpg"&gt;Moon jelly&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="style-transfer"&gt;Style Transfer&lt;/h3&gt;
&lt;p&gt;You have two images: A style image (e.g. by a painter) and a source image. You
want the source image to be in the style of the style image:&lt;/p&gt;
&lt;p&gt;Source image:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Original image of a highland cattle" src="../images/2017/12/Highland-cattle-1.jpg" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Original image of a highland cattle&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Style image:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Style image" src="../images/2017/12/starry-night.jpg" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Style image: &lt;a href="https://commons.wikimedia.org/wiki/File:Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg"&gt;Van Gogh - Starry Night&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Output image:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://commons.wikimedia.org/wiki/File:Scottish-highland-cattle-1-style.jpg"&gt;&lt;img alt="Applied style transfer" src="../images/2017/12/Scottish-highland-cattle-1-style.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Applied style transfer&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href="https://deepart.io"&gt;https://deepart.io&lt;/a&gt; seems to be a web service
for this kind of machine learning. I didn't try it, though.&lt;/p&gt;
&lt;h3 id="super-resolution"&gt;Super-Resolution&lt;/h3&gt;
&lt;p&gt;You have a small image and want the same image, but with higher resultion?
Search for "super resolution":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigjpg.com"&gt;bigjpg.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://waifu2x.udp.jp"&gt;waifu2x.udp.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="text-input-data_1"&gt;Text Input Data&lt;/h2&gt;
&lt;h3 id="translation"&gt;Translation&lt;/h3&gt;
&lt;p&gt;&lt;a href="deepl.com/translate"&gt;DeepL.com&lt;/a&gt; is much better than &lt;a href="translate.google.com"&gt;https://translate.google.com&lt;/a&gt;,
but also more restricted. As always, you can find some... interesting... translations:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2017/12/deepl.png"&gt;&lt;img alt="DeepL Fail" src="../images/2017/12/deepl.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;DeepL Fail&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="sentiment-analysis"&gt;Sentiment Analysis&lt;/h3&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="http://nlp.stanford.edu:8080/sentiment/rntnDemo.html"&gt;&lt;img alt="Stanford NLP: Sentiment analysis" src="../images/2017/12/stanford-nlp.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Stanford NLP: Sentiment analysis&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="text-to-speech-tts"&gt;Text To Speech (TTS)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lyrebird.ai/demo/"&gt;Lyrebird.ai&lt;/a&gt; has the most impressive TTS
system I have seen so far (although Googles &lt;a href="https://google.github.io/tacotron/publications/tacotron2/index.html"&gt;Tacotron 2 audio samples&lt;/a&gt; are impressive as well).&lt;/p&gt;
&lt;h2 id="other-ml_1"&gt;Other ML&lt;/h2&gt;
&lt;h3 id="clustering"&gt;Clustering&lt;/h3&gt;
&lt;p&gt;Besides my small &lt;a href="https://martin-thoma.com/k-nearest-neighbor-classification-interactive-example/"&gt;k-means clustering example&lt;/a&gt;, there is &lt;a href="http://projector.tensorflow.org/"&gt;Tensorflow Projector&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2d-embeddings"&gt;2D Embeddings&lt;/h3&gt;
&lt;p&gt;Mapping datapoints in 2D makes it easier to find what you are looking for.
Have a look at &lt;a href="http://fontmap.ideo.com/"&gt;fontmap&lt;/a&gt;:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Fontmap: Organizing fonts in 2D map" src="../images/2017/12/fontmap.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Fontmap: Organizing fonts in 2D map&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="classifiers"&gt;Classifiers&lt;/h3&gt;
&lt;p&gt;Karpathy made a couple of interactive examples which show the decision boundaries
of classifiers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cs.stanford.edu/~karpathy/svmjs/demo/demoforest.html"&gt;Random Forest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs.stanford.edu/people/karpathy/svmjs/demo/"&gt;SVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs.stanford.edu/people/karpathy/convnetjs/demo/classify2d.html"&gt;CNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org/#activation=tanh&amp;amp;batchSize=10&amp;amp;dataset=circle&amp;amp;regDataset=reg-plane&amp;amp;learningRate=0.03&amp;amp;regularizationRate=0&amp;amp;noise=0&amp;amp;networkShape=4,2&amp;amp;seed=0.98949&amp;amp;showTestData=false&amp;amp;discretize=false&amp;amp;percTrainData=50&amp;amp;x=true&amp;amp;y=true&amp;amp;xTimesY=false&amp;amp;xSquared=false&amp;amp;ySquared=false&amp;amp;cosX=false&amp;amp;sinX=false&amp;amp;cosY=false&amp;amp;sinY=false&amp;amp;collectStats=false&amp;amp;problem=classification&amp;amp;initZero=false&amp;amp;hideText=false"&gt;Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="http://playground.tensorflow.org/#activation=tanh&amp;amp;batchSize=10&amp;amp;dataset=circle&amp;reg;Dataset=reg-plane&amp;amp;learningRate=0.03&amp;reg;ularizationRate=0&amp;amp;noise=0&amp;amp;networkShape=4,4,2&amp;amp;seed=0.60657&amp;amp;showTestData=false&amp;amp;discretize=false&amp;amp;percTrainData=50&amp;amp;x=true&amp;amp;y=true&amp;amp;xTimesY=false&amp;amp;xSquared=false&amp;amp;ySquared=false&amp;amp;cosX=false&amp;amp;sinX=false&amp;amp;cosY=false&amp;amp;sinY=false&amp;amp;collectStats=false&amp;amp;problem=classification&amp;amp;initZero=false&amp;amp;hideText=false"&gt;&lt;img alt="Tensorflow Playground: See how neural networks learn" src="../images/2017/12/playground-tensorflow.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Tensorflow Playground: See how neural networks learn&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="honorable-mentions_1"&gt;Honorable Mentions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://howhot.io"&gt;howhot.io&lt;/a&gt; was a service which lets you upload an image with a face and rate how hot the person is. It is no longer available.&lt;/li&gt;
&lt;li&gt;Microsoft Chatbot Tay went racist (&lt;a href="https://www.theguardian.com/technology/2016/mar/30/microsoft-racist-sexist-chatbot-twitter-drugs"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.r2d3.us/visual-intro-to-machine-learning-part-1/"&gt;A visual introduction to machine learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Martin Thoma, 2016: &lt;a href="https://arxiv.org/abs/1601.03642"&gt;Creativity in Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex Rogozhnikov, 2016: &lt;a href="https://arogozhnikov.github.io/2016/06/24/gradient_boosting_explained.html"&gt;Gradient Boosting explained &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex Rogozhnikov, 2016: &lt;a href="https://arogozhnikov.github.io/2016/12/19/markov_chain_monte_carlo.html"&gt;Hamiltonian Monte Carlo explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs.stanford.edu/people/karpathy/reinforcejs/gridworld_dp.html"&gt;GridWorld: Dynamic Programming Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wattenberg et al, 2016: &lt;a href="https://distill.pub/2016/misread-tsne/"&gt;How to Use t-SNE Effectively&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Demo"></category></entry><entry><title>Reproducibility in Machine Learning</title><link href="https://martin-thoma.com/ml-reproducibility/" rel="alternate"></link><published>2017-12-13T20:00:00+01:00</published><updated>2017-12-13T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-12-13:/ml-reproducibility/</id><summary type="html">&lt;p&gt;Getting reproducible results is important because of trust: Why should somebody
else trust you, if you can get the same results repeatedly? Why do you trust
your results in the first place? People make errors. Making sure you can repeat
what you did before eliminates possibilities for human error.&lt;/p&gt;
&lt;p&gt;Here â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Getting reproducible results is important because of trust: Why should somebody
else trust you, if you can get the same results repeatedly? Why do you trust
your results in the first place? People make errors. Making sure you can repeat
what you did before eliminates possibilities for human error.&lt;/p&gt;
&lt;p&gt;Here are possible reasons why the results of machine learning projects are not
always the same. They are roughly ordered from most likely/easiest to fix to
most unlikely/hardest to fix. I also try to give a solution after the problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Human error&lt;/strong&gt; - you missread a number / made a typo when you copied a result from one shell to the paper: Logging. Create an &lt;code&gt;2017-12-31-23-54-experiment-result.log&lt;/code&gt; for every single experiment you run. Not manually,
 but the experiment creates it. Yes, the time stamp in the name for easier finding it again. All following should be logged to that file for each single experiment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt; changed: Version control (e.g. git)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configuration file&lt;/strong&gt; changed: Version control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pseudorandom number&lt;/strong&gt; changed: set seed for random / tensorflow / numpy (yes, you might have to set more than one seed)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data loading&lt;/strong&gt; differently / in a different order: Version control + seed (is the preprocessing really the same?)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment variables&lt;/strong&gt; changed: Docker&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software (version)&lt;/strong&gt; changed: Docker&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Driver (version)&lt;/strong&gt; changed: Logging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hardware&lt;/strong&gt; changed: Logging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;: The fact that &lt;a href="https://en.wikipedia.org/wiki/Associative_property#Nonassociativity_of_floating_point_calculation"&gt;floating point multiplication is not associative&lt;/a&gt; and different cores on a GPU might finish computations at different times&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hardware has errors&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In any case, running the "same" thing multiple times might help to get a gut
feeling for how different things are.&lt;/p&gt;
&lt;h2 id="writing-a-paper"&gt;Writing a paper&lt;/h2&gt;
&lt;p&gt;If you write a paper, I think the following would be the best practice for reproducibility:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a link to a &lt;strong&gt;repository&lt;/strong&gt; (e.g. git) where all code is&lt;/li&gt;
&lt;li&gt;The code has to be &lt;strong&gt;containerized&lt;/strong&gt; (e.g. Docker)&lt;/li&gt;
&lt;li&gt;If there is Python code and a &lt;code&gt;requirements.txt&lt;/code&gt; you have to give the &lt;strong&gt;exact software version&lt;/strong&gt;, not something like &lt;code&gt;tensorflow&amp;gt;=1.0.0&lt;/code&gt; but &lt;code&gt;tensorflow==1.2.3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the &lt;strong&gt;git hash&lt;/strong&gt; of the version you used for the experiments. It might be different hashes if you changed something in between.&lt;/li&gt;
&lt;li&gt;Always log information about &lt;strong&gt;drivers&lt;/strong&gt; (e.g. &lt;a href="https://stackoverflow.com/a/47781255/562769"&gt;like this for nVidia&lt;/a&gt;) and &lt;strong&gt;hardware&lt;/strong&gt;. Add this to the appendix of your paper. So in case of later changes one can at least check if there was a change which might cause numbers being different.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For logging the versions, you might want to use something like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="c1"&gt;# core modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_logstring&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get important environment information that might influence experiments.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    logstring : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;logstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/proc/cpuinfo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cpuinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cpuinfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"model name"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CPU: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/proc/driver/nvidia/version'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"GPU driver: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;logstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"VGA: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find_vga&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_vga&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;vga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"lspci | grep -i 'vga\|3d\|2d'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/bin/bash'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vga&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_logstring&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;which gives something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Intel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TM&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6700&lt;/span&gt;&lt;span class="n"&gt;HQ&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="mf"&gt;2.60&lt;/span&gt;&lt;span class="n"&gt;GHz&lt;/span&gt;
&lt;span class="n"&gt;GPU&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NVRM&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NVIDIA&lt;/span&gt; &lt;span class="n"&gt;UNIX&lt;/span&gt; &lt;span class="n"&gt;x86_64&lt;/span&gt; &lt;span class="n"&gt;Kernel&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;  &lt;span class="mf"&gt;384.90&lt;/span&gt;  &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="n"&gt;PDT&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;
&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mf"&gt;5.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;20160609&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt; &lt;span class="mf"&gt;5.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;ubuntu1&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mf"&gt;16.04&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;VGA&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;02.0&lt;/span&gt; &lt;span class="n"&gt;VGA&lt;/span&gt; &lt;span class="n"&gt;compatible&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Intel&lt;/span&gt; &lt;span class="n"&gt;Corporation&lt;/span&gt; &lt;span class="n"&gt;Skylake&lt;/span&gt; &lt;span class="n"&gt;Integrated&lt;/span&gt; &lt;span class="n"&gt;Graphics&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;00.0&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NVIDIA&lt;/span&gt; &lt;span class="n"&gt;Corporation&lt;/span&gt; &lt;span class="n"&gt;GM108M&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GeForce&lt;/span&gt; &lt;span class="mi"&gt;940&lt;/span&gt;&lt;span class="n"&gt;MX&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Machine Learning"></category><category term="Research"></category></entry><entry><title>DQN - Deep Q Networks</title><link href="https://martin-thoma.com/dqn/" rel="alternate"></link><published>2017-11-30T20:00:00+01:00</published><updated>2017-11-30T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-11-30:/dqn/</id><summary type="html">&lt;p&gt;This blog post is a collection of experiments, not for explaining. If you want
to understand how DQNs work, have a look at &lt;a href="https://keon.io/deep-q-learning/"&gt;keon.io/deep-q-learning&lt;/a&gt;.
Another one is &lt;a href="http://blog.ironhead.ninja/2016/09/08/openai-cartpole.html"&gt;DQN and OpenAI Cartpole&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/rl/dqn_agent.py"&gt;&lt;code&gt;dqn_agent.py&lt;/code&gt; on Github&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;Config File&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CartPole-v0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matthiasplappert/keras-rl"&gt;matthiasplappert â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This blog post is a collection of experiments, not for explaining. If you want
to understand how DQNs work, have a look at &lt;a href="https://keon.io/deep-q-learning/"&gt;keon.io/deep-q-learning&lt;/a&gt;.
Another one is &lt;a href="http://blog.ironhead.ninja/2016/09/08/openai-cartpole.html"&gt;DQN and OpenAI Cartpole&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/rl/dqn_agent.py"&gt;&lt;code&gt;dqn_agent.py&lt;/code&gt; on Github&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;Config File&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CartPole-v0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matthiasplappert/keras-rl"&gt;matthiasplappert/keras-rl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devsisters/DQN-tensorflow"&gt;devsisters/DQN-tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Reinforcement Learning"></category></entry><entry><title>Q-Learning</title><link href="https://martin-thoma.com/q-learning/" rel="alternate"></link><published>2017-11-26T20:00:00+01:00</published><updated>2017-11-26T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-11-26:/q-learning/</id><summary type="html">&lt;p&gt;Reinforcement Learning (RL) is about finding optimal actions automatically.
So you have an environment &lt;code&gt;env&lt;/code&gt; which has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env.reset() -&amp;gt; None&lt;/code&gt;: Start a new episode. This could be a new game in the
  case of chess.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env.step(action) -&amp;gt; observation, reward, is_done, additional_information&lt;/code&gt;:
  Make a step in the environment. The &lt;code&gt;is_done â€¦&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Reinforcement Learning (RL) is about finding optimal actions automatically.
So you have an environment &lt;code&gt;env&lt;/code&gt; which has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env.reset() -&amp;gt; None&lt;/code&gt;: Start a new episode. This could be a new game in the
  case of chess.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env.step(action) -&amp;gt; observation, reward, is_done, additional_information&lt;/code&gt;:
  Make a step in the environment. The &lt;code&gt;is_done&lt;/code&gt; says if the episode is over,
  e.g. if a game of chess is over. If it is over, then the environment needs
  a reset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and an &lt;code&gt;agent&lt;/code&gt; which has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;agent.reset() -&amp;gt; agent&lt;/code&gt;: Reset internal variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;agent.act(observation, no_exploration) -&amp;gt; action&lt;/code&gt;: Let the agent take an action.
  If you want to evaluate the agent, set &lt;code&gt;no_exploration&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;agent.remember(prev_state, action, reward, state, is_done) -&amp;gt; agent&lt;/code&gt;: Store
  what is necessary - here the learning happens.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;agent.save(path) -&amp;gt; agent&lt;/code&gt;: Serialize the agent to &lt;code&gt;path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;agent.load(path) -&amp;gt; agent&lt;/code&gt;: De-serialize the agent from &lt;code&gt;path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-idea-of-q-learning"&gt;The idea of Q-Learning&lt;/h2&gt;
&lt;p&gt;The following is a mixed introduction to RL / Q-Learning. You might want to
have a look at my &lt;a href="https://martin-thoma.com/reinforcement-learning/"&gt;Reinforcement Learning&lt;/a&gt;
post as well.&lt;/p&gt;
&lt;p&gt;If there is a limited set of observations &lt;span class="math"&gt;\(\mathcal{S}\)&lt;/span&gt; (states) and a limited
set of actions &lt;span class="math"&gt;\(\mathcal{A}\)&lt;/span&gt;, then you have &lt;span class="math"&gt;\(|\mathcal{S}| \cdot |\mathcal{A}|\)&lt;/span&gt;
possibilities to rate. For some of the observations you also receive a reward.
But rewards might be delayed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                      a0 --- s3, r=10
                    /
     a0-- s1, r= 10 - a1 --- s4, r= 0
    /
s0 -
    \a1 -- s2, r=-10 - a0 --- s5, r = 100
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows that you start in state &lt;code&gt;s0&lt;/code&gt; where you can execute actions &lt;code&gt;a0&lt;/code&gt; and
&lt;code&gt;a1&lt;/code&gt;. Action &lt;code&gt;a0&lt;/code&gt; lives you a reward of 10, action &lt;code&gt;a1&lt;/code&gt; a reward of &lt;code&gt;-10&lt;/code&gt;. So
if you take the action greedy, you would take &lt;code&gt;a0&lt;/code&gt; and end up in state &lt;code&gt;s1&lt;/code&gt;.
But if you look one step ahead, you can see that &lt;code&gt;s2&lt;/code&gt; ends up in state &lt;code&gt;s5&lt;/code&gt;
with a reward of 100 whereas &lt;code&gt;s1&lt;/code&gt; can only get a reward of 10 or 0.&lt;/p&gt;
&lt;p&gt;In many cases, one does not want a greedy action. And one does not want to rely
completely on very high rewards in the very far future. Direct rewards are
prefered, but if it is really high we wait a bit longer. This thought leads to
the &lt;strong&gt;value&lt;/strong&gt; of a state / action. The value of a state or a state/action pair
is its current reward plus its reward in future. As we want to prefer rewards
which come directly, we discount the future rewards with a factor &lt;span class="math"&gt;\(\gamma \in [0, 1]\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$V(s) = \max_{a \in \mathcal{A}} (R(s, a) + \gamma \sum_{s'} V(s'))$$&lt;/div&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(\max_{a \in \mathcal{A}}\)&lt;/span&gt; means we execute the optimal action all the
time.&lt;/p&gt;
&lt;p&gt;Most of the time, the environments are not deterministic. Then you need to take
the transition probability from getting from state &lt;span class="math"&gt;\(s\)&lt;/span&gt; into state &lt;span class="math"&gt;\(s'\)&lt;/span&gt; when
you execute action &lt;span class="math"&gt;\(a\)&lt;/span&gt; into account:&lt;/p&gt;
&lt;div class="math"&gt;$$V(s) = \max_{a \in \mathcal{A}} (R(s, a) + \gamma \sum_{s' \in \mathcal{S}} T(s, a, s') V(s'))$$&lt;/div&gt;
&lt;p&gt;Ok, awesome! But now comes the tricky part: We don't have the function &lt;span class="math"&gt;\(V\)&lt;/span&gt;.
If both, &lt;span class="math"&gt;\(\mathcal{S}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\mathcal{A}\)&lt;/span&gt; are finite, we can simply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize a table which has the columns (state, value of action 1, value of
  action 2, ..., value of action &lt;span class="math"&gt;\(n\)&lt;/span&gt;) and one row per state. You could
  initialize it to zero.&lt;/li&gt;
&lt;li&gt;Run the agent. Update the &lt;span class="math"&gt;\((state, action)\)&lt;/span&gt; cell with a weighted average of
  what was in the table + what was observed. The weighting factor is
  &lt;span class="math"&gt;\(\alpha \in (0, 1)\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;p&gt;You might want to read &lt;a href="https://martin-thoma.com/ml-best-practice/"&gt;Best practice for Machine Learning Projects&lt;/a&gt;
to understand why the following code was written as it is.&lt;/p&gt;
&lt;p&gt;The latest code can be found on &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/rl/q_table_agent.py"&gt;Github MartinThoma:algorithms/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model_name: 'qlearning'
problem:
  gamma: 0.99  # discounting factor
training:
  nb_epochs: 100000
  learning_rate: 0.7  # alpha
  print_score: 500  # each 500 episodes
  exploration:
    name: 'Boltzmann'
    clip: [-500, 500]
testing:
  nb_epochs: 10000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;"""Q-Table Reinforcement Learning agent."""&lt;/span&gt;

&lt;span class="c1"&gt;# core modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;280490&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_printoptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'float_kind'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"{:.2f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agent_cfg_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Load, train and evaluate a Reinforcment Learning agent.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    environment_name : str&lt;/span&gt;
&lt;span class="sd"&gt;    agent_cfg_file : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_cfg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent_cfg_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Set up environment and agent&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'env'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'serialize_path'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'artifacts/{}-{}.pickle'&lt;/span&gt;
                             &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'model_name'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;environment_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Average reward: {:5.3f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Trained epochs: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QTableAgent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Q-Table Agent.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agent_cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_observations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_actions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_obs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb_observations&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_act&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb_actions&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;nb_observations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_actions&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent_cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'training'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'learning_rate'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent_cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'problem'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'gamma'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# discount&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exploration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent_cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'training'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'exploration'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Reset the agent. Call this at the beginning of an episode."""&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;act&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_exploration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Decide which action to execute.&lt;/span&gt;

&lt;span class="sd"&gt;        Parameters&lt;/span&gt;
&lt;span class="sd"&gt;        ----------&lt;/span&gt;
&lt;span class="sd"&gt;        observation : int&lt;/span&gt;
&lt;span class="sd"&gt;        no_exploration : bool, optional (default: False)&lt;/span&gt;

&lt;span class="sd"&gt;        Returns&lt;/span&gt;
&lt;span class="sd"&gt;        -------&lt;/span&gt;
&lt;span class="sd"&gt;        action : int&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Reset before you run an episode."&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;observation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;no_exploration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exploration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'epsilon-greedy'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exploration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'epsilon'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_integers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_act&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exploration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Boltzmann'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;clip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exploration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'clip'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;q_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;observation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'float64'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;q_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q_values&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;exp_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q_values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp_values&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp_values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_act&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="bp"&gt;NotImplemented&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exploration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Store data in the Q-Table. Here, the learning happens.&lt;/span&gt;

&lt;span class="sd"&gt;        Parameters&lt;/span&gt;
&lt;span class="sd"&gt;        ----------&lt;/span&gt;
&lt;span class="sd"&gt;        prev_state : int&lt;/span&gt;
&lt;span class="sd"&gt;        action : int&lt;/span&gt;
&lt;span class="sd"&gt;        reward : float&lt;/span&gt;
&lt;span class="sd"&gt;        state : int&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prev_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:])&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prev_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Serialize an agent."""&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Q'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'epoch'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HIGHEST_PROTOCOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Load an agent."""&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Q'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'epoch'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create (and load) a QTableAgent.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    env : OpenAI environment&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTableAgent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'serialize_path'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'serialize_path'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;


&lt;span class="c1"&gt;# General training and testing code&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Train an agent in environment.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    env : OpenAI environment&lt;/span&gt;
&lt;span class="sd"&gt;    agent : object&lt;/span&gt;

&lt;span class="sd"&gt;    Return&lt;/span&gt;
&lt;span class="sd"&gt;    ------&lt;/span&gt;
&lt;span class="sd"&gt;    agent : object&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;cum_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'training'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'nb_epochs'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;observation_previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;is_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observation_previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;observation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cum_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observation_previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;observation_previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;observation&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'training'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'print_score'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'serialize_path'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Average score: {:&amp;gt;5.2f}"&lt;/span&gt;
                  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cum_reward&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'serialize_path'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Calculate average reward."""&lt;/span&gt;
    &lt;span class="n"&gt;cum_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'testing'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'nb_epochs'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;observation_previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;is_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observation_previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_exploration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;observation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cum_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
            &lt;span class="n"&gt;observation_previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;observation&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cum_reward&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'testing'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'nb_epochs'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# General code for loading ML configuration files&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_cfg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Load a YAML configuration file.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    yaml_filepath : str&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# Read YAML experiment definition file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_paths_absolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_paths_absolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make all values for keys ending with `_path` absolute to dir_.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    dir_ : str&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"_path"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; does not exist."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_paths_absolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get parser object."""&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"environment_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"OpenAI Gym environment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ENVIRONMENT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FrozenLake-v0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--agent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"agent_cfg_file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"AGENT_YAML"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Configuration file for the agent"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent_cfg_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;Config File&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FrozenLake-v0&lt;/td&gt;
&lt;td&gt;qlearning.yaml&lt;/td&gt;
&lt;td&gt;50s&lt;/td&gt;
&lt;td&gt;0.166&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FrozenLake-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;48s&lt;/td&gt;
&lt;td&gt;0.743&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FrozenLake-v0&lt;/td&gt;
&lt;td&gt;q-lr90.yaml&lt;/td&gt;
&lt;td&gt;48s&lt;/td&gt;
&lt;td&gt;0.156&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CliffWalking-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;128s&lt;/td&gt;
&lt;td&gt;-13.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FrozenLake8x8-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;179s&lt;/td&gt;
&lt;td&gt;0.569&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NChain-v0&lt;/td&gt;
&lt;td&gt;q-lr90.yaml&lt;/td&gt;
&lt;td&gt;4614s&lt;/td&gt;
&lt;td&gt;1760.048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OneRoundDeterministicReward-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;5s&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OneRoundNondeterministicReward-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;6s&lt;/td&gt;
&lt;td&gt;2.475&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Roulette-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;533s&lt;/td&gt;
&lt;td&gt;-2.764&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Taxi-v2&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;68s&lt;/td&gt;
&lt;td&gt;8.471&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TwoRoundDeterministicReward-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;10s&lt;/td&gt;
&lt;td&gt;3.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TwoRoundNondeterministicReward-v0&lt;/td&gt;
&lt;td&gt;q-lr10.yaml&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dennybritz/reinforcement-learning"&gt;dennybritz/reinforcement-learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tijsma, Drugan, Wiering: &lt;a href="http://www.ai.rug.nl/~mwiering/GROUP/ARTICLES/Exploration_QLearning.pdf"&gt;Comparing Exploration Strategies for Q-learning in Random Stochastic Mazes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine learning"></category><category term="RL"></category><category term="Reinforcement Learning"></category></entry><entry><title>Best practice for Machine Learning Projects</title><link href="https://martin-thoma.com/ml-best-practice/" rel="alternate"></link><published>2017-11-15T20:00:00+01:00</published><updated>2017-11-15T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-11-15:/ml-best-practice/</id><summary type="html">&lt;p&gt;I did a couple of machine learning projects so far and there are some patterns
in the projects which turned out to be good ideas. In this post, I would like
to share those patterns with you.&lt;/p&gt;
&lt;h2 id="know-your-problem"&gt;Know your problem&lt;/h2&gt;
&lt;p&gt;For me, a machine learning project really starts when you â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I did a couple of machine learning projects so far and there are some patterns
in the projects which turned out to be good ideas. In this post, I would like
to share those patterns with you.&lt;/p&gt;
&lt;h2 id="know-your-problem"&gt;Know your problem&lt;/h2&gt;
&lt;p&gt;For me, a machine learning project really starts when you have a well-defined
problem, data, and a metric in which you want to measure your models goodness.
Just like Tom Mitchell defined Machine Learning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A computer program is said to learn from experience E with respect to some
class of tasks T and performance measure P if its performance at tasks in T,
as measured by P, improves with experience E.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="eda"&gt;EDA&lt;/h2&gt;
&lt;p&gt;Exploratory Data Analysis should be the very first step. Know what your data
looks like. Which errors can be expected to be in the data? How is it
distributed?&lt;/p&gt;
&lt;p&gt;For CSV files, I wrote the &lt;a href="https://martin-thoma.com/eda/"&gt;Exploratory Data Analysis&lt;/a&gt;
article. Usually, this starts with having a look at examples and making some
graphs. EDA depends on what kind of data you have and which problem you want to
solve. I will not go into detail in this post.&lt;/p&gt;
&lt;h2 id="project-structure"&gt;Project structure&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
â”œâ”€â”€ artifacts
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ train : Logfiles, trained models
â”‚&amp;nbsp;&amp;nbsp; â””â”€â”€ test  : Logfiles
â”œâ”€â”€ datasets : Data loading scripts
â”œâ”€â”€ experiments : Configuration files
â”œâ”€â”€ models : Scripts defining how the model looks like
â”œâ”€â”€ optimizers : Scripts defining the optimizeres
â””â”€â”€ train : Script to run the training
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important part here is that you have an &lt;code&gt;experiments/&lt;/code&gt; folder which
contains configuration files. So your scripts should not contain any
hyperparameters. All hyperparameters, including the complete model, should be
set in the configuration.&lt;/p&gt;
&lt;h2 id="configuration-files"&gt;Configuration files&lt;/h2&gt;
&lt;p&gt;An example from my masters thesis is &lt;code&gt;cifar10_opt.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;script_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cifar10_keras&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;script_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;script_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;optimizers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adam_keras&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
  &lt;span class="n"&gt;initial_lr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0001&lt;/span&gt;
&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;script_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;train_keras&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
  &lt;span class="n"&gt;artifacts_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="sr"&gt;/cifar10_opt/&lt;/span&gt;
  &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
  &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
  &lt;span class="n"&gt;data_augmentation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;samplewise_center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;samplewise_std_normalization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;rotation_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;width_shift_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
    &lt;span class="n"&gt;height_shift_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
    &lt;span class="n"&gt;horizontal_flip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;vertical_flip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;zoom_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;shear_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;channel_shift_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;featurewise_center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;zca_whitening&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;evaluate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
  &lt;span class="n"&gt;augmentation_factor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
  &lt;span class="n"&gt;data_augmentation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;samplewise_center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;samplewise_std_normalization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;rotation_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;width_shift_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15&lt;/span&gt;
    &lt;span class="n"&gt;height_shift_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.15&lt;/span&gt;
    &lt;span class="n"&gt;horizontal_flip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;vertical_flip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;zoom_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;shear_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;channel_shift_range&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;featurewise_center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;zca_whitening&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I load it like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;"""Run an experiment."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Example."""&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_cfg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Print the configuration - just to make sure that you loaded what you&lt;/span&gt;
    &lt;span class="c1"&gt;# wanted to load&lt;/span&gt;
    &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrettyPrinter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Here is an example how you load modules of which you put the path in the&lt;/span&gt;
    &lt;span class="c1"&gt;# configuration. Use this for configuring the model you use, for dataset&lt;/span&gt;
    &lt;span class="c1"&gt;# loading, ...&lt;/span&gt;
    &lt;span class="n"&gt;dpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'dataset'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'script_path'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'dataset'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'script_path'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_cfg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Load a YAML configuration file.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    yaml_filepath : str&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# Read YAML experiment definition file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_paths_absolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_filepath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_paths_absolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make all values for keys ending with `_path` absolute to dir_.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    dir_ : str&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    cfg : dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"_path"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; does not exist."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_paths_absolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get parser object."""&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"filename"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"experiment definition file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FILE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="starting-small"&gt;Starting small&lt;/h2&gt;
&lt;p&gt;Most machine learning tasks have a lot of computation. I'm speaking of many
hours for the "real" task you want to solve. You will not be able to do so
directly. You will make bugs. Maybe simple typos, maybe logical bugs, ...&lt;/p&gt;
&lt;p&gt;Create a small toy example where you know how the output should look like. Just
to reduce the number of hours you waste by waiting for the script to finish /
break.&lt;/p&gt;
&lt;h2 id="logging-to-files"&gt;Logging to files&lt;/h2&gt;
&lt;p&gt;Even if your script is working, you can make other mistakes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You close the terminal accidentially.&lt;/li&gt;
&lt;li&gt;Your computer freezes.&lt;/li&gt;
&lt;li&gt;Your you is cancelled from the cluster by the admin, just a couple of minutes
  before it would finish.&lt;/li&gt;
&lt;li&gt;Your model at some point diverges.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this reason, you should make sure that you log results to a file when you
have really long running scripts. Store those files in the &lt;code&gt;artifacts/&lt;/code&gt;
directory.&lt;/p&gt;
&lt;h2 id="create-a-trivial-solution"&gt;Create a Trivial Solution&lt;/h2&gt;
&lt;p&gt;Most machine learning projects have trivial, simple and advanced solutions. For
example, instead of having a machine learning based approach you can usually
craft algorithms the traditional way. You should know how well those trivial
solutions are, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Baseline&lt;/strong&gt;: They give you a baseline. A score with which you start and from
  which you can evaluate if your more complex approaches are worth it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Little effort&lt;/strong&gt;: They are usually comparatively fast to implement. If you
  see that the trivial solution is already very good, you might be able to stop
  faster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robustness&lt;/strong&gt;: They are robust against error in the data. The trivial ones
  because they don't use the data, the simple ones because they are usually to
  restricted to overfit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Problem&lt;/th&gt;
&lt;th&gt;Trivial&lt;/th&gt;
&lt;th&gt;Simple&lt;/th&gt;
&lt;th&gt;Advanced&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Classification&lt;/td&gt;
&lt;td&gt;Rules, Predict the most common class&lt;/td&gt;
&lt;td&gt;Decision Tree&lt;/td&gt;
&lt;td&gt;Neural Networks, SVMs, Gradient Boosting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regression&lt;/td&gt;
&lt;td&gt;Rules, Predict the average&lt;/td&gt;
&lt;td&gt;Linear Regression&lt;/td&gt;
&lt;td&gt;Neural Networks, Gaussian Mixture Models, ...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clustering&lt;/td&gt;
&lt;td&gt;Rules&lt;/td&gt;
&lt;td&gt;k-Means&lt;/td&gt;
&lt;td&gt;DBSCAN, OPTICS, SOMs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recommendations&lt;/td&gt;
&lt;td&gt;Rules&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;RBMs, ...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="Reinforcement Learning"&gt;RL&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;Rules&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DQN, DDQN, ... (see &lt;a href="https://martin-thoma.com/rl-agents/"&gt;post&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="evaluation"&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Make sure that you have as few scoring numbers as possible. Sequences / example
output is not so easy to compare. You should be able to tell if you improved.
Ideally, it would be a single normalized score which also has a meaning and
a pre-defined threshold, e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accuracy: Is in [0, 1] and you can probably say in advance how high you have
  to get to be useful / when you can consider improvements marginal.&lt;/li&gt;
&lt;li&gt;Precision, Recall, &lt;abbr title="Mean Squared Error"&gt;MSE&lt;/abbr&gt;&lt;/li&gt;
&lt;li&gt;Cross-Entropy&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="make-it-reproducible"&gt;Make it reproducible&lt;/h2&gt;
&lt;p&gt;Set seeds for all random number generators. And log on which hardware / with
which software version you executed your stuff.&lt;/p&gt;
&lt;p&gt;The reason for this is simply that you can proof you actually got the results
you have. Or at least point to a reason why you can't get the results again.&lt;/p&gt;</content><category term="Machine Learning"></category></entry><entry><title>RL Agents</title><link href="https://martin-thoma.com/rl-agents/" rel="alternate"></link><published>2017-11-07T20:00:00+01:00</published><updated>2017-11-07T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-11-07:/rl-agents/</id><summary type="html">&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Observation Space&lt;/th&gt;
&lt;th&gt;Action Space&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="State-Action-Reward-State-Action"&gt;SARSA&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;discrete&lt;/td&gt;
&lt;td&gt;&lt;a href="http://incompleteideas.net/sutton/book/the-book-2nd.html"&gt;&lt;abbr title="Reinforcement learning: An introduction"&gt;Sutton and Barto, 2011&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="https://martin-thoma.com/probabilistische-planung/#sarsa"&gt;Blog Post&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="Deep Q-Networks"&gt;DQN&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;discrete&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1312.5602"&gt;&lt;abbr title="Playing Atari with Deep Reinforcement Learning"&gt;[MKSG+13]&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="http://www.nature.com/nature/journal/v518/n7540/abs/nature14236.html"&gt;&lt;abbr title="Human-level control through deep reinforcement learning"&gt;[MKSR+15]&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1509.06461"&gt;&lt;abbr title="Deep Reinforcement Learning with Double Q-learning"&gt;[HGS15]&lt;/abbr&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="Cross-Entropy Method"&gt;CEM&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;discrete&lt;/td&gt;
&lt;td&gt;&lt;abbr title="Learning Tetris Using the Noisy Cross-Entropy Method"&gt;&lt;a href="http://www.mitpressjournals.org/doi/abs/10.1162/neco.2006.18.12.2936?journalCode=neco&amp;amp;"&gt;Szita et al., 2006&lt;/a&gt;&lt;/abbr&gt;, &lt;abbr title="Deep Reinforcement Learning (MLSS lecture notes)"&gt;Schulman, 2016&lt;/abbr&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="deep deterministic policy gradient"&gt;DDPG&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;continuous&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1509.02971"&gt;&lt;abbr title="Continuous control with deep reinforcement learning"&gt;[LHPH+15]&lt;/abbr&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="normalized adantage functions"&gt;NAF&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;continuous â€¦&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Observation Space&lt;/th&gt;
&lt;th&gt;Action Space&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="State-Action-Reward-State-Action"&gt;SARSA&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;discrete&lt;/td&gt;
&lt;td&gt;&lt;a href="http://incompleteideas.net/sutton/book/the-book-2nd.html"&gt;&lt;abbr title="Reinforcement learning: An introduction"&gt;Sutton and Barto, 2011&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="https://martin-thoma.com/probabilistische-planung/#sarsa"&gt;Blog Post&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="Deep Q-Networks"&gt;DQN&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;discrete&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1312.5602"&gt;&lt;abbr title="Playing Atari with Deep Reinforcement Learning"&gt;[MKSG+13]&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="http://www.nature.com/nature/journal/v518/n7540/abs/nature14236.html"&gt;&lt;abbr title="Human-level control through deep reinforcement learning"&gt;[MKSR+15]&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1509.06461"&gt;&lt;abbr title="Deep Reinforcement Learning with Double Q-learning"&gt;[HGS15]&lt;/abbr&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="Cross-Entropy Method"&gt;CEM&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;discrete&lt;/td&gt;
&lt;td&gt;&lt;abbr title="Learning Tetris Using the Noisy Cross-Entropy Method"&gt;&lt;a href="http://www.mitpressjournals.org/doi/abs/10.1162/neco.2006.18.12.2936?journalCode=neco&amp;amp;"&gt;Szita et al., 2006&lt;/a&gt;&lt;/abbr&gt;, &lt;abbr title="Deep Reinforcement Learning (MLSS lecture notes)"&gt;Schulman, 2016&lt;/abbr&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="deep deterministic policy gradient"&gt;DDPG&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;continuous&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1509.02971"&gt;&lt;abbr title="Continuous control with deep reinforcement learning"&gt;[LHPH+15]&lt;/abbr&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;abbr title="normalized adantage functions"&gt;NAF&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;discrete or continuous&lt;/td&gt;
&lt;td&gt;continuous&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1603.00748"&gt;&lt;abbr title="Continuous Deep Q-Learning with Model-based Acceleration"&gt;[GLSL16]&lt;/abbr&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="twitter-style-explanations"&gt;Twitter-Style Explanations&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;DQN&lt;/dt&gt;
&lt;dd&gt;Like Q-Learning, but represent the current q-function by a neural
        network as function approximator.&lt;/dd&gt;
&lt;dt&gt;SARSA&lt;/dt&gt;
&lt;dd&gt;Initialize the Q-Function $Q: \mathcal{X} \times \mathcal{A} \rightarrow \mathbb{R}$ randomly, adjust it by time. See [Pseudocode](https://martin-thoma.com/probabilistische-planung/#sarsa)&lt;/dd&gt;
&lt;dt&gt;DDPG&lt;/dt&gt;
&lt;dd&gt;?&lt;/dd&gt;
&lt;dt&gt;NAF&lt;/dt&gt;
&lt;dd&gt;?&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="comparisons"&gt;Comparisons&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/rl/"&gt;Code is on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="cartpole-v0"&gt;CartPole-v0&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://gym.openai.com/envs/CartPole-v0/"&gt;&lt;code&gt;CartPole-v0&lt;/code&gt;&lt;/a&gt; environemnt has
2 actions: move the paddle to the right or to the left. A reward of +1 is given
is the pole is upright. The episode is finished when the pole is more than
15 degrees from vertical or moves more than 2.4 units from the center.&lt;/p&gt;
&lt;p&gt;CartPole-v0 defines "solving" as getting average reward of 195.0 over 100
consecutive trials.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Agent&lt;/th&gt;
&lt;th&gt;NN Parameters&lt;/th&gt;
&lt;th&gt;Configuration&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Test reward&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;steps=1000&lt;/td&gt;
&lt;td&gt;9s&lt;/td&gt;
&lt;td&gt;mean= 9.49, std= 0.79, min= 8.00, max=11.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;(default, steps=10000)&lt;/td&gt;
&lt;td&gt;39s&lt;/td&gt;
&lt;td&gt;mean=77.14, std=44.18, min=41.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;steps=100000&lt;/td&gt;
&lt;td&gt;284s&lt;/td&gt;
&lt;td&gt;mean=106.21, std=19.99, min=71.00, max=185.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;658&lt;/td&gt;
&lt;td&gt;bigger NN&lt;/td&gt;
&lt;td&gt;60s&lt;/td&gt;
&lt;td&gt;mean=42.61, std=36.36, min=10.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;658&lt;/td&gt;
&lt;td&gt;steps=10000, bigger NN&lt;/td&gt;
&lt;td&gt;60s&lt;/td&gt;
&lt;td&gt;mean=200.00, std= 0.00, min=200.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DQN&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(default)&lt;/td&gt;
&lt;td&gt;40s&lt;/td&gt;
&lt;td&gt;mean=42.61, std=36.36, min=10.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The bigger NN is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model = Sequential()
model.add(Flatten(input_shape=input_shape))
model.add(Dense(16))
model.add(Activation('relu'))
model.add(Dense(16))
model.add(Activation('relu'))
model.add(Dense(16))
model.add(Activation('relu'))
model.add(Dense(nb_actions))
model.add(Activation('softmax'))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so the bigger network is important. Also, 1000 training steps are not
enough, but 10000 are. Let's see if we can reduce the episode memory. The
episode memory is what is used for training.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Agent&lt;/th&gt;
&lt;th&gt;EpisodeParameterMemory&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Test reward&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;60s&lt;/td&gt;
&lt;td&gt;mean=200.00, std= 0.00, min=200.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;65s&lt;/td&gt;
&lt;td&gt;&amp;nbsp;mean=200.00, std= 0.00, min=200.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;450&lt;/td&gt;
&lt;td&gt;68s&lt;/td&gt;
&lt;td&gt;mean=200.00, std= 0.00, min=200.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;59s&lt;/td&gt;
&lt;td&gt;mean=200.00, std= 0.00, min=200.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;51s&lt;/td&gt;
&lt;td&gt;mean=103.73, std=37.07, min=55.00, max=200.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;38s&lt;/td&gt;
&lt;td&gt;mean=34.22, std= 6.75, min=17.00, max=52.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;56s&lt;/td&gt;
&lt;td&gt;mean=82.77, std=25.05, min=32.00, max=172.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="cartpole-v1"&gt;CartPole-v1&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Agent&lt;/th&gt;
&lt;th&gt;Config&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Test reward&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CEM&lt;/td&gt;
&lt;td&gt;(default)&lt;/td&gt;
&lt;td&gt;100s&lt;/td&gt;
&lt;td&gt;mean=461.70, std=66.26, min=264.00, max=500.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DQN&lt;/td&gt;
&lt;td&gt;(default)&lt;/td&gt;
&lt;td&gt;30s&lt;/td&gt;
&lt;td&gt;mean=10.62, std= 4.31, min= 8.00, max=30.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="all-environments"&gt;All environments&lt;/h3&gt;
&lt;p&gt;You can list all environments with&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Print OpenAI Gym Environment data."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;envs&lt;/span&gt;
&lt;span class="n"&gt;envids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;envs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;table class="table"&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envid&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;envids&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;envid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;observations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;observations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Error'&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Error'&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;tr&amp;gt;&amp;lt;td id="env-{i}"&amp;gt;{i}&amp;lt;/td&amp;gt;'&lt;/span&gt;
          &lt;span class="s1"&gt;'&amp;lt;td&amp;gt;&amp;lt;a href="https://gym.openai.com/envs/{envid}/" id="{envid}"&amp;gt;'&lt;/span&gt;
          &lt;span class="s1"&gt;'{envid}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;'&lt;/span&gt;
          &lt;span class="s1"&gt;'&amp;lt;td&amp;gt;{observations}&amp;lt;/td&amp;gt;'&lt;/span&gt;
          &lt;span class="s1"&gt;'&amp;lt;td&amp;gt;{actions}&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;envid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;envid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;observations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observations&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;/table&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;which gives&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;Observation Space&lt;/th&gt;
&lt;th&gt;Action Space&lt;/th&gt;
&lt;th&gt;Reward Range&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-1"&gt;1&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Acrobot-v1/" id="Acrobot-v1"&gt;Acrobot-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(6,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-2"&gt;2&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-ram-v0/" id="AirRaid-ram-v0"&gt;AirRaid-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-3"&gt;3&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-ram-v4/" id="AirRaid-ram-v4"&gt;AirRaid-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-4"&gt;4&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-ramDeterministic-v0/" id="AirRaid-ramDeterministic-v0"&gt;AirRaid-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-5"&gt;5&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-ramDeterministic-v4/" id="AirRaid-ramDeterministic-v4"&gt;AirRaid-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-6"&gt;6&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-ramNoFrameskip-v0/" id="AirRaid-ramNoFrameskip-v0"&gt;AirRaid-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-7"&gt;7&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-ramNoFrameskip-v4/" id="AirRaid-ramNoFrameskip-v4"&gt;AirRaid-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-8"&gt;8&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-v0/" id="AirRaid-v0"&gt;AirRaid-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-9"&gt;9&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaid-v4/" id="AirRaid-v4"&gt;AirRaid-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-10"&gt;10&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaidDeterministic-v0/" id="AirRaidDeterministic-v0"&gt;AirRaidDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-11"&gt;11&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaidDeterministic-v4/" id="AirRaidDeterministic-v4"&gt;AirRaidDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-12"&gt;12&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaidNoFrameskip-v0/" id="AirRaidNoFrameskip-v0"&gt;AirRaidNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-13"&gt;13&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AirRaidNoFrameskip-v4/" id="AirRaidNoFrameskip-v4"&gt;AirRaidNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-14"&gt;14&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-ram-v0/" id="Alien-ram-v0"&gt;Alien-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-15"&gt;15&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-ram-v4/" id="Alien-ram-v4"&gt;Alien-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-16"&gt;16&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-ramDeterministic-v0/" id="Alien-ramDeterministic-v0"&gt;Alien-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-17"&gt;17&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-ramDeterministic-v4/" id="Alien-ramDeterministic-v4"&gt;Alien-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-18"&gt;18&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-ramNoFrameskip-v0/" id="Alien-ramNoFrameskip-v0"&gt;Alien-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-19"&gt;19&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-ramNoFrameskip-v4/" id="Alien-ramNoFrameskip-v4"&gt;Alien-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-20"&gt;20&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-v0/" id="Alien-v0"&gt;Alien-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-21"&gt;21&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Alien-v4/" id="Alien-v4"&gt;Alien-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-22"&gt;22&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AlienDeterministic-v0/" id="AlienDeterministic-v0"&gt;AlienDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-23"&gt;23&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AlienDeterministic-v4/" id="AlienDeterministic-v4"&gt;AlienDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-24"&gt;24&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AlienNoFrameskip-v0/" id="AlienNoFrameskip-v0"&gt;AlienNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-25"&gt;25&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AlienNoFrameskip-v4/" id="AlienNoFrameskip-v4"&gt;AlienNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-26"&gt;26&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-ram-v0/" id="Amidar-ram-v0"&gt;Amidar-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-27"&gt;27&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-ram-v4/" id="Amidar-ram-v4"&gt;Amidar-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-28"&gt;28&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-ramDeterministic-v0/" id="Amidar-ramDeterministic-v0"&gt;Amidar-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-29"&gt;29&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-ramDeterministic-v4/" id="Amidar-ramDeterministic-v4"&gt;Amidar-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-30"&gt;30&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-ramNoFrameskip-v0/" id="Amidar-ramNoFrameskip-v0"&gt;Amidar-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-31"&gt;31&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-ramNoFrameskip-v4/" id="Amidar-ramNoFrameskip-v4"&gt;Amidar-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-32"&gt;32&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-v0/" id="Amidar-v0"&gt;Amidar-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-33"&gt;33&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Amidar-v4/" id="Amidar-v4"&gt;Amidar-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-34"&gt;34&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AmidarDeterministic-v0/" id="AmidarDeterministic-v0"&gt;AmidarDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-35"&gt;35&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AmidarDeterministic-v4/" id="AmidarDeterministic-v4"&gt;AmidarDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-36"&gt;36&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AmidarNoFrameskip-v0/" id="AmidarNoFrameskip-v0"&gt;AmidarNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-37"&gt;37&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AmidarNoFrameskip-v4/" id="AmidarNoFrameskip-v4"&gt;AmidarNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-38"&gt;38&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Ant-v1/" id="Ant-v1"&gt;Ant-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-39"&gt;39&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-ram-v0/" id="Assault-ram-v0"&gt;Assault-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-40"&gt;40&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-ram-v4/" id="Assault-ram-v4"&gt;Assault-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-41"&gt;41&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-ramDeterministic-v0/" id="Assault-ramDeterministic-v0"&gt;Assault-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-42"&gt;42&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-ramDeterministic-v4/" id="Assault-ramDeterministic-v4"&gt;Assault-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-43"&gt;43&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-ramNoFrameskip-v0/" id="Assault-ramNoFrameskip-v0"&gt;Assault-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-44"&gt;44&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-ramNoFrameskip-v4/" id="Assault-ramNoFrameskip-v4"&gt;Assault-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-45"&gt;45&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-v0/" id="Assault-v0"&gt;Assault-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-46"&gt;46&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Assault-v4/" id="Assault-v4"&gt;Assault-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-47"&gt;47&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AssaultDeterministic-v0/" id="AssaultDeterministic-v0"&gt;AssaultDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-48"&gt;48&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AssaultDeterministic-v4/" id="AssaultDeterministic-v4"&gt;AssaultDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-49"&gt;49&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AssaultNoFrameskip-v0/" id="AssaultNoFrameskip-v0"&gt;AssaultNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-50"&gt;50&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AssaultNoFrameskip-v4/" id="AssaultNoFrameskip-v4"&gt;AssaultNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(7)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-51"&gt;51&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-ram-v0/" id="Asterix-ram-v0"&gt;Asterix-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-52"&gt;52&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-ram-v4/" id="Asterix-ram-v4"&gt;Asterix-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-53"&gt;53&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-ramDeterministic-v0/" id="Asterix-ramDeterministic-v0"&gt;Asterix-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-54"&gt;54&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-ramDeterministic-v4/" id="Asterix-ramDeterministic-v4"&gt;Asterix-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-55"&gt;55&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-ramNoFrameskip-v0/" id="Asterix-ramNoFrameskip-v0"&gt;Asterix-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-56"&gt;56&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-ramNoFrameskip-v4/" id="Asterix-ramNoFrameskip-v4"&gt;Asterix-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-57"&gt;57&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-v0/" id="Asterix-v0"&gt;Asterix-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-58"&gt;58&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asterix-v4/" id="Asterix-v4"&gt;Asterix-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-59"&gt;59&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsterixDeterministic-v0/" id="AsterixDeterministic-v0"&gt;AsterixDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-60"&gt;60&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsterixDeterministic-v4/" id="AsterixDeterministic-v4"&gt;AsterixDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-61"&gt;61&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsterixNoFrameskip-v0/" id="AsterixNoFrameskip-v0"&gt;AsterixNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-62"&gt;62&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsterixNoFrameskip-v4/" id="AsterixNoFrameskip-v4"&gt;AsterixNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-63"&gt;63&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-ram-v0/" id="Asteroids-ram-v0"&gt;Asteroids-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-64"&gt;64&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-ram-v4/" id="Asteroids-ram-v4"&gt;Asteroids-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-65"&gt;65&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-ramDeterministic-v0/" id="Asteroids-ramDeterministic-v0"&gt;Asteroids-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-66"&gt;66&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-ramDeterministic-v4/" id="Asteroids-ramDeterministic-v4"&gt;Asteroids-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-67"&gt;67&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-ramNoFrameskip-v0/" id="Asteroids-ramNoFrameskip-v0"&gt;Asteroids-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-68"&gt;68&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-ramNoFrameskip-v4/" id="Asteroids-ramNoFrameskip-v4"&gt;Asteroids-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-69"&gt;69&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-v0/" id="Asteroids-v0"&gt;Asteroids-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-70"&gt;70&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Asteroids-v4/" id="Asteroids-v4"&gt;Asteroids-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-71"&gt;71&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsteroidsDeterministic-v0/" id="AsteroidsDeterministic-v0"&gt;AsteroidsDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-72"&gt;72&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsteroidsDeterministic-v4/" id="AsteroidsDeterministic-v4"&gt;AsteroidsDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-73"&gt;73&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsteroidsNoFrameskip-v0/" id="AsteroidsNoFrameskip-v0"&gt;AsteroidsNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-74"&gt;74&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AsteroidsNoFrameskip-v4/" id="AsteroidsNoFrameskip-v4"&gt;AsteroidsNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-75"&gt;75&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-ram-v0/" id="Atlantis-ram-v0"&gt;Atlantis-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-76"&gt;76&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-ram-v4/" id="Atlantis-ram-v4"&gt;Atlantis-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-77"&gt;77&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-ramDeterministic-v0/" id="Atlantis-ramDeterministic-v0"&gt;Atlantis-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-78"&gt;78&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-ramDeterministic-v4/" id="Atlantis-ramDeterministic-v4"&gt;Atlantis-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-79"&gt;79&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-ramNoFrameskip-v0/" id="Atlantis-ramNoFrameskip-v0"&gt;Atlantis-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-80"&gt;80&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-ramNoFrameskip-v4/" id="Atlantis-ramNoFrameskip-v4"&gt;Atlantis-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-81"&gt;81&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-v0/" id="Atlantis-v0"&gt;Atlantis-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-82"&gt;82&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Atlantis-v4/" id="Atlantis-v4"&gt;Atlantis-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-83"&gt;83&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AtlantisDeterministic-v0/" id="AtlantisDeterministic-v0"&gt;AtlantisDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-84"&gt;84&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AtlantisDeterministic-v4/" id="AtlantisDeterministic-v4"&gt;AtlantisDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-85"&gt;85&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AtlantisNoFrameskip-v0/" id="AtlantisNoFrameskip-v0"&gt;AtlantisNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-86"&gt;86&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/AtlantisNoFrameskip-v4/" id="AtlantisNoFrameskip-v4"&gt;AtlantisNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-87"&gt;87&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-ram-v0/" id="BankHeist-ram-v0"&gt;BankHeist-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-88"&gt;88&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-ram-v4/" id="BankHeist-ram-v4"&gt;BankHeist-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-89"&gt;89&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-ramDeterministic-v0/" id="BankHeist-ramDeterministic-v0"&gt;BankHeist-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-90"&gt;90&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-ramDeterministic-v4/" id="BankHeist-ramDeterministic-v4"&gt;BankHeist-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-91"&gt;91&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-ramNoFrameskip-v0/" id="BankHeist-ramNoFrameskip-v0"&gt;BankHeist-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-92"&gt;92&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-ramNoFrameskip-v4/" id="BankHeist-ramNoFrameskip-v4"&gt;BankHeist-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-93"&gt;93&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-v0/" id="BankHeist-v0"&gt;BankHeist-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-94"&gt;94&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeist-v4/" id="BankHeist-v4"&gt;BankHeist-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-95"&gt;95&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeistDeterministic-v0/" id="BankHeistDeterministic-v0"&gt;BankHeistDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-96"&gt;96&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeistDeterministic-v4/" id="BankHeistDeterministic-v4"&gt;BankHeistDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-97"&gt;97&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeistNoFrameskip-v0/" id="BankHeistNoFrameskip-v0"&gt;BankHeistNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-98"&gt;98&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BankHeistNoFrameskip-v4/" id="BankHeistNoFrameskip-v4"&gt;BankHeistNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-99"&gt;99&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-ram-v0/" id="BattleZone-ram-v0"&gt;BattleZone-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-100"&gt;100&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-ram-v4/" id="BattleZone-ram-v4"&gt;BattleZone-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-101"&gt;101&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-ramDeterministic-v0/" id="BattleZone-ramDeterministic-v0"&gt;BattleZone-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-102"&gt;102&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-ramDeterministic-v4/" id="BattleZone-ramDeterministic-v4"&gt;BattleZone-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-103"&gt;103&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-ramNoFrameskip-v0/" id="BattleZone-ramNoFrameskip-v0"&gt;BattleZone-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-104"&gt;104&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-ramNoFrameskip-v4/" id="BattleZone-ramNoFrameskip-v4"&gt;BattleZone-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-105"&gt;105&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-v0/" id="BattleZone-v0"&gt;BattleZone-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-106"&gt;106&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZone-v4/" id="BattleZone-v4"&gt;BattleZone-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-107"&gt;107&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZoneDeterministic-v0/" id="BattleZoneDeterministic-v0"&gt;BattleZoneDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-108"&gt;108&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZoneDeterministic-v4/" id="BattleZoneDeterministic-v4"&gt;BattleZoneDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-109"&gt;109&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZoneNoFrameskip-v0/" id="BattleZoneNoFrameskip-v0"&gt;BattleZoneNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-110"&gt;110&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BattleZoneNoFrameskip-v4/" id="BattleZoneNoFrameskip-v4"&gt;BattleZoneNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-111"&gt;111&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-ram-v0/" id="BeamRider-ram-v0"&gt;BeamRider-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-112"&gt;112&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-ram-v4/" id="BeamRider-ram-v4"&gt;BeamRider-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-113"&gt;113&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-ramDeterministic-v0/" id="BeamRider-ramDeterministic-v0"&gt;BeamRider-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-114"&gt;114&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-ramDeterministic-v4/" id="BeamRider-ramDeterministic-v4"&gt;BeamRider-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-115"&gt;115&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-ramNoFrameskip-v0/" id="BeamRider-ramNoFrameskip-v0"&gt;BeamRider-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-116"&gt;116&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-ramNoFrameskip-v4/" id="BeamRider-ramNoFrameskip-v4"&gt;BeamRider-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-117"&gt;117&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-v0/" id="BeamRider-v0"&gt;BeamRider-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-118"&gt;118&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRider-v4/" id="BeamRider-v4"&gt;BeamRider-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-119"&gt;119&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRiderDeterministic-v0/" id="BeamRiderDeterministic-v0"&gt;BeamRiderDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-120"&gt;120&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRiderDeterministic-v4/" id="BeamRiderDeterministic-v4"&gt;BeamRiderDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-121"&gt;121&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRiderNoFrameskip-v0/" id="BeamRiderNoFrameskip-v0"&gt;BeamRiderNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-122"&gt;122&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BeamRiderNoFrameskip-v4/" id="BeamRiderNoFrameskip-v4"&gt;BeamRiderNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-123"&gt;123&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-ram-v0/" id="Berzerk-ram-v0"&gt;Berzerk-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-124"&gt;124&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-ram-v4/" id="Berzerk-ram-v4"&gt;Berzerk-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-125"&gt;125&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-ramDeterministic-v0/" id="Berzerk-ramDeterministic-v0"&gt;Berzerk-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-126"&gt;126&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-ramDeterministic-v4/" id="Berzerk-ramDeterministic-v4"&gt;Berzerk-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-127"&gt;127&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-ramNoFrameskip-v0/" id="Berzerk-ramNoFrameskip-v0"&gt;Berzerk-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-128"&gt;128&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-ramNoFrameskip-v4/" id="Berzerk-ramNoFrameskip-v4"&gt;Berzerk-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-129"&gt;129&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-v0/" id="Berzerk-v0"&gt;Berzerk-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-130"&gt;130&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Berzerk-v4/" id="Berzerk-v4"&gt;Berzerk-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-131"&gt;131&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BerzerkDeterministic-v0/" id="BerzerkDeterministic-v0"&gt;BerzerkDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-132"&gt;132&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BerzerkDeterministic-v4/" id="BerzerkDeterministic-v4"&gt;BerzerkDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-133"&gt;133&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BerzerkNoFrameskip-v0/" id="BerzerkNoFrameskip-v0"&gt;BerzerkNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-134"&gt;134&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BerzerkNoFrameskip-v4/" id="BerzerkNoFrameskip-v4"&gt;BerzerkNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-135"&gt;135&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BipedalWalker-v2/" id="BipedalWalker-v2"&gt;BipedalWalker-v2&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-136"&gt;136&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BipedalWalkerHardcore-v2/" id="BipedalWalkerHardcore-v2"&gt;BipedalWalkerHardcore-v2&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-137"&gt;137&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Blackjack-v0/" id="Blackjack-v0"&gt;Blackjack-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Tuple(Discrete(32), Discrete(11), Discrete(2))&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-138"&gt;138&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-ram-v0/" id="Bowling-ram-v0"&gt;Bowling-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-139"&gt;139&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-ram-v4/" id="Bowling-ram-v4"&gt;Bowling-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-140"&gt;140&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-ramDeterministic-v0/" id="Bowling-ramDeterministic-v0"&gt;Bowling-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-141"&gt;141&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-ramDeterministic-v4/" id="Bowling-ramDeterministic-v4"&gt;Bowling-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-142"&gt;142&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-ramNoFrameskip-v0/" id="Bowling-ramNoFrameskip-v0"&gt;Bowling-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-143"&gt;143&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-ramNoFrameskip-v4/" id="Bowling-ramNoFrameskip-v4"&gt;Bowling-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-144"&gt;144&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-v0/" id="Bowling-v0"&gt;Bowling-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-145"&gt;145&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Bowling-v4/" id="Bowling-v4"&gt;Bowling-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-146"&gt;146&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BowlingDeterministic-v0/" id="BowlingDeterministic-v0"&gt;BowlingDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-147"&gt;147&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BowlingDeterministic-v4/" id="BowlingDeterministic-v4"&gt;BowlingDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-148"&gt;148&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BowlingNoFrameskip-v0/" id="BowlingNoFrameskip-v0"&gt;BowlingNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-149"&gt;149&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BowlingNoFrameskip-v4/" id="BowlingNoFrameskip-v4"&gt;BowlingNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-150"&gt;150&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-ram-v0/" id="Boxing-ram-v0"&gt;Boxing-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-151"&gt;151&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-ram-v4/" id="Boxing-ram-v4"&gt;Boxing-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-152"&gt;152&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-ramDeterministic-v0/" id="Boxing-ramDeterministic-v0"&gt;Boxing-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-153"&gt;153&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-ramDeterministic-v4/" id="Boxing-ramDeterministic-v4"&gt;Boxing-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-154"&gt;154&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-ramNoFrameskip-v0/" id="Boxing-ramNoFrameskip-v0"&gt;Boxing-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-155"&gt;155&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-ramNoFrameskip-v4/" id="Boxing-ramNoFrameskip-v4"&gt;Boxing-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-156"&gt;156&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-v0/" id="Boxing-v0"&gt;Boxing-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-157"&gt;157&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Boxing-v4/" id="Boxing-v4"&gt;Boxing-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-158"&gt;158&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BoxingDeterministic-v0/" id="BoxingDeterministic-v0"&gt;BoxingDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-159"&gt;159&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BoxingDeterministic-v4/" id="BoxingDeterministic-v4"&gt;BoxingDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-160"&gt;160&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BoxingNoFrameskip-v0/" id="BoxingNoFrameskip-v0"&gt;BoxingNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-161"&gt;161&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BoxingNoFrameskip-v4/" id="BoxingNoFrameskip-v4"&gt;BoxingNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-162"&gt;162&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-ram-v0/" id="Breakout-ram-v0"&gt;Breakout-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-163"&gt;163&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-ram-v4/" id="Breakout-ram-v4"&gt;Breakout-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-164"&gt;164&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-ramDeterministic-v0/" id="Breakout-ramDeterministic-v0"&gt;Breakout-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-165"&gt;165&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-ramDeterministic-v4/" id="Breakout-ramDeterministic-v4"&gt;Breakout-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-166"&gt;166&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-ramNoFrameskip-v0/" id="Breakout-ramNoFrameskip-v0"&gt;Breakout-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-167"&gt;167&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-ramNoFrameskip-v4/" id="Breakout-ramNoFrameskip-v4"&gt;Breakout-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-168"&gt;168&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-v0/" id="Breakout-v0"&gt;Breakout-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-169"&gt;169&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Breakout-v4/" id="Breakout-v4"&gt;Breakout-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-170"&gt;170&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BreakoutDeterministic-v0/" id="BreakoutDeterministic-v0"&gt;BreakoutDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-171"&gt;171&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BreakoutDeterministic-v4/" id="BreakoutDeterministic-v4"&gt;BreakoutDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-172"&gt;172&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BreakoutNoFrameskip-v0/" id="BreakoutNoFrameskip-v0"&gt;BreakoutNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-173"&gt;173&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/BreakoutNoFrameskip-v4/" id="BreakoutNoFrameskip-v4"&gt;BreakoutNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-174"&gt;174&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CNNClassifierTraining-v0/" id="CNNClassifierTraining-v0"&gt;CNNClassifierTraining-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-175"&gt;175&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CarRacing-v0/" id="CarRacing-v0"&gt;CarRacing-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-176"&gt;176&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-ram-v0/" id="Carnival-ram-v0"&gt;Carnival-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-177"&gt;177&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-ram-v4/" id="Carnival-ram-v4"&gt;Carnival-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-178"&gt;178&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-ramDeterministic-v0/" id="Carnival-ramDeterministic-v0"&gt;Carnival-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-179"&gt;179&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-ramDeterministic-v4/" id="Carnival-ramDeterministic-v4"&gt;Carnival-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-180"&gt;180&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-ramNoFrameskip-v0/" id="Carnival-ramNoFrameskip-v0"&gt;Carnival-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-181"&gt;181&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-ramNoFrameskip-v4/" id="Carnival-ramNoFrameskip-v4"&gt;Carnival-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-182"&gt;182&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-v0/" id="Carnival-v0"&gt;Carnival-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-183"&gt;183&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Carnival-v4/" id="Carnival-v4"&gt;Carnival-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-184"&gt;184&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CarnivalDeterministic-v0/" id="CarnivalDeterministic-v0"&gt;CarnivalDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-185"&gt;185&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CarnivalDeterministic-v4/" id="CarnivalDeterministic-v4"&gt;CarnivalDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-186"&gt;186&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CarnivalNoFrameskip-v0/" id="CarnivalNoFrameskip-v0"&gt;CarnivalNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-187"&gt;187&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CarnivalNoFrameskip-v4/" id="CarnivalNoFrameskip-v4"&gt;CarnivalNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-188"&gt;188&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CartPole-v0/" id="CartPole-v0"&gt;CartPole-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(4,)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-189"&gt;189&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CartPole-v1/" id="CartPole-v1"&gt;CartPole-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(4,)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-190"&gt;190&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-ram-v0/" id="Centipede-ram-v0"&gt;Centipede-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-191"&gt;191&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-ram-v4/" id="Centipede-ram-v4"&gt;Centipede-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-192"&gt;192&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-ramDeterministic-v0/" id="Centipede-ramDeterministic-v0"&gt;Centipede-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-193"&gt;193&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-ramDeterministic-v4/" id="Centipede-ramDeterministic-v4"&gt;Centipede-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-194"&gt;194&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-ramNoFrameskip-v0/" id="Centipede-ramNoFrameskip-v0"&gt;Centipede-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-195"&gt;195&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-ramNoFrameskip-v4/" id="Centipede-ramNoFrameskip-v4"&gt;Centipede-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-196"&gt;196&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-v0/" id="Centipede-v0"&gt;Centipede-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-197"&gt;197&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Centipede-v4/" id="Centipede-v4"&gt;Centipede-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-198"&gt;198&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CentipedeDeterministic-v0/" id="CentipedeDeterministic-v0"&gt;CentipedeDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-199"&gt;199&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CentipedeDeterministic-v4/" id="CentipedeDeterministic-v4"&gt;CentipedeDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-200"&gt;200&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CentipedeNoFrameskip-v0/" id="CentipedeNoFrameskip-v0"&gt;CentipedeNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-201"&gt;201&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CentipedeNoFrameskip-v4/" id="CentipedeNoFrameskip-v4"&gt;CentipedeNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-202"&gt;202&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-ram-v0/" id="ChopperCommand-ram-v0"&gt;ChopperCommand-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-203"&gt;203&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-ram-v4/" id="ChopperCommand-ram-v4"&gt;ChopperCommand-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-204"&gt;204&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-ramDeterministic-v0/" id="ChopperCommand-ramDeterministic-v0"&gt;ChopperCommand-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-205"&gt;205&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-ramDeterministic-v4/" id="ChopperCommand-ramDeterministic-v4"&gt;ChopperCommand-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-206"&gt;206&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-ramNoFrameskip-v0/" id="ChopperCommand-ramNoFrameskip-v0"&gt;ChopperCommand-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-207"&gt;207&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-ramNoFrameskip-v4/" id="ChopperCommand-ramNoFrameskip-v4"&gt;ChopperCommand-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-208"&gt;208&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-v0/" id="ChopperCommand-v0"&gt;ChopperCommand-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-209"&gt;209&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommand-v4/" id="ChopperCommand-v4"&gt;ChopperCommand-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-210"&gt;210&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommandDeterministic-v0/" id="ChopperCommandDeterministic-v0"&gt;ChopperCommandDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-211"&gt;211&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommandDeterministic-v4/" id="ChopperCommandDeterministic-v4"&gt;ChopperCommandDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-212"&gt;212&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommandNoFrameskip-v0/" id="ChopperCommandNoFrameskip-v0"&gt;ChopperCommandNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-213"&gt;213&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ChopperCommandNoFrameskip-v4/" id="ChopperCommandNoFrameskip-v4"&gt;ChopperCommandNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-214"&gt;214&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CliffWalking-v0/" id="CliffWalking-v0"&gt;CliffWalking-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(48)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-215"&gt;215&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ConvergenceControl-v0/" id="ConvergenceControl-v0"&gt;ConvergenceControl-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-216"&gt;216&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Copy-v0/" id="Copy-v0"&gt;Copy-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Discrete(2), Discrete(5))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-217"&gt;217&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-ram-v0/" id="CrazyClimber-ram-v0"&gt;CrazyClimber-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-218"&gt;218&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-ram-v4/" id="CrazyClimber-ram-v4"&gt;CrazyClimber-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-219"&gt;219&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-ramDeterministic-v0/" id="CrazyClimber-ramDeterministic-v0"&gt;CrazyClimber-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-220"&gt;220&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-ramDeterministic-v4/" id="CrazyClimber-ramDeterministic-v4"&gt;CrazyClimber-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-221"&gt;221&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-ramNoFrameskip-v0/" id="CrazyClimber-ramNoFrameskip-v0"&gt;CrazyClimber-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-222"&gt;222&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-ramNoFrameskip-v4/" id="CrazyClimber-ramNoFrameskip-v4"&gt;CrazyClimber-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-223"&gt;223&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-v0/" id="CrazyClimber-v0"&gt;CrazyClimber-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-224"&gt;224&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimber-v4/" id="CrazyClimber-v4"&gt;CrazyClimber-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-225"&gt;225&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimberDeterministic-v0/" id="CrazyClimberDeterministic-v0"&gt;CrazyClimberDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-226"&gt;226&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimberDeterministic-v4/" id="CrazyClimberDeterministic-v4"&gt;CrazyClimberDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-227"&gt;227&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimberNoFrameskip-v0/" id="CrazyClimberNoFrameskip-v0"&gt;CrazyClimberNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-228"&gt;228&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/CrazyClimberNoFrameskip-v4/" id="CrazyClimberNoFrameskip-v4"&gt;CrazyClimberNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-229"&gt;229&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-ram-v0/" id="DemonAttack-ram-v0"&gt;DemonAttack-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-230"&gt;230&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-ram-v4/" id="DemonAttack-ram-v4"&gt;DemonAttack-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-231"&gt;231&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-ramDeterministic-v0/" id="DemonAttack-ramDeterministic-v0"&gt;DemonAttack-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-232"&gt;232&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-ramDeterministic-v4/" id="DemonAttack-ramDeterministic-v4"&gt;DemonAttack-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-233"&gt;233&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-ramNoFrameskip-v0/" id="DemonAttack-ramNoFrameskip-v0"&gt;DemonAttack-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-234"&gt;234&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-ramNoFrameskip-v4/" id="DemonAttack-ramNoFrameskip-v4"&gt;DemonAttack-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-235"&gt;235&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-v0/" id="DemonAttack-v0"&gt;DemonAttack-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-236"&gt;236&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttack-v4/" id="DemonAttack-v4"&gt;DemonAttack-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-237"&gt;237&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttackDeterministic-v0/" id="DemonAttackDeterministic-v0"&gt;DemonAttackDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-238"&gt;238&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttackDeterministic-v4/" id="DemonAttackDeterministic-v4"&gt;DemonAttackDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-239"&gt;239&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttackNoFrameskip-v0/" id="DemonAttackNoFrameskip-v0"&gt;DemonAttackNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-240"&gt;240&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DemonAttackNoFrameskip-v4/" id="DemonAttackNoFrameskip-v4"&gt;DemonAttackNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-241"&gt;241&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-ram-v0/" id="DoubleDunk-ram-v0"&gt;DoubleDunk-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-242"&gt;242&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-ram-v4/" id="DoubleDunk-ram-v4"&gt;DoubleDunk-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-243"&gt;243&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-ramDeterministic-v0/" id="DoubleDunk-ramDeterministic-v0"&gt;DoubleDunk-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-244"&gt;244&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-ramDeterministic-v4/" id="DoubleDunk-ramDeterministic-v4"&gt;DoubleDunk-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-245"&gt;245&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-ramNoFrameskip-v0/" id="DoubleDunk-ramNoFrameskip-v0"&gt;DoubleDunk-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-246"&gt;246&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-ramNoFrameskip-v4/" id="DoubleDunk-ramNoFrameskip-v4"&gt;DoubleDunk-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-247"&gt;247&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-v0/" id="DoubleDunk-v0"&gt;DoubleDunk-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-248"&gt;248&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunk-v4/" id="DoubleDunk-v4"&gt;DoubleDunk-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-249"&gt;249&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunkDeterministic-v0/" id="DoubleDunkDeterministic-v0"&gt;DoubleDunkDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-250"&gt;250&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunkDeterministic-v4/" id="DoubleDunkDeterministic-v4"&gt;DoubleDunkDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-251"&gt;251&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunkNoFrameskip-v0/" id="DoubleDunkNoFrameskip-v0"&gt;DoubleDunkNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-252"&gt;252&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DoubleDunkNoFrameskip-v4/" id="DoubleDunkNoFrameskip-v4"&gt;DoubleDunkNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-253"&gt;253&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/DuplicatedInput-v0/" id="DuplicatedInput-v0"&gt;DuplicatedInput-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Discrete(2), Discrete(5))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-254"&gt;254&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-ram-v0/" id="ElevatorAction-ram-v0"&gt;ElevatorAction-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-255"&gt;255&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-ram-v4/" id="ElevatorAction-ram-v4"&gt;ElevatorAction-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-256"&gt;256&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-ramDeterministic-v0/" id="ElevatorAction-ramDeterministic-v0"&gt;ElevatorAction-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-257"&gt;257&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-ramDeterministic-v4/" id="ElevatorAction-ramDeterministic-v4"&gt;ElevatorAction-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-258"&gt;258&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-ramNoFrameskip-v0/" id="ElevatorAction-ramNoFrameskip-v0"&gt;ElevatorAction-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-259"&gt;259&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-ramNoFrameskip-v4/" id="ElevatorAction-ramNoFrameskip-v4"&gt;ElevatorAction-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-260"&gt;260&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-v0/" id="ElevatorAction-v0"&gt;ElevatorAction-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-261"&gt;261&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorAction-v4/" id="ElevatorAction-v4"&gt;ElevatorAction-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-262"&gt;262&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorActionDeterministic-v0/" id="ElevatorActionDeterministic-v0"&gt;ElevatorActionDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-263"&gt;263&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorActionDeterministic-v4/" id="ElevatorActionDeterministic-v4"&gt;ElevatorActionDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-264"&gt;264&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorActionNoFrameskip-v0/" id="ElevatorActionNoFrameskip-v0"&gt;ElevatorActionNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-265"&gt;265&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ElevatorActionNoFrameskip-v4/" id="ElevatorActionNoFrameskip-v4"&gt;ElevatorActionNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-266"&gt;266&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-ram-v0/" id="Enduro-ram-v0"&gt;Enduro-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-267"&gt;267&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-ram-v4/" id="Enduro-ram-v4"&gt;Enduro-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-268"&gt;268&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-ramDeterministic-v0/" id="Enduro-ramDeterministic-v0"&gt;Enduro-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-269"&gt;269&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-ramDeterministic-v4/" id="Enduro-ramDeterministic-v4"&gt;Enduro-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-270"&gt;270&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-ramNoFrameskip-v0/" id="Enduro-ramNoFrameskip-v0"&gt;Enduro-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-271"&gt;271&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-ramNoFrameskip-v4/" id="Enduro-ramNoFrameskip-v4"&gt;Enduro-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-272"&gt;272&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-v0/" id="Enduro-v0"&gt;Enduro-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-273"&gt;273&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Enduro-v4/" id="Enduro-v4"&gt;Enduro-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-274"&gt;274&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/EnduroDeterministic-v0/" id="EnduroDeterministic-v0"&gt;EnduroDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-275"&gt;275&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/EnduroDeterministic-v4/" id="EnduroDeterministic-v4"&gt;EnduroDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-276"&gt;276&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/EnduroNoFrameskip-v0/" id="EnduroNoFrameskip-v0"&gt;EnduroNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-277"&gt;277&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/EnduroNoFrameskip-v4/" id="EnduroNoFrameskip-v4"&gt;EnduroNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-278"&gt;278&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-ram-v0/" id="FishingDerby-ram-v0"&gt;FishingDerby-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-279"&gt;279&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-ram-v4/" id="FishingDerby-ram-v4"&gt;FishingDerby-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-280"&gt;280&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-ramDeterministic-v0/" id="FishingDerby-ramDeterministic-v0"&gt;FishingDerby-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-281"&gt;281&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-ramDeterministic-v4/" id="FishingDerby-ramDeterministic-v4"&gt;FishingDerby-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-282"&gt;282&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-ramNoFrameskip-v0/" id="FishingDerby-ramNoFrameskip-v0"&gt;FishingDerby-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-283"&gt;283&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-ramNoFrameskip-v4/" id="FishingDerby-ramNoFrameskip-v4"&gt;FishingDerby-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-284"&gt;284&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-v0/" id="FishingDerby-v0"&gt;FishingDerby-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-285"&gt;285&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerby-v4/" id="FishingDerby-v4"&gt;FishingDerby-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-286"&gt;286&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerbyDeterministic-v0/" id="FishingDerbyDeterministic-v0"&gt;FishingDerbyDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-287"&gt;287&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerbyDeterministic-v4/" id="FishingDerbyDeterministic-v4"&gt;FishingDerbyDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-288"&gt;288&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerbyNoFrameskip-v0/" id="FishingDerbyNoFrameskip-v0"&gt;FishingDerbyNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-289"&gt;289&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FishingDerbyNoFrameskip-v4/" id="FishingDerbyNoFrameskip-v4"&gt;FishingDerbyNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-290"&gt;290&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-ram-v0/" id="Freeway-ram-v0"&gt;Freeway-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-291"&gt;291&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-ram-v4/" id="Freeway-ram-v4"&gt;Freeway-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-292"&gt;292&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-ramDeterministic-v0/" id="Freeway-ramDeterministic-v0"&gt;Freeway-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-293"&gt;293&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-ramDeterministic-v4/" id="Freeway-ramDeterministic-v4"&gt;Freeway-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-294"&gt;294&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-ramNoFrameskip-v0/" id="Freeway-ramNoFrameskip-v0"&gt;Freeway-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-295"&gt;295&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-ramNoFrameskip-v4/" id="Freeway-ramNoFrameskip-v4"&gt;Freeway-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-296"&gt;296&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-v0/" id="Freeway-v0"&gt;Freeway-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-297"&gt;297&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Freeway-v4/" id="Freeway-v4"&gt;Freeway-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-298"&gt;298&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FreewayDeterministic-v0/" id="FreewayDeterministic-v0"&gt;FreewayDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-299"&gt;299&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FreewayDeterministic-v4/" id="FreewayDeterministic-v4"&gt;FreewayDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-300"&gt;300&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FreewayNoFrameskip-v0/" id="FreewayNoFrameskip-v0"&gt;FreewayNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-301"&gt;301&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FreewayNoFrameskip-v4/" id="FreewayNoFrameskip-v4"&gt;FreewayNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-302"&gt;302&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-ram-v0/" id="Frostbite-ram-v0"&gt;Frostbite-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-303"&gt;303&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-ram-v4/" id="Frostbite-ram-v4"&gt;Frostbite-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-304"&gt;304&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-ramDeterministic-v0/" id="Frostbite-ramDeterministic-v0"&gt;Frostbite-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-305"&gt;305&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-ramDeterministic-v4/" id="Frostbite-ramDeterministic-v4"&gt;Frostbite-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-306"&gt;306&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-ramNoFrameskip-v0/" id="Frostbite-ramNoFrameskip-v0"&gt;Frostbite-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-307"&gt;307&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-ramNoFrameskip-v4/" id="Frostbite-ramNoFrameskip-v4"&gt;Frostbite-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-308"&gt;308&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-v0/" id="Frostbite-v0"&gt;Frostbite-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-309"&gt;309&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Frostbite-v4/" id="Frostbite-v4"&gt;Frostbite-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-310"&gt;310&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FrostbiteDeterministic-v0/" id="FrostbiteDeterministic-v0"&gt;FrostbiteDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-311"&gt;311&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FrostbiteDeterministic-v4/" id="FrostbiteDeterministic-v4"&gt;FrostbiteDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-312"&gt;312&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FrostbiteNoFrameskip-v0/" id="FrostbiteNoFrameskip-v0"&gt;FrostbiteNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-313"&gt;313&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FrostbiteNoFrameskip-v4/" id="FrostbiteNoFrameskip-v4"&gt;FrostbiteNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-314"&gt;314&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FrozenLake-v0/" id="FrozenLake-v0"&gt;FrozenLake-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-315"&gt;315&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/FrozenLake8x8-v0/" id="FrozenLake8x8-v0"&gt;FrozenLake8x8-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(64)&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-316"&gt;316&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Go19x19-v0/" id="Go19x19-v0"&gt;Go19x19-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-317"&gt;317&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Go9x9-v0/" id="Go9x9-v0"&gt;Go9x9-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-318"&gt;318&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-ram-v0/" id="Gopher-ram-v0"&gt;Gopher-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-319"&gt;319&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-ram-v4/" id="Gopher-ram-v4"&gt;Gopher-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-320"&gt;320&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-ramDeterministic-v0/" id="Gopher-ramDeterministic-v0"&gt;Gopher-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-321"&gt;321&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-ramDeterministic-v4/" id="Gopher-ramDeterministic-v4"&gt;Gopher-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-322"&gt;322&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-ramNoFrameskip-v0/" id="Gopher-ramNoFrameskip-v0"&gt;Gopher-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-323"&gt;323&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-ramNoFrameskip-v4/" id="Gopher-ramNoFrameskip-v4"&gt;Gopher-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-324"&gt;324&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-v0/" id="Gopher-v0"&gt;Gopher-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-325"&gt;325&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gopher-v4/" id="Gopher-v4"&gt;Gopher-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-326"&gt;326&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GopherDeterministic-v0/" id="GopherDeterministic-v0"&gt;GopherDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-327"&gt;327&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GopherDeterministic-v4/" id="GopherDeterministic-v4"&gt;GopherDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-328"&gt;328&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GopherNoFrameskip-v0/" id="GopherNoFrameskip-v0"&gt;GopherNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-329"&gt;329&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GopherNoFrameskip-v4/" id="GopherNoFrameskip-v4"&gt;GopherNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-330"&gt;330&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-ram-v0/" id="Gravitar-ram-v0"&gt;Gravitar-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-331"&gt;331&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-ram-v4/" id="Gravitar-ram-v4"&gt;Gravitar-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-332"&gt;332&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-ramDeterministic-v0/" id="Gravitar-ramDeterministic-v0"&gt;Gravitar-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-333"&gt;333&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-ramDeterministic-v4/" id="Gravitar-ramDeterministic-v4"&gt;Gravitar-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-334"&gt;334&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-ramNoFrameskip-v0/" id="Gravitar-ramNoFrameskip-v0"&gt;Gravitar-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-335"&gt;335&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-ramNoFrameskip-v4/" id="Gravitar-ramNoFrameskip-v4"&gt;Gravitar-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-336"&gt;336&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-v0/" id="Gravitar-v0"&gt;Gravitar-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-337"&gt;337&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Gravitar-v4/" id="Gravitar-v4"&gt;Gravitar-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-338"&gt;338&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GravitarDeterministic-v0/" id="GravitarDeterministic-v0"&gt;GravitarDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-339"&gt;339&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GravitarDeterministic-v4/" id="GravitarDeterministic-v4"&gt;GravitarDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-340"&gt;340&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GravitarNoFrameskip-v0/" id="GravitarNoFrameskip-v0"&gt;GravitarNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-341"&gt;341&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GravitarNoFrameskip-v4/" id="GravitarNoFrameskip-v4"&gt;GravitarNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-342"&gt;342&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/GuessingGame-v0/" id="GuessingGame-v0"&gt;GuessingGame-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-343"&gt;343&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HalfCheetah-v1/" id="HalfCheetah-v1"&gt;HalfCheetah-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-344"&gt;344&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-ram-v0/" id="Hero-ram-v0"&gt;Hero-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-345"&gt;345&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-ram-v4/" id="Hero-ram-v4"&gt;Hero-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-346"&gt;346&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-ramDeterministic-v0/" id="Hero-ramDeterministic-v0"&gt;Hero-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-347"&gt;347&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-ramDeterministic-v4/" id="Hero-ramDeterministic-v4"&gt;Hero-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-348"&gt;348&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-ramNoFrameskip-v0/" id="Hero-ramNoFrameskip-v0"&gt;Hero-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-349"&gt;349&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-ramNoFrameskip-v4/" id="Hero-ramNoFrameskip-v4"&gt;Hero-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-350"&gt;350&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-v0/" id="Hero-v0"&gt;Hero-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-351"&gt;351&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hero-v4/" id="Hero-v4"&gt;Hero-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-352"&gt;352&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HeroDeterministic-v0/" id="HeroDeterministic-v0"&gt;HeroDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-353"&gt;353&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HeroDeterministic-v4/" id="HeroDeterministic-v4"&gt;HeroDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-354"&gt;354&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HeroNoFrameskip-v0/" id="HeroNoFrameskip-v0"&gt;HeroNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-355"&gt;355&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HeroNoFrameskip-v4/" id="HeroNoFrameskip-v4"&gt;HeroNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-356"&gt;356&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hex9x9-v0/" id="Hex9x9-v0"&gt;Hex9x9-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-357"&gt;357&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Hopper-v1/" id="Hopper-v1"&gt;Hopper-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-358"&gt;358&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HotterColder-v0/" id="HotterColder-v0"&gt;HotterColder-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-359"&gt;359&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Humanoid-v1/" id="Humanoid-v1"&gt;Humanoid-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-360"&gt;360&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/HumanoidStandup-v1/" id="HumanoidStandup-v1"&gt;HumanoidStandup-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-361"&gt;361&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-ram-v0/" id="IceHockey-ram-v0"&gt;IceHockey-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-362"&gt;362&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-ram-v4/" id="IceHockey-ram-v4"&gt;IceHockey-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-363"&gt;363&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-ramDeterministic-v0/" id="IceHockey-ramDeterministic-v0"&gt;IceHockey-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-364"&gt;364&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-ramDeterministic-v4/" id="IceHockey-ramDeterministic-v4"&gt;IceHockey-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-365"&gt;365&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-ramNoFrameskip-v0/" id="IceHockey-ramNoFrameskip-v0"&gt;IceHockey-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-366"&gt;366&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-ramNoFrameskip-v4/" id="IceHockey-ramNoFrameskip-v4"&gt;IceHockey-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-367"&gt;367&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-v0/" id="IceHockey-v0"&gt;IceHockey-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-368"&gt;368&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockey-v4/" id="IceHockey-v4"&gt;IceHockey-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-369"&gt;369&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockeyDeterministic-v0/" id="IceHockeyDeterministic-v0"&gt;IceHockeyDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-370"&gt;370&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockeyDeterministic-v4/" id="IceHockeyDeterministic-v4"&gt;IceHockeyDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-371"&gt;371&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockeyNoFrameskip-v0/" id="IceHockeyNoFrameskip-v0"&gt;IceHockeyNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-372"&gt;372&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/IceHockeyNoFrameskip-v4/" id="IceHockeyNoFrameskip-v4"&gt;IceHockeyNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-373"&gt;373&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/InvertedDoublePendulum-v1/" id="InvertedDoublePendulum-v1"&gt;InvertedDoublePendulum-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-374"&gt;374&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/InvertedPendulum-v1/" id="InvertedPendulum-v1"&gt;InvertedPendulum-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-375"&gt;375&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-ram-v0/" id="Jamesbond-ram-v0"&gt;Jamesbond-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-376"&gt;376&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-ram-v4/" id="Jamesbond-ram-v4"&gt;Jamesbond-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-377"&gt;377&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-ramDeterministic-v0/" id="Jamesbond-ramDeterministic-v0"&gt;Jamesbond-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-378"&gt;378&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-ramDeterministic-v4/" id="Jamesbond-ramDeterministic-v4"&gt;Jamesbond-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-379"&gt;379&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-ramNoFrameskip-v0/" id="Jamesbond-ramNoFrameskip-v0"&gt;Jamesbond-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-380"&gt;380&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-ramNoFrameskip-v4/" id="Jamesbond-ramNoFrameskip-v4"&gt;Jamesbond-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-381"&gt;381&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-v0/" id="Jamesbond-v0"&gt;Jamesbond-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-382"&gt;382&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Jamesbond-v4/" id="Jamesbond-v4"&gt;Jamesbond-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-383"&gt;383&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JamesbondDeterministic-v0/" id="JamesbondDeterministic-v0"&gt;JamesbondDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-384"&gt;384&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JamesbondDeterministic-v4/" id="JamesbondDeterministic-v4"&gt;JamesbondDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-385"&gt;385&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JamesbondNoFrameskip-v0/" id="JamesbondNoFrameskip-v0"&gt;JamesbondNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-386"&gt;386&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JamesbondNoFrameskip-v4/" id="JamesbondNoFrameskip-v4"&gt;JamesbondNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-387"&gt;387&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-ram-v0/" id="JourneyEscape-ram-v0"&gt;JourneyEscape-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-388"&gt;388&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-ram-v4/" id="JourneyEscape-ram-v4"&gt;JourneyEscape-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-389"&gt;389&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-ramDeterministic-v0/" id="JourneyEscape-ramDeterministic-v0"&gt;JourneyEscape-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-390"&gt;390&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-ramDeterministic-v4/" id="JourneyEscape-ramDeterministic-v4"&gt;JourneyEscape-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-391"&gt;391&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-ramNoFrameskip-v0/" id="JourneyEscape-ramNoFrameskip-v0"&gt;JourneyEscape-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-392"&gt;392&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-ramNoFrameskip-v4/" id="JourneyEscape-ramNoFrameskip-v4"&gt;JourneyEscape-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-393"&gt;393&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-v0/" id="JourneyEscape-v0"&gt;JourneyEscape-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(230, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-394"&gt;394&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscape-v4/" id="JourneyEscape-v4"&gt;JourneyEscape-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(230, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-395"&gt;395&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscapeDeterministic-v0/" id="JourneyEscapeDeterministic-v0"&gt;JourneyEscapeDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(230, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-396"&gt;396&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscapeDeterministic-v4/" id="JourneyEscapeDeterministic-v4"&gt;JourneyEscapeDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(230, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-397"&gt;397&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscapeNoFrameskip-v0/" id="JourneyEscapeNoFrameskip-v0"&gt;JourneyEscapeNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(230, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-398"&gt;398&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/JourneyEscapeNoFrameskip-v4/" id="JourneyEscapeNoFrameskip-v4"&gt;JourneyEscapeNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(230, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(16)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-399"&gt;399&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-ram-v0/" id="Kangaroo-ram-v0"&gt;Kangaroo-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-400"&gt;400&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-ram-v4/" id="Kangaroo-ram-v4"&gt;Kangaroo-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-401"&gt;401&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-ramDeterministic-v0/" id="Kangaroo-ramDeterministic-v0"&gt;Kangaroo-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-402"&gt;402&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-ramDeterministic-v4/" id="Kangaroo-ramDeterministic-v4"&gt;Kangaroo-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-403"&gt;403&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-ramNoFrameskip-v0/" id="Kangaroo-ramNoFrameskip-v0"&gt;Kangaroo-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-404"&gt;404&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-ramNoFrameskip-v4/" id="Kangaroo-ramNoFrameskip-v4"&gt;Kangaroo-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-405"&gt;405&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-v0/" id="Kangaroo-v0"&gt;Kangaroo-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-406"&gt;406&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Kangaroo-v4/" id="Kangaroo-v4"&gt;Kangaroo-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-407"&gt;407&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KangarooDeterministic-v0/" id="KangarooDeterministic-v0"&gt;KangarooDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-408"&gt;408&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KangarooDeterministic-v4/" id="KangarooDeterministic-v4"&gt;KangarooDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-409"&gt;409&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KangarooNoFrameskip-v0/" id="KangarooNoFrameskip-v0"&gt;KangarooNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-410"&gt;410&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KangarooNoFrameskip-v4/" id="KangarooNoFrameskip-v4"&gt;KangarooNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-411"&gt;411&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KellyCoinflip-v0/" id="KellyCoinflip-v0"&gt;KellyCoinflip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Tuple(Box(1,), Discrete(301))&lt;/td&gt;&lt;td&gt;Discrete(25000)&lt;/td&gt;&lt;td&gt;(0, 250.0)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-412"&gt;412&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KellyCoinflipGeneralized-v0/" id="KellyCoinflipGeneralized-v0"&gt;KellyCoinflipGeneralized-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Tuple(Box(1,), Discrete(280), Discrete(280), Discrete(280), Box(1,))&lt;/td&gt;&lt;td&gt;Discrete(20300)&lt;/td&gt;&lt;td&gt;(0, 203.0)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-413"&gt;413&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-ram-v0/" id="Krull-ram-v0"&gt;Krull-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-414"&gt;414&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-ram-v4/" id="Krull-ram-v4"&gt;Krull-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-415"&gt;415&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-ramDeterministic-v0/" id="Krull-ramDeterministic-v0"&gt;Krull-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-416"&gt;416&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-ramDeterministic-v4/" id="Krull-ramDeterministic-v4"&gt;Krull-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-417"&gt;417&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-ramNoFrameskip-v0/" id="Krull-ramNoFrameskip-v0"&gt;Krull-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-418"&gt;418&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-ramNoFrameskip-v4/" id="Krull-ramNoFrameskip-v4"&gt;Krull-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-419"&gt;419&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-v0/" id="Krull-v0"&gt;Krull-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-420"&gt;420&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Krull-v4/" id="Krull-v4"&gt;Krull-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-421"&gt;421&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KrullDeterministic-v0/" id="KrullDeterministic-v0"&gt;KrullDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-422"&gt;422&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KrullDeterministic-v4/" id="KrullDeterministic-v4"&gt;KrullDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-423"&gt;423&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KrullNoFrameskip-v0/" id="KrullNoFrameskip-v0"&gt;KrullNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-424"&gt;424&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KrullNoFrameskip-v4/" id="KrullNoFrameskip-v4"&gt;KrullNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-425"&gt;425&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-ram-v0/" id="KungFuMaster-ram-v0"&gt;KungFuMaster-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-426"&gt;426&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-ram-v4/" id="KungFuMaster-ram-v4"&gt;KungFuMaster-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-427"&gt;427&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-ramDeterministic-v0/" id="KungFuMaster-ramDeterministic-v0"&gt;KungFuMaster-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-428"&gt;428&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-ramDeterministic-v4/" id="KungFuMaster-ramDeterministic-v4"&gt;KungFuMaster-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-429"&gt;429&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-ramNoFrameskip-v0/" id="KungFuMaster-ramNoFrameskip-v0"&gt;KungFuMaster-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-430"&gt;430&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-ramNoFrameskip-v4/" id="KungFuMaster-ramNoFrameskip-v4"&gt;KungFuMaster-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-431"&gt;431&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-v0/" id="KungFuMaster-v0"&gt;KungFuMaster-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-432"&gt;432&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMaster-v4/" id="KungFuMaster-v4"&gt;KungFuMaster-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-433"&gt;433&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMasterDeterministic-v0/" id="KungFuMasterDeterministic-v0"&gt;KungFuMasterDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-434"&gt;434&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMasterDeterministic-v4/" id="KungFuMasterDeterministic-v4"&gt;KungFuMasterDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-435"&gt;435&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMasterNoFrameskip-v0/" id="KungFuMasterNoFrameskip-v0"&gt;KungFuMasterNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-436"&gt;436&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/KungFuMasterNoFrameskip-v4/" id="KungFuMasterNoFrameskip-v4"&gt;KungFuMasterNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(14)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-437"&gt;437&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/LunarLander-v2/" id="LunarLander-v2"&gt;LunarLander-v2&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-438"&gt;438&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/LunarLanderContinuous-v2/" id="LunarLanderContinuous-v2"&gt;LunarLanderContinuous-v2&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-439"&gt;439&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-ram-v0/" id="MontezumaRevenge-ram-v0"&gt;MontezumaRevenge-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-440"&gt;440&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-ram-v4/" id="MontezumaRevenge-ram-v4"&gt;MontezumaRevenge-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-441"&gt;441&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-ramDeterministic-v0/" id="MontezumaRevenge-ramDeterministic-v0"&gt;MontezumaRevenge-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-442"&gt;442&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-ramDeterministic-v4/" id="MontezumaRevenge-ramDeterministic-v4"&gt;MontezumaRevenge-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-443"&gt;443&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-ramNoFrameskip-v0/" id="MontezumaRevenge-ramNoFrameskip-v0"&gt;MontezumaRevenge-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-444"&gt;444&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-ramNoFrameskip-v4/" id="MontezumaRevenge-ramNoFrameskip-v4"&gt;MontezumaRevenge-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-445"&gt;445&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-v0/" id="MontezumaRevenge-v0"&gt;MontezumaRevenge-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-446"&gt;446&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevenge-v4/" id="MontezumaRevenge-v4"&gt;MontezumaRevenge-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-447"&gt;447&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevengeDeterministic-v0/" id="MontezumaRevengeDeterministic-v0"&gt;MontezumaRevengeDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-448"&gt;448&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevengeDeterministic-v4/" id="MontezumaRevengeDeterministic-v4"&gt;MontezumaRevengeDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-449"&gt;449&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevengeNoFrameskip-v0/" id="MontezumaRevengeNoFrameskip-v0"&gt;MontezumaRevengeNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-450"&gt;450&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MontezumaRevengeNoFrameskip-v4/" id="MontezumaRevengeNoFrameskip-v4"&gt;MontezumaRevengeNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-451"&gt;451&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MountainCar-v0/" id="MountainCar-v0"&gt;MountainCar-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(2,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-452"&gt;452&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MountainCarContinuous-v0/" id="MountainCarContinuous-v0"&gt;MountainCarContinuous-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(2,)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-453"&gt;453&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-ram-v0/" id="MsPacman-ram-v0"&gt;MsPacman-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-454"&gt;454&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-ram-v4/" id="MsPacman-ram-v4"&gt;MsPacman-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-455"&gt;455&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-ramDeterministic-v0/" id="MsPacman-ramDeterministic-v0"&gt;MsPacman-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-456"&gt;456&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-ramDeterministic-v4/" id="MsPacman-ramDeterministic-v4"&gt;MsPacman-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-457"&gt;457&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-ramNoFrameskip-v0/" id="MsPacman-ramNoFrameskip-v0"&gt;MsPacman-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-458"&gt;458&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-ramNoFrameskip-v4/" id="MsPacman-ramNoFrameskip-v4"&gt;MsPacman-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-459"&gt;459&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-v0/" id="MsPacman-v0"&gt;MsPacman-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-460"&gt;460&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacman-v4/" id="MsPacman-v4"&gt;MsPacman-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-461"&gt;461&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacmanDeterministic-v0/" id="MsPacmanDeterministic-v0"&gt;MsPacmanDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-462"&gt;462&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacmanDeterministic-v4/" id="MsPacmanDeterministic-v4"&gt;MsPacmanDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-463"&gt;463&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacmanNoFrameskip-v0/" id="MsPacmanNoFrameskip-v0"&gt;MsPacmanNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-464"&gt;464&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/MsPacmanNoFrameskip-v4/" id="MsPacmanNoFrameskip-v4"&gt;MsPacmanNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-465"&gt;465&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NChain-v0/" id="NChain-v0"&gt;NChain-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(5)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-466"&gt;466&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-ram-v0/" id="NameThisGame-ram-v0"&gt;NameThisGame-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-467"&gt;467&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-ram-v4/" id="NameThisGame-ram-v4"&gt;NameThisGame-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-468"&gt;468&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-ramDeterministic-v0/" id="NameThisGame-ramDeterministic-v0"&gt;NameThisGame-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-469"&gt;469&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-ramDeterministic-v4/" id="NameThisGame-ramDeterministic-v4"&gt;NameThisGame-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-470"&gt;470&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-ramNoFrameskip-v0/" id="NameThisGame-ramNoFrameskip-v0"&gt;NameThisGame-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-471"&gt;471&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-ramNoFrameskip-v4/" id="NameThisGame-ramNoFrameskip-v4"&gt;NameThisGame-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-472"&gt;472&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-v0/" id="NameThisGame-v0"&gt;NameThisGame-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-473"&gt;473&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGame-v4/" id="NameThisGame-v4"&gt;NameThisGame-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-474"&gt;474&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGameDeterministic-v0/" id="NameThisGameDeterministic-v0"&gt;NameThisGameDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-475"&gt;475&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGameDeterministic-v4/" id="NameThisGameDeterministic-v4"&gt;NameThisGameDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-476"&gt;476&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGameNoFrameskip-v0/" id="NameThisGameNoFrameskip-v0"&gt;NameThisGameNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-477"&gt;477&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/NameThisGameNoFrameskip-v4/" id="NameThisGameNoFrameskip-v4"&gt;NameThisGameNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-478"&gt;478&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/OffSwitchCartpole-v0/" id="OffSwitchCartpole-v0"&gt;OffSwitchCartpole-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Box(4,))&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-479"&gt;479&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/OffSwitchCartpoleProb-v0/" id="OffSwitchCartpoleProb-v0"&gt;OffSwitchCartpoleProb-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Box(4,))&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-480"&gt;480&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/OneRoundDeterministicReward-v0/" id="OneRoundDeterministicReward-v0"&gt;OneRoundDeterministicReward-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(1)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-481"&gt;481&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/OneRoundNondeterministicReward-v0/" id="OneRoundNondeterministicReward-v0"&gt;OneRoundNondeterministicReward-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(1)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-482"&gt;482&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pendulum-v0/" id="Pendulum-v0"&gt;Pendulum-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(3,)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-483"&gt;483&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-ram-v0/" id="Phoenix-ram-v0"&gt;Phoenix-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-484"&gt;484&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-ram-v4/" id="Phoenix-ram-v4"&gt;Phoenix-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-485"&gt;485&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-ramDeterministic-v0/" id="Phoenix-ramDeterministic-v0"&gt;Phoenix-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-486"&gt;486&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-ramDeterministic-v4/" id="Phoenix-ramDeterministic-v4"&gt;Phoenix-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-487"&gt;487&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-ramNoFrameskip-v0/" id="Phoenix-ramNoFrameskip-v0"&gt;Phoenix-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-488"&gt;488&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-ramNoFrameskip-v4/" id="Phoenix-ramNoFrameskip-v4"&gt;Phoenix-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-489"&gt;489&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-v0/" id="Phoenix-v0"&gt;Phoenix-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-490"&gt;490&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Phoenix-v4/" id="Phoenix-v4"&gt;Phoenix-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-491"&gt;491&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PhoenixDeterministic-v0/" id="PhoenixDeterministic-v0"&gt;PhoenixDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-492"&gt;492&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PhoenixDeterministic-v4/" id="PhoenixDeterministic-v4"&gt;PhoenixDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-493"&gt;493&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PhoenixNoFrameskip-v0/" id="PhoenixNoFrameskip-v0"&gt;PhoenixNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-494"&gt;494&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PhoenixNoFrameskip-v4/" id="PhoenixNoFrameskip-v4"&gt;PhoenixNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-495"&gt;495&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-ram-v0/" id="Pitfall-ram-v0"&gt;Pitfall-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-496"&gt;496&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-ram-v4/" id="Pitfall-ram-v4"&gt;Pitfall-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-497"&gt;497&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-ramDeterministic-v0/" id="Pitfall-ramDeterministic-v0"&gt;Pitfall-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-498"&gt;498&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-ramDeterministic-v4/" id="Pitfall-ramDeterministic-v4"&gt;Pitfall-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-499"&gt;499&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-ramNoFrameskip-v0/" id="Pitfall-ramNoFrameskip-v0"&gt;Pitfall-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-500"&gt;500&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-ramNoFrameskip-v4/" id="Pitfall-ramNoFrameskip-v4"&gt;Pitfall-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-501"&gt;501&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-v0/" id="Pitfall-v0"&gt;Pitfall-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-502"&gt;502&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pitfall-v4/" id="Pitfall-v4"&gt;Pitfall-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-503"&gt;503&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PitfallDeterministic-v0/" id="PitfallDeterministic-v0"&gt;PitfallDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-504"&gt;504&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PitfallDeterministic-v4/" id="PitfallDeterministic-v4"&gt;PitfallDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-505"&gt;505&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PitfallNoFrameskip-v0/" id="PitfallNoFrameskip-v0"&gt;PitfallNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-506"&gt;506&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PitfallNoFrameskip-v4/" id="PitfallNoFrameskip-v4"&gt;PitfallNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-507"&gt;507&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-ram-v0/" id="Pong-ram-v0"&gt;Pong-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-508"&gt;508&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-ram-v4/" id="Pong-ram-v4"&gt;Pong-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-509"&gt;509&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-ramDeterministic-v0/" id="Pong-ramDeterministic-v0"&gt;Pong-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-510"&gt;510&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-ramDeterministic-v4/" id="Pong-ramDeterministic-v4"&gt;Pong-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-511"&gt;511&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-ramNoFrameskip-v0/" id="Pong-ramNoFrameskip-v0"&gt;Pong-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-512"&gt;512&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-ramNoFrameskip-v4/" id="Pong-ramNoFrameskip-v4"&gt;Pong-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-513"&gt;513&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-v0/" id="Pong-v0"&gt;Pong-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-514"&gt;514&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pong-v4/" id="Pong-v4"&gt;Pong-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-515"&gt;515&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PongDeterministic-v0/" id="PongDeterministic-v0"&gt;PongDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-516"&gt;516&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PongDeterministic-v4/" id="PongDeterministic-v4"&gt;PongDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-517"&gt;517&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PongNoFrameskip-v0/" id="PongNoFrameskip-v0"&gt;PongNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-518"&gt;518&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PongNoFrameskip-v4/" id="PongNoFrameskip-v4"&gt;PongNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-519"&gt;519&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-ram-v0/" id="Pooyan-ram-v0"&gt;Pooyan-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-520"&gt;520&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-ram-v4/" id="Pooyan-ram-v4"&gt;Pooyan-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-521"&gt;521&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-ramDeterministic-v0/" id="Pooyan-ramDeterministic-v0"&gt;Pooyan-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-522"&gt;522&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-ramDeterministic-v4/" id="Pooyan-ramDeterministic-v4"&gt;Pooyan-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-523"&gt;523&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-ramNoFrameskip-v0/" id="Pooyan-ramNoFrameskip-v0"&gt;Pooyan-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-524"&gt;524&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-ramNoFrameskip-v4/" id="Pooyan-ramNoFrameskip-v4"&gt;Pooyan-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-525"&gt;525&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-v0/" id="Pooyan-v0"&gt;Pooyan-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-526"&gt;526&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pooyan-v4/" id="Pooyan-v4"&gt;Pooyan-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-527"&gt;527&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PooyanDeterministic-v0/" id="PooyanDeterministic-v0"&gt;PooyanDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-528"&gt;528&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PooyanDeterministic-v4/" id="PooyanDeterministic-v4"&gt;PooyanDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-529"&gt;529&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PooyanNoFrameskip-v0/" id="PooyanNoFrameskip-v0"&gt;PooyanNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-530"&gt;530&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PooyanNoFrameskip-v4/" id="PooyanNoFrameskip-v4"&gt;PooyanNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-531"&gt;531&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PredictActionsCartpole-v0/" id="PredictActionsCartpole-v0"&gt;PredictActionsCartpole-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(4,)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Discrete(2), Discrete(2), Discrete(2), Discrete(2), Discrete(2))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-532"&gt;532&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PredictObsCartpole-v0/" id="PredictObsCartpole-v0"&gt;PredictObsCartpole-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(4,)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Box(4,), Box(4,), Box(4,), Box(4,), Box(4,))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-533"&gt;533&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-ram-v0/" id="PrivateEye-ram-v0"&gt;PrivateEye-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-534"&gt;534&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-ram-v4/" id="PrivateEye-ram-v4"&gt;PrivateEye-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-535"&gt;535&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-ramDeterministic-v0/" id="PrivateEye-ramDeterministic-v0"&gt;PrivateEye-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-536"&gt;536&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-ramDeterministic-v4/" id="PrivateEye-ramDeterministic-v4"&gt;PrivateEye-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-537"&gt;537&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-ramNoFrameskip-v0/" id="PrivateEye-ramNoFrameskip-v0"&gt;PrivateEye-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-538"&gt;538&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-ramNoFrameskip-v4/" id="PrivateEye-ramNoFrameskip-v4"&gt;PrivateEye-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-539"&gt;539&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-v0/" id="PrivateEye-v0"&gt;PrivateEye-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-540"&gt;540&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEye-v4/" id="PrivateEye-v4"&gt;PrivateEye-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-541"&gt;541&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEyeDeterministic-v0/" id="PrivateEyeDeterministic-v0"&gt;PrivateEyeDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-542"&gt;542&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEyeDeterministic-v4/" id="PrivateEyeDeterministic-v4"&gt;PrivateEyeDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-543"&gt;543&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEyeNoFrameskip-v0/" id="PrivateEyeNoFrameskip-v0"&gt;PrivateEyeNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-544"&gt;544&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/PrivateEyeNoFrameskip-v4/" id="PrivateEyeNoFrameskip-v4"&gt;PrivateEyeNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-545"&gt;545&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Pusher-v0/" id="Pusher-v0"&gt;Pusher-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-546"&gt;546&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-ram-v0/" id="Qbert-ram-v0"&gt;Qbert-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-547"&gt;547&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-ram-v4/" id="Qbert-ram-v4"&gt;Qbert-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-548"&gt;548&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-ramDeterministic-v0/" id="Qbert-ramDeterministic-v0"&gt;Qbert-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-549"&gt;549&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-ramDeterministic-v4/" id="Qbert-ramDeterministic-v4"&gt;Qbert-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-550"&gt;550&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-ramNoFrameskip-v0/" id="Qbert-ramNoFrameskip-v0"&gt;Qbert-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-551"&gt;551&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-ramNoFrameskip-v4/" id="Qbert-ramNoFrameskip-v4"&gt;Qbert-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-552"&gt;552&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-v0/" id="Qbert-v0"&gt;Qbert-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-553"&gt;553&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Qbert-v4/" id="Qbert-v4"&gt;Qbert-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-554"&gt;554&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/QbertDeterministic-v0/" id="QbertDeterministic-v0"&gt;QbertDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-555"&gt;555&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/QbertDeterministic-v4/" id="QbertDeterministic-v4"&gt;QbertDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-556"&gt;556&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/QbertNoFrameskip-v0/" id="QbertNoFrameskip-v0"&gt;QbertNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-557"&gt;557&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/QbertNoFrameskip-v4/" id="QbertNoFrameskip-v4"&gt;QbertNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-558"&gt;558&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Reacher-v1/" id="Reacher-v1"&gt;Reacher-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-559"&gt;559&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RepeatCopy-v0/" id="RepeatCopy-v0"&gt;RepeatCopy-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Discrete(2), Discrete(5))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-560"&gt;560&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Reverse-v0/" id="Reverse-v0"&gt;Reverse-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(2), Discrete(2), Discrete(2))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-561"&gt;561&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ReversedAddition-v0/" id="ReversedAddition-v0"&gt;ReversedAddition-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(4), Discrete(2), Discrete(3))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-562"&gt;562&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ReversedAddition3-v0/" id="ReversedAddition3-v0"&gt;ReversedAddition3-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(4)&lt;/td&gt;&lt;td&gt;Tuple(Discrete(4), Discrete(2), Discrete(3))&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-563"&gt;563&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-ram-v0/" id="Riverraid-ram-v0"&gt;Riverraid-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-564"&gt;564&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-ram-v4/" id="Riverraid-ram-v4"&gt;Riverraid-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-565"&gt;565&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-ramDeterministic-v0/" id="Riverraid-ramDeterministic-v0"&gt;Riverraid-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-566"&gt;566&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-ramDeterministic-v4/" id="Riverraid-ramDeterministic-v4"&gt;Riverraid-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-567"&gt;567&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-ramNoFrameskip-v0/" id="Riverraid-ramNoFrameskip-v0"&gt;Riverraid-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-568"&gt;568&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-ramNoFrameskip-v4/" id="Riverraid-ramNoFrameskip-v4"&gt;Riverraid-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-569"&gt;569&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-v0/" id="Riverraid-v0"&gt;Riverraid-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-570"&gt;570&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Riverraid-v4/" id="Riverraid-v4"&gt;Riverraid-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-571"&gt;571&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RiverraidDeterministic-v0/" id="RiverraidDeterministic-v0"&gt;RiverraidDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-572"&gt;572&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RiverraidDeterministic-v4/" id="RiverraidDeterministic-v4"&gt;RiverraidDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-573"&gt;573&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RiverraidNoFrameskip-v0/" id="RiverraidNoFrameskip-v0"&gt;RiverraidNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-574"&gt;574&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RiverraidNoFrameskip-v4/" id="RiverraidNoFrameskip-v4"&gt;RiverraidNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-575"&gt;575&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-ram-v0/" id="RoadRunner-ram-v0"&gt;RoadRunner-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-576"&gt;576&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-ram-v4/" id="RoadRunner-ram-v4"&gt;RoadRunner-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-577"&gt;577&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-ramDeterministic-v0/" id="RoadRunner-ramDeterministic-v0"&gt;RoadRunner-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-578"&gt;578&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-ramDeterministic-v4/" id="RoadRunner-ramDeterministic-v4"&gt;RoadRunner-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-579"&gt;579&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-ramNoFrameskip-v0/" id="RoadRunner-ramNoFrameskip-v0"&gt;RoadRunner-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-580"&gt;580&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-ramNoFrameskip-v4/" id="RoadRunner-ramNoFrameskip-v4"&gt;RoadRunner-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-581"&gt;581&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-v0/" id="RoadRunner-v0"&gt;RoadRunner-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-582"&gt;582&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunner-v4/" id="RoadRunner-v4"&gt;RoadRunner-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-583"&gt;583&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunnerDeterministic-v0/" id="RoadRunnerDeterministic-v0"&gt;RoadRunnerDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-584"&gt;584&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunnerDeterministic-v4/" id="RoadRunnerDeterministic-v4"&gt;RoadRunnerDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-585"&gt;585&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunnerNoFrameskip-v0/" id="RoadRunnerNoFrameskip-v0"&gt;RoadRunnerNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-586"&gt;586&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RoadRunnerNoFrameskip-v4/" id="RoadRunnerNoFrameskip-v4"&gt;RoadRunnerNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-587"&gt;587&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-ram-v0/" id="Robotank-ram-v0"&gt;Robotank-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-588"&gt;588&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-ram-v4/" id="Robotank-ram-v4"&gt;Robotank-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-589"&gt;589&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-ramDeterministic-v0/" id="Robotank-ramDeterministic-v0"&gt;Robotank-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-590"&gt;590&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-ramDeterministic-v4/" id="Robotank-ramDeterministic-v4"&gt;Robotank-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-591"&gt;591&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-ramNoFrameskip-v0/" id="Robotank-ramNoFrameskip-v0"&gt;Robotank-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-592"&gt;592&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-ramNoFrameskip-v4/" id="Robotank-ramNoFrameskip-v4"&gt;Robotank-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-593"&gt;593&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-v0/" id="Robotank-v0"&gt;Robotank-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-594"&gt;594&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Robotank-v4/" id="Robotank-v4"&gt;Robotank-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-595"&gt;595&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RobotankDeterministic-v0/" id="RobotankDeterministic-v0"&gt;RobotankDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-596"&gt;596&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RobotankDeterministic-v4/" id="RobotankDeterministic-v4"&gt;RobotankDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-597"&gt;597&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RobotankNoFrameskip-v0/" id="RobotankNoFrameskip-v0"&gt;RobotankNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-598"&gt;598&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/RobotankNoFrameskip-v4/" id="RobotankNoFrameskip-v4"&gt;RobotankNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-599"&gt;599&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Roulette-v0/" id="Roulette-v0"&gt;Roulette-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(1)&lt;/td&gt;&lt;td&gt;Discrete(38)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-600"&gt;600&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-ram-v0/" id="Seaquest-ram-v0"&gt;Seaquest-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-601"&gt;601&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-ram-v4/" id="Seaquest-ram-v4"&gt;Seaquest-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-602"&gt;602&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-ramDeterministic-v0/" id="Seaquest-ramDeterministic-v0"&gt;Seaquest-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-603"&gt;603&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-ramDeterministic-v4/" id="Seaquest-ramDeterministic-v4"&gt;Seaquest-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-604"&gt;604&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-ramNoFrameskip-v0/" id="Seaquest-ramNoFrameskip-v0"&gt;Seaquest-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-605"&gt;605&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-ramNoFrameskip-v4/" id="Seaquest-ramNoFrameskip-v4"&gt;Seaquest-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-606"&gt;606&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-v0/" id="Seaquest-v0"&gt;Seaquest-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-607"&gt;607&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Seaquest-v4/" id="Seaquest-v4"&gt;Seaquest-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-608"&gt;608&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SeaquestDeterministic-v0/" id="SeaquestDeterministic-v0"&gt;SeaquestDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-609"&gt;609&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SeaquestDeterministic-v4/" id="SeaquestDeterministic-v4"&gt;SeaquestDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-610"&gt;610&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SeaquestNoFrameskip-v0/" id="SeaquestNoFrameskip-v0"&gt;SeaquestNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-611"&gt;611&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SeaquestNoFrameskip-v4/" id="SeaquestNoFrameskip-v4"&gt;SeaquestNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-612"&gt;612&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SemisuperPendulumDecay-v0/" id="SemisuperPendulumDecay-v0"&gt;SemisuperPendulumDecay-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(3,)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-613"&gt;613&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SemisuperPendulumNoise-v0/" id="SemisuperPendulumNoise-v0"&gt;SemisuperPendulumNoise-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(3,)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-614"&gt;614&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SemisuperPendulumRandom-v0/" id="SemisuperPendulumRandom-v0"&gt;SemisuperPendulumRandom-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(3,)&lt;/td&gt;&lt;td&gt;Box(1,)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-615"&gt;615&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-ram-v0/" id="Skiing-ram-v0"&gt;Skiing-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-616"&gt;616&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-ram-v4/" id="Skiing-ram-v4"&gt;Skiing-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-617"&gt;617&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-ramDeterministic-v0/" id="Skiing-ramDeterministic-v0"&gt;Skiing-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-618"&gt;618&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-ramDeterministic-v4/" id="Skiing-ramDeterministic-v4"&gt;Skiing-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-619"&gt;619&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-ramNoFrameskip-v0/" id="Skiing-ramNoFrameskip-v0"&gt;Skiing-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-620"&gt;620&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-ramNoFrameskip-v4/" id="Skiing-ramNoFrameskip-v4"&gt;Skiing-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-621"&gt;621&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-v0/" id="Skiing-v0"&gt;Skiing-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-622"&gt;622&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Skiing-v4/" id="Skiing-v4"&gt;Skiing-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-623"&gt;623&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SkiingDeterministic-v0/" id="SkiingDeterministic-v0"&gt;SkiingDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-624"&gt;624&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SkiingDeterministic-v4/" id="SkiingDeterministic-v4"&gt;SkiingDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-625"&gt;625&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SkiingNoFrameskip-v0/" id="SkiingNoFrameskip-v0"&gt;SkiingNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-626"&gt;626&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SkiingNoFrameskip-v4/" id="SkiingNoFrameskip-v4"&gt;SkiingNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-627"&gt;627&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-ram-v0/" id="Solaris-ram-v0"&gt;Solaris-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-628"&gt;628&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-ram-v4/" id="Solaris-ram-v4"&gt;Solaris-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-629"&gt;629&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-ramDeterministic-v0/" id="Solaris-ramDeterministic-v0"&gt;Solaris-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-630"&gt;630&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-ramDeterministic-v4/" id="Solaris-ramDeterministic-v4"&gt;Solaris-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-631"&gt;631&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-ramNoFrameskip-v0/" id="Solaris-ramNoFrameskip-v0"&gt;Solaris-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-632"&gt;632&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-ramNoFrameskip-v4/" id="Solaris-ramNoFrameskip-v4"&gt;Solaris-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-633"&gt;633&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-v0/" id="Solaris-v0"&gt;Solaris-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-634"&gt;634&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Solaris-v4/" id="Solaris-v4"&gt;Solaris-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-635"&gt;635&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SolarisDeterministic-v0/" id="SolarisDeterministic-v0"&gt;SolarisDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-636"&gt;636&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SolarisDeterministic-v4/" id="SolarisDeterministic-v4"&gt;SolarisDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-637"&gt;637&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SolarisNoFrameskip-v0/" id="SolarisNoFrameskip-v0"&gt;SolarisNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-638"&gt;638&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SolarisNoFrameskip-v4/" id="SolarisNoFrameskip-v4"&gt;SolarisNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-639"&gt;639&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-ram-v0/" id="SpaceInvaders-ram-v0"&gt;SpaceInvaders-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-640"&gt;640&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-ram-v4/" id="SpaceInvaders-ram-v4"&gt;SpaceInvaders-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-641"&gt;641&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-ramDeterministic-v0/" id="SpaceInvaders-ramDeterministic-v0"&gt;SpaceInvaders-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-642"&gt;642&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-ramDeterministic-v4/" id="SpaceInvaders-ramDeterministic-v4"&gt;SpaceInvaders-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-643"&gt;643&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-ramNoFrameskip-v0/" id="SpaceInvaders-ramNoFrameskip-v0"&gt;SpaceInvaders-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-644"&gt;644&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-ramNoFrameskip-v4/" id="SpaceInvaders-ramNoFrameskip-v4"&gt;SpaceInvaders-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-645"&gt;645&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-v0/" id="SpaceInvaders-v0"&gt;SpaceInvaders-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-646"&gt;646&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvaders-v4/" id="SpaceInvaders-v4"&gt;SpaceInvaders-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-647"&gt;647&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvadersDeterministic-v0/" id="SpaceInvadersDeterministic-v0"&gt;SpaceInvadersDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-648"&gt;648&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvadersDeterministic-v4/" id="SpaceInvadersDeterministic-v4"&gt;SpaceInvadersDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-649"&gt;649&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvadersNoFrameskip-v0/" id="SpaceInvadersNoFrameskip-v0"&gt;SpaceInvadersNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-650"&gt;650&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/SpaceInvadersNoFrameskip-v4/" id="SpaceInvadersNoFrameskip-v4"&gt;SpaceInvadersNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-651"&gt;651&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-ram-v0/" id="StarGunner-ram-v0"&gt;StarGunner-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-652"&gt;652&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-ram-v4/" id="StarGunner-ram-v4"&gt;StarGunner-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-653"&gt;653&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-ramDeterministic-v0/" id="StarGunner-ramDeterministic-v0"&gt;StarGunner-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-654"&gt;654&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-ramDeterministic-v4/" id="StarGunner-ramDeterministic-v4"&gt;StarGunner-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-655"&gt;655&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-ramNoFrameskip-v0/" id="StarGunner-ramNoFrameskip-v0"&gt;StarGunner-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-656"&gt;656&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-ramNoFrameskip-v4/" id="StarGunner-ramNoFrameskip-v4"&gt;StarGunner-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-657"&gt;657&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-v0/" id="StarGunner-v0"&gt;StarGunner-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-658"&gt;658&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunner-v4/" id="StarGunner-v4"&gt;StarGunner-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-659"&gt;659&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunnerDeterministic-v0/" id="StarGunnerDeterministic-v0"&gt;StarGunnerDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-660"&gt;660&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunnerDeterministic-v4/" id="StarGunnerDeterministic-v4"&gt;StarGunnerDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-661"&gt;661&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunnerNoFrameskip-v0/" id="StarGunnerNoFrameskip-v0"&gt;StarGunnerNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-662"&gt;662&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/StarGunnerNoFrameskip-v4/" id="StarGunnerNoFrameskip-v4"&gt;StarGunnerNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-663"&gt;663&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Striker-v0/" id="Striker-v0"&gt;Striker-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-664"&gt;664&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Swimmer-v1/" id="Swimmer-v1"&gt;Swimmer-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-665"&gt;665&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Taxi-v2/" id="Taxi-v2"&gt;Taxi-v2&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(500)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-666"&gt;666&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-ram-v0/" id="Tennis-ram-v0"&gt;Tennis-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-667"&gt;667&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-ram-v4/" id="Tennis-ram-v4"&gt;Tennis-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-668"&gt;668&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-ramDeterministic-v0/" id="Tennis-ramDeterministic-v0"&gt;Tennis-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-669"&gt;669&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-ramDeterministic-v4/" id="Tennis-ramDeterministic-v4"&gt;Tennis-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-670"&gt;670&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-ramNoFrameskip-v0/" id="Tennis-ramNoFrameskip-v0"&gt;Tennis-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-671"&gt;671&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-ramNoFrameskip-v4/" id="Tennis-ramNoFrameskip-v4"&gt;Tennis-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-672"&gt;672&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-v0/" id="Tennis-v0"&gt;Tennis-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-673"&gt;673&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tennis-v4/" id="Tennis-v4"&gt;Tennis-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-674"&gt;674&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TennisDeterministic-v0/" id="TennisDeterministic-v0"&gt;TennisDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-675"&gt;675&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TennisDeterministic-v4/" id="TennisDeterministic-v4"&gt;TennisDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-676"&gt;676&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TennisNoFrameskip-v0/" id="TennisNoFrameskip-v0"&gt;TennisNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-677"&gt;677&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TennisNoFrameskip-v4/" id="TennisNoFrameskip-v4"&gt;TennisNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-678"&gt;678&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Thrower-v0/" id="Thrower-v0"&gt;Thrower-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-679"&gt;679&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-ram-v0/" id="TimePilot-ram-v0"&gt;TimePilot-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-680"&gt;680&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-ram-v4/" id="TimePilot-ram-v4"&gt;TimePilot-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-681"&gt;681&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-ramDeterministic-v0/" id="TimePilot-ramDeterministic-v0"&gt;TimePilot-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-682"&gt;682&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-ramDeterministic-v4/" id="TimePilot-ramDeterministic-v4"&gt;TimePilot-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-683"&gt;683&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-ramNoFrameskip-v0/" id="TimePilot-ramNoFrameskip-v0"&gt;TimePilot-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-684"&gt;684&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-ramNoFrameskip-v4/" id="TimePilot-ramNoFrameskip-v4"&gt;TimePilot-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-685"&gt;685&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-v0/" id="TimePilot-v0"&gt;TimePilot-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-686"&gt;686&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilot-v4/" id="TimePilot-v4"&gt;TimePilot-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-687"&gt;687&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilotDeterministic-v0/" id="TimePilotDeterministic-v0"&gt;TimePilotDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-688"&gt;688&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilotDeterministic-v4/" id="TimePilotDeterministic-v4"&gt;TimePilotDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-689"&gt;689&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilotNoFrameskip-v0/" id="TimePilotNoFrameskip-v0"&gt;TimePilotNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-690"&gt;690&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TimePilotNoFrameskip-v4/" id="TimePilotNoFrameskip-v4"&gt;TimePilotNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-691"&gt;691&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-ram-v0/" id="Tutankham-ram-v0"&gt;Tutankham-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-692"&gt;692&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-ram-v4/" id="Tutankham-ram-v4"&gt;Tutankham-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-693"&gt;693&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-ramDeterministic-v0/" id="Tutankham-ramDeterministic-v0"&gt;Tutankham-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-694"&gt;694&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-ramDeterministic-v4/" id="Tutankham-ramDeterministic-v4"&gt;Tutankham-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-695"&gt;695&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-ramNoFrameskip-v0/" id="Tutankham-ramNoFrameskip-v0"&gt;Tutankham-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-696"&gt;696&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-ramNoFrameskip-v4/" id="Tutankham-ramNoFrameskip-v4"&gt;Tutankham-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-697"&gt;697&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-v0/" id="Tutankham-v0"&gt;Tutankham-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-698"&gt;698&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Tutankham-v4/" id="Tutankham-v4"&gt;Tutankham-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-699"&gt;699&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TutankhamDeterministic-v0/" id="TutankhamDeterministic-v0"&gt;TutankhamDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-700"&gt;700&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TutankhamDeterministic-v4/" id="TutankhamDeterministic-v4"&gt;TutankhamDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-701"&gt;701&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TutankhamNoFrameskip-v0/" id="TutankhamNoFrameskip-v0"&gt;TutankhamNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-702"&gt;702&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TutankhamNoFrameskip-v4/" id="TutankhamNoFrameskip-v4"&gt;TutankhamNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(8)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-703"&gt;703&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TwoRoundDeterministicReward-v0/" id="TwoRoundDeterministicReward-v0"&gt;TwoRoundDeterministicReward-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-704"&gt;704&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/TwoRoundNondeterministicReward-v0/" id="TwoRoundNondeterministicReward-v0"&gt;TwoRoundNondeterministicReward-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Discrete(3)&lt;/td&gt;&lt;td&gt;Discrete(2)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-705"&gt;705&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-ram-v0/" id="UpNDown-ram-v0"&gt;UpNDown-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-706"&gt;706&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-ram-v4/" id="UpNDown-ram-v4"&gt;UpNDown-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-707"&gt;707&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-ramDeterministic-v0/" id="UpNDown-ramDeterministic-v0"&gt;UpNDown-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-708"&gt;708&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-ramDeterministic-v4/" id="UpNDown-ramDeterministic-v4"&gt;UpNDown-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-709"&gt;709&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-ramNoFrameskip-v0/" id="UpNDown-ramNoFrameskip-v0"&gt;UpNDown-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-710"&gt;710&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-ramNoFrameskip-v4/" id="UpNDown-ramNoFrameskip-v4"&gt;UpNDown-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-711"&gt;711&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-v0/" id="UpNDown-v0"&gt;UpNDown-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-712"&gt;712&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDown-v4/" id="UpNDown-v4"&gt;UpNDown-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-713"&gt;713&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDownDeterministic-v0/" id="UpNDownDeterministic-v0"&gt;UpNDownDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-714"&gt;714&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDownDeterministic-v4/" id="UpNDownDeterministic-v4"&gt;UpNDownDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-715"&gt;715&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDownNoFrameskip-v0/" id="UpNDownNoFrameskip-v0"&gt;UpNDownNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-716"&gt;716&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/UpNDownNoFrameskip-v4/" id="UpNDownNoFrameskip-v4"&gt;UpNDownNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(6)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-717"&gt;717&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-ram-v0/" id="Venture-ram-v0"&gt;Venture-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-718"&gt;718&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-ram-v4/" id="Venture-ram-v4"&gt;Venture-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-719"&gt;719&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-ramDeterministic-v0/" id="Venture-ramDeterministic-v0"&gt;Venture-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-720"&gt;720&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-ramDeterministic-v4/" id="Venture-ramDeterministic-v4"&gt;Venture-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-721"&gt;721&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-ramNoFrameskip-v0/" id="Venture-ramNoFrameskip-v0"&gt;Venture-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-722"&gt;722&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-ramNoFrameskip-v4/" id="Venture-ramNoFrameskip-v4"&gt;Venture-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-723"&gt;723&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-v0/" id="Venture-v0"&gt;Venture-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-724"&gt;724&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Venture-v4/" id="Venture-v4"&gt;Venture-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-725"&gt;725&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VentureDeterministic-v0/" id="VentureDeterministic-v0"&gt;VentureDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-726"&gt;726&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VentureDeterministic-v4/" id="VentureDeterministic-v4"&gt;VentureDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-727"&gt;727&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VentureNoFrameskip-v0/" id="VentureNoFrameskip-v0"&gt;VentureNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-728"&gt;728&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VentureNoFrameskip-v4/" id="VentureNoFrameskip-v4"&gt;VentureNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-729"&gt;729&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-ram-v0/" id="VideoPinball-ram-v0"&gt;VideoPinball-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-730"&gt;730&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-ram-v4/" id="VideoPinball-ram-v4"&gt;VideoPinball-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-731"&gt;731&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-ramDeterministic-v0/" id="VideoPinball-ramDeterministic-v0"&gt;VideoPinball-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-732"&gt;732&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-ramDeterministic-v4/" id="VideoPinball-ramDeterministic-v4"&gt;VideoPinball-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-733"&gt;733&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-ramNoFrameskip-v0/" id="VideoPinball-ramNoFrameskip-v0"&gt;VideoPinball-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-734"&gt;734&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-ramNoFrameskip-v4/" id="VideoPinball-ramNoFrameskip-v4"&gt;VideoPinball-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-735"&gt;735&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-v0/" id="VideoPinball-v0"&gt;VideoPinball-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-736"&gt;736&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinball-v4/" id="VideoPinball-v4"&gt;VideoPinball-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-737"&gt;737&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinballDeterministic-v0/" id="VideoPinballDeterministic-v0"&gt;VideoPinballDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-738"&gt;738&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinballDeterministic-v4/" id="VideoPinballDeterministic-v4"&gt;VideoPinballDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-739"&gt;739&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinballNoFrameskip-v0/" id="VideoPinballNoFrameskip-v0"&gt;VideoPinballNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-740"&gt;740&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/VideoPinballNoFrameskip-v4/" id="VideoPinballNoFrameskip-v4"&gt;VideoPinballNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(9)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-741"&gt;741&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Walker2d-v1/" id="Walker2d-v1"&gt;Walker2d-v1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-742"&gt;742&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-ram-v0/" id="WizardOfWor-ram-v0"&gt;WizardOfWor-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-743"&gt;743&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-ram-v4/" id="WizardOfWor-ram-v4"&gt;WizardOfWor-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-744"&gt;744&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-ramDeterministic-v0/" id="WizardOfWor-ramDeterministic-v0"&gt;WizardOfWor-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-745"&gt;745&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-ramDeterministic-v4/" id="WizardOfWor-ramDeterministic-v4"&gt;WizardOfWor-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-746"&gt;746&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-ramNoFrameskip-v0/" id="WizardOfWor-ramNoFrameskip-v0"&gt;WizardOfWor-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-747"&gt;747&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-ramNoFrameskip-v4/" id="WizardOfWor-ramNoFrameskip-v4"&gt;WizardOfWor-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-748"&gt;748&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-v0/" id="WizardOfWor-v0"&gt;WizardOfWor-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-749"&gt;749&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWor-v4/" id="WizardOfWor-v4"&gt;WizardOfWor-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-750"&gt;750&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWorDeterministic-v0/" id="WizardOfWorDeterministic-v0"&gt;WizardOfWorDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-751"&gt;751&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWorDeterministic-v4/" id="WizardOfWorDeterministic-v4"&gt;WizardOfWorDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-752"&gt;752&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWorNoFrameskip-v0/" id="WizardOfWorNoFrameskip-v0"&gt;WizardOfWorNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-753"&gt;753&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/WizardOfWorNoFrameskip-v4/" id="WizardOfWorNoFrameskip-v4"&gt;WizardOfWorNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(250, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(10)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-754"&gt;754&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-ram-v0/" id="YarsRevenge-ram-v0"&gt;YarsRevenge-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-755"&gt;755&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-ram-v4/" id="YarsRevenge-ram-v4"&gt;YarsRevenge-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-756"&gt;756&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-ramDeterministic-v0/" id="YarsRevenge-ramDeterministic-v0"&gt;YarsRevenge-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-757"&gt;757&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-ramDeterministic-v4/" id="YarsRevenge-ramDeterministic-v4"&gt;YarsRevenge-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-758"&gt;758&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-ramNoFrameskip-v0/" id="YarsRevenge-ramNoFrameskip-v0"&gt;YarsRevenge-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-759"&gt;759&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-ramNoFrameskip-v4/" id="YarsRevenge-ramNoFrameskip-v4"&gt;YarsRevenge-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-760"&gt;760&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-v0/" id="YarsRevenge-v0"&gt;YarsRevenge-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-761"&gt;761&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevenge-v4/" id="YarsRevenge-v4"&gt;YarsRevenge-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-762"&gt;762&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevengeDeterministic-v0/" id="YarsRevengeDeterministic-v0"&gt;YarsRevengeDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-763"&gt;763&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevengeDeterministic-v4/" id="YarsRevengeDeterministic-v4"&gt;YarsRevengeDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-764"&gt;764&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevengeNoFrameskip-v0/" id="YarsRevengeNoFrameskip-v0"&gt;YarsRevengeNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-765"&gt;765&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/YarsRevengeNoFrameskip-v4/" id="YarsRevengeNoFrameskip-v4"&gt;YarsRevengeNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-766"&gt;766&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-ram-v0/" id="Zaxxon-ram-v0"&gt;Zaxxon-ram-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-767"&gt;767&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-ram-v4/" id="Zaxxon-ram-v4"&gt;Zaxxon-ram-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-768"&gt;768&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-ramDeterministic-v0/" id="Zaxxon-ramDeterministic-v0"&gt;Zaxxon-ramDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-769"&gt;769&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-ramDeterministic-v4/" id="Zaxxon-ramDeterministic-v4"&gt;Zaxxon-ramDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-770"&gt;770&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-ramNoFrameskip-v0/" id="Zaxxon-ramNoFrameskip-v0"&gt;Zaxxon-ramNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-771"&gt;771&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-ramNoFrameskip-v4/" id="Zaxxon-ramNoFrameskip-v4"&gt;Zaxxon-ramNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(128,)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-772"&gt;772&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-v0/" id="Zaxxon-v0"&gt;Zaxxon-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-773"&gt;773&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/Zaxxon-v4/" id="Zaxxon-v4"&gt;Zaxxon-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-774"&gt;774&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ZaxxonDeterministic-v0/" id="ZaxxonDeterministic-v0"&gt;ZaxxonDeterministic-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-775"&gt;775&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ZaxxonDeterministic-v4/" id="ZaxxonDeterministic-v4"&gt;ZaxxonDeterministic-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-776"&gt;776&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ZaxxonNoFrameskip-v0/" id="ZaxxonNoFrameskip-v0"&gt;ZaxxonNoFrameskip-v0&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td id="env-777"&gt;777&lt;/td&gt;&lt;td&gt;&lt;a href="https://gym.openai.com/envs/ZaxxonNoFrameskip-v4/" id="ZaxxonNoFrameskip-v4"&gt;ZaxxonNoFrameskip-v4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Box(210, 160, 3)&lt;/td&gt;&lt;td&gt;Discrete(18)&lt;/td&gt;&lt;td&gt;(-inf, inf)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To summarize it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most environment have an continous observation space and a discrete action space&lt;/li&gt;
&lt;li&gt;The action space often has about 20 possibilities. The maximum is &lt;code&gt;KellyCoinflip-v0&lt;/code&gt; with 25000 actions.&lt;/li&gt;
&lt;li&gt;The observation space has at least one input (&lt;code&gt;OneRoundNondeterministicReward-v0&lt;/code&gt;) and never more than 500 (&lt;code&gt;Taxi-v2&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The observation space shape of &lt;code&gt;(210, 160, 3)&lt;/code&gt; is so common (264 times!) because it is the screen of an Atari game.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other"&gt;Other&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nature.com/articles/nature14236/tables/4"&gt;Comparison of DQN performance with linear function approximator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Reinforcement Learning"></category></entry><entry><title>Exploratory Data Analysis</title><link href="https://martin-thoma.com/eda/" rel="alternate"></link><published>2017-10-18T20:00:00+02:00</published><updated>2017-10-18T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-10-18:/eda/</id><summary type="html">&lt;p&gt;Getting insights from data is exciting. So let's see how well I can cover this
topic in a single article.&lt;/p&gt;
&lt;p&gt;In this article, I assume you have data in a single CSV file. If you have
multiple CSV files, you can &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html"&gt;merge&lt;/a&gt;
them similar to SQL &lt;code&gt;JOIN&lt;/code&gt; statements.&lt;/p&gt;
&lt;h2 id="prerequesites"&gt;Prerequesites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Getting insights from data is exciting. So let's see how well I can cover this
topic in a single article.&lt;/p&gt;
&lt;p&gt;In this article, I assume you have data in a single CSV file. If you have
multiple CSV files, you can &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html"&gt;merge&lt;/a&gt;
them similar to SQL &lt;code&gt;JOIN&lt;/code&gt; statements.&lt;/p&gt;
&lt;h2 id="prerequesites"&gt;Prerequesites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org"&gt;Pandas&lt;/a&gt; (&lt;code&gt;pip install pandas&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matplotlib.org"&gt;Matplotlib&lt;/a&gt; (&lt;code&gt;pip install matplotlib&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org"&gt;Seaborn&lt;/a&gt; (&lt;code&gt;pip install seaborn&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="loading-the-data"&gt;Loading the data&lt;/h2&gt;
&lt;p&gt;I load the data as a Pandas Dataframe first. I name this dataframe &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the CSV file is too big for RAM, I use the command line tool &lt;code&gt;head&lt;/code&gt; to crop
the data. &lt;a href="http://dask.pydata.org/en/latest/"&gt;Dask&lt;/a&gt; is another option, but I
never actually used it.&lt;/p&gt;
&lt;p&gt;I use the &lt;a href="https://www.kaggle.com/c/titanic/data"&gt;titanic training data&lt;/a&gt; as
an example:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'train.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="how-many-datapoints-do-we-have"&gt;How many datapoints do we have?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("Total number of datapoints: {datapoints}".format(datapoints=len(df)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shows we have 891 data points in total. Not too much.&lt;/p&gt;
&lt;h2 id="which-columns-do-we-have"&gt;Which columns do we have?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(df.describe())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reveals&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       PassengerId    Survived      Pclass         Age       SibSp  \
count   891.000000  891.000000  891.000000  714.000000  891.000000
mean    446.000000    0.383838    2.308642   29.699118    0.523008
std     257.353842    0.486592    0.836071   14.526497    1.102743
min       1.000000    0.000000    1.000000    0.420000    0.000000
25%     223.500000    0.000000    2.000000         NaN    0.000000
50%     446.000000    0.000000    3.000000         NaN    0.000000
75%     668.500000    1.000000    3.000000         NaN    1.000000
max     891.000000    1.000000    3.000000   80.000000    8.000000

            Parch        Fare
count  891.000000  891.000000
mean     0.381594   32.204208
std      0.806057   49.693429
min      0.000000    0.000000
25%      0.000000    7.910400
50%      0.000000   14.454200
75%      0.000000   31.000000
max      6.000000  512.329200
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PassengerId&lt;/code&gt;: 891 non-nan values. Just an identifier.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Survived&lt;/code&gt;: 891 non-nan values. I guess only true / false?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pclass&lt;/code&gt;: 891 non-nan values. Min=1 and max=3, I guess of type int and thus
  three classes of passengers?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Age&lt;/code&gt;: only 714 non-nan values. 0.42 is a weird value ... something like 5
  months. And a maximum of 80. So likely in years.&lt;/li&gt;
&lt;li&gt;SibSp: According to Kaggle docs: '# of siblings / spouses aboard the Titanic'&lt;/li&gt;
&lt;li&gt;Parch: According to Kaggle docs: '# of parents / children aboard the Titanic'&lt;/li&gt;
&lt;li&gt;Fare: Not sure which unit would make sense here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pandas &lt;code&gt;df.describe()&lt;/code&gt; is not powerfull enough. So I wrote my own:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;"""Exploratory data analysis."""&lt;/span&gt;

&lt;span class="c1"&gt;# core modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party module&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;


&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Exploratory data analysis for the Titanic dataset."""&lt;/span&gt;
    &lt;span class="c1"&gt;# Read data&lt;/span&gt;
    &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'PassengerId'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'str'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;'Embarked'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;'Survived'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;'Pclass'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;'Sex'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;'SibSp'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'uint8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;'Parch'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'uint8'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;describe_pandas_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;describe_pandas_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Show basic information about a pandas dataframe.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    df : Pandas Dataframe object&lt;/span&gt;
&lt;span class="sd"&gt;    dtype : dict&lt;/span&gt;
&lt;span class="sd"&gt;        Maps column names to types&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Number of datapoints: &lt;/span&gt;&lt;span class="si"&gt;{datapoints}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datapoints&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;column_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;'float'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;'other'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
    &lt;span class="n"&gt;float_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'float64'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;integer_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'int64'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'uint8'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;other_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;column_info_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;counter_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;value_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;value_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_suspicious_cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                             &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                             &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_suspicious_cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Column '&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;' has only &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; different values (&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;). "&lt;/span&gt;
                            &lt;span class="s2"&gt;"You might want to make it a 'category'"&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;value_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;value_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;top_count_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counter_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'top_count_val'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_count_val&lt;/span&gt;
        &lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value_list'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value_list&lt;/span&gt;
        &lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value_count'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value_count&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;integer_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;float_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'float'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;other_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'other'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"!!! describe_pandas_df does not know type '&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
                  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;column_name_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;## Integer Columns"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: Non-nan  mean   std   min   25%  "&lt;/span&gt;
          &lt;span class="s2"&gt;" 50&lt;/span&gt;&lt;span class="si"&gt;%   75%&lt;/span&gt;&lt;span class="s2"&gt;   max"&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Column name"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: &lt;/span&gt;&lt;span class="si"&gt;{non_nan:&amp;gt;7}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;
              &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{mean:0.2f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{std:&amp;gt;4.2f}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;
              &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{min:&amp;gt;4.0f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{q25:&amp;gt;4.0f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{q50:&amp;gt;4.0f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{q75:&amp;gt;4.0f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{max:&amp;gt;4.0f}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;non_nan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                      &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                      &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                      &lt;span class="n"&gt;q25&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;q50&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;q75&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;## Float Columns"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: Non-nan   mean    std    min    "&lt;/span&gt;
          &lt;span class="s2"&gt;"25&lt;/span&gt;&lt;span class="si"&gt;%    50%&lt;/span&gt;&lt;span class="s2"&gt;    75%    max"&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Column name"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'float'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: &lt;/span&gt;&lt;span class="si"&gt;{non_nan:&amp;gt;7}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;
              &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{mean:5.2f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{std:&amp;gt;4.2f}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;
              &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{min:&amp;gt;5.2f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{q25:&amp;gt;5.2f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{q50:&amp;gt;5.2f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{q75:&amp;gt;5.2f}&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;{max:&amp;gt;5.2f}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;non_nan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                      &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                      &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                      &lt;span class="n"&gt;q25&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;q50&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;q75&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;## Category Columns"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: Non-nan   unique   top (count)  "&lt;/span&gt;
          &lt;span class="s2"&gt;"rest"&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Column name"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# print(df[column_name].describe())&lt;/span&gt;
        &lt;span class="n"&gt;rest_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value_list'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])[:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: &lt;/span&gt;&lt;span class="si"&gt;{non_nan:&amp;gt;7}&lt;/span&gt;&lt;span class="s2"&gt;   &lt;/span&gt;&lt;span class="si"&gt;{unique:&amp;gt;6}&lt;/span&gt;&lt;span class="s2"&gt;   "&lt;/span&gt;
              &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{top}&lt;/span&gt;&lt;span class="s2"&gt; (&lt;/span&gt;&lt;span class="si"&gt;{count}&lt;/span&gt;&lt;span class="s2"&gt;)  &lt;/span&gt;&lt;span class="si"&gt;{rest}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;non_nan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                      &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                      &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value_list'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'top_count_val'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rest_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;## Other Columns"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: Non-nan   unique   top (count)"&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Column name"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;column_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'other'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;rest_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value_list'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])[:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{column_name:&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{column_name_len}&lt;/span&gt;&lt;span class="s2"&gt;}: &lt;/span&gt;&lt;span class="si"&gt;{non_nan:&amp;gt;7}&lt;/span&gt;&lt;span class="s2"&gt;   &lt;/span&gt;&lt;span class="si"&gt;{unique:&amp;gt;6}&lt;/span&gt;&lt;span class="s2"&gt;   "&lt;/span&gt;
              &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{top}&lt;/span&gt;&lt;span class="s2"&gt; (&lt;/span&gt;&lt;span class="si"&gt;{count}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;non_nan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                      &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                      &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value_list'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                      &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_info_meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'top_count_val'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get parser object for exploratory data analysis."""&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"filename"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"read this csv file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FILE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;which gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Number of datapoints: 891

## Integer Columns
Column name: Non-nan  mean   std   min   25%   50%   75%   max
SibSp      :     891  0.52  1.10     0     0     0     1     8
Parch      :     891  0.38  0.81     0     0     0     0     6

## Float Columns
Column name: Non-nan   mean    std    min    25%    50%    75%    max
Age        :     714  29.70  14.53   0.42  20.12  28.00  38.00  80.00
Fare       :     891  32.20  49.69   0.00   7.91  14.45  31.00  512.33

## Category Columns
Column name: Non-nan   unique   top (count)  rest
Survived   :     891        2   0 (549)  ['1']
Pclass     :     891        3   1 (216)  ['2', '3']
Sex        :     891        2   female (314)  ['male']
Embarked   :     889        4   C (168)  ['Q', 'S']

## Other Columns
Column name: Non-nan   unique   top (count)
PassengerId:     891      891   1 (1)
Name       :     891      891   Abbing, Mr. Anthony (1)
Ticket     :     891      681   110152 (3)
Cabin      :     204      148   A10 (1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is much more useful. In the process, I created a dictionary &lt;code&gt;dtypes&lt;/code&gt; which
tells pandas as which type it should load the columns.&lt;/p&gt;
&lt;p&gt;Also interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df.groupby(df['foo']).count()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="show-single-feature-distribution"&gt;Show single-feature distribution&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Show histograms
numeric_types = ['float64', 'int64', 'uint8']
numerical_features = df.select_dtypes(include=numeric_types)
numerical_features.hist(figsize=(30, 16),
                        bins=50,
                        xlabelsize=8,
                        ylabelsize=8)
plt.savefig("titanic-histograms.png")
plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Histograms of titanic data" src="../images/2017/10/titanic-histograms.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Histograms of titanic data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="find-correlations"&gt;Find correlations&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Show correlations&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;corr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numerical_features&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heatmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"titanic-correlation.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Correlation in Titanic data" src="../images/2017/10/titanic-correlation.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Correlation in Titanic data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="joint-plots_1"&gt;Joint plots&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://seaborn.pydata.org/generated/seaborn.jointplot.html"&gt;&lt;code&gt;seaborn.jointplot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chloe Mawer, Jonathan Whitmore - &lt;a href="https://www.youtube.com/watch?v=W5WE9Db2RLU"&gt;Exploratory data analysis in python&lt;/a&gt; - PyCon 2017&lt;/li&gt;
&lt;/ul&gt;</content><category term="CSV"></category><category term="EDA"></category><category term="Data"></category><category term="Pandas"></category></entry><entry><title>ASR Services</title><link href="https://martin-thoma.com/asr-services/" rel="alternate"></link><published>2017-10-08T20:00:00+02:00</published><updated>2017-10-08T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-10-08:/asr-services/</id><summary type="html">&lt;p&gt;Automatic Speech Recognition (ASR) is really difficult to set up yourself.
There are some toolkits like &lt;a href="https://en.wikipedia.org/wiki/CMU_Sphinx"&gt;CMU Sphinx&lt;/a&gt;
and &lt;a href="https://en.wikipedia.org/wiki/List_of_speech_recognition_software"&gt;others&lt;/a&gt;,
but the last time I checked (some years ago) they either didn't really work or
I couldn't manage to get them running.&lt;/p&gt;
&lt;h2 id="how-does-asr-work"&gt;How does ASR work?&lt;/h2&gt;
&lt;p&gt;One way to do â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Automatic Speech Recognition (ASR) is really difficult to set up yourself.
There are some toolkits like &lt;a href="https://en.wikipedia.org/wiki/CMU_Sphinx"&gt;CMU Sphinx&lt;/a&gt;
and &lt;a href="https://en.wikipedia.org/wiki/List_of_speech_recognition_software"&gt;others&lt;/a&gt;,
but the last time I checked (some years ago) they either didn't really work or
I couldn't manage to get them running.&lt;/p&gt;
&lt;h2 id="how-does-asr-work"&gt;How does ASR work?&lt;/h2&gt;
&lt;p&gt;One way to do ASR is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lets say you have an audio file of 5 minutes&lt;/li&gt;
&lt;li&gt;You split them into frames, e.g. 30ms per frame. Those frames overlap e.g. 5ms.&lt;/li&gt;
&lt;li&gt;You extract features for each frame, e.g. Cepstral features&lt;/li&gt;
&lt;li&gt;You calculate the probability of phonemes / subphonemes for each frame, e.g.
  with a Gausian model. This part is called the &lt;strong&gt;acoustic model&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pronounication models&lt;/strong&gt; (e.g. HMMs) are applied to find possible word
  sequences.&lt;/li&gt;
&lt;li&gt;The most likely word sequence is calculated. Here the &lt;strong&gt;language model&lt;/strong&gt;
  comes into play. That is basically only a counter some important
  details (out of vocabulary, backoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The acoustic model "maps" the sounds to phonemes. One can build an acoustic
model for each speaker / environment to improve the recognition quality.&lt;/p&gt;
&lt;p&gt;The language model rather depends on the context. It contains the information
which words exist at all, how often they occur and which words are likely to
appear together.&lt;/p&gt;
&lt;h2 id="why-is-asr-hard"&gt;Why is ASR hard?&lt;/h2&gt;
&lt;p&gt;There is much variability in a single sentence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Differences in the speaker:&lt;ul&gt;
&lt;li&gt;Intonation&lt;/li&gt;
&lt;li&gt;Volume: It sounds completely different when you whisper something compared to
          normal speech compared to yelling.&lt;/li&gt;
&lt;li&gt;Speed: You can speak extra slow / fast&lt;/li&gt;
&lt;li&gt;Mumbling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Different microphones&lt;/li&gt;
&lt;li&gt;Different environment:&lt;ul&gt;
&lt;li&gt;Background noises&lt;/li&gt;
&lt;li&gt;Small vs big room&lt;/li&gt;
&lt;li&gt;Echo&lt;/li&gt;
&lt;li&gt;Other speakers (the &lt;a href="https://en.wikipedia.org/wiki/Cocktail_party_effect"&gt;cocktail party problem&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other&lt;ul&gt;
&lt;li&gt;Noise vs speech vs "silence"&lt;/li&gt;
&lt;li&gt;Speech vs sneezing vs clearing the throat vs drinking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to recognize speech in real time (e.g. only 3 seconds after the
utterance) it is much more harder. The reason is that you can't use the
context.&lt;/p&gt;
&lt;p&gt;Think of &lt;a href="https://en.wikipedia.org/wiki/Homophone"&gt;homophones&lt;/a&gt;. For example,
when a person says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whole grain food&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;compared to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hole!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you stop after "whole" / "hole" it is almost impossible to know which one
is meant. If you know the next word ("grain") then "hole" does not make any
sense anymore. So: Context matters. A lot.&lt;/p&gt;
&lt;h2 id="what-are-related-tasks"&gt;What are related tasks?&lt;/h2&gt;
&lt;p&gt;Besides simple speech to text, there are a couple of other interesting related
tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language identification&lt;/strong&gt;: Sometimes it is clear from the context, but
  for other applications you might not know which language the speaker(s) is/are
  using.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speaker identification&lt;/strong&gt;: Who said what? How many speakers do we have in the
  first place?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emotion recognition&lt;/strong&gt;: How does the speaker feel? Excited? Angry?
  By comparing the voice with the words used one can also try to recognize
  sarcasm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A question which has to be answered in each task is how close the transcript should
be to the speech. For example, is the transcript&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I &lt;silence&gt; think you &lt;throat clearing=""&gt; you're very smart.&lt;/throat&gt;&lt;/silence&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or rather the transcript&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think you're very smart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;wanted? The first one is closer to the utterance, the second one much easier to
read. It is also likely that follow-up sysystem work better with the second
one.&lt;/p&gt;
&lt;h2 id="asr-services"&gt;ASR Services&lt;/h2&gt;
&lt;p&gt;I looked for a short piece of German discussion and found one with 1 minutes
and 17 seconds from the TV series &lt;em&gt;King of Queens&lt;/em&gt; ("Messerscharfe Logik")
between the characers Arthur and Spence.&lt;/p&gt;
&lt;p&gt;I created the following transcript from it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0:00 - 0:03, background: &amp;lt;MUSIC&amp;gt;&lt;/p&gt;
&lt;p&gt;0:03 - 0:07, Spence: "Hey Arthur, was ist? Haben Sie Lust mit ins Kino zu kommen?"&lt;/p&gt;
&lt;p&gt;0:07 - 0:09, Arthur: "Was soll das? Ich k&amp;ouml;nnte dem Film gar nicht folgen."&lt;/p&gt;
&lt;p&gt;0:09 - 0:13, background: &amp;lt;LAUGHING&amp;gt;&lt;/p&gt;
&lt;p&gt;0:14 - 0:14, Spence: "Was? "&lt;/p&gt;
&lt;p&gt;0:14 - 0:15, Arthur: "Ich verlier meinen Verstand, schon vergessen?"&lt;/p&gt;
&lt;p&gt;0:15 - 0:18, Arthur: "Dieser h&amp;uuml;bsche Comic da k&amp;ouml;nnte ebenso in Griechisch sein"&lt;/p&gt;
&lt;p&gt;0:18 - 0:20, background: &amp;lt;LAUGHING&amp;gt;&lt;/p&gt;
&lt;p&gt;0:19 - 0:23, Spence: "Arthur, Sie verlieren nicht den Verstand. Sie reden das nur ein!"&lt;/p&gt;
&lt;p&gt;0:23 - 0:25, Arthur: "Dann werden wir das jetzt mal Testen!"&lt;/p&gt;
&lt;p&gt;0:25 - 0:26, Spence: "Wie?"&lt;/p&gt;
&lt;p&gt;0:26 - 0:32, Arthur: "Ich war immer in der Lage &amp;uuml;ber jedes Thema zu diskutieren und konnte gegnerische Argumente mit messerscharfer Logik abwehren."&lt;/p&gt;
&lt;p&gt;0:32 - 0:34, Spence: "Sie wollen, dass ich mit ihnen diskutiere?"&lt;/p&gt;
&lt;p&gt;0:33 - 0:34, Arthur: "Ganz genau!"&lt;/p&gt;
&lt;p&gt;0:34 - 0:37, Arthur: "Wir werden uns ein Thema aussuchen und dann sehen wir ob ich meinen Mann stehen kann."&lt;/p&gt;
&lt;p&gt;0:37 - 0:40, Spence: "Ok, und wie lautet das Thema?"&lt;/p&gt;
&lt;p&gt;0:41 - 0:46, Arthur: "Wie w&amp;auml;r es damit: Sollten die Vereinigten Staaten die Beziehung zu Kuba normalisieren?"&lt;/p&gt;
&lt;p&gt;0:46 - 0:47, Arthur: "Du bist daf&amp;uuml;r!"&lt;/p&gt;
&lt;p&gt;0:47 - 0:47, Spence: "Na sch&amp;ouml;n."&lt;/p&gt;
&lt;p&gt;0:47 - 0:48, Spence: "&amp;Auml;&amp;auml;&amp;auml;&amp;auml;h"&lt;/p&gt;
&lt;p&gt;0:48 - 0:56, Spence: "Der kalte Krieg ist seit 10 Jahren vorbei, Kuba ist keine Bedrohung mehr, k&amp;ouml;nnte stattdessen aber ein Verb&amp;uuml;ndeter und guter Handelspartner werden."&lt;/p&gt;
&lt;p&gt;0:56 - 0:59, Spence: "Es w&amp;auml;re also vern&amp;uuml;nftig die Beziehung zu Kuba zu normalisieren."&lt;/p&gt;
&lt;p&gt;1:00 - 1:04, Arthur (angry): "Du verdammter Bl&amp;ouml;dmann, was wei&amp;szlig;t du denn schon?"&lt;/p&gt;
&lt;p&gt;1:04 - 1:05, Background: &amp;lt;LAUGHING&amp;gt;&lt;/p&gt;
&lt;p&gt;1:04 - 1:08, Arthur (angry): "Du bist ein elender Schmarotzer, der nicht mal eine Frau kriegen kann."&lt;/p&gt;
&lt;p&gt;1:08 - 1:10, Background: &amp;lt;LAUGHING&amp;gt;&lt;/p&gt;
&lt;p&gt;1:08 - 1:09, Arthur (angry): "Wenn du unbedingt etwas normalisieren willst, warum f&amp;auml;ngst du dann nicht mit deinem Gesicht an!"&lt;/p&gt;
&lt;p&gt;1:11 - 1:17, Background: &amp;lt;LAUGHING&amp;gt;&lt;/p&gt;
&lt;p&gt;1:14 - 1:15, Arthur (happy): "Ich kann es noch!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the way, a good example for the question how close one should be to the
original is "Ich verlier meinen Verstand". That is colloquial language. Correct
would be "Ich verliere meinen Verstand".&lt;/p&gt;
&lt;p&gt;It is also an example that people interrupt each other. Sometimes Arthur and
Spence speak at the same time although it does not sound to us as if it is the
case. In fact, I only noticed it when I created the transcript.&lt;/p&gt;
&lt;h3 id="pythons-speechrecognition-package"&gt;Pythons SpeechRecognition Package&lt;/h3&gt;
&lt;p&gt;I will use the &lt;a href="https://pypi.python.org/pypi/SpeechRecognition/"&gt;SpeechRecognition package&lt;/a&gt;
in the latest version (3.7.1) to interact with services. I will use Python&amp;nbsp;3
for the rest.&lt;/p&gt;
&lt;p&gt;To install it, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -H pip install SpeechRecognition --upgrade
$ sudo -H pip install pocketsphinx
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pocketsphinx"&gt;Pocketsphinx&lt;/h3&gt;
&lt;p&gt;Installation:&lt;/p&gt;
&lt;p&gt;Now follow &lt;a href="https://github.com/Uberi/speech_recognition/blob/master/reference/pocketsphinx.rst#notes-on-the-structure-of-the-language-data"&gt;this guide&lt;/a&gt; to get support
for German. You only have to download some files from Sourceforge and add them
to the right directory with the right name. At the end, the folder
&lt;code&gt;/usr/local/lib/python3.5/dist-packages/speech_recognition/pocketsphinx-data/de-DE&lt;/code&gt;
should contain the following files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
â”œâ”€â”€ acoustic-model
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ feat.params
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ feature_transform
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ mdef
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ means
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ mixture_weights
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ noisedict
â”‚&amp;nbsp;&amp;nbsp; â”œâ”€â”€ transition_matrices
â”‚&amp;nbsp;&amp;nbsp; â””â”€â”€ variances
â”œâ”€â”€ language-model.lm.bin
â””â”€â”€ pronounciation-dictionary.dict
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Script:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="sd"&gt;"""Recognize speech using CMU Sphinx (local)."""&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;speech_recognition&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sr&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recognize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Transcribe an audio file to text.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    filepath : str&lt;/span&gt;
&lt;span class="sd"&gt;        Path to a WAV file&lt;/span&gt;
&lt;span class="sd"&gt;    language : str, optional (default: English)&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    text : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Recognizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AudioFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# read the entire audio file&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recognize_sphinx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recognize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.wav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"de-DE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnknownValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx could not understand audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx error; &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;which results in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h&amp;auml;tten und l&amp;auml;ndern der erwerb des handels mit ins kino zu beantragen was soll
ich ich k&amp;ouml;nnte mit dem land folgen gehabt das hei&amp;szlig;t die f&amp;uuml;r mein verstand schon
vergessen g&amp;uuml;rtel kommentare und ebenso in sicher schaffen erhard war sie
verlieren nicht den verstand sie reden sich das nein dann werden wir das
weitesten die ich war immer in der lage &amp;uuml;ber jedes thema zu diskutieren konnte
gegnerische argument in das verfasser logik abwehr sie wollen dass ich mit
ihnen diskutieren flora gegenseitigen aussuchen und dann sehen wir auch ich
mein mann stehen kann und den verlauf des themen widerstand sollten die
vereinigten staaten den beziehungen zu kuba normalisierung br&amp;uuml;ssel f&amp;uuml;r erstellt
der der kalte krieg ist seit zehn jahren vorbei in sobald keine bedrohung mehr
k&amp;ouml;nnte statt dessen ein verb&amp;uuml;ndeter oder handels partner werden es mir also
vern&amp;uuml;nftig die beziehungen zu kuba zu normalisierung so sei dank der
arbeitsleistung es um gewinne durch eine l&amp;auml;nder schwarze eigentlich war es auch
die anderer wenn dominiert das normalisiert ins auge sechs landwirte angesichts
allgemeine haltung ich kann es noch f&amp;uuml;r europa
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is bad for many reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The transcript is utterly wrong: For some parts you can notice that it does
  something right, but overall the result is not usable.&lt;/li&gt;
&lt;li&gt;No punctuation&lt;/li&gt;
&lt;li&gt;No speaker recognition&lt;/li&gt;
&lt;li&gt;(No background noises)&lt;/li&gt;
&lt;li&gt;It takes 38s on a Thinkpad T460p with Ubuntu 16.04 and Python&amp;nbsp;3.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="microsoft-cognitive-services"&gt;Microsoft Cognitive Services&lt;/h3&gt;
&lt;p&gt;Starting at the &lt;a href="https://azure.microsoft.com/de-de/services/cognitive-services/speech/"&gt;start page&lt;/a&gt;,
I first had to &lt;a href="https://portal.azure.com"&gt;create an Azure account&lt;/a&gt;. You
will need a credit card (pre-paid credit cards are not accepted).&lt;/p&gt;
&lt;p&gt;Microsoft knows the following 10 languages for conversation mode (&lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/speech/api-reference-rest/bingvoicerecognition"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ar-EG&lt;/td&gt;
&lt;td&gt;Arabic (Egypt), modern standard&lt;/td&gt;
&lt;td&gt;It-IT&lt;/td&gt;
&lt;td&gt;Italian (Italy)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;de-DE&lt;/td&gt;
&lt;td&gt;German (Germany)&lt;/td&gt;
&lt;td&gt;ja-JP&lt;/td&gt;
&lt;td&gt;Japanese (Japan)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;en-US&lt;/td&gt;
&lt;td&gt;English (United States)&lt;/td&gt;
&lt;td&gt;pt-BR&lt;/td&gt;
&lt;td&gt;Portuguese (Brazil)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;es-ES&lt;/td&gt;
&lt;td&gt;Spanish (Spain)&lt;/td&gt;
&lt;td&gt;ru-RU&lt;/td&gt;
&lt;td&gt;Russian (Russia)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fr-FR&lt;/td&gt;
&lt;td&gt;French (France)&lt;/td&gt;
&lt;td&gt;zh-CN&lt;/td&gt;
&lt;td&gt;Chinese (Mandarin, simplified)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Please note that there are many more for interactive and dictation mode.&lt;/p&gt;
&lt;p&gt;The following code is used to create a transcript:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="sd"&gt;"""Recognize speech using Microsoft Bing Voice Recognition."""&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;speech_recognition&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sr&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recognize_bing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Transcribe an audio file to text.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    filepath : str&lt;/span&gt;
&lt;span class="sd"&gt;        Path to a WAV file&lt;/span&gt;
&lt;span class="sd"&gt;    bing_key : str&lt;/span&gt;
&lt;span class="sd"&gt;        32-character lowercase hexadecimal string from https://portal.azure.com&lt;/span&gt;
&lt;span class="sd"&gt;    language : str, optional (default: English)&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    text : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# use the audio file as the audio source&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Recognizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AudioFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# read the entire audio file&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recognize_bing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Microsoft Bing Voice Recognition API uses keys which are&lt;/span&gt;
    &lt;span class="c1"&gt;# 32-character lowercase hexadecimal strings&lt;/span&gt;
    &lt;span class="n"&gt;bing_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"INSERT YOUR BING KEY HERE"&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recognize_bing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.wav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"de-DE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnknownValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx could not understand audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx error; &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This resulted in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Reaser Was ist haben sie Lust mit dem Kino zu kommen war schon dass ich k&amp;ouml;nnte
den Film gar nicht folgen.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and took only 2.6s. It only recognized the first part because the
SpeechRecognition package uses the REST interface instead of the WebSocket
interface. The REST interface is limited to 15 seconds of audio (&lt;a href="https://docs.microsoft.com/de-de/azure/cognitive-services/speech/home"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;By default, SpeechRecognition package uses the endpoint&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://speech.platform.bing.com/speech/recognition/interactive/cognitiveservices/v1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changing this to &lt;code&gt;conversation&lt;/code&gt; changes the result to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Die erster Was ist haben sie Lust mit dem Kino zu kommen war schon dass ich
k&amp;ouml;nnte den Film gar nicht folgen
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="google"&gt;Google&lt;/h3&gt;
&lt;p&gt;The script&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="sd"&gt;"""Recognize speech using Googles ASR Service."""&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;speech_recognition&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sr&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recognize_google&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Transcribe an audio file to text.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    filepath : str&lt;/span&gt;
&lt;span class="sd"&gt;        Path to a WAV file&lt;/span&gt;
&lt;span class="sd"&gt;    language : str, optional (default: English)&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    text : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# use the audio file as the audio source&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Recognizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AudioFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# read the entire audio file&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recognize_google&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recognize_google&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.wav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"de-DE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnknownValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx could not understand audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx error; &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sphinx error; recognition connection failed: [Errno 32] Broken pipe
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="google-cloud"&gt;Google Cloud&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://cloud.google.com/speech/"&gt;documentation of Google cloud speech API&lt;/a&gt;
and the &lt;a href="https://developers.google.com/apis-explorer/?hl=de#p/speech/v1/"&gt;developers page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It can only be used for commerical purposes, so I can't try it right now.
The command is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r.recognize_google_cloud(audio, credentials_json=GOOGLE_CLOUD_SPEECH_CREDENTIALS)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ibm"&gt;IBM&lt;/h3&gt;
&lt;p&gt;IBM has a speech recognition service, see &lt;a href="https://www.ibm.com/watson/services/speech-to-text/"&gt;starting page&lt;/a&gt;.
But looking at &lt;a href="https://speech-to-text-demo.mybluemix.net"&gt;this page&lt;/a&gt;, it seems
as if it only supports&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arabic&lt;/li&gt;
&lt;li&gt;English (GB and US)&lt;/li&gt;
&lt;li&gt;French&lt;/li&gt;
&lt;li&gt;Japanese&lt;/li&gt;
&lt;li&gt;Mandarin&lt;/li&gt;
&lt;li&gt;Portuguese&lt;/li&gt;
&lt;li&gt;Spanish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As it doesn't support German, I didn't continue here.&lt;/p&gt;
&lt;h3 id="witai"&gt;Wit.ai&lt;/h3&gt;
&lt;p&gt;The service &lt;a href="https://wit.ai/"&gt;wit.ai&lt;/a&gt; seems to be much simpler to use. You set
the language over the web interface.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="sd"&gt;"""Recognize speech using wit.ai ASR Service."""&lt;/span&gt;

&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;speech_recognition&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sr&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recognize_wit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Transcribe an audio file to text.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    filepath : str&lt;/span&gt;
&lt;span class="sd"&gt;        Path to a WAV file&lt;/span&gt;
&lt;span class="sd"&gt;    key : str&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    text : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# use the audio file as the audio source&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Recognizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AudioFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# read the entire audio file&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recognize_wit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;server_access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"12ABCDEFGHIJKLMNOPQRSTUVWXYZABCD"&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recognize_wit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input.wav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;server_access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnknownValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx could not understand audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sphinx error; &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ey Alter was ist haben Sie Lust mit dem Kino zu kommen ich k&amp;ouml;nnte den Film gar
nicht folgen ich verliere meinen Verstand schon vergessen dieser Hitze komme
ich da k&amp;ouml;nnte ebenso in Griechisch sie verlieren den Verstand die reden dann
werden wir das jetzt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The transcript is mostly right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is ok:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It took 19s for this. This is about the same time as playing the audio takes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is bad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No punctuation&lt;/li&gt;
&lt;li&gt;No speaker recognition&lt;/li&gt;
&lt;li&gt;(No background noises)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="houndify"&gt;Houndify&lt;/h3&gt;
&lt;p&gt;Houndify has a &lt;a href="https://docs.houndify.com/sdks/docs/python"&gt;Python SDK&lt;/a&gt;. It
seems not to be possible to change the language. It reminds me very much of
Alexa Skills.&lt;/p&gt;
&lt;p&gt;Trying it with the SpeechRecognition package yields&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sphinx error; recognition request failed: Bad Gateway
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don't think I'll put more time in that one.&lt;/p&gt;
&lt;h2 id="related_1"&gt;Related&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;KIT Lecture &lt;a href="https://www.youtube.com/watch?v=umzIFcf6IX0&amp;amp;list=PLfk0Dfh13pBNTFz-RnOlgYIPv3UbJ3upf"&gt;Grundlagen der Automatischen Spracherkennung&lt;/a&gt; WS 2016/17 as a YouTube playlist&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="ASR"></category><category term="Service"></category></entry><entry><title>1D Data Visualization</title><link href="https://martin-thoma.com/1d-data-visualization/" rel="alternate"></link><published>2017-09-03T20:00:00+02:00</published><updated>2017-09-03T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-09-03:/1d-data-visualization/</id><summary type="html">&lt;p&gt;Once in a while I have to visualize simple 1D numerical data. So here is an
example script:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32 â€¦&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;Once in a while I have to visualize simple 1D numerical data. So here is an
example script:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;"""Visualize C_0.99 for all languages except the 10 with most characters."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"whitegrid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Plot a 1D list l of numbers."""&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barplot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
                     &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;palette&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'big'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticks&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'example.pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'example.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;118&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;119&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;en_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;en_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# eng&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;en_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# rus&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'grey'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plot_1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Languages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'$|C_{99}|$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;which gives&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2017/09/1d-data-example.png"&gt;&lt;img alt="Visualization of 1D numeric data" src="../images/2017/09/1d-data-example.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Visualization of 1D numeric data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="prerequesites"&gt;Prerequesites&lt;/h2&gt;
&lt;p&gt;You need to install &lt;a href="http://seaborn.pydata.org/installing.html"&gt;&lt;code&gt;seaborn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/generated/seaborn.barplot.html"&gt;&lt;code&gt;seaborn.barplot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/generated/seaborn.countplot.html"&gt;&lt;code&gt;seaborn.countplot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/generated/seaborn.distplot.html"&gt;&lt;code&gt;seaborn.distplot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Data Visualization"></category></entry><entry><title>ML Review 6</title><link href="https://martin-thoma.com/ml-review-6/" rel="alternate"></link><published>2017-08-31T20:00:00+02:00</published><updated>2017-08-31T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-08-31:/ml-review-6/</id><summary type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="news"&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hardware&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.nvidia.com/parallelforall/inside-volta/"&gt;Inside Volta: The World&amp;rsquo;s Most Advanced Data Center GPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/data-center/dgx-systems/"&gt;NVIDIA DGX SYSTEMS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core-Software&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.nvidia.com/parallelforall/cuda-9-features-revealed/"&gt;CUDA 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.nvidia.com/cudnn"&gt;cuDNN 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.nvidia.com/parallelforall/scaling-keras-training-multiple-gpus/"&gt;Scaling Keras Model Training to Multiple GPUs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Applications:&lt;ul&gt;
&lt;li&gt;Facebook: &lt;a href="https://code.facebook.com/posts/289921871474277/transitioning-entirely-to-neural-machine-translation/"&gt;Transitioning entirely to neural â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="news"&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hardware&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.nvidia.com/parallelforall/inside-volta/"&gt;Inside Volta: The World&amp;rsquo;s Most Advanced Data Center GPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/data-center/dgx-systems/"&gt;NVIDIA DGX SYSTEMS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core-Software&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.nvidia.com/parallelforall/cuda-9-features-revealed/"&gt;CUDA 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.nvidia.com/cudnn"&gt;cuDNN 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.nvidia.com/parallelforall/scaling-keras-training-multiple-gpus/"&gt;Scaling Keras Model Training to Multiple GPUs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Applications:&lt;ul&gt;
&lt;li&gt;Facebook: &lt;a href="https://code.facebook.com/posts/289921871474277/transitioning-entirely-to-neural-machine-translation/"&gt;Transitioning entirely to neural machine translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nVidia: &lt;a href="https://news.developer.nvidia.com/microsoft-sets-new-speech-recognition-record/"&gt;Microsoft Sets New Speech Recognition Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nature: &lt;a href="http://www.nature.com/news/artificial-intelligence-identifies-plant-species-for-science-1.22442"&gt;Artificial intelligence identifies plant species for science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nVidia: &lt;a href="https://news.developer.nvidia.com/ai-writes-believable-fake-yelp-reviews/"&gt;AI Writes Believable Fake Yelp Reviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other&lt;ul&gt;
&lt;li&gt;OpenAI: &lt;a href="https://blog.openai.com/robust-adversarial-inputs/"&gt;Robust Adversarial Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/MachineLearning/comments/6qvbu8/d_where_does_this_hyped_news_come_from_facebook/"&gt;Where does this hyped news come from? &lt;em&gt;Facebook shut down AI that invented its own language.&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wired: &lt;a href="https://www.wired.com/story/machines-taught-by-photos-learn-a-sexist-view-of-women/"&gt;Machines Taught by Photos Learn a Sexist View of Women&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="live-demos-websites-and-blogs"&gt;Live Demos, Websites and Blogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anish Athalye: &lt;a href="http://www.anishathalye.com/2017/07/25/synthesizing-adversarial-examples/"&gt;A Step-by-Step Guide to Synthesizing Adversarial Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aran Lunzer and Amelia McNamara: &lt;a href="http://tinlizzie.org/histograms/"&gt;What's so hard about histograms?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kaggle:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/c/imagenet-object-localization-challenge"&gt;ImageNet Object Localization Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/c/imagenet-object-detection-challenge"&gt;ImageNet Object Detection Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/c/imagenet-object-detection-from-video-challenge"&gt;ImageNet Object Detection from Video Challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Martin Thoma: &lt;a href="https://martin-thoma.com/document-classification/"&gt;Document Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metadata: &lt;a href="http://muratbuffalo.blogspot.de/2017/07/a-comparison-of-distributed-machine.html"&gt;A Comparison of Distributed Machine Learning Platforms&lt;/a&gt; (Spark, PMLS, TensorFlow)&lt;/li&gt;
&lt;li&gt;Hu, Peiyun and Ramanan, Deva: &lt;a href="https://github.com/peiyunh/tiny/blob/master/README.md"&gt;Finding Tiny Faces&lt;/a&gt; (MATLAB)&lt;/li&gt;
&lt;li&gt;Mozilla: &lt;a href="https://voice.mozilla.org/"&gt;Common Voice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Slav Ivanov: &lt;a href="https://blog.slavv.com/37-reasons-why-your-neural-network-is-not-working-4020854bd607"&gt;37 Reasons why your Neural Network is not working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.humblebundle.com/books/data-science-books"&gt;&lt;strong&gt;Humble Book Bundle - Data Science&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexgkendall.com/computer_vision/bayesian_deep_learning_for_safe_ai/"&gt;Deep Learning Is Not Good Enough, We Need Bayesian Deep Learning for Safe AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.deepl.com/translate"&gt;DeepL&lt;/a&gt;: &lt;a href="https://www.golem.de/news/deepl-im-hands-on-neues-tool-uebersetzt-viel-besser-als-google-und-microsoft-1708-129715.html"&gt;Neues Tool &amp;uuml;bersetzt viel besser als Google und Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CA7fjRfduOI"&gt;TensorFlow Debugger Screencast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publications"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;ul&gt;
&lt;li&gt;Martin Thoma: &lt;a href="https://arxiv.org/abs/1707.09725"&gt;Analysis and Optimization of Convolutional Neural Network Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Abhinav Gupta (Google): &lt;a href="https://research.googleblog.com/2017/07/revisiting-unreasonable-effectiveness.html"&gt;Revisiting the Unreasonable Effectiveness of Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software"&gt;Software&lt;/h2&gt;
&lt;!-- e.g. Theano, Keras, ... --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/DeepSpeech"&gt;mozilla/DeepSpeech&lt;/a&gt; (Tensorflow)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dennybritz/cnn-text-classification-tf"&gt;dennybritz/cnn-text-classification-tf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="interesting-questions"&gt;Interesting Questions&lt;/h2&gt;
&lt;!-- For example StackExchange --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://datascience.stackexchange.com/q/22335/8820"&gt;Why are Machine Learning models called black boxes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datascience.stackexchange.com/q/22312/8820"&gt;What is an appropriate way to compare classifiers with different sets of classes?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## Miscallenious

### Blogs / Websites

* [distill.pub](http://distill.pub/): Some nice articles (e.g. one about t-SNE) --&gt;
&lt;!--
## Meetings

* Amsterdam, 8. April 2017: [PyData](https://pydata.org/amsterdam2017/)
* Austin (Texas, USA), 10. July 2017: [SciPy 2017](https://scipy2017.scipy.org/ehome/220975/493391/) --&gt;
&lt;div class="navigation clearfix"&gt;
&lt;div class="alignleft"&gt;
&lt;a href="https://martin-thoma.com/ml-review-5/" rel="prev"&gt;&amp;laquo; Previous Review&lt;/a&gt;
&lt;/div&gt;&lt;!--
    &lt;div class="alignright"&gt;
        &lt;a href="https://martin-thoma.com/ml-review-7/" rel="next"&gt;Next Review Â»&lt;/a&gt;
    &lt;/div&gt;--&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category><category term="matplotlib"></category></entry><entry><title>Data Visualization with Python</title><link href="https://martin-thoma.com/python-data-visualization/" rel="alternate"></link><published>2017-08-02T20:00:00+02:00</published><updated>2017-08-02T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-08-02:/python-data-visualization/</id><summary type="html">&lt;p&gt;Python has a lot of libraries for data visualization and I recently stumbled
over an awesome talk from PyCon 2017 by Jake VanderPlas titled "The Python
Visualization Landscape" which gives an overview over them:&lt;/p&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/FytuB8nFHPQ" width="560"&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Matplotlib&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/"&gt;seaborn&lt;/a&gt;: statistical data visualization&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;: Dataframes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://networkx.github.io/"&gt;networkx&lt;/a&gt;: Graphs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yhat/ggpy"&gt;ggpy&lt;/a&gt;: Python implementation of the grammar of â€¦&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Python has a lot of libraries for data visualization and I recently stumbled
over an awesome talk from PyCon 2017 by Jake VanderPlas titled "The Python
Visualization Landscape" which gives an overview over them:&lt;/p&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/FytuB8nFHPQ" width="560"&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Matplotlib&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/"&gt;seaborn&lt;/a&gt;: statistical data visualization&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;: Dataframes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://networkx.github.io/"&gt;networkx&lt;/a&gt;: Graphs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yhat/ggpy"&gt;ggpy&lt;/a&gt;: Python implementation of the grammar of graphics&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ggplot.yhathq.com/"&gt;&lt;code&gt;ggplot&lt;/code&gt;&lt;/a&gt;: Also based on the Grammar of Graphics&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DistrictDataLabs/yellowbrick"&gt;Yellow Brick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reiinakano/scikit-plot"&gt;scikit-plot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bokeh/datashader"&gt;Datashader&lt;/a&gt;: Turns even the largest data into images&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maartenbreddels/vaex"&gt;Vaex&lt;/a&gt;: visualize and explore large (~billion rows/objects) tabular datasets interactively&lt;/li&gt;
&lt;li&gt;&lt;a href="http://holoviews.org/"&gt;Holoviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javascript&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plot.ly/python/"&gt;plotly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;bokeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/santosjorge/cufflinks"&gt;cufflinks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bloomberg/bqplot"&gt;bqplot&lt;/a&gt;: Plotting library for IPython/Jupyter Notebooks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jovyan/pythreejs"&gt;pythreejs&lt;/a&gt;: A Jupyter - ThreeJS bridge&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ellisonbg/ipyleaflet"&gt;ipyleaflet&lt;/a&gt;: IPython Widget for &lt;a href="https://leafletjs.com/"&gt;Leaflet&lt;/a&gt; Maps&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maartenbreddels/ipyvolume"&gt;ipyvolume&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenGL&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vispy.org/"&gt;Vispy&lt;/a&gt;: interactive scientific visualization&lt;/li&gt;
&lt;li&gt;&lt;a href="https://glumpy.github.io/"&gt;Glumpy&lt;/a&gt;: scientific visualization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Specification languages:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vega/vega"&gt;Vega&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vincent.readthedocs.io/en/latest/"&gt;Vincent&lt;/a&gt;: A Python to Vega Translator&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vega.github.io/vega-lite/"&gt;Vega Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://altair-viz.github.io/"&gt;Altair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/information-field-theory/d3po"&gt;d3po&lt;/a&gt;: Denoising, Deconvolving, and Decomposing Photon Observations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="maps"&gt;Maps&lt;/h2&gt;
&lt;p&gt;Visualizing maps is super hard, as the tools which exist don't have good
installers.&lt;/p&gt;
&lt;p&gt;Here is what I've tried/seen so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gmtpython.xyz/latest/"&gt;&lt;code&gt;gmt-python&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/GenericMappingTools/gmt-python/issues/215"&gt;issue 215&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=6wMtfZXfTRM"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andrea-cuttone/geoplotlib"&gt;&lt;code&gt;geoplotlib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3d"&gt;3D&lt;/h2&gt;
&lt;h3 id="mayavi"&gt;Mayavi&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/MayaVi"&gt;MayaVi&lt;/a&gt; is a scientific data visualizer written in Python, which uses VTK and provides a GUI via Tkinter.&lt;/p&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/r6OD07Qq2mw" width="560"&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.enthought.com/mayavi/mayavi/"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 3rd party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mayavi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mlab&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;mgrid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mlab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;surf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/07/mayavi-sin-3d-example.png"&gt;&lt;img alt="3D plot generated with Mayavi" src="../images/2018/07/mayavi-sin-3d-example.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;3D plot generated with Mayavi&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="Data Visualization"></category><category term="Python"></category><category term="Vega"></category><category term="Matplotlib"></category></entry><entry><title>The Reuters Dataset</title><link href="https://martin-thoma.com/nlp-reuters/" rel="alternate"></link><published>2017-07-27T20:00:00+02:00</published><updated>2017-07-27T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-07-27:/nlp-reuters/</id><summary type="html">&lt;p&gt;Reuters is a benchmark dataset for &lt;a href="https://martin-thoma.com/document-classification/"&gt;document classification&lt;/a&gt;.
To be more precise, it is a multi-class (e.g. there are multiple classes),
multi-label (e.g. each document can belong to many classes) dataset.
It has &lt;strong&gt;90 classes&lt;/strong&gt;, &lt;strong&gt;7769 training documents&lt;/strong&gt; and &lt;strong&gt;3019 testing documents&lt;/strong&gt;.
It is the ModApte (R(90 â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Reuters is a benchmark dataset for &lt;a href="https://martin-thoma.com/document-classification/"&gt;document classification&lt;/a&gt;.
To be more precise, it is a multi-class (e.g. there are multiple classes),
multi-label (e.g. each document can belong to many classes) dataset.
It has &lt;strong&gt;90 classes&lt;/strong&gt;, &lt;strong&gt;7769 training documents&lt;/strong&gt; and &lt;strong&gt;3019 testing documents&lt;/strong&gt;.
It is the ModApte (R(90)) subest of the Reuters-21578 benchmark (&lt;a href="https://stackoverflow.com/a/25149714/562769"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The mean number of words per document, grouped by class, is between 93 and 1263
on the training set.&lt;/p&gt;
&lt;p&gt;The training set has a &lt;strong&gt;vocabulary size of 35247&lt;/strong&gt;. Even if you restrict it to
words which appear at least 5 times and at most 12672 times in the training
set, there are still 12017 words.&lt;/p&gt;
&lt;h2 id="classes-and-labels"&gt;Classes and Labels&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                             nr of documents   mean number of
        class name            train   test    words in train set
     1: earn                : 2877    1087    104.4
     2: acq                 : 1650     719    150.1
     3: money-fx            :  538     179    219.0
     4: grain               :  433     149    223.6
     5: crude               :  389     189    247.3
     6: trade               :  368     117    294.3
     7: interest            :  347     131    198.0
     8: wheat               :  212      71    225.6
     9: ship                :  197      89    203.7
    10: corn                :  181      56    259.1
    11: money-supply        :  140      34    170.5
    12: dlr                 :  131      44    230.4
    13: sugar               :  126      36    247.2
    14: oilseed             :  124      47    277.9
    15: coffee              :  111      28    264.1
    16: gnp                 :  101      35    372.8
    17: gold                :   94      30    188.5
    18: veg-oil             :   87      37    291.0
    19: soybean             :   78      33    347.9
    20: livestock           :   75      24    222.9
    21: nat-gas             :   75      30    257.7
    22: bop                 :   75      30    288.1
    23: cpi                 :   69      28    235.4
    24: cocoa               :   55      18    266.4
    25: reserves            :   55      18    216.1
    26: carcass             :   50      18    259.7
    27: copper              :   47      18    201.6
    28: jobs                :   46      21    232.7
    29: yen                 :   45      14    282.8
    30: ipi                 :   41      12    232.1
    31: iron-steel          :   40      14    220.5
    32: cotton              :   39      20    366.3
    33: barley              :   37      14    272.9
    34: gas                 :   37      17    209.4
    35: rubber              :   37      12    274.5
    36: alum                :   35      23    180.5
    37: rice                :   35      24    359.8
    38: palm-oil            :   30      10    234.5
    39: meal-feed           :   30      19    387.1
    40: sorghum             :   24      10    511.3
    41: retail              :   23       2    324.8
    42: zinc                :   21      13    189.9
    43: silver              :   21       8    221.0
    44: pet-chem            :   20      12    204.9
    45: wpi                 :   19      10    200.9
    46: tin                 :   18      12    322.1
    47: rapeseed            :   18       9    168.6
    48: orange              :   16      11    169.6
    49: strategic-metal     :   16      11    205.6
    50: housing             :   16       4    207.2
    51: hog                 :   16       6    162.3
    52: lead                :   15      14    216.7
    53: soy-oil             :   14      11    568.7
    54: heat                :   14       5    190.4
    55: fuel                :   13      10    194.6
    56: soy-meal            :   13      13    551.0
    57: lei                 :   12       3    134.7
    58: sunseed             :   11       5    425.1
    59: dmk                 :   10       4    212.1
    60: lumber              :   10       6    242.1
    61: tea                 :    9       4    365.1
    62: income              :    9       7    286.4
    63: nickel              :    8       1    193.6
    64: oat                 :    8       6    648.4
    65: l-cattle            :    6       2    298.0
    66: instal-debt         :    5       1    134.3
    67: platinum            :    5       7    174.8
    68: groundnut           :    5       4    258.0
    69: rape-oil            :    5       3    167.2
    70: sun-oil             :    5       2    201.9
    71: coconut-oil         :    4       3    471.4
    72: jet                 :    4       1    109.6
    73: coconut             :    4       2    264.5
    74: propane             :    3       3    352.0
    75: potato              :    3       3    161.2
    76: cpu                 :    3       1    133.2
    77: rand                :    2       1    345.7
    78: palmkernel          :    2       1    326.3
    79: copra-cake          :    2       1    495.0
    80: dfl                 :    2       1    764.7
    81: naphtha             :    2       4    206.7
    82: palladium           :    2       1    93.0
    83: nzdlr               :    2       2    508.8
    84: groundnut-oil       :    1       1    277.5
    85: castor-oil          :    1       1    194.0
    86: sun-meal            :    1       1    153.0
    87: lin-oil             :    1       1    262.5
    88: cotton-oil          :    1       2    1262.7
    89: rye                 :    1       1    383.0
    90: nkr                 :    1       2    122.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By far most documents have either one or two labels, but some have up to 15:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;labelcount= 1, documentcount=9160
labelcount= 2, documentcount=1173
labelcount= 3, documentcount= 255
labelcount= 4, documentcount=  91
labelcount= 5, documentcount=  52
labelcount= 6, documentcount=  27
labelcount= 7, documentcount=   9
labelcount= 8, documentcount=   7
labelcount= 9, documentcount=   5
labelcount=10, documentcount=   3
labelcount=11, documentcount=   2
labelcount=14, documentcount=   2
labelcount=12, documentcount=   1
labelcount=15, documentcount=   1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's look at the relationship between the classes. Which classes occur often
together? Are there classes which can be used to predict the presence of other
classes? For example, &lt;code&gt;wheat&lt;/code&gt; should imply &lt;code&gt;grain&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are the 50 strongest predictors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;castor-oil =&amp;gt; cotton-oil (0.999742566611)
castor-oil =&amp;gt; groundnut-oil (0.999742566611)
castor-oil =&amp;gt; lin-oil (0.999742566611)
castor-oil =&amp;gt; nkr (0.999742566611)
castor-oil =&amp;gt; rye (0.999742566611)
castor-oil =&amp;gt; sun-meal (0.999742566611)
copra-cake =&amp;gt; palmkernel (0.999742566611)
cotton-oil =&amp;gt; castor-oil (0.999742566611)
cotton-oil =&amp;gt; groundnut-oil (0.999742566611)
cotton-oil =&amp;gt; lin-oil (0.999742566611)
cotton-oil =&amp;gt; nkr (0.999742566611)
cotton-oil =&amp;gt; rye (0.999742566611)
cotton-oil =&amp;gt; sun-meal (0.999742566611)
groundnut-oil =&amp;gt; castor-oil (0.999742566611)
groundnut-oil =&amp;gt; cotton-oil (0.999742566611)
groundnut-oil =&amp;gt; lin-oil (0.999742566611)
groundnut-oil =&amp;gt; nkr (0.999742566611)
groundnut-oil =&amp;gt; rye (0.999742566611)
groundnut-oil =&amp;gt; sun-meal (0.999742566611)
lin-oil =&amp;gt; castor-oil (0.999742566611)
lin-oil =&amp;gt; cotton-oil (0.999742566611)
lin-oil =&amp;gt; groundnut-oil (0.999742566611)
lin-oil =&amp;gt; nkr (0.999742566611)
lin-oil =&amp;gt; rye (0.999742566611)
lin-oil =&amp;gt; sun-meal (0.999742566611)
nkr =&amp;gt; castor-oil (0.999742566611)
nkr =&amp;gt; cotton-oil (0.999742566611)
nkr =&amp;gt; groundnut-oil (0.999742566611)
nkr =&amp;gt; lin-oil (0.999742566611)
nkr =&amp;gt; rye (0.999742566611)
nkr =&amp;gt; sun-meal (0.999742566611)
palmkernel =&amp;gt; copra-cake (0.999742566611)
rye =&amp;gt; castor-oil (0.999742566611)
rye =&amp;gt; cotton-oil (0.999742566611)
rye =&amp;gt; groundnut-oil (0.999742566611)
rye =&amp;gt; lin-oil (0.999742566611)
rye =&amp;gt; nkr (0.999742566611)
rye =&amp;gt; sun-meal (0.999742566611)
sun-meal =&amp;gt; castor-oil (0.999742566611)
sun-meal =&amp;gt; cotton-oil (0.999742566611)
sun-meal =&amp;gt; groundnut-oil (0.999742566611)
sun-meal =&amp;gt; lin-oil (0.999742566611)
sun-meal =&amp;gt; nkr (0.999742566611)
sun-meal =&amp;gt; rye (0.999742566611)
castor-oil =&amp;gt; copra-cake (0.999613849916)
castor-oil =&amp;gt; dfl (0.999613849916)
castor-oil =&amp;gt; naphtha (0.999613849916)
castor-oil =&amp;gt; nzdlr (0.999613849916)
castor-oil =&amp;gt; palladium (0.999613849916)
castor-oil =&amp;gt; palmkernel (0.999613849916)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="multi-label-scoring"&gt;Multi-label Scoring&lt;/h2&gt;
&lt;div class="warning"&gt;I have to work on the scoring; it seems as if I made a mistake in my experiments when I calculated the score.&lt;/div&gt;
&lt;p&gt;I've never been in a multi-label context, so it was not directly clear to me
which scoring is used. Thanks to Chirag Nagpal who pointed me in the right
direction.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(Y_i \in \{0, 1\}^k\)&lt;/span&gt; be the set of correct labels for document &lt;span class="math"&gt;\(i\)&lt;/span&gt; and
&lt;span class="math"&gt;\(Z_i \in \{0, 1\}^k\)&lt;/span&gt; be the set of predicted labels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary Accuracy&lt;/strong&gt;: For each document, one has to make a decision for each possible
  category. Hence &lt;span class="math"&gt;\(\text{acc} = \frac{1}{n}\sum_{i=1}^n \frac{|Y_i \cap Z_i|}{k}\)&lt;/span&gt;. As most documents belong to one or two categories, the simplest
  classifier simply decides all the time that the document does not belong to
  any category. For the used dataset, this leads to an accuracy of 0.986. Hence
  accuracy is not suitable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subset Accuracy&lt;/strong&gt;: This is calculated by &lt;code&gt;sklearn&lt;/code&gt;. The set of predicted
  labels must be exactly the same as the true labels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F1 score&lt;/strong&gt;: See &lt;a href="http://scikit-learn.org/stable/modules/model_evaluation.html#precision-recall-f-measure-metrics"&gt;user manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Micro/macro averaged ROC or Precision/Recall curve:&lt;ul&gt;
&lt;li&gt;Micro: Calculate metrics globally by counting the total true positives,
  false negatives and false positives.&lt;/li&gt;
&lt;li&gt;Macro: Calculate metrics for each label, and find their unweighted mean.
  This does not take label imbalance into account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coverage error: See &lt;a href="http://scikit-learn.org/stable/modules/model_evaluation.html#coverage-error"&gt;user manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A nice overview is given by &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.5612&amp;amp;rep=rep1&amp;amp;type=pdf#page=13"&gt;A Literature Survey on Algorithms for Multi-label Learning&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="n-gram-features"&gt;n-gram Features&lt;/h2&gt;
&lt;p&gt;See &lt;a href="http://blog.alejandronolla.com/2013/05/20/n-gram-based-text-categorization-categorizing-text-with-python/"&gt;N-Gram-Based Text Categorization: Categorizing Text With Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will give this a try when I find some time. If you make it before, please
share the results. You could adjust &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/nlp/reuters.py#L30"&gt;my tf-idf code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="classifier-comparison-tf-idf"&gt;Classifier comparison (tf-idf)&lt;/h2&gt;
&lt;p&gt;The following are the accuracies as well as the training and test times. All
classifiers got the same tf-idf features.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Used vocabulary size = 26147

Classifier                      Acc     F1
--------------------------------------------------------------------------------
MLP                           : 82.61% 85.56% in  676.44s train /    0.91s test
LinearSVC                     : 81.05% 84.04% in   27.00s train /    6.45s test
Logistic Regression (C=1000)  : 80.79% 84.10% in   35.48s train /    6.46s test
k nn 5                        : 72.97% 76.07% in    9.89s train / 1092.29s test
k nn 3                        : 72.28% 75.43% in    9.90s train / 1080.20s test
Logistic Regression (C=1)     : 67.47% 67.21% in   30.22s train /    6.44s test
Random Forest (200 estimators): 65.75% 64.36% in   57.56s train /    4.15s test
Random Forest (50 estimators) : 64.79% 63.69% in   14.82s train /    1.30s test
Decision Tree                 : 55.75% 53.23% in   28.43s train /    0.22s test
Naive Bayes                   : 43.86% 47.98% in  214.75s train /   88.79s test
SVM, linear                   : 33.55% 29.67% in 6326.33s train / 2397.51s test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a couple of things to notice here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Naive Bayes and k-nn is slow&lt;/li&gt;
&lt;li&gt;Random forests and MLP are fast&lt;/li&gt;
&lt;li&gt;SVM depends extremely on the implementation (see &lt;a href="https://stackoverflow.com/q/45384185/562769"&gt;What is the difference between LinearSVC and SVC(kernel=&amp;ldquo;linear&amp;rdquo;)?&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prediction Quality&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;LinearSVC, logistic regression and MLP are accurate&lt;/li&gt;
&lt;li&gt;Achieving high binary accuracy seems to be easier than achieving high F1
  scores. It's no surprise that high subset accuracy is hard to achieve.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The MLP has a reasonable prediction quality and test time.&lt;/p&gt;
&lt;h3 id="multilayer-perceptron"&gt;Multilayer Perceptron&lt;/h3&gt;
&lt;p&gt;When training a multilayer perceptron for a multi-label classification task, there
are two important things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Output layer&lt;/strong&gt;: Do not  use softmax, as the normalization does not make
  sense in this case.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loss&lt;/strong&gt;: Use &lt;a href="https://keras.io/losses/#binary_crossentropy"&gt;&lt;code&gt;`binary_crossentropy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you print precision, recall, F1-score and accuracy you note the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary accuracy gets to 98% in the first epoch and over 99% in the second. It stays
  that high.&lt;/li&gt;
&lt;li&gt;Precision is at about 4% in the first epoch and over 97% in the second. It
  stays that high.&lt;/li&gt;
&lt;li&gt;Recall needs about 15 epochs of steady progress to get over 98%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a consequence, the F1 score steadily increases. Hence by using other metrics
one can see that the classifier makes great improvements, although the accuracy
is pretty high from the beginning.&lt;/p&gt;
&lt;h2 id="code_1"&gt;Code&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/nlp/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you use it, please cite this article or link to this blog post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Misc{Thom2017-reuters,
  Title                    = {The Reuters Dataset},

  Author                   = {Martin Thoma},
  Month                    = jul,
  Year                     = {2017},

  Url                      = {https://martin-thoma.com/nlp-reuters}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="data-loading"&gt;Data loading&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Utility file for the Reuters text categorization benchmark dataset.&lt;/span&gt;

&lt;span class="sd"&gt;See also&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;http://www.vision.caltech.edu/Image_Datasets/Caltech101/&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reuters&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MultiLabelBinarizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TfidfVectorizer&lt;/span&gt;

&lt;span class="n"&gt;n_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Load the Reuters dataset.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    Tuple of Numpy arrays: `(x_train, y_train), (x_test, y_test)`.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;stop_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"english"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;vectorizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TfidfVectorizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop_words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stop_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mlb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MultiLabelBinarizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileids&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test/'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'training/'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doc_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doc_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vectorizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
    &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mlb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doc_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mlb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doc_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'x_train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'y_train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'x_test'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'y_test'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'labels'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;"labels"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(data['x_train'])={}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x_train'&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"data['x_train'].shape={}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x_train'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mlp"&gt;MLP&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Train and evaluate a MLP."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dropout&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.optimizers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Adam&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;reuters&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scoring&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_tptnfpfn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_accuracy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_f_score&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Create a MLP model."""&lt;/span&gt;
    &lt;span class="n"&gt;input_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sigmoid'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Recall metric.&lt;/span&gt;

&lt;span class="sd"&gt;    Only computes a batch-wise average of recall.&lt;/span&gt;

&lt;span class="sd"&gt;    Computes the recall, a metric for multi-label classification of&lt;/span&gt;
&lt;span class="sd"&gt;    how many relevant items are selected.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;true_positives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;possible_positives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;recall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true_positives&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_positives&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;recall&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Precision metric.&lt;/span&gt;

&lt;span class="sd"&gt;    Only computes a batch-wise average of precision.&lt;/span&gt;

&lt;span class="sd"&gt;    Computes the precision, a metric for multi-label classification of&lt;/span&gt;
&lt;span class="sd"&gt;    how many selected items are relevant.&lt;/span&gt;

&lt;span class="sd"&gt;    Source&lt;/span&gt;
&lt;span class="sd"&gt;    ------&lt;/span&gt;
&lt;span class="sd"&gt;    https://github.com/fchollet/keras/issues/5400#issuecomment-314747992&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;true_positives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;predicted_positives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true_positives&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicted_positives&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Calculate the F1 score."""&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_optimizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Return an optimizer."""&lt;/span&gt;
    &lt;span class="n"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'optimizer'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'initial_lr'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Using Adam instead of SGD to speed up training&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;optimizer&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Load data, train model and evaluate it."""&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_classes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x_train'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_optimizer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'optimizer'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'initial_lr'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'binary_crossentropy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x_train'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'y_train'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
              &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;validation_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x_test'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'y_test'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
              &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="c1"&gt;# callbacks=callbacks&lt;/span&gt;
              &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_tptnfpfn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"{clf_name:&amp;lt;30}: {acc:0.2f}% {f1:0.2f}&lt;/span&gt;&lt;span class="si"&gt;% i&lt;/span&gt;&lt;span class="s2"&gt;n {train_time:0.2f}s "&lt;/span&gt;
           &lt;span class="s2"&gt;"train / {test_time:0.2f}s test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clf_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"MLP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_accuracy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_f_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;train_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;test_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reuters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NLTK: &lt;a href="http://www.nltk.org/book/ch02.html"&gt;Other datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.daviddlewis.com/resources/testcollections/reuters21578/"&gt;Reuters-21578&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publications:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.cornell.edu/people/tj/publications/joachims_98a.pdf"&gt;Text Categorization with Support Vector Machines: Learning with Many Relevant Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blog posts:&lt;ul&gt;
&lt;li&gt;Miguel Malvarez: &lt;a href="https://miguelmalvarez.com/2015/03/20/classifying-reuters-21578-collection-with-python-representing-the-data/"&gt;Classifying Reuters-21578 collection with Python: Representing the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Miguel Malvarez: &lt;a href="https://miguelmalvarez.com/2016/11/07/classifying-reuters-21578-collection-with-python/"&gt;Classifying Reuters-21578 collection with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="NLP"></category><category term="Reuters"></category><category term="Classification"></category><category term="Machine Learning"></category></entry><entry><title>Document Classification</title><link href="https://martin-thoma.com/document-classification/" rel="alternate"></link><published>2017-07-26T20:00:00+02:00</published><updated>2017-07-26T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-07-26:/document-classification/</id><summary type="html">&lt;p&gt;This article explains how to classify texts.&lt;/p&gt;
&lt;p&gt;Suppose you have a text classification problem. For example, you want to
classify incoming emails as (C1) spam (C2) notifications (C3) personal. Hence each email belongs to exactly one of three classes.&lt;/p&gt;
&lt;h2 id="basic-setup"&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Suppose &lt;strong&gt;you have corpus&lt;/strong&gt; of 1000 emails. You make â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article explains how to classify texts.&lt;/p&gt;
&lt;p&gt;Suppose you have a text classification problem. For example, you want to
classify incoming emails as (C1) spam (C2) notifications (C3) personal. Hence each email belongs to exactly one of three classes.&lt;/p&gt;
&lt;h2 id="basic-setup"&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Suppose &lt;strong&gt;you have corpus&lt;/strong&gt; of 1000 emails. You make a &lt;strong&gt;stratified split&lt;/strong&gt;
into 600 training emails and 400 test emails. The class C1 is 40% of the data,
C2 is 10% of the data and C3 is 50% of the data in both, the training and the
test set. Don't touch the test set until the very end.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(I_1 \subsetneq 1, \dots, 600\)&lt;/span&gt; be the set of indices of emails which belong
to class C1, &lt;span class="math"&gt;\(I_2 \subsetneq 1, \dots, 600\)&lt;/span&gt; be the set of indices of emails
which belong to set C2 and &lt;span class="math"&gt;\(I_3 \subsetneq 1, \dots, 600\)&lt;/span&gt; be the set of emails
which belong to set C3.&lt;/p&gt;
&lt;h2 id="get-features"&gt;Get Features&lt;/h2&gt;
&lt;p&gt;Now you &lt;strong&gt;build a list of unique words&lt;/strong&gt; &lt;span class="math"&gt;\(w\)&lt;/span&gt;. Let &lt;span class="math"&gt;\(W \in \mathbb{N}\)&lt;/span&gt; denote the total number of unique words in the training set. So you know which words appear in the documents in the training set. There are certainly words which you did not see in the training set. Don't worry about this.&lt;/p&gt;
&lt;p&gt;Let the count how often word &lt;span class="math"&gt;\(w\)&lt;/span&gt; appears in email &lt;span class="math"&gt;\(i = 1, \dots, N\)&lt;/span&gt; be denoted by &lt;span class="math"&gt;\(n_{w,i} \in \mathbb{N}\)&lt;/span&gt;. Let &lt;span class="math"&gt;\(n_{w, \text{total}} = \sum_{i=1}^N n_{w,i}\)&lt;/span&gt; be the count how often the word &lt;span class="math"&gt;\(w\)&lt;/span&gt; appears in all documents combined.&lt;/p&gt;
&lt;h3 id="word-presence-feature"&gt;Word Presence Feature&lt;/h3&gt;
&lt;p&gt;For each word, you can have a binary feature: Either the word is in the e-mail or not. I call this the "word presence feature".&lt;/p&gt;
&lt;p&gt;Now you can calculate: If a word &lt;span class="math"&gt;\(w\)&lt;/span&gt; appears in a document, the probability that the e-mail belongs to class 1 is&lt;/p&gt;
&lt;div class="math"&gt;$$P(C_1|w) = \frac{\sum_{i \in I_1} 1_{n_{w,i} \geq 1}}{n_{w, \text{u}} = \sum_{i \in I_1 \cup I_2 \cup I_3} 1_{n_{w,i} \geq 1}}$$&lt;/div&gt;
&lt;p&gt;Hence you divide the number of e-mails of the first class in which the word &lt;span class="math"&gt;\(w\)&lt;/span&gt; appeared at least once by the total count of e-mails in which the word &lt;span class="math"&gt;\(w\)&lt;/span&gt; appeared at least once.&lt;/p&gt;
&lt;p&gt;Ok, but you don't only have one feature, but many. You are interested in
&lt;span class="math"&gt;\(P(C_1 | w_1, \dots, w_N)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;By applying Bayes Rule, we get:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
  P(C_1 | w_1, \dots, w_N) &amp;amp;= \frac{P(w_1, \dots, w_N | C_1) \cdot P(C_1)}{P(w_1, \dots, w_N)}\\
  &amp;amp;= \frac{P(w_1 | C_1) \cdot P(w_2 | w_2, C_1) \dots \cdot P( w_{N} |w_1, \dots, w_{N-1}, C_1) \cdot P(C_1)}{P(w_1, \dots, w_N)}
\end{align}&lt;/div&gt;
&lt;p&gt;Now, &lt;span class="math"&gt;\(P(C_1) = 0.4\)&lt;/span&gt; is called the a priori probability of the class &lt;span class="math"&gt;\(C_1\)&lt;/span&gt;. So
if we knew nothing about the content of the e-mail, we would guess &lt;span class="math"&gt;\(C_1\)&lt;/span&gt; has
a probability of 40% as it is the amout of e-mails in that class.&lt;/p&gt;
&lt;p&gt;The other terms are more difficult. We don't have enough data for this. So we
make the simplifying (and wrong!) assumption that words are independant of each
other. Then we get:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
  P(C_1 | w_1, \dots, w_N) &amp;amp;= \frac{P(w_1 | C_1) \cdot P(w_2 | C_1) \dots \cdot P( w_{N} | C_1) \cdot P(C_1)}{P(w_1, \dots, w_N)}
\end{align}&lt;/div&gt;
&lt;p&gt;As we know that&lt;/p&gt;
&lt;div class="math"&gt;$$1 = \sum_{i=1}^3 P(C_i | w_1, \dots, w_N)$$&lt;/div&gt;
&lt;p&gt;it is sufficient to calculate the nominators and divide each of the three
denominators by the sum of all three.&lt;/p&gt;
&lt;p&gt;Congratulations, your first document classifier is working!&lt;/p&gt;
&lt;h3 id="tf-idf"&gt;Tf-idf&lt;/h3&gt;
&lt;p&gt;For each word, we can measure how often it appears in a given e-mail. Certainly,
the more often it appears the more important it is. But the longer the e-mail is,
the less important it is. So we should divide by the total count of words of
an e-mail. This is called the term frequency (Tf) of a word in a document (e-mail).
Sometimes, this is also denoted by &lt;span class="math"&gt;\(\text{tf}(w, d)\)&lt;/span&gt; where &lt;span class="math"&gt;\(w\)&lt;/span&gt; is the word (term)
and &lt;span class="math"&gt;\(d\)&lt;/span&gt; is the document (e-mail).&lt;/p&gt;
&lt;p&gt;Next, we realize that some words contain more information than others. For
example, the word "the" might occur in almost every document. We do so by dividing by&lt;/p&gt;
&lt;div class="math"&gt;$$\text{idf}(w, D) = \frac{N}{|d \in D: w \in d|}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(N = 600\)&lt;/span&gt; is the total amount of documents we have in the training set.
The denominator is the total count of words in all documents in the training
set combined.&lt;/p&gt;
&lt;p&gt;Hence we can get a Tf-idf feature for all words.&lt;/p&gt;
&lt;p&gt;You can see that this allows us to apply the same Bayesian approach as before.
In fact, you should now see that the Bayesian approach is not part of the
features, but a classifier! And if you look at the &lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf#Definition"&gt;tf-idf Wikipedia page&lt;/a&gt; you can see that there are a couple of similar features!&lt;/p&gt;
&lt;h3 id="terms-instead-of-words"&gt;Terms instead of Words&lt;/h3&gt;
&lt;p&gt;I've only talked about words before, but you can calculate tf-idf for &lt;em&gt;terms&lt;/em&gt;,
too.&lt;/p&gt;
&lt;p&gt;Take "New York" as an example. You might see "New" in an e-mail and you might
see "York" in an e-mail. But the combined term "New York" is something
different than seeing both single words. Hence you might want to have the
tf-idf feature of "New York", too.&lt;/p&gt;
&lt;h2 id="classifiers_1"&gt;Classifiers&lt;/h2&gt;
&lt;p&gt;I've introduced the Bayes Classifer, but there are a lot more. Most notably:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/svm-with-sklearn/"&gt;SVMs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neural Networks&lt;/li&gt;
&lt;li&gt;Decision Trees (and Random Forests)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See my &lt;a href="https://martin-thoma.com/comparing-classifiers/"&gt;Comparing Classifiers&lt;/a&gt;
for a lot more classifiers.&lt;/p&gt;
&lt;h2 id="feature-engineering"&gt;Feature Engineering&lt;/h2&gt;
&lt;p&gt;One thing I would try to find out is which features are really good. You can
probably figure out keywords with this approach. Hence you can make sense of
the decision. And you might be able to throw away a lot of words.&lt;/p&gt;
&lt;p&gt;PCA / LDA are two feature reduction methods that might be interesting. Other methods are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forward Feature Construction:&lt;ol&gt;
&lt;li&gt;Start with an empty set of features.&lt;/li&gt;
&lt;li&gt;For each feature not in the feature list: Find the one where adding it leads to the best accuracy.&lt;/li&gt;
&lt;li&gt;If the desired accuracy is reached, stop. Otherwise continue with 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Feature Elimination&lt;ol&gt;
&lt;li&gt;Start with all features.&lt;/li&gt;
&lt;li&gt;For each feature in the feature list: Try where removing it leads to the least loss in accuracy.&lt;/li&gt;
&lt;li&gt;If the accuracy dropped below the required accuracy, stop and take the last feature list. Otherwise, continue with 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="evaluation"&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Last, but not least, I suggest the following approach to evaluate what you apply for your e-mail classifier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split the training set into 500 e-mails for training and 100 e-mails for validation&lt;/li&gt;
&lt;li&gt;Traing all methods you guess on the 500 e-mails. Evluate on the 100 e-mails what is best.&lt;/li&gt;
&lt;li&gt;Make sure everything is what you think it should be like. Run your experiments with those 500 / 100 e-mails&lt;/li&gt;
&lt;li&gt;When you're finished, evaluate on the 400 e-mails your final setup. Only once. This is your estimate how good you really are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might also want to have a look at cross-validation.&lt;/p&gt;
&lt;h2 id="public-datasets"&gt;Public Datasets&lt;/h2&gt;
&lt;p&gt;I'm not aware of public datasets for document classification, but you can easily
create one by scraping wikipedia categories / subreddits.&lt;/p&gt;
&lt;p&gt;Leave a comment if I forgot something / you know more details :-)&lt;/p&gt;
&lt;h2 id="literature"&gt;Literature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Juan Ramos: &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.121.1424&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;Using TF-IDF to Determine Word Relevance in Document Queries &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="NLP"></category><category term="Machine Learning"></category><category term="Classification"></category></entry><entry><title>How to get Data for ML systems</title><link href="https://martin-thoma.com/ml-get-data/" rel="alternate"></link><published>2017-06-15T20:00:00+02:00</published><updated>2017-06-15T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-06-15:/ml-get-data/</id><summary type="html">&lt;p&gt;Machine Learning is only possible with data. The more data, the better. For
many services this is a self-improving system. The more data the system gets,
the better it becomes. The better the system is, the more users use it. The
more users use the system, the more data the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Machine Learning is only possible with data. The more data, the better. For
many services this is a self-improving system. The more data the system gets,
the better it becomes. The better the system is, the more users use it. The
more users use the system, the more data the system gets.&lt;/p&gt;
&lt;p&gt;This is an awesome property, but what do you do if you don't have any / enough
data to create a useful system? How do you bootstrap a machine learning system?&lt;/p&gt;
&lt;p&gt;I will take write-math.com (handwritten symbol recognition) and Amazon book
recommendations as examples.&lt;/p&gt;
&lt;h2 id="generate-data-yourself"&gt;Generate Data yourself&lt;/h2&gt;
&lt;p&gt;Sometimes, it is possible to generate data yourself. This is what I did for
write-math.com. It could be expected that users are not too different - after
all, single symbols should look somewhat similar, no matter who wrote them.&lt;/p&gt;
&lt;p&gt;This is not possible for Amazon recommendations as they are mainly dependant on
the user.&lt;/p&gt;
&lt;h2 id="ask-friends"&gt;Ask friends&lt;/h2&gt;
&lt;p&gt;You can ask friends / collegues to use your system and feed it with data. I did
this with write-math.com, too.&lt;/p&gt;
&lt;h2 id="gamification"&gt;Gamification&lt;/h2&gt;
&lt;p&gt;Sometimes, you can make a game which is interesting enough to attract users to
use your system and feed it with data. For example, Google did this with
&lt;a href="https://quickdraw.withgoogle.com/"&gt;Quickdraw&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="side-steping"&gt;Side-steping&lt;/h2&gt;
&lt;p&gt;Some tasks can be re-formulated so that they are intersting for other problems.
Examples are &lt;a href="https://www.microsoft.com/en-us/research/publication/asirra-a-captcha-that-exploits-interest-aligned-manual-image-categorization/"&gt;Asirra&lt;/a&gt; and
reCaptcha:&lt;/p&gt;
&lt;p&gt;You are given 12 images. Your task is to identify all images which contain
dogs. The developer knows the content of 11 images. If you get those 11 right,
some trust is put into your classification of the 12th image.&lt;/p&gt;
&lt;p&gt;Similar, for reCaptcha you are given two words. The developer knows one of
them. It is placed randomly on the left or the right. If you get that one
right, some trust is put into your classification of the other one.&lt;/p&gt;
&lt;p&gt;Another example is Duolingo.&lt;/p&gt;
&lt;h2 id="alternative-algorithms"&gt;Alternative Algorithms&lt;/h2&gt;
&lt;p&gt;You could use other algorithms with do not need data. &lt;a href="https://en.wikipedia.org/wiki/Expert_system"&gt;Expert systems&lt;/a&gt; are
examples for this kind of algorithm. Just let an expert hand-craft rules. This
could work for Amazon recommendations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get besteller lists to rank books initially.&lt;/li&gt;
&lt;li&gt;As soon as the user liked one book of one author, add a little bit to the
  score of all other books of that author.&lt;/li&gt;
&lt;li&gt;Users who bought one edition of a book usually don't buy the same book in
  another edition. Hence reduce the score for them.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sparse-matrix-completion"&gt;Sparse matrix completion&lt;/h2&gt;
&lt;p&gt;For recommendation systems, you can define user "prototypes" ("the nerd", "the
artist", "the gamer", ...). Define their properties. Find one person for each
prototype. Let them rank the books. Not necessarily every book, but many. You
could add rules to infer the ranking of missing books.&lt;/p&gt;
&lt;p&gt;As soon as a new user arrives, ask them about some distinguishing books. Try to
see in which prototypes (or mixture of prototypes) they fit best. Recommend new
books according to that mixture.&lt;/p&gt;</content><category term="Machine Learning"></category><category term="data"></category></entry><entry><title>Unsupervised Pretraining</title><link href="https://martin-thoma.com/unsupervised-pretraining/" rel="alternate"></link><published>2017-06-08T20:00:00+02:00</published><updated>2017-06-08T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-06-08:/unsupervised-pretraining/</id><summary type="html">&lt;p&gt;Neural networks have thousands, often millions of parameters. They take
hundrets of features and predict thousands of classes. The features can often
not be seen independantly, but have to be taken as a whole into consideration.
Most parameters are not independant either. And still, we use only on the order â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Neural networks have thousands, often millions of parameters. They take
hundrets of features and predict thousands of classes. The features can often
not be seen independantly, but have to be taken as a whole into consideration.
Most parameters are not independant either. And still, we use only on the order
of several ten-thousand to a million data points to optimize the millions of
parameters in a network. We know that more labeled data leads to better
results, but labeling is costly. Obtaining more data, however, is comparatively
cheap. Hence we want to use the unlabeled data to learn good features. The
complete process is semi-supervised and works as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Unsupervised training&lt;/strong&gt;: Train a neural network with unlabeled data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network modification&lt;/strong&gt;: Change something in the network. Often, the output
   layer is adjusted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supervised training&lt;/strong&gt;: Train the neural network with labeled data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the following, I will introduce all unsupervised training methods I know.&lt;/p&gt;
&lt;h2 id="auto-encoders"&gt;Auto-Encoders&lt;/h2&gt;
&lt;p&gt;The idea of an auto-encoder is to restore the input. Hence it has to have an
output layer which is capable of doing so. This means you have to choose your
activation function carefully and probably normalize the range of values of the
input. For example, if your inputs have negative values you cannot use the
logistic function or ReLU. If it doesn't sum to one, you can't use softmax. If
the range of values is outside of [-1, 1], you can't use most of the activation
functions.&lt;/p&gt;
&lt;p&gt;Also, you have to make sure the shape of the output is the same as the input.&lt;/p&gt;
&lt;p&gt;After that, you have multiple options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bottleneck features: You can force the auto-encoder to learn a feature
   reduction by introducing a bottleneck. After the training is finished,
   everything after the bottleneck could be removed.&lt;/li&gt;
&lt;li&gt;Restauration: The input of the network is changed in some way which has to
   be restored by the network. This could be white noise, Gaussian noise, or
   completely removing some parts of the image (as done in &lt;a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Pathak_Context_Encoders_Feature_CVPR_2016_paper.pdf"&gt;Context Encoders: Feature Learning by Inpainting&lt;/a&gt;). Look for "denoising auto-encoder".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Literature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jonathan Masci, Ueli Meier, Dan Ciresan, and J&amp;uuml;rgen Schmidhuber: &lt;a href="http://people.idsia.ch/~masci/papers/2011_icann.pdf"&gt;Stacked Convolutional Auto-Encoders for Hierarchical Feature Extraction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crop-position-prediction"&gt;Crop position prediction&lt;/h2&gt;
&lt;p&gt;If you have a CNN and images as input, crop it into 9 pieces which are loosely
placed in a grid over the image (with some variable padding). Give the network
the middle crop and randomly one of the 8 others. The network has to predict
which crop it got. Hence the network has 8 output units.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Predict the position of an image crop" src="../images/2017/05/crop-position-prediction.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Predict the position of an image crop&lt;br/&gt;Image source: &lt;a href="https://arxiv.org/pdf/1505.05192.pdf"&gt;Unsupervised Visual Representation Learning by Context Prediction&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Literature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Carl Doersch, Abhinav Gupta, Alexei A. Efros: &lt;a href="https://arxiv.org/abs/1505.05192"&gt;Unsupervised Visual Representation Learning by Context Prediction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="order"&gt;Order&lt;/h2&gt;
&lt;p&gt;I could imagine that you could do something similar to the crop position
prediction with time series data. For example, if you have audio data you could
give the network two samples and let it predict which one comes first.&lt;/p&gt;
&lt;p&gt;Or if you have a video, you can predict the next frame. See &lt;a href="https://arxiv.org/abs/1605.08104"&gt;Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Predict the next frame of a video." src="../images/2017/06/predict-next-frame.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Predict the next frame of a video.&lt;br/&gt;Image source: &lt;a href="https://arxiv.org/abs/1605.08104"&gt;Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="weakly-supervision"&gt;Weakly Supervision&lt;/h2&gt;
&lt;p&gt;The more detailed / high quality labels are, the more expensive. For example,
it is often simpler to classify one complete image than to assign a class label
to each pixel of the image. But you can build models for semantic segmentation
without having a single image which was semantically labeled.&lt;/p&gt;
&lt;p&gt;This is what I call &lt;em&gt;weak supervision&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another example is counting: You have many images of street scenes. Each image
has the number of cars in that image as a label. The idea is that a neural
network should learn a car classifier from this information.&lt;/p&gt;
&lt;p&gt;I think I have seen something similar before, but I don't remember where (NIPS 2016?)&lt;/p&gt;
&lt;h2 id="more"&gt;More&lt;/h2&gt;
&lt;p&gt;I have seen &lt;a href="https://papers.nips.cc/paper/5548-discriminative-unsupervised-feature-learning-with-convolutional-neural-networks.pdf"&gt;Discriminative Unsupervised Feature Learning with Convolutional Neural Networks&lt;/a&gt; but I didn't understand what they are doing. They take a random patch of one image, apply random data augmentations
to that image and assign it a (random) class. How is that supposed to help?&lt;/p&gt;</content><category term="Machine Learning"></category><category term="Neural Networks"></category></entry><entry><title>ML Review 5</title><link href="https://martin-thoma.com/ml-review-5/" rel="alternate"></link><published>2017-05-25T20:00:00+02:00</published><updated>2017-05-25T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-05-25:/ml-review-5/</id><summary type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="news"&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://canada.googleblog.com/2017/03/canadas-ai-moment.html"&gt;Canada&amp;rsquo;s AI Moment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theverge.com/2017/4/3/15164490/alibaba-ai-starcraft-combat"&gt;AI is one step closer to mastering StarCraft&lt;/a&gt;: &lt;a href="https://arxiv.org/abs/1703.10069v1"&gt;Multiagent Bidirectionally-Coordinated Nets for Learning to Play StarCraft Combat Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepsense.io/deep-learning-for-satellite-imagery-via-image-segmentation/"&gt;Deep learning for satellite imagery via image segmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hardware:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/data-center/volta-gpu-architecture/"&gt;Nvidia â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="news"&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://canada.googleblog.com/2017/03/canadas-ai-moment.html"&gt;Canada&amp;rsquo;s AI Moment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theverge.com/2017/4/3/15164490/alibaba-ai-starcraft-combat"&gt;AI is one step closer to mastering StarCraft&lt;/a&gt;: &lt;a href="https://arxiv.org/abs/1703.10069v1"&gt;Multiagent Bidirectionally-Coordinated Nets for Learning to Play StarCraft Combat Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepsense.io/deep-learning-for-satellite-imagery-via-image-segmentation/"&gt;Deep learning for satellite imagery via image segmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hardware:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/data-center/volta-gpu-architecture/"&gt;Nvidia Volta&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/MachineLearning/comments/6ae3z0/n_inside_volta_the_worlds_most_advanced_data/"&gt;reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.nvidia.com/blog/2017/01/04/bb8-ces/"&gt;Nvidia BB 8&lt;/a&gt; (self-driving car)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nextplatform.com/2017/04/05/first-depth-look-googles-tpu-architecture/"&gt;First In-Depth Look at Google&amp;rsquo;s TPU Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datasets:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/MachineLearning/comments/6a97pt/n_new_massive_medical_image_dataset_coming_from/"&gt;Medical ImageNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1705.03311"&gt;READ-BAD&lt;/a&gt; - detecting baselines in scanned documents&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arstechnica.co.uk/information-technology/2017/05/deepmind-alphago-go-ke-jie-china/"&gt;Google&amp;rsquo;s AlphaGo AI still undefeated, beats world&amp;rsquo;s best human Ke Jie again&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="live-demos-websites-and-blogs"&gt;Live Demos, Websites and Blogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jonathan Pilault: &lt;a href="https://jonathanpilault.wordpress.com/2016/04/19/week-of-april-18-adam-nesterov-results/"&gt;Adam-Nesterov results&lt;/a&gt;: Related to the OpenAI gym.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lyrebird.ai/press"&gt;lyrebird.ai&lt;/a&gt;: Imitate voices with only one minute of recorded speech&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publications"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1704.04086"&gt;Beyond Face Rotation: Global and Local Perception GAN for Photorealistic and Identity Preserving Frontal View Synthesis&lt;/a&gt; - generate frontal view faces from side view input&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1506.01186"&gt;Cyclical Learning Rates for Training Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1704.08614"&gt;BAM! The Behance Artistic Media Dataset for Recognition Beyond Photography&lt;/a&gt;: A dataset with 393000 labeled images, 7 types of images (vector art, pencil-sketch, ...) and 9 classes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software"&gt;Software&lt;/h2&gt;
&lt;!-- e.g. Theano, Keras, ... --&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Text" src="../images/2017/05/faceapp.jpg" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;FaceApp&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://caffe2.ai/"&gt;&lt;strong&gt;caffe2&lt;/strong&gt;&lt;/a&gt; - although caffe will be continued, it is probably
  a good idea to switch?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://junyanz.github.io/CycleGAN/"&gt;CycleGAN&lt;/a&gt;: Translate between horses and Zebras&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.faceapp.com/"&gt;FaceApp&lt;/a&gt;: See &lt;a href="https://twitter.com/ollyog/status/862781895872061441"&gt;this&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/MachineLearning/comments/67umwt/d_how_does_faceapp_work/"&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebookresearch/fastText"&gt;fastText&lt;/a&gt;: library for efficient learning of word representations and sentence classification&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.facebook.com/posts/1072626246134461/introducing-fblearner-flow-facebook-s-ai-backbone/"&gt;FBLearner Flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="interesting-questions"&gt;Interesting Questions&lt;/h2&gt;
&lt;!-- For example StackExchange --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/17953/8820"&gt;What are 2D dimensionality reduction algorithms good for?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/16292/8820"&gt;What is the memory cost of a CNN?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/17987/8820"&gt;How should the bias be initialized and regularized?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datascience.stackexchange.com/q/18840/8820"&gt;Is there a relationship between LDA, linear SVMs and Perceptron?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;h3 id="blogs-websites"&gt;Blogs / Websites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://distill.pub/"&gt;distill.pub&lt;/a&gt;: Some nice articles (e.g. one about t-SNE)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="meetings_1"&gt;Meetings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Amsterdam, 8. April 2017: &lt;a href="https://pydata.org/amsterdam2017/"&gt;PyData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Austin (Texas, USA), 10. July 2017: &lt;a href="https://scipy2017.scipy.org/ehome/220975/493391/"&gt;SciPy 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="navigation clearfix"&gt;
&lt;div class="alignleft"&gt;
&lt;a href="https://martin-thoma.com/ml-review-4/" rel="prev"&gt;&amp;laquo; Previous Review&lt;/a&gt;
&lt;/div&gt;&lt;!--
    &lt;div class="alignright"&gt;
        &lt;a href="https://martin-thoma.com/ml-review-6/" rel="next"&gt;Next Review Â»&lt;/a&gt;
    &lt;/div&gt;--&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category><category term="matplotlib"></category></entry><entry><title>Natural Language Processing</title><link href="https://martin-thoma.com/nlp/" rel="alternate"></link><published>2017-05-24T20:00:00+02:00</published><updated>2017-05-24T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-05-24:/nlp/</id><summary type="html">&lt;p&gt;Natural language processing (NLP) is a scientific field which deals with
language in textual form.&lt;/p&gt;
&lt;h2 id="tasks"&gt;Tasks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classification&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Is an e-mail spam or not?&lt;/li&gt;
&lt;li&gt;Topic: Is it about sports, science or religion?&lt;/li&gt;
&lt;li&gt;Language: Is it English, German or French?&lt;/li&gt;
&lt;li&gt;Sentence boundary: Is a character the boundary of a sentence or not â€¦&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Natural language processing (NLP) is a scientific field which deals with
language in textual form.&lt;/p&gt;
&lt;h2 id="tasks"&gt;Tasks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classification&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Is an e-mail spam or not?&lt;/li&gt;
&lt;li&gt;Topic: Is it about sports, science or religion?&lt;/li&gt;
&lt;li&gt;Language: Is it English, German or French?&lt;/li&gt;
&lt;li&gt;Sentence boundary: Is a character the boundary of a sentence or not?&lt;/li&gt;
&lt;li&gt;Author:&lt;ul&gt;
&lt;li&gt;Identify the author from a given set of authors&lt;/li&gt;
&lt;li&gt;Age of the author&lt;/li&gt;
&lt;li&gt;Gender of the author&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sentiment analysis (Opinion mining, opinion extraction, sentiment mining, subjectivity analysis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Translation&lt;/strong&gt; (MT): Given a text in language A, return the same content in language B.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Similarity calculation&lt;/strong&gt;: Given a corpus of n texts and one text A as
  input, find passages of the corpus which are similar to passages of A. This
  can be used to detect if students copied content / copyright violation.&lt;ul&gt;
&lt;li&gt;Minimum Edit Distance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spelling correction&lt;/strong&gt;: Find places where the grammar / writing needs to be
  fixed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word sense disambiguation&lt;/strong&gt;: If "mouse" is in a sentence, is it about the
  computer mouse or the animal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POS Tagging&lt;/strong&gt;: Detect adjectives, verbs, nouns in a sentence.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summarization&lt;/strong&gt; / &lt;strong&gt;Paraphrasing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Information extraction&lt;/strong&gt;: For example, find the date in a calender
  application when the user enters the name of the event. Or dates in an e-mail
  in order to allow users to create a calender date.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Named-entity_recognition"&gt;&lt;strong&gt;Named Entity Recognition&lt;/strong&gt;&lt;/a&gt; (NER):&lt;ul&gt;
&lt;li&gt;Find names in a text&lt;/li&gt;
&lt;li&gt;Classify names into names of places, people, organizations and non-names.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relation Extraction&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compound splitting&lt;/strong&gt;: For German, "Donaudampfschiffskapit&amp;auml;n" can be split
  into the compounds "Donau" (a river) "dampfschiff" (steam boat) and "kapit&amp;auml;n"
  (captain).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sentiment-analysis"&gt;Sentiment analysis&lt;/h3&gt;
&lt;p&gt;Find out how users feel about something.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.cornell.edu/home/llee/omsa/omsa.pdf"&gt;Opinion mining and sentiment analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sentiment Lexicons are compared by Christopher Potts ("Sentiment Tutorial", 2011):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wjh.harvard.edu/~inquirer"&gt;General Inquirer&lt;/a&gt; is free for research use&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wjh.harvard.edu/~inquirer/homecat.htm"&gt;List of categories&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Positive (1915 words) and negative (2291 words)&lt;/li&gt;
&lt;li&gt;strong vs weak, active vs passive, overstated vs understated&lt;/li&gt;
&lt;li&gt;pleasure, pain, virtue, vice, motivation, cognitive orientation, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wjh.harvard.edu/~inquirer/inquirerbasic.xls"&gt;Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liwc.net"&gt;LIWC&lt;/a&gt; - Linguistic Inquiry and Word count: 30 US-Dollar or 90 US-Dollar fee&lt;ul&gt;
&lt;li&gt;2300 words, more than 70 classes&lt;/li&gt;
&lt;li&gt;affective process (negative and positive emotion)&lt;/li&gt;
&lt;li&gt;cognitive processes: Tentative (maybe, perhaps, guess), Inhibition (block, constraint)&lt;/li&gt;
&lt;li&gt;Pronouns, Negation (no, never), Quantifiers (few, many)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.uic.edu/~liub/FBS/opinion-lexicon-English.rar"&gt;Bing Liu Opinion Lexicon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;6786 words (2006 positive, 4783 negative)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sentiwordnet.isti.cnr.it"&gt;SentiWordNet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Positivity of a word can be infered from reviews. Reviews with many stars
should have positive words, reviews with only one or two stars should have
negative words.&lt;/p&gt;
&lt;h3 id="text-generation"&gt;Text generation&lt;/h3&gt;
&lt;p&gt;Generate text in a given style / tone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Andrej Karpathy: &lt;a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/"&gt;The Unreasonable Effectiveness of Recurrent Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="named-entity-recognition"&gt;Named Entity Recognition&lt;/h3&gt;
&lt;p&gt;Named entities are sequences of word tokens. Each word token can either be other (O),
the beginning of a namend entity (B) or the continuation of a named entity (I):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;           IO-encoding   IOB-encoding
Adam       PER           B-PER
gives      O             O
Berta      PER           B-PER
Charlies   PER           B-PER
Smith      PER           I-PER
's         O             O
table      O             O
--------------------------------------
#NER       2             3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IOB encoding&lt;/p&gt;
&lt;h3 id="relation-extraction"&gt;Relation Extraction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ACE (Automated Content Extraction): 17 relations from 2007 "Relation
  Extraction Task"&lt;/li&gt;
&lt;li&gt;UMLS (Unified Medical Language System): 134 entity types, 54 relations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One approach is taking seed relations to find language patterns. For example, a
seed relation could be &lt;code&gt;BORN-IN(Albert Einstein, Ulm)&lt;/code&gt;. Now find all sentences
in a corpus which contain "Albert Einstain" and "Ulm". You might find find
patterns like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Albert Einstein, born in Ulm, ...&lt;/li&gt;
&lt;li&gt;Albert Einstein (1879, Ulm) ...&lt;/li&gt;
&lt;li&gt;One son of Ulm is Albert Einstein.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can extract language patterns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X, born in Y, ...&lt;/li&gt;
&lt;li&gt;X (?, Y), ...&lt;/li&gt;
&lt;li&gt;One son of Y is X.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unsupervised Information Extraction (or Open Information Extraction) does not
start with given relations or training data. The textrunner algorithm is one
way to do it.&lt;/p&gt;
&lt;h2 id="data-sources-and-corpora_1"&gt;Data sources and Corpora&lt;/h2&gt;
&lt;p&gt;Thesaurus: WordNet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Wikipedia&lt;/li&gt;
&lt;li&gt;News websites&lt;/li&gt;
&lt;li&gt;Amazon Reviews&lt;/li&gt;
&lt;li&gt;AP Newswire&lt;/li&gt;
&lt;li&gt;IMDB: Polarity data 2.0 (sentiment analysis)&lt;/li&gt;
&lt;li&gt;Reuters newswire dataset&lt;/li&gt;
&lt;li&gt;DBPedia: 1 billion RDF triples&lt;/li&gt;
&lt;li&gt;Freebase: many relations&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Tokens&lt;/th&gt;
&lt;th&gt;Types&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Switchboard phone conversations&lt;/td&gt;
&lt;td class="text-right"&gt;2&amp;thinsp;400&amp;thinsp;000&lt;/td&gt;
&lt;td class="text-right"&gt;20&amp;thinsp;000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shakespeare&lt;/td&gt;
&lt;td class="text-right"&gt;884&amp;thinsp;000&lt;/td&gt;
&lt;td class="text-right"&gt;31&amp;thinsp;000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google N-Grams&lt;/td&gt;
&lt;td class="text-right"&gt;1&amp;thinsp;000&amp;thinsp;000&amp;thinsp;000&amp;thinsp;000&lt;/td&gt;
&lt;td class="text-right"&gt;13&amp;thinsp;000&amp;thinsp;000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://research.fb.com/downloads/babi/"&gt;bAbI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="libraries"&gt;Libraries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nltk.org/"&gt;&lt;strong&gt;NLTK&lt;/strong&gt;&lt;/a&gt;: The natural language toolkit. Written in Python, for Python. (&lt;a href="http://www.nltk.org/book/ch01.html"&gt;Book&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacy.io/"&gt;SpaCy&lt;/a&gt;: According to &lt;a href="https://www.reddit.com/r/LanguageTechnology/comments/69xbkc/question_spacy_or_nltk/"&gt;reddit&lt;/a&gt;, it is cleaner than NLTK but less complete.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt;: A simple to start
  toolkit for Python.&lt;/li&gt;
&lt;li&gt;CoreNLP: Faster than NLTK (source?), written in Java, Python wrappers available&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radimrehurek.com/gensim/"&gt;gensim&lt;/a&gt;: topic modeling and document similarity analysis&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebookresearch/fastText"&gt;fasttext&lt;/a&gt;: a classifier on top of a sentence2vec model&lt;/li&gt;
&lt;li&gt;DeepText: an NLP engine&lt;/li&gt;
&lt;li&gt;Tensorflow&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/models/tree/master/syntaxnet"&gt;syntaxnet&lt;/a&gt; and Parsey McParseface (&lt;a href="https://arxiv.org/pdf/1603.06042v1.pdf"&gt;paper&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="products"&gt;Products&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GNUAspell/aspell"&gt;aspell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://books.google.com/ngrams"&gt;Google n-gram Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://translate.google.com/"&gt;Google Translate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quora: &lt;a href="https://www.kaggle.com/c/quora-question-pairs"&gt;Duplication detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Watson_(computer)"&gt;IBM Watson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="terminology-methods"&gt;Terminology / Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Backoff: Use trigram if possible. If not, backoff to bigram (or unigram). Alternatively, use interpolation of trigram, bigram and unigram&lt;/li&gt;
&lt;li&gt;Filled pauses: "uh" in English or "&amp;auml;hm" in German&lt;/li&gt;
&lt;li&gt;Fragment: A part of a word (e.g. if you transcribe spoken text and somebody stutters)&lt;/li&gt;
&lt;li&gt;Lemma: Two words belong to the same lemma if they have the same stem, belong to the same POS and have the same meaning.&lt;/li&gt;
&lt;li&gt;Lexer: One type of tokenizer&lt;/li&gt;
&lt;li&gt;Maxent classifiers&lt;/li&gt;
&lt;li&gt;n-gram model: Model language by counting word-tuples of length n.&lt;/li&gt;
&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;OOV: Out of vocabulary, &lt;code&gt;&amp;lt;UNK&amp;gt;&lt;/code&gt; token&lt;/li&gt;
&lt;li&gt;Porters Algorithms&lt;/li&gt;
&lt;li&gt;Regular expressions (see &lt;a href="http://regexpal.com/"&gt;regexpal.com&lt;/a&gt; to test)&lt;/li&gt;
&lt;li&gt;sentence2vec: Similar to word2vec.&lt;/li&gt;
&lt;li&gt;Statistical parsing&lt;/li&gt;
&lt;li&gt;Stemming: Bring a word in a normed form (the stem). Mostly for verbs.&lt;/li&gt;
&lt;li&gt;Tokenization: Segment the text into tokens.&lt;/li&gt;
&lt;li&gt;Tokenizer: Splits a text into tokens.&lt;/li&gt;
&lt;li&gt;Viterbi Algorithm&lt;/li&gt;
&lt;li&gt;word2vec: Embedd any word in a (high-dimensional) vector space. Allows vector arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More might me in &lt;a href="https://martin-thoma.com/ml-glossary/"&gt;my ML Glossary&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="smoothing"&gt;Smoothing&lt;/h3&gt;
&lt;p&gt;A common task in NLP is estimating the probability of a word given some other
words: &lt;span class="math"&gt;\(P(w_i | w_{i-1}, w_{i-2})\)&lt;/span&gt;. You can do that by counting n-grams &lt;span class="math"&gt;\((w_{i-2}, w_{i-1}, w_{i})\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$P(w_i | w_{i-1}, w_{i-2}) = \frac{N((w_{i-2}, w_{i-1}, w_i))}{N((w_{i-2}, w_{i-1}))}$$&lt;/div&gt;
&lt;p&gt;But you will quite often have the case that you did not see a 3-gram. How do you deal with that?&lt;/p&gt;
&lt;p&gt;Smoothing is the answer. The simplest method is Laplace Smoothing (aka Add-one smoothing).&lt;/p&gt;
&lt;p&gt;How do you deal with words you've never seen? The Good-Turing smoothing method
uses things you've seen once to estimate things you've never seen:&lt;/p&gt;
&lt;div class="math"&gt;$$P^*_{GT}(\text{things never seen}) = \frac{N_1}{N}$$&lt;/div&gt;
&lt;div class="math"&gt;$$P^*_{GT}(\text{thing seen}) = (\frac{(c+1) N_{c+1}}{N_c}) / N$$&lt;/div&gt;
&lt;p&gt;when &lt;span class="math"&gt;\(c\)&lt;/span&gt; bekomes "large" (depends on the dataset), just replace &lt;span class="math"&gt;\(N_c\)&lt;/span&gt; by a
best-fit power law.&lt;/p&gt;
&lt;p&gt;Other smoothing methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpolated Kneser-Ney&lt;/li&gt;
&lt;li&gt;Good-Turing Smoothing&lt;/li&gt;
&lt;li&gt;Stupid backoff: For very large N-grams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another important concept is the continuation probability. While some words (like "a", "to", "the", ...)
can be followed / preceeded by many different words, others (like "San", "Angelo", "D.C.", "United States of", ...).
The continuation probability quantifies how likely it is that a word is continued by something novel. Putting this together with absolute discounting gives the Kneser-Ney Smoothing algorithm:&lt;/p&gt;
&lt;div class="math"&gt;$$P_{KN}(w_i | w_{i-1}) = \frac{\max( c(w_{i-1}, w_i) - d, 0)}{c(w_{i-1})} + \lambda (w_{i-1}) P_{continuation}(w_i)$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\lambda \in \mathbb{R}\)&lt;/span&gt; weights how important the continuation probability is,&lt;/p&gt;
&lt;h2 id="data-structures_1"&gt;Data structures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom filter&lt;/a&gt;: a space-efficient probabilistic data structure that is used to test whether an element is a member of a set&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Trie"&gt;Trie&lt;/a&gt;: A prefix-tree&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;KIT: The ASR course has some NLP content&lt;/li&gt;
&lt;li&gt;Reddit: &lt;a href="https://www.reddit.com/r/LanguageTechnology/"&gt;/r/LanguageTechnology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackExchange: &lt;a href="https://datascience.stackexchange.com/questions/tagged/nlp"&gt;datascience.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Online Courses:&lt;ul&gt;
&lt;li&gt;Coursera: &lt;a href="https://www.coursera.org/learn/natural-language-processing"&gt;Introduction to Natural Language Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stanford: &lt;a href="http://web.stanford.edu/class/cs224n/"&gt;Natural Language Processing with Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dan Jurafsky and Chris Manning on YouTube: &lt;a href="https://www.youtube.com/watch?v=nfoudtpBV68&amp;amp;list=PL6397E4B26D00A269"&gt;Stanford NLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oxford: &lt;a href="https://github.com/oxford-cs-deepnlp-2017/lectures"&gt;Lecture Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mt-class.org/"&gt;Machine Translation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nlpforhackers.io/"&gt;NLP for Hackers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="NLP"></category></entry><entry><title>How to silence TensorFlow</title><link href="https://martin-thoma.com/silence-tf/" rel="alternate"></link><published>2017-03-30T20:00:00+02:00</published><updated>2017-03-30T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-30:/silence-tf/</id><summary type="html">&lt;p&gt;Set the environment variable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TF_CPP_MIN_LOG_LEVEL=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you're also annoyed by messages like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcublas.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcudnn.so.5 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Set the environment variable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TF_CPP_MIN_LOG_LEVEL=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you're also annoyed by messages like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcublas.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcudnn.so.5 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcufft.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcurand.so.8.0 locally
[...]
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.
I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:910] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties:
name: GeForce 940MX
major: 5 minor: 0 memoryClockRate (GHz) 1.2415
pciBusID 0000:02:00.0
Total memory: 1.96GiB
Free memory: 1.55GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -&amp;gt; (device: 0, name: GeForce 940MX, pci bus id: 0000:02:00.0)
W tensorflow/core/common_runtime/bfc_allocator.cc:217] Ran out of memory trying to allocate 1.11GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory is available.
W tensorflow/core/common_runtime/bfc_allocator.cc:217] Ran out of memory trying to allocate 1.11GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory is available.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I've added &lt;code&gt;export TF_CPP_MIN_LOG_LEVEL=2&lt;/code&gt; to my &lt;code&gt;~/.profile&lt;/code&gt;. Note that this
only suppresses the warnings. The better solution would be to compile
Tensorflow with SSE-X support.&lt;/p&gt;</content><category term="Tensorflow"></category></entry><entry><title>ZCA Whitening</title><link href="https://martin-thoma.com/zca-whitening/" rel="alternate"></link><published>2017-03-29T20:00:00+02:00</published><updated>2017-03-29T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-29:/zca-whitening/</id><summary type="html">&lt;p&gt;Whitening is a transformation of data in such a way that its covariance matrix &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt;
is the identity matrix. Hence whitening decorrelates features. It is used as a
preprocessing method.&lt;/p&gt;
&lt;p&gt;When you have &lt;span class="math"&gt;\(N\)&lt;/span&gt; data points in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;, then the covariance matrix
&lt;span class="math"&gt;\(\Sigma \in \mathbb{R}^{n \times â€¦&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Whitening is a transformation of data in such a way that its covariance matrix &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt;
is the identity matrix. Hence whitening decorrelates features. It is used as a
preprocessing method.&lt;/p&gt;
&lt;p&gt;When you have &lt;span class="math"&gt;\(N\)&lt;/span&gt; data points in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;, then the covariance matrix
&lt;span class="math"&gt;\(\Sigma \in \mathbb{R}^{n \times n}\)&lt;/span&gt; is estimated to be:&lt;/p&gt;
&lt;div class="math"&gt;$$\hat{\Sigma}_{jk} = \frac{1}{N-1} \sum_{i=1}^N (x_{ij} - \bar{x}_j) \cdot (x_{ik} - \bar{x}_k)$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\bar{x}_j\)&lt;/span&gt; denotes the &lt;span class="math"&gt;\(j\)&lt;/span&gt;-th component of the estimated mean of the
samples &lt;span class="math"&gt;\(x\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Any matrix &lt;span class="math"&gt;\(W \in \mathbb{R}^{n \times n}\)&lt;/span&gt; which satisfies the condition&lt;/p&gt;
&lt;div class="math"&gt;$$W^T W = C^{-1}$$&lt;/div&gt;
&lt;p&gt;whitens the data. &lt;abbr title="Zero-phase Component Analysis"&gt;ZCA&lt;/abbr&gt;
whitening is the choice &lt;span class="math"&gt;\(W = M^{- \frac{1}{2}}\)&lt;/span&gt;. PCA is another choice.
According to "Neural Networks: Tricks of the Trade" PCA and ZCA whitening
differ only by a rotation.&lt;/p&gt;
&lt;h2 id="how-to-do-it"&gt;How to do it&lt;/h2&gt;
&lt;p&gt;When you look at the &lt;a href="https://github.com/fchollet/keras/blob/master/keras/preprocessing/image.py#L670-L674"&gt;Keras code&lt;/a&gt;, you can see the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Calculate principal components
sigma = np.dot(flat_x.T, flat_x) / flat_x.shape[0]
u, s, _ = linalg.svd(sigma)
principal_components = np.dot(np.dot(u, np.diag(1. / np.sqrt(s + 10e-7))), u.T)

# Apply ZCA whitening
whitex = np.dot(flat_x, principal_components)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, at first you compute the covariance matrix &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt;. I'm not quite sure,
but I think they should divide by &lt;code&gt;flat_x.shape[0] - 1&lt;/code&gt; for the unbiased
estimator.&lt;/p&gt;
&lt;p&gt;Then you apply singular value decomposition to the estimated covariance matrix.
The matrix &lt;span class="math"&gt;\(u \in \mathbb{R}^{n \times n}\)&lt;/span&gt; is &lt;a href="https://en.wikipedia.org/wiki/Unitary_matrix"&gt;unitary&lt;/a&gt;
and &lt;span class="math"&gt;\(s \in \mathbb{R}^{n \times n}\)&lt;/span&gt; is a diagonal matrix with non-negative real numbers on the diagonal.
Those number are the &lt;a href="https://en.wikipedia.org/wiki/Singular_value"&gt;singular values&lt;/a&gt;
of &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Next, the principal components are calculated:
[u \cdot \frac{1}{\sqrt{s + 10^{-7}}} I \cdot u^T]&lt;/p&gt;
&lt;p&gt;By adding &lt;code&gt;10e-7&lt;/code&gt; one prevents division by zero.&lt;/p&gt;
&lt;p&gt;Whitening is then simply the multiplication with the principal components.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alex Krizhevsky and Geoffrey Hinton: &lt;a href="https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf"&gt;Learning multiple layers of features from tiny images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1512.00809"&gt;Optimal whitening and decorrelation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Computer Vision"></category><category term="Machine Learning"></category></entry><entry><title>ML Review 4</title><link href="https://martin-thoma.com/ml-review-4/" rel="alternate"></link><published>2017-03-25T20:00:00+01:00</published><updated>2017-03-25T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-25:/ml-review-4/</id><summary type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MarvinTeichmann/KittiSeg"&gt;KittiSeg&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/MachineLearning/comments/5y8c5w/p_kittiseg_a_toolkit_to_perform_semantic/"&gt;reddit&lt;/a&gt;): A toolkit for semantic segmentation based on &lt;a href="https://github.com/TensorVision/TensorVision"&gt;TensorVision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://research.google.com/audioset/"&gt;AudioSet&lt;/a&gt;: A dataset for accoustic events&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publications"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.03864"&gt;Evolution Strategies as a Scalable Alternative to Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.00955"&gt;Controllable Text Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.02528"&gt;Stopping GAN â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MarvinTeichmann/KittiSeg"&gt;KittiSeg&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/MachineLearning/comments/5y8c5w/p_kittiseg_a_toolkit_to_perform_semantic/"&gt;reddit&lt;/a&gt;): A toolkit for semantic segmentation based on &lt;a href="https://github.com/TensorVision/TensorVision"&gt;TensorVision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://research.google.com/audioset/"&gt;AudioSet&lt;/a&gt;: A dataset for accoustic events&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publications"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.03864"&gt;Evolution Strategies as a Scalable Alternative to Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.00955"&gt;Controllable Text Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.02528"&gt;Stopping GAN Violence: Generative Unadversarial Networks&lt;/a&gt;: Probably one of the funniest ML things I've seen so far. Reminds me of &lt;a href="https://www.youtube.com/watch?v=DQWI1kvmwRg"&gt;Machine Learning A Cappella - Overfitting Thriller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.06857"&gt;Deep Neural Networks Do Not Recognize Negative Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.06618"&gt;Twitter100k: A Real-world Dataset for Weakly Supervised Cross-Media Retrieval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opensurfaces.cs.cornell.edu/publications/minc/"&gt;MINC-2500&lt;/a&gt; dataset&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1703.06817"&gt;Second-order Convolutional Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software"&gt;Software&lt;/h2&gt;
&lt;!-- e.g. Theano, Keras, ... --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Pi-DeepLearning/RaspberryPi-FaceDetection-MTCNN-Caffe-With-Motion"&gt;Pi-DeepLearning&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/MachineLearning/comments/5xrt2m/pmtcnn_face_detection_on_raspberry_pi_3_with/"&gt;reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepdetect.com/"&gt;DeepDetect&lt;/a&gt; (&lt;a href="https://github.com/beniz/deepdetect"&gt;GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="interesting-questions"&gt;Interesting Questions&lt;/h2&gt;
&lt;!-- For example StackExchange --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/q/42648465/562769"&gt;How to predict an item's category given its name?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/MLQuestions/comments/5yuc22/how_do_you_share_models/"&gt;How do you share models?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/q/41251698/562769"&gt;How many FLOPs does tanh need?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;h3 id="color-maps"&gt;Color Maps&lt;/h3&gt;
&lt;p&gt;Color Maps are important for visualizing data. But the default color map for
many applications is jet, which is bad for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's hard to estimate distances from jet&lt;/li&gt;
&lt;li&gt;Doesn't work well when printed in grayscale&lt;/li&gt;
&lt;li&gt;Even worse if you are colorblind&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Jet and the new colormaps" src="../images/2017/03/colormaps.png" style="width: 512px"/&gt;
&lt;figcaption class="text-center"&gt;Jet and the new colormaps&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The YouTube clip &lt;a href="https://www.youtube.com/watch?v=xAoljeRJ3lU"&gt;A Better Default Colormap for Matplotlib&lt;/a&gt;
by Nathaniel Smith and St&amp;eacute;fan van der Walt gives a short introduction into
color theory. They introduce &lt;a href="http://colorspacious.readthedocs.io/en/latest/"&gt;colorspacious&lt;/a&gt;
and &lt;a href="https://github.com/matplotlib/viscm"&gt;viscm&lt;/a&gt;. &lt;code&gt;viscm&lt;/code&gt; is a tool for
creating new color maps. They created &lt;code&gt;viridis&lt;/code&gt; as a better alternative to
&lt;code&gt;jet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A blog post with roughly the same content is at &lt;a href="https://bids.github.io/colormap/"&gt;bids.github.io/colormap&lt;/a&gt;.
This is the default for matplotlib 2.0. If you wonder which matplotlib version
you have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"import matplotlib;print(matplotlib.__version__)"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is how you update matplotlib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -H pip install matplotlib --upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a list of other matplotlib colormaps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;['Accent', 'afmhot', 'autumn', 'binary', 'Blues', 'bone', 'BrBG', 'brg',
'BuGn', 'BuP', 'bwr', 'CMRmap', 'cool', 'coolwarm', 'copper', 'cubehelix',
'Dark2', 'flag', 'gist_earth', 'gist_gray', 'gist_heat', 'gist_ncar',
'gist_rainbow', 'gist_stern', 'gist_yarg', 'GnB', 'gnuplot', 'gnuplot2',
'gray', 'Greens', 'Greys', 'hot', 'hsv', 'jet', 'nipy_spectral', 'ocean',
'Oranges', 'OrRd', 'Paired', 'Pastel1', 'Pastel2', 'pink', 'PiYG', 'PRGn',
'prism', 'PuB', 'PuBuGn', 'PuOr', 'PuRd', 'Purples', 'rainbow', 'RdB', 'RdGy',
'RdP', 'RdYlB', 'RdYlGn', 'Reds', 'seismic', 'Set1', 'Set2', 'Set3',
'Spectral', 'spectral', 'spring', 'summer', 'terrain', 'Vega10', 'Vega20',
'Vega20b', 'Vega20c', 'winter', 'Wistia', 'YlGn', 'YlGnB', 'YlOrBr', 'YlOrRd']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, some interesting links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/32484915/562769"&gt;How to use viridis in matplotlib 1.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matplotlib: &lt;a href="http://matplotlib.org/users/colormaps.html"&gt;Choosing Colormaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="class-distribution"&gt;Class distribution&lt;/h3&gt;
&lt;p&gt;You should always know if your data is severly unevenly distributed. Here is
a little script to visualize the data distribution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# your labels&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# yes, +2.&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# your labels&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the CIFAR100 training data, this is pretty boring:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of the CIFAR 100 training data." src="../images/2017/03/cifar100_data_dist.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of the CIFAR 100 training data.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="blogs-websites"&gt;Blogs / Websites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/ensembles/"&gt;Ensembles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/big-data/2016/12/how-to-train-and-classify-images-using-google-cloud-machine-learning-and-cloud-dataflow"&gt;How to train and classify images using Google Cloud Machine Learning and Cloud Dataflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudplatformonline.com/Machine-Learning-Startup-Competition.html"&gt;Machine Learning Startup Competition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/athelas/paper-1-baidus-deep-voice-675a323705df#.z937u7dki"&gt;Baidu Deep Voice explained: Part 1â€Š&amp;mdash;â€Šthe Inference Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcrunch.com/2017/03/17/laying-a-trap-for-self-driving-cars/"&gt;Laying a trap for self-driving cars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/image-classification/"&gt;SotA in Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/object-detection/"&gt;SotA in Object detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="navigation clearfix"&gt;
&lt;div class="alignleft"&gt;
&lt;a href="https://martin-thoma.com/ml-review-3/" rel="prev"&gt;&amp;laquo; Previous Review&lt;/a&gt;
&lt;/div&gt;
&lt;div class="alignright"&gt;
&lt;a href="https://martin-thoma.com/ml-review-5/" rel="next"&gt;Next Review &amp;raquo;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category><category term="matplotlib"></category><category term="Color"></category></entry><entry><title>Object Detection</title><link href="https://martin-thoma.com/object-detection/" rel="alternate"></link><published>2017-03-19T20:00:00+01:00</published><updated>2017-03-19T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-19:/object-detection/</id><summary type="html">&lt;p&gt;Object detection is the following task: You have an image and you want
axis-aligned bounding boxes around every instance of a pre-defined set of
object classes. The set of object classes is finite and typically not bigger
than 1000.&lt;/p&gt;
&lt;p&gt;Here is an easy to use example&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/install/"&gt;Tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/799184/10425"&gt;CUDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/767269/10425"&gt;CuDNN â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Object detection is the following task: You have an image and you want
axis-aligned bounding boxes around every instance of a pre-defined set of
object classes. The set of object classes is finite and typically not bigger
than 1000.&lt;/p&gt;
&lt;p&gt;Here is an easy to use example&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/install/"&gt;Tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/799184/10425"&gt;CUDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/767269/10425"&gt;CuDNN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://keras.io/#installation"&gt;Keras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mega.nz/#F!7RowVLCL!q3cEVRK9jyOSB9el3SssIA"&gt;&lt;code&gt;weights_SSD300.hdf5&lt;/code&gt;&lt;/a&gt; (103.2MB, MD5: &lt;code&gt;9ae4b93e679ea30134ce37e3096f34fa&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssd.py&lt;/code&gt; and &lt;code&gt;ssd_utils.py&lt;/code&gt; from &lt;a href="https://github.com/MartinThoma/algorithms/tree/master/ML/detection"&gt;github.com/MartinThoma/algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Run object detection with VOC classes.&lt;/span&gt;

&lt;span class="sd"&gt;This is just a minor modification of code from&lt;/span&gt;
&lt;span class="sd"&gt;https://github.com/rykov8/ssd_keras&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.applications.imagenet_utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;preprocess_input&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.misc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;imread&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ssd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SSD300&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ssd_utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BBoxUtility&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_overlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voc_classes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plt_fname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create a visualization of the found objects in img.&lt;/span&gt;

&lt;span class="sd"&gt;    Paramters&lt;/span&gt;
&lt;span class="sd"&gt;    ---------&lt;/span&gt;
&lt;span class="sd"&gt;    img : numpy array&lt;/span&gt;
&lt;span class="sd"&gt;        Original array&lt;/span&gt;
&lt;span class="sd"&gt;    results : numpy array&lt;/span&gt;
&lt;span class="sd"&gt;        Found objects&lt;/span&gt;
&lt;span class="sd"&gt;    voc_classes : list of strings&lt;/span&gt;
&lt;span class="sd"&gt;        Names of the classes in Pascal VOC.&lt;/span&gt;
&lt;span class="sd"&gt;    plt_fname : string&lt;/span&gt;
&lt;span class="sd"&gt;        Path where the visualization gets stored.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Parse the outputs.&lt;/span&gt;
    &lt;span class="n"&gt;det_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;det_conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;det_xmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;det_ymin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;det_xmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;det_ymax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Get detections with confidence higher than 0.6.&lt;/span&gt;
    &lt;span class="n"&gt;top_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;det_conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;top_conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;det_conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;top_label_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;det_label&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;top_xmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;det_xmin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;top_ymin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;det_ymin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;top_xmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;det_xmax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;top_ymax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;det_ymax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;255.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;currentAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;currentAxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'off'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;xmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_xmin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="n"&gt;ymin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_ymin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="n"&gt;xmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_xmax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="n"&gt;ymax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_ymax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_label_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;label_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voc_classes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;display_txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{:0.2f}, {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;xmax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xmin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;currentAxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;currentAxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;display_txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'facecolor'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'alpha'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plt_fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_paths&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect objects in images.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    img_paths : list of strings&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# Load the model&lt;/span&gt;
    &lt;span class="n"&gt;voc_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Aeroplane'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Bicycle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Bird'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Boat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Bottle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;'Bus'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Cat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Chair'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Cow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Diningtable'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;'Dog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Horse'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Motorbike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Person'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pottedplant'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;'Sheep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Sofa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Train'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Tvmonitor'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;NUM_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voc_classes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;input_shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSD300&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NUM_CLASSES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_weights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'weights_SSD300.hdf5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bbox_util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BBoxUtility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_CLASSES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Load the inputs&lt;/span&gt;
    &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;img_paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_img&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preprocess_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Predict&lt;/span&gt;
    &lt;span class="n"&gt;preds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bbox_util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detection_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Visualize&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;create_overlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;voc_classes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s2"&gt;"{}-det.png"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_paths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get parser object."""&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"filename"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Detect objects in image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"IMAGE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--folder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"folder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Detect objects in JPG images in folder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FOLDER"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
        &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/*.jpg"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="St Josep La Boqueria" src="../images/2017/03/040-Barcelona-St-Josep-La-Boqueria-det.png" style="width:512px;"/&gt;
&lt;figcaption class="text-center"&gt;St Josep La Boqueria&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Sagrada Familia" src="../images/2017/03/053-Sagrada-Familia-det.png"/&gt;
&lt;figcaption class="text-center"&gt;Sagrada Familia&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Cat" src="../images/2017/03/065-Barcelona-Cat-1-det.png"/&gt;
&lt;figcaption class="text-center"&gt;Cat&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Barcelona" src="../images/2017/03/069-Barcelona-det.png"/&gt;
&lt;figcaption class="text-center"&gt;Barcelona&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="EmiMa-079" src="../images/2017/03/EmiMa-079-det.png"/&gt;
&lt;figcaption class="text-center"&gt;EmiMa-079&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="EmiMa-100" src="../images/2017/03/EmiMa-100-det.png"/&gt;
&lt;figcaption class="text-center"&gt;EmiMa-100&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="EmiMa-103" src="../images/2017/03/EmiMa-103-det.png"/&gt;
&lt;figcaption class="text-center"&gt;EmiMa-103&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="EmiMa-105" src="../images/2017/03/EmiMa-105-det.png"/&gt;
&lt;figcaption class="text-center"&gt;EmiMa-105&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Ryck" src="../images/2017/03/Greifswald-Ryck-2016-08-27-det.png"/&gt;
&lt;figcaption class="text-center"&gt;Ryck&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Pittsburgh" src="../images/2017/03/Pittsburgh-13-det.png"/&gt;
&lt;figcaption class="text-center"&gt;Pittsburgh&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The person detector is somewhat useful out-of-the-box, but for the rest you
will need to adjust the algorithm. Having only the 20&amp;nbsp;classes from Pascal
VOC is not enough.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dat Tran: &lt;a href="https://medium.com/towards-data-science/building-a-real-time-object-recognition-app-with-tensorflow-and-opencv-b7a2b4ebdc32"&gt;Building a Real-Time Object Recognition App with Tensorflow and OpenCV&lt;/a&gt;, 22.06.2017&lt;/li&gt;
&lt;/ul&gt;</content><category term="machine learning"></category><category term="Computer Vision"></category><category term="Pascal VOC"></category></entry><entry><title>Image Classification</title><link href="https://martin-thoma.com/image-classification/" rel="alternate"></link><published>2017-03-15T20:00:00+01:00</published><updated>2017-03-15T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-15:/image-classification/</id><summary type="html">&lt;p&gt;Image classification is the following task: You have an image and you want to
assign it one label. The set of possible labels is finite and typically not
bigger than 1000.&lt;/p&gt;
&lt;p&gt;So for example, you might ask: What can you see in this image?&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="A jellyfish" src="../images/2017/03/moon-jelly.jpg" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;A jellyfish&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It is one of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Image classification is the following task: You have an image and you want to
assign it one label. The set of possible labels is finite and typically not
bigger than 1000.&lt;/p&gt;
&lt;p&gt;So for example, you might ask: What can you see in this image?&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="A jellyfish" src="../images/2017/03/moon-jelly.jpg" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;A jellyfish&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It is one of the most common and probably simplest tasks in the intersection of
machine learning and computer vision. A commonly used dataset is &lt;a href="https://en.wikipedia.org/wiki/ImageNet"&gt;ImageNet&lt;/a&gt;,
which consists of exactly 1000&amp;nbsp;classes and has more than 1&amp;thinsp;000&amp;thinsp;000
training samples. To be exact, it is the ImageNet Large Scale Visual Recognition Challenge (ILSVRC).&lt;/p&gt;
&lt;p&gt;However, I miss easy to use examples. So here you are.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/install/"&gt;Tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/799184/10425"&gt;CUDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/767269/10425"&gt;CuDNN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://keras.io/#installation"&gt;Keras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;p&gt;The following code is taken from &lt;a href="https://github.com/fchollet/keras/blob/master/keras/applications/resnet50.py"&gt;Keras&lt;/a&gt; / &lt;a href="https://github.com/fchollet/deep-learning-models"&gt;Fran&amp;ccedil;ois Chollet&lt;/a&gt;. Full credit to him for doing the difficult work.&lt;/p&gt;
&lt;p&gt;The code defines one of the state of the art
models, a so called ResNet. See &lt;a href="https://arxiv.org/abs/1512.03385"&gt;Deep Residual Learning for Image Recognition&lt;/a&gt; for details. Then it downloads the weights, stores them for
subsequent uses and applies it to the data.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;"""ResNet50 model for Keras."""&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.applications&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ResNet50&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.utils.data_utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_file&lt;/span&gt;

&lt;span class="n"&gt;CLASS_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CLASS_INDEX_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://s3.amazonaws.com/deep-learning-models/'&lt;/span&gt;
                    &lt;span class="s1"&gt;'image-models/imagenet_class_index.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preprocess_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim_ordering&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Standard preprocessing of image data.&lt;/span&gt;

&lt;span class="sd"&gt;    1. Make sure the order of the channels is correct (RGB, BGR, depending on&lt;/span&gt;
&lt;span class="sd"&gt;       the backend)&lt;/span&gt;
&lt;span class="sd"&gt;    2. Mean subtraction by channel.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    x : numpy array&lt;/span&gt;
&lt;span class="sd"&gt;        The image&lt;/span&gt;
&lt;span class="sd"&gt;    dim_ordering : string, optional (default: 'default')&lt;/span&gt;
&lt;span class="sd"&gt;        Either 'th' for Theano or 'tf' for Tensorflow&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    numpy array&lt;/span&gt;
&lt;span class="sd"&gt;        The preprocessed image&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dim_ordering&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dim_ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_dim_ordering&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dim_ordering&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'tf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'th'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dim_ordering&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'th'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;103.939&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;116.779&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;123.68&lt;/span&gt;
        &lt;span class="c1"&gt;# 'RGB'-&amp;gt;'BGR'&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;103.939&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;116.779&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;123.68&lt;/span&gt;
        &lt;span class="c1"&gt;# 'RGB'-&amp;gt;'BGR'&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode_predictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Decode the predictionso of the ImageNet trained network.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    preds : numpy array&lt;/span&gt;
&lt;span class="sd"&gt;    top : int&lt;/span&gt;
&lt;span class="sd"&gt;        How many predictions to return&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    list of tuples&lt;/span&gt;
&lt;span class="sd"&gt;        e.g. (u'n02206856', u'bee', 0.71072823) for the WordNet identifier,&lt;/span&gt;
&lt;span class="sd"&gt;        the class name and the probability.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;CLASS_INDEX&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'`decode_predictions` expects '&lt;/span&gt;
                         &lt;span class="s1"&gt;'a batch of predictions '&lt;/span&gt;
                         &lt;span class="s1"&gt;'(i.e. a 2D array of shape (samples, 1000)). '&lt;/span&gt;
                         &lt;span class="s1"&gt;'Found array with shape: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;CLASS_INDEX&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'imagenet_class_index.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;CLASS_INDEX_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;cache_subdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'models'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;CLASS_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;top_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argsort&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:][::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLASS_INDEX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;top_indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_valid_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Check if arg is a valid file that already exists on the file system.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    parser : argparse object&lt;/span&gt;
&lt;span class="sd"&gt;    arg : str&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    arg&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; does not exist!"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get parser object."""&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"filename"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_valid_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Classify image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"IMAGE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_parser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Load model&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ResNet50&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;include_top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'imagenet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;img_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;
    &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_img&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;224&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;224&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_dims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preprocess_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Input image shape:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;preds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Prediction time: {:0.3f}s"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;wordnet_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;decode_predictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preds&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{wid}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;{prob:&amp;gt;6}%&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;{name}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wordnet_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                 &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%0.2f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Store it as &lt;code&gt;resnet50.py&lt;/code&gt; and make it executable.&lt;/p&gt;
&lt;p&gt;(In case the JSON becomes unavailable: &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/ML/ImageNet-classification/imagenet_class_index.json"&gt;Here you are&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id="how-to-use"&gt;How to use&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./resnet50.py -f honey-bee.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;alternatively, if you have a GPU but not that much memory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;CUDA_VISIBLE_DEVICES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt; ./resnet50.py -f honey-bee.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you apply this to the jellyfish image from above, you get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Input image shape: (1, 224, 224, 3)
n01910747    100.00%    jellyfish
n01496331      0.00%    electric_ray
n10565667      0.00%    scuba_diver
n01914609      0.00%    sea_anemone
n02607072      0.00%    anemone_fish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This takes about 6&amp;nbsp;seconds on CPU on my laptop.&lt;/p&gt;
&lt;h2 id="alternative-models"&gt;Alternative Models&lt;/h2&gt;
&lt;p&gt;If you are building an application, you might want to look into alternatives:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Modelname&lt;/th&gt;
&lt;th&gt;Model size&lt;/th&gt;
&lt;th&gt;Input Size&lt;/th&gt;
&lt;th&gt;Top1-Accuracy&lt;/th&gt;
&lt;th&gt;Top5-Accuracy&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1512.03385"&gt;ResNet50&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;102.9 MB&lt;/td&gt;
&lt;td&gt;224 &amp;times; 224&lt;/td&gt;
&lt;td&gt;77.15%&lt;/td&gt;
&lt;td&gt;93.29%&lt;/td&gt;
&lt;td&gt;0.495s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1409.1556"&gt;VGG16&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;553.5 MB&lt;/td&gt;
&lt;td&gt;224 &amp;times; 224&lt;/td&gt;
&lt;td&gt;73.0%&lt;/td&gt;
&lt;td&gt;91.2%&lt;/td&gt;
&lt;td&gt;0.488s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://arxiv.org/abs/1512.00567"&gt;InceptionV3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;95.1 MB&lt;/td&gt;
&lt;td&gt;299 &amp;times; 299&lt;/td&gt;
&lt;td&gt;78.8%&lt;/td&gt;
&lt;td&gt;94.4%&lt;/td&gt;
&lt;td&gt;0.681s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1610.02357"&gt;Xception&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;91.9 MB&lt;/td&gt;
&lt;td&gt;299 &amp;times; 299&lt;/td&gt;
&lt;td&gt;79.0%&lt;/td&gt;
&lt;td&gt;94.5%&lt;/td&gt;
&lt;td&gt;0.761s&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class="important"&gt;The speed only for the prediction. The model size is several 100&amp;nbsp;MB, so this takes a while. In a real application you can (1) load the model only once and (2) run the evaluation on a batch of many images to speed things up.&lt;/div&gt;
&lt;p&gt;More models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/titu1994/Inception-v4"&gt;titu1994/Inception-v4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html"&gt;Building powerful image classification models using very little data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="machine learning"></category><category term="Computer Vision"></category><category term="ImageNet"></category></entry><entry><title>Ensembles</title><link href="https://martin-thoma.com/ensembles/" rel="alternate"></link><published>2017-03-11T20:00:00+01:00</published><updated>2017-03-11T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-11:/ensembles/</id><summary type="html">&lt;p&gt;Models which are combinations of other models are called an &lt;strong&gt;ensemble&lt;/strong&gt;.
The simplest way to combine several classifiers is by averaging their predictions.&lt;/p&gt;
&lt;p&gt;For example, if you have three&amp;nbsp;models and four&amp;nbsp;classes, you might get
predictions like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model 1(x1) = [0.1, 0.5, 0.3, 0.1 â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Models which are combinations of other models are called an &lt;strong&gt;ensemble&lt;/strong&gt;.
The simplest way to combine several classifiers is by averaging their predictions.&lt;/p&gt;
&lt;p&gt;For example, if you have three&amp;nbsp;models and four&amp;nbsp;classes, you might get
predictions like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model 1(x1) = [0.1, 0.5, 0.3, 0.1],
model 2(x1) = [0.5, 0.3, 0.1, 0.1],
model 3(x1) = [0.4, 0.4, 0.1, 0.1]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the ensemble predicts
&lt;/p&gt;
&lt;div class="math"&gt;$$\left [\frac{0.1+0.5+0.4}{3}, \frac{0.5+0.3+0.4}{3}, \frac{0.4+0.2+0.2}{3}, \frac{0.1+0.1+0.1}{3} \right] \approx \left [0.3, 0.4, 0.2, 0.1 \right ]$$&lt;/div&gt;
&lt;p&gt; for &lt;span class="math"&gt;\(x_1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Note that this is different from pluarlity voting (PV) where every model gives
only one vote for the most likely class. In the case from above, it would be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model 1(x1) = [0, 1, 0, 0],
model 2(x1) = [1, 0, 0, 0],
model 3(x1) = [1, 0, 0, 0]  # tie - lets just take the first
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the plurality voting ensemble would predict class&amp;nbsp;1, whereas the
average probability ensemble predicts class&amp;nbsp;2. This comes from the fact
that everybody might have different first choices, but they might agree on the
second choice.&lt;/p&gt;
&lt;p&gt;Please note that a tie in the predictions of a classifier with less than
100&amp;nbsp;classes is unlikely due to the higher precision of floating point
numbers. However, a tie in votes can happen.&lt;/p&gt;
&lt;p&gt;According to Andrej Karpathy, this gives you about +2 percentage points in
accuracy.&lt;/p&gt;
&lt;h2 id="tiny-experiment-on-cifar-100"&gt;Tiny Experiment on CIFAR 100&lt;/h2&gt;
&lt;p&gt;I've just tried this with three (almost identical) models for &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR&amp;nbsp;100&lt;/a&gt;. All of
them were trained with &lt;a href="https://arxiv.org/abs/1412.6980"&gt;Adam&lt;/a&gt; with
the same training data (the same batches). Model 1 and model 3 only differed in
the second-last layer (one uses ReLU, the other tanh), model 1 and model 2 only
differed in the border mode for one convolutional layer (valid vs same).&lt;/p&gt;
&lt;p&gt;The accuracies of the single models were:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model 1: 57.02
model 2: 61.85
model 3: 48.59
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The ensemble accuracy is 62.98%. Hence the ensemble is 1.13 percentage points
better than the best single model!&lt;/p&gt;
&lt;p&gt;Although I have read things like this before, it is the first time I actually
tried it myself.&lt;/p&gt;
&lt;h2 id="ensemble-techniques"&gt;Ensemble Techniques&lt;/h2&gt;
&lt;p&gt;There are much more sophisticated ensemble techniques than simple averaging of
the output:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Bootstrap_aggregating"&gt;&lt;dfn id="bagging"&gt;Bagging&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;i&gt;How does it work?&lt;/i&gt; Train models on different data
        (Learnier is fit, results are mean/median aggregated)&lt;br/&gt;
&lt;i&gt;Why is it used?&lt;/i&gt; Reduction of variance&lt;br/&gt;
&lt;i&gt;Common techniques:&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;Random subspaces: Take a part of the features (e.g. Random Forests)&lt;/li&gt;
&lt;li&gt;Pasting: Take a part of the training data without replacement&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Boosting_(machine_learning)"&gt;&lt;dfn id="boosting"&gt;Boosting&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;i&gt;How does it work?&lt;/i&gt; Train one classifier.
        Obtain the results. Weight the training data higher if the classifier got
        it wrong. Train a new classifier on the weighted training data. Iterate.&lt;br/&gt;
&lt;i&gt;Why is it used?&lt;/i&gt; Reduction of bias
        &lt;i&gt;Examples:&lt;/i&gt; &lt;a href="https://en.wikipedia.org/wiki/AdaBoost"&gt;AdaBoost&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Gradient_boosting"&gt;Gradient boosting&lt;/a&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Ensemble_learning#Stacking"&gt;&lt;dfn id="stacking"&gt;Stacking&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;i&gt;How does it work?&lt;/i&gt; Train $n$ classifiers on the data. Train
        a classifier on the predictions of the $n$ classifiers.&lt;br/&gt;
&lt;i&gt;Why is it used?&lt;/i&gt; Reduction of bias and reduction of variance&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I made some images to make this more clear:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Bagging" src="../images/2017/03/bagging.jpg" style="width:512px;"/&gt;
&lt;figcaption class="text-center"&gt;Bagging trains the classifiers on different data.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Boosting reweights the training data" src="../images/2017/03/boosting.jpg" style="width:512px;"/&gt;
&lt;figcaption class="text-center"&gt;Boosting reweights the training data.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Stacking" src="../images/2017/03/stacking.jpg" style="width:512px;"/&gt;
&lt;figcaption class="text-center"&gt;Stacking trains the combiner.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="combiners"&gt;Combiners&lt;/h2&gt;
&lt;p&gt;Some choices for combiners are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Average of predictions of base classifiers&lt;/li&gt;
&lt;li&gt;Plurality vote (sometimes also called majority vote)&lt;/li&gt;
&lt;li&gt;Learning&lt;ul&gt;
&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;Neural Network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/ensemble.html"&gt;sklearn ensemble user guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scholarpedia.org/article/Ensemble_learning"&gt;Scholarpedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MIT 6.034 Artificial Intelligence: &lt;a href="https://www.youtube.com/watch?v=UHBmv7qCey4"&gt;17. Learning: Boosting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="machine learning"></category><category term="ensembles"></category><category term="Computer Vision"></category><category term="CIFAR 100"></category></entry><entry><title>How to download ImageNet</title><link href="https://martin-thoma.com/download-data/" rel="alternate"></link><published>2017-03-06T20:00:00+01:00</published><updated>2017-03-06T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-03-06:/download-data/</id><summary type="html">&lt;p&gt;Machine Learning algorithms for computer vision need huge amounts of data.
Here are a few remarks on how to download them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you have enough space (&lt;code&gt;df -h&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Get a download manager. I use aria2c (&lt;code&gt;sudo apt-get install aria2&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For ImageNet, you have to register at &lt;a href="http://image-net.org/"&gt;image-net.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Machine Learning algorithms for computer vision need huge amounts of data.
Here are a few remarks on how to download them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you have enough space (&lt;code&gt;df -h&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Get a download manager. I use aria2c (&lt;code&gt;sudo apt-get install aria2&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For ImageNet, you have to register at &lt;a href="http://image-net.org/"&gt;image-net.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download the files like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c -s &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;URL&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After downloading the file, use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ md5sum &lt;span class="o"&gt;[&lt;/span&gt;Filename&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and compare the hash with the provided hash. If it differs, download the file
again.&lt;/p&gt;
&lt;p&gt;The ImageNet training data tar file contains 1000&amp;nbsp;files of the form
&lt;code&gt;n01440764.tar&lt;/code&gt;, &lt;code&gt;n01443537.tar&lt;/code&gt;, ...&lt;/p&gt;
&lt;p&gt;Each of those files contains JPEGs of one class. You can look the class label
up with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wordnet&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wn&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_synset_from_pos_and_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1440764&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_synset_from_pos_and_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1443537&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which reveals&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synset('tench.n.01')&lt;/li&gt;
&lt;li&gt;Synset('goldfish.n.01')&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you extract all 1000 of those tar files into one directory, this takes about
6 hours with a script like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tarfile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;untar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetd_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;tarfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extractall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;targetd_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ILSVRC2012_img_train/*.tar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;untar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"extracted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This gives 1281170 files in total.&lt;/p&gt;
&lt;h2 id="datasets"&gt;Datasets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://image-net.org/download-images"&gt;Download ImageNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://places2.csail.mit.edu/download.html"&gt;Download Places365&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="download"></category><category term="machine learning"></category></entry><entry><title>ML Review 3</title><link href="https://martin-thoma.com/ml-review-3/" rel="alternate"></link><published>2017-02-25T20:00:00+01:00</published><updated>2017-02-25T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-02-25:/ml-review-3/</id><summary type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.googleblog.com/2017/02/announcing-tensorflow-10.html"&gt;Tensorflow 1.0 is released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="human-strenght-and-super-human-strength-programs"&gt;Human-strenght and Super-human strength programs&lt;/h3&gt;
&lt;p&gt;Super-human strength programs are programs, which surpass even the best human
(on the long run) in a specified task. Human-strength programs â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning.&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.googleblog.com/2017/02/announcing-tensorflow-10.html"&gt;Tensorflow 1.0 is released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="human-strenght-and-super-human-strength-programs"&gt;Human-strenght and Super-human strength programs&lt;/h3&gt;
&lt;p&gt;Super-human strength programs are programs, which surpass even the best human
(on the long run) in a specified task. Human-strength programs behave similar
to an (untrained) human.&lt;/p&gt;
&lt;p&gt;Although those are not new, seeing them as a list (&lt;a href="http://blog.evjang.com/2017/01/nips2016.html"&gt;source&lt;/a&gt;)
was new to me. However, except for the games and lip reading, I doubt that we
are there yet. Interesting, non the less:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Games&lt;ul&gt;
&lt;li&gt;1995, Checkers: &lt;a href="https://en.wikipedia.org/wiki/Chinook_(draughts_player)"&gt;Chinook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1996, Chess: &lt;a href="https://en.wikipedia.org/wiki/Deep_Blue_(chess_computer)"&gt;DeepBlue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2016, Go: &lt;a href="https://en.wikipedia.org/wiki/AlphaGo"&gt;AlphaGo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lip reading: 2016, &lt;a href="https://arxiv.org/abs/1611.05358"&gt;Lip Reading Sentences in the Wild&lt;/a&gt; (&lt;a href="https://www.youtube.com/watch?v=5aogzAUPilE"&gt;YouTube&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Geolocation by photos, &lt;a href="https://arxiv.org/abs/1602.05314"&gt;PlaNet - Photo Geolocation with Convolutional Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Speech transcription: 2016, &lt;a href="https://arxiv.org/abs/1610.05256"&gt;Achieving Human Parity in Conversational Speech Recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Translation: 2016, &lt;a href="https://research.googleblog.com/2016/11/zero-shot-translation-with-googles.html"&gt;Zero-Shot Translation with Google&amp;rsquo;s Multilingual Neural Machine Translation System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Driving: 2016, &lt;a href="https://waymo.com/"&gt;Waymo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="live-demos-and-websites_1"&gt;Live Demos and Websites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://universe.openai.com/"&gt;universe.openai.com&lt;/a&gt;: Related to the OpenAI gym.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.microsoft.com/next/2016/03/13/project-malmo-using-minecraft-build-intelligent-technology/"&gt;Project Malmo&lt;/a&gt;: Train RL agents in Minecraft&lt;/li&gt;
&lt;li&gt;&lt;a href="http://visiir.lip6.fr/"&gt;VISIIR&lt;/a&gt;: VIsual Seek for Interactive Image Retrieval - classifying food&lt;/li&gt;
&lt;li&gt;&lt;a href="http://affinelayer.com/pixsrv/index.html"&gt;Image-to-Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publications"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1611.09969"&gt;High-Resolution Image Inpainting using Multi-Scale Neural Patch Synthesis&lt;/a&gt; and &lt;a href="https://github.com/leehomyc/High-Res-Neural-Inpainting"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1702.05663.pdf"&gt;The Game Imitation: Deep Supervised Convolutional Networks for Quick Video&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=Pvesq6LEQxg&amp;amp;list=PLegUCwsQzmnUpPwVv8ygMa19zNnDgJ6OC&amp;amp;index=1"&gt;YouTube playlist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openreview.net/pdf?id=rJv6ZgHYg"&gt;Deep Nets Don't Learn Via Memorization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software"&gt;Software&lt;/h2&gt;
&lt;!-- e.g. Theano, Keras, ... --&gt;
&lt;h2 id="interesting-questions"&gt;Interesting Questions&lt;/h2&gt;
&lt;!-- For example StackExchange --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/42326466/why-is-the-accuracy-of-my-cnn-not-reproducible"&gt;Why is the accuracy of my CNN not reproducible?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/MLQuestions/comments/5s0jnc/how_much_does_a_gpu_instance_cost/"&gt;How much does a GPU instance cost?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;h3 id="trump-qa-idea"&gt;Trump QA idea&lt;/h3&gt;
&lt;p&gt;I was just watching &lt;a href="https://www.youtube.com/watch?v=CSx-N9ayCvU&amp;amp;feature=youtu.be&amp;amp;t=3m40s"&gt;this clip&lt;/a&gt; and wodered how well a question answering system would work which is trained on Trump speaches. Very often, when reporters / journalists / moderators ask Trump a question, he answers with "I am the [most / best / least] [positive / negative statement]. [Inconsistent answer follows]".
The answers themself would almost certainly be hilarous. Second, one could make an experiment and ask people if Trump actually answered a question like this.&lt;/p&gt;
&lt;h2 id="meetings_1"&gt;Meetings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;London, 4. December 2016: &lt;a href="https://www.eventbrite.com/e/immigration-by-numbers-insights-through-data-visualisation-tickets-28920900191?aff=twitter"&gt;Data Visualization Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelona, 5. December 2016 - 10. December 2016: Neural Information Processing Systems (NIPS) (&lt;a href="https://nips.cc/"&gt;Link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mannheim, 7. April 2017: &lt;a href="https://hiwissml.github.io/datafest2017.github.io/"&gt;DataFest Germany&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="navigation clearfix"&gt;
&lt;div class="alignleft"&gt;
&lt;a href="https://martin-thoma.com/ml-review-2/" rel="prev"&gt;&amp;laquo; Previous Review&lt;/a&gt;
&lt;/div&gt;
&lt;div class="alignright"&gt;
&lt;a href="https://martin-thoma.com/ml-review-4/" rel="next"&gt;Next Review &amp;raquo;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category></entry><entry><title>Best of ML</title><link href="https://martin-thoma.com/best-of-ml/" rel="alternate"></link><published>2017-02-13T20:00:00+01:00</published><updated>2017-02-13T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-02-13:/best-of-ml/</id><summary type="html">&lt;p&gt;This post is a summary of articles, websites and material in general about
machine learning.&lt;/p&gt;
&lt;h2 id="articles"&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RNNs&lt;ul&gt;
&lt;li&gt;Get an overview: &lt;a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/"&gt;The Unreasonable Effectiveness of Recurrent Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Understand them: &lt;a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/"&gt;Understanding LSTM Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/"&gt;Using convolutional neural nets to detect facial keypoints tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hunch.net/?p=22"&gt;Clever Methods of Overfitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scott.fortmann-roe.com/docs/BiasVariance.html"&gt;Understanding the Bias-Variance Tradeoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sebastianruder.com/optimizing-gradient-descent/"&gt;An â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This post is a summary of articles, websites and material in general about
machine learning.&lt;/p&gt;
&lt;h2 id="articles"&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RNNs&lt;ul&gt;
&lt;li&gt;Get an overview: &lt;a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/"&gt;The Unreasonable Effectiveness of Recurrent Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Understand them: &lt;a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/"&gt;Understanding LSTM Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/"&gt;Using convolutional neural nets to detect facial keypoints tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hunch.net/?p=22"&gt;Clever Methods of Overfitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scott.fortmann-roe.com/docs/BiasVariance.html"&gt;Understanding the Bias-Variance Tradeoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sebastianruder.com/optimizing-gradient-descent/"&gt;An overview of gradient descent optimization algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cs231n: &lt;a href="http://cs231n.github.io/convolutional-networks/"&gt;Convolutional Neural Networks (CNNs / ConvNets)&lt;/a&gt; (&lt;a href="https://www.youtube.com/playlist?list=PL16j5WbGpaM0_Tj8CRmurZ8Kk1gEBc7fg"&gt;YouTube playlist&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.openai.com/evolution-strategies/"&gt;Evolution Strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://norvig.com/experiment-design.html"&gt;Warning Signs in Experimental Design and Interpretation&lt;/a&gt;: Not the typical ML literature, but interesting and relevant non the less as ML is driven by experiments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="books"&gt;Books&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://neuralnetworksanddeeplearning.com/"&gt;Neural Networks and Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ian Goodfellow, Yoshua Bengio, and Aaron Courville: &lt;a href="http://www.deeplearningbook.org/"&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="moocs"&gt;MOOCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Coursera: &lt;a href="https://www.coursera.org/learn/machine-learning"&gt;Machine Learning&lt;/a&gt; by Andrew Ng&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs231n.stanford.edu/"&gt;CS224d: Deep Learning for Natural Language Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.ox.ac.uk/people/nando.defreitas/machinelearning/"&gt;Machine Learning&lt;/a&gt;: Kurs der Universit&amp;auml;t Oxford&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs231n.stanford.edu/"&gt;Convolutional Neural Networks for Visual Recognition&lt;/a&gt;: Kurs von Stanford&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt;: Used often for Computer Vision, but more and more people jump to TensorFlow&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/"&gt;sklearn&lt;/a&gt;: Python Machine learning toolkit&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;: Used often for Speech Recognition&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Lasagne/Lasagne"&gt;Lasagne&lt;/a&gt;: Python, supports nVidia GPU training of neural networks&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dnouri/nolearn"&gt;nolearn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/"&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt;&lt;/a&gt;: C++ and Python, supports nVidia GPU training of neural networks&lt;ul&gt;
&lt;li&gt;&lt;a href="http://keras.io/"&gt;&lt;strong&gt;Keras.io&lt;/strong&gt;&lt;/a&gt;: Extremely nice for beginners&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="data"&gt;Data&lt;/h2&gt;
&lt;p&gt;Collections&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openml.org/"&gt;OpenML&lt;/a&gt;: A lot of datasets (it also has a Python package)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/datasets"&gt;Kaggle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Benchmark Datasets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;MNIST&lt;/a&gt;: 70&amp;thinsp;000 images of &lt;span class="math"&gt;\(28 \times 28\)&lt;/span&gt; px with labels (digits 0-9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1701.08380"&gt;HASY&lt;/a&gt;: 168&amp;thinsp;233 images of &lt;span class="math"&gt;\(32 \times 32\)&lt;/span&gt; px with labels (369 classes, all of them are characters)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.martin-thoma.de/write-math/data/"&gt;HWRT&lt;/a&gt;: Handwritten symbols (similar to HASY, but online data)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archive.ics.uci.edu/ml/datasets/Iris"&gt;IRIS&lt;/a&gt;: 3 classes, 50 items per class, 3 features per item&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cvlibs.net/datasets/kitti/"&gt;KITTI&lt;/a&gt;: Road vision dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.metacademy.org/"&gt;metacademy.org&lt;/a&gt;: A lot of material when you know what to look for&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.computervisiononline.com/datasets"&gt;computervisiononline.com&lt;/a&gt;: Eine Liste sehr vieler Datens&amp;auml;tze&lt;/li&gt;
&lt;li&gt;&lt;a href="http://riemenschneider.hayko.at/vision/dataset/"&gt;YACVID&lt;/a&gt;: Computer Vision Index To Datasets&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dmoz.org/Computers/Artificial_Intelligence/Machine_Learning/Datasets/"&gt;dmoz.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cheat-cheats"&gt;Cheat Cheats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/"&gt;Choosing the right estimator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-in/documentation/articles/machine-learning-algorithm-cheat-sheet/"&gt;Machine learning algorithm cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lists"&gt;Lists&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ujjwalkarn/Machine-Learning-Tutorials"&gt;Machine Learning Tutorials&lt;/a&gt; by Ujjwal Karn (Facebook employee)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jiwonkim.org/awesome-random-forest/"&gt;Awesome Random Forest&lt;/a&gt;: A
  curated list of resources regarding tree-based methods and more, including
  but not limited to random forest, bagging and boosting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt;: Machine Learning Challenges&lt;/li&gt;
&lt;li&gt;Stack Exchange&lt;ul&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/"&gt;datascience.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stats.stackexchange.com/"&gt;stats.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/josephmisiti/awesome-machine-learning"&gt;awesome-machine-learning&lt;/a&gt;: A list with MANY links to machine learning tools&lt;/li&gt;
&lt;li&gt;Demos:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://104.131.78.120/"&gt;Neural Machine Translation&lt;/a&gt;: English &amp;rarr; German, French&lt;/li&gt;
&lt;li&gt;&lt;a href="http://write-math.com"&gt;write-math.com&lt;/a&gt;: Symbol recognition&lt;/li&gt;
&lt;li&gt;&lt;a href="http://playground.tensorflow.org/"&gt;Tensorflow Playground&lt;/a&gt;: Demo for decision boundary of neural network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lecture-demo.ira.uka.de/"&gt;lecture-demo.ira.uka.de&lt;/a&gt;: Rosenblatt-Perceptron, GMMs, ...&lt;/li&gt;
&lt;li&gt;&lt;a href="http://demos.algorithmia.com/colorize-photos/"&gt;demos.algorithmia.com/colorize-photos&lt;/a&gt;: Colorize a grayscale photo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category></entry><entry><title>State of the Art in ML</title><link href="https://martin-thoma.com/sota/" rel="alternate"></link><published>2017-02-06T20:00:00+01:00</published><updated>2017-02-06T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-02-06:/sota/</id><summary type="html">&lt;p&gt;It is difficult to keep track of the current state of the art (SotA). Also, it
might not be directly clear which datasets are relevant. The following list
should help. If you think some datasets / problems / SotA results are missing,
let me know in the comments or via E-mail (&lt;code&gt;info â€¦&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is difficult to keep track of the current state of the art (SotA). Also, it
might not be directly clear which datasets are relevant. The following list
should help. If you think some datasets / problems / SotA results are missing,
let me know in the comments or via E-mail (&lt;code&gt;info@martin-thoma.de&lt;/code&gt;).
I will update it.&lt;/p&gt;
&lt;p&gt;Papers and blog posts which summarize a topic or give a good introduction are
always welcome.&lt;/p&gt;
&lt;p&gt;In the following, a &lt;code&gt;+&lt;/code&gt; will indicate "higher is better" and a
&lt;code&gt;-&lt;/code&gt; will indicate "lower is better".&lt;/p&gt;
&lt;h2 id="computer-vision"&gt;Computer Vision&lt;/h2&gt;
&lt;h3 id="image-classification"&gt;Image Classification&lt;/h3&gt;
&lt;table class="table" id="image-classification-table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.image-net.org/challenges/LSVRC/2012/nonpub-downloads"&gt;ImageNet 2012&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.08 %&lt;/td&gt;
&lt;td&gt;Top-5 error &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1602.07261.pdf" title="Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning"&gt;[SIVA16]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;MNIST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.21 %&lt;/td&gt;
&lt;td&gt;error &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.matthewzeiler.com/pubs/icml2013/icml2013.pdf" title="Regularization of Neural Networks using DropConnect"&gt;[WZZ+13]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR-10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2.72 %&lt;/td&gt;
&lt;td&gt;error &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://openreview.net/forum?id=HkO-PCmYl" title="Shake-Shake regularization of 3-branch residual networks"&gt;[G17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;CIFAR-100&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td style="text-align: right;"&gt;15.85 %&lt;/td&gt;
&lt;td&gt;error &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1705.07485" title="Shake-Shake regularization"&gt;[G17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://cs.stanford.edu/~acoates/stl10/"&gt;STL-10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;78.66 %&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1707.09725" title="Analysis and Optimization of Convolutional Neural Network Architectures"&gt;[Tho17-2]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://ufldl.stanford.edu/housenumbers/"&gt;SVHN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.54 %&lt;/td&gt;
&lt;td&gt;error &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1605.07146" title="Wide Residual Networks"&gt;[ZK16]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.vision.caltech.edu/Image_Datasets/Caltech101/Caltech101.html"&gt;Caltech-101&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td style="text-align: right;"&gt;91.4 %&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1406.4729v1" title="Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition"&gt;[HZRS14]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.vision.caltech.edu/Image_Datasets/Caltech256/"&gt;Caltech-256&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td style="text-align: right;"&gt;74.2 %&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1311.2901" title="Visualizing and Understanding Convolutional Networks"&gt;[ZF14]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://zenodo.org/record/259444" title="The HASYv2 dataset"&gt;HASYv2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;85.92 %&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1707.09725" title="Analysis and Optimization of Convolutional Neural Network Architectures"&gt;[Tho17-2]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://lear.inrialpes.fr/people/marszalek/data/ig02/"&gt;Graz-02&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td style="text-align: right;"&gt;78.98 %&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://imagine.enpc.fr/publications/papers/ECCV2010b.pdf" title="Towards Optimal Naive Bayes Nearest Neighbor"&gt;[BMDP10]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://yfcc100m.appspot.com/"&gt;YFCC100m&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.vision.caltech.edu/visipedia/CUB-200-2011.html"&gt;CUB-200-2011&lt;/a&gt; Birds&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;84.1&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://vis-www.cs.umass.edu/bcnn/docs/bcnn_iccv15.pdf"&gt;[LRM15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://mohammadmahoor.com/databases/denver-intensity-of-spontaneous-facial-action/"&gt;DISFA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;48.5&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1702.02925" title="EAC-Net: A Region-based Deep Enhancing and Cropping Approach for Facial Action Unit Detection"&gt;[LAZY17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BP4D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1702.05373" title="EMNIST: an extension of MNIST to handwritten letters"&gt;EMNIST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;50.93&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1702.05373" title="EMNIST: an extension of MNIST to handwritten letters"&gt;[CATS17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://megaface.cs.washington.edu/"&gt;Megaface&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;74.6%&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Google - &lt;a href="https://arxiv.org/abs/1503.03832"&gt;FaceNet&lt;/a&gt; v8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html"&gt;CelebA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td style="text-align: right;"&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://benchmark.ini.rub.de/?section=gtsrb&amp;amp;subsection=news"&gt;GTSRB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;99.51%&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1707.09725" title="Analysis and Optimization of Convolutional Neural Network Architectures"&gt;[Tho17-2]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;State of the art in this category are CNN models which use skip connections
in the form of residual connections or dense connections.&lt;/p&gt;
&lt;p&gt;The evaluation metrics are straight-forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;: Count how many elements of the test dataset you got right,
  divided by the total number of elements in the test dataset. The accuracy is
  in &lt;span class="math"&gt;\([0, 1]\)&lt;/span&gt;. Higher is better.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt; = 1 - accuracy. The error is in &lt;span class="math"&gt;\([0, 1]\)&lt;/span&gt;. Lower is better.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Top-k accuracy&lt;/strong&gt;: Sometimes, there are either extremely similar classes or
  the application allows having multiple guesses. Hence not the Top-1 guess
  of the network has to be right, but the correct label has to be within the
  top &lt;span class="math"&gt;\(k\)&lt;/span&gt; guesses. The top-&lt;span class="math"&gt;\(k\)&lt;/span&gt; accuracy is in &lt;span class="math"&gt;\([0, 1]\)&lt;/span&gt;. Higher is better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detection-images"&gt;Detection (Images)&lt;/h3&gt;
&lt;p&gt;Face recognition is a special case of detection.&lt;/p&gt;
&lt;p&gt;Common metrics are:
&lt;ul&gt;
&lt;li&gt;mAP (Mean Average Precision): A detection is successfull, if the bounding
        box prediction and the true bounding box &lt;span class="math"&gt;\(\frac{intersection}{union}\)&lt;/span&gt; (IU, IoU)
        ratio is at least 0.5. Then the average precision = &lt;span class="math"&gt;\(\frac{TP}{TP + FP}\)&lt;/span&gt; is
        calculated for each class and the mean is calculated of those (see &lt;a href="http://stackoverflow.com/q/36274638/562769"&gt;Explanation&lt;/a&gt;, &lt;a href="http://datascience.stackexchange.com/q/16797/8820"&gt;What does the notation mAP@[.5:.95] mean?&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MR (miss rate)&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html"&gt;PASCAL VOC 2012&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;75.9&lt;/td&gt;
&lt;td&gt;mAP@.5 &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1506.01497" title="Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks"&gt;[RHGS15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2011/index.html"&gt;PASCAL VOC 2011&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td style="text-align: right;"&gt;62.7&lt;/td&gt;
&lt;td&gt;mean IU &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1411.4038" title="Fully Convolutional Networks for Semantic Segmentation"&gt;[LSD14]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2010/index.html"&gt;PASCAL VOC 2010&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td style="text-align: right;"&gt;30.2&lt;/td&gt;
&lt;td&gt;mean accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://papers.nips.cc/paper/4296-efficient-inference-in-fully-connected-crfs-with-gaussian-edge-potentials.pdf" title="Efficient Inference in Fully Connected CRFs with Gaussian Edge Potentials"&gt;[Kol11]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2007/index.html"&gt;PASCAL VOC 2007&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;71.6&lt;/td&gt;
&lt;td&gt;mAP@.5 &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1512.02325" title="SSD: Single Shot MultiBox Detector"&gt;[LAES+15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://mscoco.org/"&gt;MS COCO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;46.5&lt;/td&gt;
&lt;td&gt;mAP@.5 &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1512.02325" title="SSD: Single Shot MultiBox Detector"&gt;[LAES+15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1702.05693" title="CityPersons: A Diverse Dataset for Pedestrian Detection"&gt;CityPersons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td style="text-align: right;"&gt;33.10&lt;/td&gt;
&lt;td&gt;&lt;abbr title="log miss-rate"&gt;MR&lt;/abbr&gt; &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1702.05693" title="CityPersons: A Diverse Dataset for Pedestrian Detection"&gt;[ZBS17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="detection-videos"&gt;Detection (Videos)&lt;/h3&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://research.google.com/youtube-bb/"&gt;YouTube-BoundingBoxes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="person-re-identitification"&gt;Person Re-Identitification&lt;/h3&gt;
&lt;p&gt;Person Re-ID is the task of identifying a person again which was already seen
in a video stream. Person following and &lt;abbr title="Multi Target Multi
Camera"&gt;MTMCT&lt;/abbr&gt; seems to be very similar if not identical.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.liangzheng.org/Project/project_reid.html"&gt;Market-1501&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;62.1&lt;/td&gt;
&lt;td&gt;mAP &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1703.05693"&gt;[SZDW17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.ee.cuhk.edu.hk/~xgwang/CUHK_identification.html"&gt;CUHK03&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;84.8&lt;/td&gt;
&lt;td&gt;mAP &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1703.05693"&gt;[SZDW17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://vision.cs.duke.edu/DukeMTMC/"&gt;DukeMTMC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;56.8&lt;/td&gt;
&lt;td&gt;mAP &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1703.05693"&gt;[SZDW17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="semantic-segmentation"&gt;Semantic Segmentation&lt;/h3&gt;
&lt;p&gt;A summary of classical methods for semantic segmentation, more information
to several datasets and metrics for evaluation can be found in &lt;a href="https://arxiv.org/abs/1602.06541"&gt;A Survey of Semantic Segmentation&lt;/a&gt;.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.microsoft.com/en-us/research/project/image-understanding/"&gt;MSRC-21&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td style="text-align: right;"&gt;84.7&lt;/td&gt;
&lt;td&gt;mean accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://papers.nips.cc/paper/4296-efficient-inference-in-fully-connected-crfs-with-gaussian-edge-potentials.pdf" title="Efficient Inference in Fully Connected CRFs with Gaussian Edge Potentials"&gt;[Kol11]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.cvlibs.net/datasets/kitti/eval_road.php"&gt;KITTI Road&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;96.69&lt;/td&gt;
&lt;td&gt;Max F1 &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://cs.nyu.edu/~silberman/datasets/nyu_depth_v2.html" title="NYU Depth Dataset V2"&gt;NYUDv2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td style="text-align: right;"&gt;34.0&lt;/td&gt;
&lt;td&gt;mean IO &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://papers.nips.cc/paper/4296-efficient-inference-in-fully-connected-crfs-with-gaussian-edge-potentials.pdf" title="Efficient Inference in Fully Connected CRFs with Gaussian Edge Potentials"&gt;[Kol11]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://people.csail.mit.edu/celiu/SIFTflow/"&gt;SIFT Flow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td style="text-align: right;"&gt;39.5&lt;/td&gt;
&lt;td&gt;mean IU &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1411.4038" title="Fully Convolutional Networks for Semantic Segmentation"&gt;[LSD14]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.it.lut.fi/project/imageret/diaretdb1/"&gt;DIARETDB1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www2.warwick.ac.uk/fac/sci/dcs/research/combi/research/bic/glascontest/download/"&gt;Warwick-QU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://dataverse.scholarsportal.info/dataset.xhtml?persistentId=doi:10.5683/SP/NTUOK9"&gt;Ciona17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;51.36 %&lt;/td&gt;
&lt;td&gt;mean IoU &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1702.05564.pdf" title="The Ciona17 Dataset for Semantic Segmentation of Invasive Species in a Marine Aquaculture Environment"&gt;[GTRM17]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="instance-segmentation"&gt;Instance Segmentation&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://arxiv.org/abs/1512.04412" title="Instance-aware Semantic Segmentation via Multi-task Network Cascades"&gt;[DHS15]&lt;/a&gt;&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.cityscapes-dataset.com/benchmarks/"&gt;CityScapes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="action-recognition"&gt;Action Recognition&lt;/h3&gt;
&lt;p&gt;Action recognition is a classification problem over a short video clip.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://research.google.com/youtube8m/"&gt;YouTube-8M&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/gtoderici/sports-1m-dataset/blob/wiki/ProjectHome.md"&gt;Sports-1M&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;68.7 %&lt;/td&gt;
&lt;td&gt;Clip Hit@1 accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Ng_Beyond_Short_Snippets_2015_CVPR_paper.pdf" title="Beyond Short Snippets: Deep Networks for Video Classification"&gt;[NHV+15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UCF-101&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;70.8 %&lt;/td&gt;
&lt;td&gt;Clip Hit@1 accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Ng_Beyond_Short_Snippets_2015_CVPR_paper.pdf" title="Beyond Short Snippets: Deep Networks for Video Classification"&gt;[NHV+15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.nada.kth.se/cvap/actions/"&gt;KTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;95.6 %&lt;/td&gt;
&lt;td&gt;EER &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1512.03980.pdf" title="Action Recognition with Image Based CNN Features"&gt;[RMRMD15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://crcv.ucf.edu/data/UCF_Sports_Action.php"&gt;UCF Sport&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;97.8 %&lt;/td&gt;
&lt;td&gt;EER &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1512.03980.pdf" title="Action Recognition with Image Based CNN Features"&gt;[RMRMD15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://crcv.ucf.edu/data/UCF_YouTube_Action.php"&gt;UCF-11 Human Action&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td style="text-align: right;"&gt;89.5 %&lt;/td&gt;
&lt;td&gt;EER &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1512.03980.pdf" title="Action Recognition with Image Based CNN Features"&gt;[RMRMD15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="super-resolution"&gt;Super Resolution&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/huangzehao/Super-Resolution.Benckmark"&gt;github.com/huangzehao&lt;/a&gt;&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I'm not sure how super resolution is benchmarked. One way to do it would be
to get high resolution images, scale them down, feed them to the network and
measure the mean squared error for each pixel:&lt;/p&gt;
&lt;div class="math"&gt;$$\frac{1}{|I|} \sum_{t \in I} {(t - \hat{t})}^2$$&lt;/div&gt;
&lt;p&gt;However, this might be sensitive to the way the images were downsampled.&lt;/p&gt;
&lt;h3 id="lip-reading"&gt;Lip Reading&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://spandh.dcs.shef.ac.uk/gridcorpus/" title="The GRID audiovisual sentence corpus

"&gt;GRID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;95.2 %&lt;/td&gt;
&lt;td&gt;accuracy &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://openreview.net/forum?id=BkjLkSqxg" title="LipNet: End-to-End Sentence-level Lipreading"&gt;[ASWF16]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="other-datasets"&gt;Other Datasets&lt;/h3&gt;
&lt;p&gt;For the following datasets, I was not able to find where to download them&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mapping global urban areas using MODIS 500-m data: New methods and datasets
  based on urban ecoregions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1612.00423"&gt;TorontoCity: Seeing the World with a Million Eyes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="asr_1"&gt;ASR&lt;/h2&gt;
&lt;p&gt;Automatic Speech Recognition (ASR).&lt;/p&gt;
&lt;h3 id="sentence-level"&gt;Sentence-Level&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="" title="Wall Street Journal"&gt;WSJ&lt;/a&gt; (eval92)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;3.47&lt;/td&gt;
&lt;td&gt;WER &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1504.01482v1.pdf" title="Deep Recurrent Neural Networks for Acoustic Modelling"&gt;[CL15]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Switchboard Hub5'00&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;6.3%&lt;/td&gt;
&lt;td&gt;WER &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/pdf/1609.03528v1.pdf" title="The Microsoft 2016 conversational speech recognition system"&gt;[XDSS+16]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See &lt;a href="https://martin-thoma.com/word-error-rate-calculation/"&gt;Word Error Rate&lt;/a&gt; (WER)
for an explanation of the metric.&lt;/p&gt;
&lt;p&gt;Relevant papers might be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1512.02595v1"&gt;Deep Speech 2: End-to-End Speech Recognition in English and Mandarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="phoneme-level"&gt;Phoneme-Level&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://catalog.ldc.upenn.edu/ldc93s1" title="TIMIT Acoustic-Phonetic Continuous Speech Corpus"&gt;TIMIT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;17.7 %&lt;/td&gt;
&lt;td&gt;error rate &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://ieeexplore.ieee.org/abstract/document/6638947/" title="Speech recognition with deep recurrent neural networks"&gt;[GMH13]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="language_1"&gt;Language&lt;/h2&gt;
&lt;p&gt;Natural Language Processing (NLP) deals with how to represent language. It is
related and often a part of ASR.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metamind.io/research/the-wikitext-long-term-dependency-language-modeling-dataset/"&gt;WikiText-103&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td style="text-align: right;"&gt;48.7&lt;/td&gt;
&lt;td&gt;Perplexity &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://openreview.net/pdf?id=B184E5qee" title="Improving Neural Language Models with a Continuous Cache"&gt;[GJU16]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Penn Treebank (PTB)&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td style="text-align: right;"&gt;62.4&lt;/td&gt;
&lt;td&gt;Perplexity &lt;span title="lower is better"&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://arxiv.org/abs/1611.01578" title="Neural Architecture Search with Reinforcement Learning"&gt;[ZL16]&lt;/a&gt; (&lt;a href="http://www.shortscience.org/paper?bibtexKey=journals/corr/1611.01578#martinthoma"&gt;summary&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.reddit.com/r/MachineLearning/comments/5s6ixw/d_what_are_the_current_benchmark_datasets_and_the/ddcwoay/"&gt;Stanford Sentiment Treebank&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;NLP benchmarks use &lt;a href="https://en.wikipedia.org/wiki/Perplexity"&gt;perplexity&lt;/a&gt; to
measure how good a result is.&lt;/p&gt;
&lt;h2 id="translation"&gt;Translation&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT03&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;35.76&lt;/td&gt;
&lt;td&gt;BLEU&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.cs.sfu.ca/~anoop/papers/pdf/jhu-ws03-report.pdf" title="Syntax for Statistical Machine Translation"&gt;[OGKS+03]&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/BLEU" title="bilingual evaluation understudy"&gt;BLEU&lt;/a&gt;
score is used to measure how good a translation system is.&lt;/p&gt;
&lt;p&gt;Another score is the &lt;em&gt;Translation Edit Rate&lt;/em&gt; (TER) introduced by
&lt;a href="http://mt-archive.info/AMTA-2006-Snover.pdf"&gt;Snover et al., 2006&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="matrix-completion"&gt;Matrix completion&lt;/h2&gt;
&lt;p&gt;Collaborative filtering is an application of matrix completion.
More datasets are on &lt;a href="https://gist.github.com/entaroadun/1653794"&gt;entaroadun/gist:1653794&lt;/a&gt;.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://grouplens.org/datasets/movielens/"&gt;MovieLens&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://eigentaste.berkeley.edu/dataset/"&gt;Jester&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="reinforcment-learning"&gt;Reinforcment Learning&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://gym.openai.com/"&gt;OpenAI Gym&lt;/a&gt; offers many environments
for testing RL algorithms.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Challenge&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chess&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3395&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stockfishchess.org/"&gt;Stockfishchess&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;3,168&lt;/td&gt;
&lt;td&gt;ELO &lt;span title="higher is better"&gt;+&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.nature.com/nature/journal/v529/n7587/full/nature16961.html" title="Mastering the game of Go with deep neural networks and tree search"&gt;AlphaGo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dota&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;A few matches&lt;/td&gt;
&lt;td&gt;&lt;a href="https://blog.openai.com/openai-five/"&gt;OpenAI Five&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="control"&gt;Control&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Paper&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="CartPole-v0"&gt;Cart Pole&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rodrigob.github.io/are_we_there_yet"&gt;Are we there yet ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/MachineLearning/comments/4dkrw1/some_stateofthearts_in_natural_language/"&gt;Some state-of-the-arts in natural language processing and their discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;aclweb.org: &lt;a href="https://www.aclweb.org/aclwiki/index.php?title=State_of_the_art"&gt;State of the art&lt;/a&gt; - NLP tasks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/syhw/wer_are_we/tree/master"&gt;wer_are_we&lt;/a&gt;: SotA in ASR&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/michalwols/ml-sota"&gt;github.com/michalwols/ml-sota&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More datasets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research"&gt;List of datasets for machine learning research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cvl.isy.liu.se/research/datasets/traffic-signs-dataset/download/"&gt;traffic-signs-dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vision.stanford.edu/aditya86/ImageNetDogs/"&gt;Stanford Dogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/caesar0301/awesome-public-datasets"&gt;Awesome Public Datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archive.ics.uci.edu/ml/datasets.html"&gt;archive.ics.uci.edu/ml/datasets.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tiny-imagenet.herokuapp.com/"&gt;Tiny ImageNet Visual Recognition Challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Datasets"></category></entry><entry><title>skdata</title><link href="https://martin-thoma.com/skdata/" rel="alternate"></link><published>2017-01-30T20:00:00+01:00</published><updated>2017-01-30T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-01-30:/skdata/</id><summary type="html">&lt;p&gt;I really like Machine Learning. I like reading papers, understanding and
evaluating new ideas. But one part I always have to spend quite a bit of time
on is loading the data. It's always a mess to find the datasets, understand
where exactly I can download them and how they've â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I really like Machine Learning. I like reading papers, understanding and
evaluating new ideas. But one part I always have to spend quite a bit of time
on is loading the data. It's always a mess to find the datasets, understand
where exactly I can download them and how they've packaged the information.
Just a few days ago I found &lt;code&gt;skdata&lt;/code&gt;. It is a Python package which aims at
helping to load standard datasets. If I can trust the git commit message, then
the development was started in August 2011 by James Bergstra! This is before
AlexNet!&lt;/p&gt;
&lt;p&gt;edit: Although it seemed to be a cool project, it seems to be dead, too. The
last commit is from July 2015.&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;One way to use &lt;code&gt;skdata&lt;/code&gt; is the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""MNIST example with skdata."""&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skdata.mnist.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OfficialVectorClassification&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Fallback, if you have an old version&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skdata.mnist.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OfficialVectorClassification&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.tree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DecisionTreeClassifier&lt;/span&gt;

&lt;span class="c1"&gt;# Load the data&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OfficialVectorClassification&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;train_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_idxs&lt;/span&gt;  &lt;span class="c1"&gt;# indices of training data&lt;/span&gt;
&lt;span class="n"&gt;val_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_idxs&lt;/span&gt;  &lt;span class="c1"&gt;# incices of validation data&lt;/span&gt;
&lt;span class="n"&gt;test_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tst_idxs&lt;/span&gt;  &lt;span class="c1"&gt;# indices of test data&lt;/span&gt;

&lt;span class="c1"&gt;# Fit a simple classifier&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Start fitting DecisionTreeClassifier."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DecisionTreeClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_vectors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;train_idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# select features of training data&lt;/span&gt;
&lt;span class="n"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_labels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;train_idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# select labels of training data&lt;/span&gt;
&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Evaluate the classifier&lt;/span&gt;
&lt;span class="n"&gt;predict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_vectors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_idx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;accuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_labels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_idx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_idx&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Fitted DecisionTreeClassifier has test accuracy of &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it is inteded to be used like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skdata.mnist.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OfficialVectorClassification&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.tree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DecisionTreeClassifier&lt;/span&gt;

&lt;span class="c1"&gt;# Load the data&lt;/span&gt;
&lt;span class="n"&gt;mnist_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OfficialVectorClassification&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;train_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_idxs&lt;/span&gt;
&lt;span class="n"&gt;val_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val_idxs&lt;/span&gt;
&lt;span class="n"&gt;test_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tst_idxs&lt;/span&gt;

&lt;span class="c1"&gt;# Fit a simple classifier&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skdata.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SklearnClassifier&lt;/span&gt;
&lt;span class="n"&gt;learning_algo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SklearnClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DecisionTreeClassifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mnist_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learning_algo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learn_algo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'loss'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'task_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'tst'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... but this doesn't work (for me)&lt;/p&gt;
&lt;h2 id="other-data-loading-projects"&gt;Other Data-Loading Projects&lt;/h2&gt;
&lt;p&gt;You can access R data with &lt;a href="https://rpy2.bitbucket.io/?"&gt;&lt;code&gt;rpy2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpy2.robjects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpy2.robjects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pandas2ri&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pandas2ri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ri2py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'iris'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.quandl.com/tools/python"&gt;quandl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mila-udem/fuel"&gt;fuel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also load &lt;code&gt;mnist&lt;/code&gt;, &lt;code&gt;cifar10&lt;/code&gt;,&lt;code&gt;cifar100&lt;/code&gt;, &lt;code&gt;imdb&lt;/code&gt;, &lt;code&gt;reuters&lt;/code&gt; with keras:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jaberg.github.io/skdata/"&gt;skdata documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jaberg/skdata"&gt;skdata on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jaberg/skdata/wiki/How-to-Create-a-New-Dataset-Module"&gt;How to Create a New Dataset Module&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jaberg/skdata/wiki/Protocol"&gt;Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jaberg/skdata/wiki/Data-Set-Modules"&gt;List of datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fuel.readthedocs.io/en/latest/built_in_datasets.html"&gt;fuel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dribnet/kerosene"&gt;kerosene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/download-data/"&gt;ImageNet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Python"></category><category term="dataset"></category></entry><entry><title>Label Correction Algorithm</title><link href="https://martin-thoma.com/label-correction-algorithm/" rel="alternate"></link><published>2017-01-25T20:00:00+01:00</published><updated>2017-01-25T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2017-01-25:/label-correction-algorithm/</id><summary type="html">&lt;p&gt;The label-correction algorithm is a generalization which includes very common
graph search algorithms like breadth first search (BFS), depth first search (DFS),
&lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A*&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra's algorithm&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Branch_and_bound"&gt;Branch and bound&lt;/a&gt; as special cases.&lt;/p&gt;
&lt;h2 id="pseudocode"&gt;Pseudocode&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Pseudocode for the Label correction algorithm" src="../images/2016/07/label-correction.png"/&gt;
&lt;figcaption class="text-center"&gt;Pseudocode for the Label correction algorithm&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;p&gt;First &lt;code&gt;if&lt;/code&gt;: The left hand side is a lower bound â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The label-correction algorithm is a generalization which includes very common
graph search algorithms like breadth first search (BFS), depth first search (DFS),
&lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A*&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra's algorithm&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Branch_and_bound"&gt;Branch and bound&lt;/a&gt; as special cases.&lt;/p&gt;
&lt;h2 id="pseudocode"&gt;Pseudocode&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Pseudocode for the Label correction algorithm" src="../images/2016/07/label-correction.png"/&gt;
&lt;figcaption class="text-center"&gt;Pseudocode for the Label correction algorithm&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;p&gt;First &lt;code&gt;if&lt;/code&gt;: The left hand side is a lower bound to get from start to
&lt;code&gt;v&lt;/code&gt;, to &lt;code&gt;c&lt;/code&gt; and then to &lt;code&gt;t&lt;/code&gt;. If this lower bound is not lower than
either &lt;code&gt;u&lt;/code&gt; or the distance to &lt;code&gt;c&lt;/code&gt; directly, then it will not be part
of the optimal solution.&lt;/p&gt;
&lt;p&gt;Special cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Depth-first_search"&gt;Depth-first search&lt;/a&gt;: K is LIFO list / Stack&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;Breadth-first search&lt;/a&gt;: K is FIFO list&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra's algorithm&lt;/a&gt;: K is &lt;a href="https://en.wikipedia.org/wiki/Priority_queue"&gt;priority queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A*&lt;/a&gt;: K ist priority queue, &lt;span class="math"&gt;\(h_j\)&lt;/span&gt; is non-trivial&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Branch_and_bound"&gt;Branch and bound&lt;/a&gt;: K ist priority queue, &lt;span class="math"&gt;\(h_j\)&lt;/span&gt; and &lt;span class="math"&gt;\(m_j\)&lt;/span&gt; are non-trivial&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Label Correction algorithm."""&lt;/span&gt;


&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LIFO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""A LIFO storage."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""An undirected graph."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name2index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index2name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Add a new node and return its index."""&lt;/span&gt;
        &lt;span class="n"&gt;node_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index-'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Node names beginning with "index-" may cause '&lt;/span&gt;
                            &lt;span class="s1"&gt;'problems.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"index-&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;node_index&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name2index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node_index&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index2name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

        &lt;span class="c1"&gt;# Add weight from new node to other nodes and vice-versa&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inf'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;node_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inf'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# From the node to itself has distance 0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;node_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node_index&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_node_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Get node index by name."""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name2index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Set edge weight by node names.&lt;/span&gt;

&lt;span class="sd"&gt;        Parameters&lt;/span&gt;
&lt;span class="sd"&gt;        ----------&lt;/span&gt;
&lt;span class="sd"&gt;        a : str&lt;/span&gt;
&lt;span class="sd"&gt;            First edge name&lt;/span&gt;
&lt;span class="sd"&gt;        b : str&lt;/span&gt;
&lt;span class="sd"&gt;            Second edge name&lt;/span&gt;
&lt;span class="sd"&gt;        weight : number&lt;/span&gt;
&lt;span class="sd"&gt;            New edge weight&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;label_correction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;start_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Label correction algorithm for graph searches.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    graph :&lt;/span&gt;
&lt;span class="sd"&gt;        Needs 'graph.childs' which returns a list of child indices for each&lt;/span&gt;
&lt;span class="sd"&gt;        node, 'graph.edges[node1][node2]' which always returns an edge weight,&lt;/span&gt;
&lt;span class="sd"&gt;    start_node : int&lt;/span&gt;
&lt;span class="sd"&gt;        Index of start node as given by the graph node iterator&lt;/span&gt;
&lt;span class="sd"&gt;    t : int&lt;/span&gt;
&lt;span class="sd"&gt;        Index of target node as given by the graph node iterator&lt;/span&gt;
&lt;span class="sd"&gt;    h : lower_heuristic, optional&lt;/span&gt;
&lt;span class="sd"&gt;        Takes (graph, node1, node2) and returns a number which underestimates&lt;/span&gt;
&lt;span class="sd"&gt;        the distance from node1 to node2. If this is not given, the trivial&lt;/span&gt;
&lt;span class="sd"&gt;        distance 0 is chosen.&lt;/span&gt;
&lt;span class="sd"&gt;    m : upper_heuristic, optional&lt;/span&gt;
&lt;span class="sd"&gt;    K : list-like data structure, optional&lt;/span&gt;
&lt;span class="sd"&gt;        Needs 'insert', 'pop'&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LIFO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;parents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inf'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# shortest distance from start_node to t&lt;/span&gt;
    &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"K=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# Reconstruct the path&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;named_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;start_node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;named_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index2name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;named_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index2name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'shortest_distance'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'named_path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;named_path&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sample_1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""A simple search problem."""&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'H'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'J'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'K'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'H'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_edge_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'J'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;label_correction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sample_1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://projecteuler.net/problem=18"&gt;Project Euler 18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/challenges/pacman-dfs"&gt;hackerrank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MartinThoma/algorithms/tree/master/label-korrektur-algorithmus"&gt;My implementations on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.idiotinside.com/2015/03/01/python-lists-as-fifo-lifo-queues-using-deque-collections/"&gt;Python Lists as Fifo, Lifo Queues Using Deque Collections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="A.I."></category><category term="Algorithms"></category><category term="Programming"></category><category term="Python"></category><category term="Machine Learning"></category></entry><entry><title>Reinforcement Learning</title><link href="https://martin-thoma.com/reinforcement-learning/" rel="alternate"></link><published>2016-12-29T20:00:00+01:00</published><updated>2016-12-29T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-12-29:/reinforcement-learning/</id><summary type="html">&lt;p&gt;Reinforcement learning is a sub-field of mathematics and computer science. It
deals with the following kind of problems: You're given a set of states
&lt;span class="math"&gt;\(\mathcal{X} \subseteq \mathbb{R}^n\)&lt;/span&gt; and a starting state &lt;span class="math"&gt;\(x_0 \in \mathcal{X}\)&lt;/span&gt;.
For every time step &lt;span class="math"&gt;\(k = 0, 1, 2, \dots\)&lt;/span&gt; you have a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Reinforcement learning is a sub-field of mathematics and computer science. It
deals with the following kind of problems: You're given a set of states
&lt;span class="math"&gt;\(\mathcal{X} \subseteq \mathbb{R}^n\)&lt;/span&gt; and a starting state &lt;span class="math"&gt;\(x_0 \in \mathcal{X}\)&lt;/span&gt;.
For every time step &lt;span class="math"&gt;\(k = 0, 1, 2, \dots\)&lt;/span&gt; you have a set of possible actions,
depending on your current state:
&lt;/p&gt;
&lt;div class="math"&gt;$$\mathcal{A}_k(x_k)$$&lt;/div&gt;
&lt;p&gt;
Depending on what your action and your current state is, the new state is
&lt;/p&gt;
&lt;div class="math"&gt;$$P(x_k, a_k, x_{k+1}) \in [0, 1]$$&lt;/div&gt;
&lt;p&gt;
So the transition from state &lt;span class="math"&gt;\(x_k\)&lt;/span&gt; to state &lt;span class="math"&gt;\(x_{k+1}\)&lt;/span&gt; with action &lt;span class="math"&gt;\(a_k\)&lt;/span&gt; is
stochastic.&lt;/p&gt;
&lt;p&gt;For some states &lt;span class="math"&gt;\(x_k\)&lt;/span&gt;, actions &lt;span class="math"&gt;\(a_k\)&lt;/span&gt; at time &lt;span class="math"&gt;\(k\)&lt;/span&gt;, you receive rewards:&lt;/p&gt;
&lt;div class="math"&gt;$$r_k(x_k, a_k) \in \mathbb{R}$$&lt;/div&gt;
&lt;p&gt;Your goal is to maximize&lt;/p&gt;
&lt;div class="math"&gt;$$\mathbb{E}(\sum_{k=0}^\infty \gamma^k \cdot r_k(x_k, a_k))$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\gamma in (0, 1)\)&lt;/span&gt; is a discounting factor which makes sure we don't get
infinite rewards. &lt;span class="math"&gt;\(\gamma = 0.99\)&lt;/span&gt; is a typical choice.&lt;/p&gt;
&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;
&lt;p&gt;This very general problem description can be applied in almost any scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning automatically to play games&lt;/li&gt;
&lt;li&gt;Learning to control robots&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-rl-is-difficult"&gt;Why RL is difficult&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Credit assignment: In chess, you only get a reward (positiv or negative) at
  the end of the game. How to you tell which move was good or bad?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/probabilistische-planung/#exporation-exploitation"&gt;Exploration vs. exploitation&lt;/a&gt;:
  When should you stick to what you know and when should you try something new?&lt;/li&gt;
&lt;li&gt;State equivalence: Typically, your state is very high-dimensional. For example
  when learning very old computer games from raw pixels you have
  &lt;div class="math"&gt;$$210 \cdot 160 \cdot 3 = 100800$$&lt;/div&gt;
  dimensions in your feature vector. But the relevant game states might be
  much less.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approaches"&gt;Approaches&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;policy network&lt;/strong&gt; gets the state as input and outputs the action. It learns
by executing many episodes (e.g. a complete game; from start until you reach a
final state or at least a state with reward) and labels all actions before with
the received reward. There might be many which were good even in a lost game,
but in average you expect to punish bad decisions and encourage good decisions.&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;p&gt;If you are a student at KIT, I can recommend to visit the lecture
&lt;a href="https://martin-thoma.com/probabilistische-planung/"&gt;Probabilistic Planning&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other resources you might want to have a look at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://karpathy.github.io/2016/05/31/rl/"&gt;Deep Reinforcement Learning: Pong from Pixels&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5"&gt;Pong example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nervanasys.com/demystifying-deep-reinforcement-learning/"&gt;Guest Post (Part I): Demystifying Deep Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nature.com/nature/journal/v518/n7540/pdf/nature14236.pdf"&gt;Human-level control through deep reinforcement learning&lt;/a&gt; by V. Mnih et al.&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1312.5602"&gt;Playing Atari with Deep Reinforcement Learning&lt;/a&gt; on arXiv&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jmlr.org/proceedings/papers/v32/silver14.pdf"&gt;Deterministic Policy Gradient Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="RL"></category></entry><entry><title>ML Review 2</title><link href="https://martin-thoma.com/ml-review-2/" rel="alternate"></link><published>2016-12-27T11:00:00+01:00</published><updated>2016-12-27T11:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-12-27:/ml-review-2/</id><summary type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning. Most of it was posted in &lt;a href="https://ml-ka.de/"&gt;KITs machine learning group&lt;/a&gt; (on Facebook).&lt;/p&gt;
&lt;p&gt;A lot of stuff can be found in my article about &lt;a href="https://martin-thoma.com/nips-2016/"&gt;NIPS 2016&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;!-- Trends --&gt;
&lt;ul&gt;
&lt;li&gt;Random forests for courier detection: &lt;a href="https://www.theguardian.com/science/the-lay-scientist/2016/feb/18/has-a-rampaging-ai-algorithm-really-killed-thousands-in-pakistan"&gt;Has â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning. Most of it was posted in &lt;a href="https://ml-ka.de/"&gt;KITs machine learning group&lt;/a&gt; (on Facebook).&lt;/p&gt;
&lt;p&gt;A lot of stuff can be found in my article about &lt;a href="https://martin-thoma.com/nips-2016/"&gt;NIPS 2016&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;!-- Trends --&gt;
&lt;ul&gt;
&lt;li&gt;Random forests for courier detection: &lt;a href="https://www.theguardian.com/science/the-lay-scientist/2016/feb/18/has-a-rampaging-ai-algorithm-really-killed-thousands-in-pakistan"&gt;Has a rampaging AI algorithm called Skynet really killed thousands in Pakistan?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="live-demos-and-websites"&gt;Live Demos and Websites&lt;/h2&gt;
&lt;h3 id="quickdraw"&gt;Quickdraw&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://quickdraw.withgoogle.com/"&gt;Quickdraw&lt;/a&gt; is a program which tries to
guess what you drew. However, it is difficult to check if they really apply
machine learning, because it tells you what to draw and then tries to recognize
it.&lt;/p&gt;
&lt;figure style="display:table;margin: 0 auto 0.55em;"&gt;
&lt;a href="https://martin-thoma.com/images/2016/11/quickdraw.png"&gt;&lt;img align="middle" src="https://martin-thoma.com/images/2016/11/quickdraw.png" width="512"/&gt;&lt;/a&gt;
&lt;figcaption style="display:table-caption;caption-side:bottom"&gt;I had to draw a piano, a floor lamp, a chandelier, a suitcase, a candle and a lipstick each in under 20 seconds.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It looks very much like an attempt to get lots of training data. However, this
plan might not work that well: &lt;a href="https://imgur.com/a/hUrOj"&gt;Interesting Quickdraw Fails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might find more stuff like Quickdraw on
&lt;a href="https://aiexperiments.withgoogle.com/"&gt;aiexperiments.withgoogle.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="loss-functions"&gt;Loss Functions&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://lossfunctions.tumblr.com/"&gt;lossfunctions.tumblr.com&lt;/a&gt; is a blog created
by &lt;a href="http://cs.stanford.edu/people/karpathy/"&gt;Andrej Karpathy&lt;/a&gt; where he collects
- well, let's call them "interesting" - loss functions.&lt;/p&gt;
&lt;h3 id="eyescream"&gt;Eyescream&lt;/h3&gt;
&lt;p&gt;Have you heard about &lt;abbr title="Generative Adversarial Networks"&gt;GANs&lt;/abbr&gt;?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://soumith.ch/eyescream/"&gt;Eyescream&lt;/a&gt; is a demo for the
generator.&lt;/p&gt;
&lt;h2 id="publications_1"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;h3 id="deep-neural-networks-are-easily-fooled"&gt;Deep Neural Networks are Easily Fooled&lt;/h3&gt;
&lt;p&gt;The input of CNNs for image classification can be manipulated in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An image, on which a human does not recognize anything (e.g. white noise)
   gets a high score for some object class.&lt;/li&gt;
&lt;li&gt;An image on which a human is certain to recognize one class
   (e.g.&amp;nbsp;"cat")
   is manipulated in a way that the CNN classifies with high certainty something
   different
   (e.g.&amp;nbsp;"factory").&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anh Nguyen, Jason Yosinski, Jeff Clune: &lt;a href="http://arxiv.org/abs/1412.1897"&gt;Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images&lt;/a&gt; on arxiv.&lt;/li&gt;
&lt;li&gt;Evolving AI Lab: &lt;a href="https://www.youtube.com/watch?v=M2IebCN9Ht4"&gt;Deep Neural Networks are Easily Fooled&lt;/a&gt; on YouTube in 5:33 min.&lt;/li&gt;
&lt;li&gt;Google: &lt;a href="http://googleresearch.blogspot.de/2015/06/inceptionism-going-deeper-into-neural.html"&gt;Inceptionism: Going Deeper into Neural Networks&lt;/a&gt;. 17.06.2016.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="breaking-linear-classifiers-on-imagenet"&gt;Breaking Linear Classifiers on ImageNet&lt;/h3&gt;
&lt;p&gt;Andrej Karpathy has once again written a nice article. The article describes
the problem that &lt;a href="http://karpathy.github.io/2015/03/30/breaking-convnets/"&gt;linear classifiers can be broken easily&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hinton commented something simmilar &lt;a href="https://www.reddit.com/r/MachineLearning/comments/2lmo0l/ama_geoffrey_hinton/clyjbai"&gt;on Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="where-am-i"&gt;Where am I?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.technologyreview.com/s/600889/google-unveils-neural-network-with-superhuman-ability-to-determine-the-location-of-almost/"&gt;Google Unveils Neural Network with &amp;ldquo;Superhuman&amp;rdquo; Ability to Determine the Location of Almost Any Image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One gives the neural network a photo and it tells you where it was taken.&lt;/p&gt;
&lt;h3 id="lime"&gt;LIME&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/1602.04938"&gt;"Why Should I Trust You?": Explaining the Predictions of Any Classifier&lt;/a&gt; deals with the problem of analyzing black box models decision making process.&lt;/p&gt;
&lt;h3 id="lip-reading"&gt;Lip Reading&lt;/h3&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="https://www.youtube-nocookie.com/embed/fa5QGremQf8?rel=0" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;See the paper &lt;a href="https://openreview.net/pdf?id=BkjLkSqxg"&gt;LipNet: Sentence-Level Lipreading&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id="more"&gt;More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.06918"&gt;Learning to Protect Communications with Adversarial Neural Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ai100.stanford.edu/2016-report"&gt;2016 Report&lt;/a&gt;: One Hundred Year Study on Artificial Intelligence (AI100)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software_1"&gt;Software&lt;/h2&gt;
&lt;!-- e.g. Theano, Keras, ... --&gt;
&lt;h3 id="seaborn"&gt;Seaborn&lt;/h3&gt;
&lt;figure style="display:table;margin: 0 auto 0.55em;"&gt;
&lt;a href="https://martin-thoma.com/images/2016/11/seaborn_hexbin_marginals.png"&gt;&lt;img align="middle" src="https://martin-thoma.com/images/2016/11/seaborn_hexbin_marginals.png" width="512"/&gt;&lt;/a&gt;
&lt;figcaption style="display:table-caption;caption-side:bottom"&gt;Example plot generated by Seaborn&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Seaborn is a Python package for the visualization of data and statistics.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://stanford.edu/~mwaskom/software/seaborn/"&gt;stanford.edu/~mwaskom/software/seaborn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="recnet"&gt;RecNet&lt;/h3&gt;
&lt;p&gt;J&amp;ouml;rg made &lt;a href="https://github.com/joergfranke/recnet"&gt;recnet&lt;/a&gt; publicly available.
It is a framework based on Theano to simplify the creation of recurrent
networks.&lt;/p&gt;
&lt;h3 id="image-segmentation-using-digits-5"&gt;Image Segmentation Using DIGITS 5&lt;/h3&gt;
&lt;p&gt;I didn't try it by now, but the images in the article
&lt;a href="https://devblogs.nvidia.com/parallelforall/image-segmentation-using-digits-5/"&gt;Image Segmentation Using DIGITS 5&lt;/a&gt; look awesome. I would be happy to hear what
you think about it.&lt;/p&gt;
&lt;h3 id="kerasjs"&gt;Keras.js&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Run Keras models (trained using Tensorflow backend) in your browser, with GPU support. Models are created directly from the Keras JSON-format configuration file, using weights serialized directly from the corresponding HDF5 file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://github.com/transcranial/keras-js"&gt;github.com/transcranial/keras-js&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="interesting-questions_1"&gt;Interesting Questions&lt;/h2&gt;
&lt;!-- For example StackExchange --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/10286/8820"&gt;When being in a perfect &amp;ldquo;Long Valley&amp;rdquo; situation, does momentum help?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/15188/8820"&gt;Are non-zero paddings used?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/15081/8820"&gt;Why do CNNs with ReLU learn that well?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs.stackexchange.com/q/65828/2914"&gt;Is there a metric for the similarity of two image filters?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Eugenio Culurciello's blog: &lt;a href="https://culurciello.github.io/tech/2016/06/04/nets.html"&gt;Neural Network Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aaditya Prakash's blog: &lt;a href="http://iamaaditya.github.io/2016/03/one-by-one-convolution/"&gt;One by One [ 1 x 1 ] Convolution - counter-intuitively useful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adit Deshpande's blog: &lt;a href="https://adeshpande3.github.io/adeshpande3.github.io/The-9-Deep-Learning-Papers-You-Need-To-Know-About.html"&gt;The 9 Deep Learning Papers You Need To Know About (Understanding CNNs Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://news.mit.edu/2016/artificial-intelligence-system-surfs-web-improve-performance-1110"&gt;Artificial-intelligence system surfs web to improve its performance&lt;/a&gt; (&lt;a href="https://arxiv.org/pdf/1603.07954v3.pdf"&gt;paper&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adeshpande3.github.io/adeshpande3.github.io/The-9-Deep-Learning-Papers-You-Need-To-Know-About.html"&gt;The 9 Deep Learning Papers you need to know about&lt;/a&gt;: Explains AlexNet, ZDNet, ResNets, (Fast(er)) RCNNs, GANs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.asimovinstitute.org/neural-network-zoo/"&gt;The Neural Network Zoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ivi.fnwi.uva.nl/isis/publications/2013/UijlingsIJCV2013/UijlingsIJCV2013.pdf"&gt;Selective Search&lt;/a&gt;: Creating region proposals for object detection&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1406.2661v1"&gt;GANs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1312.6199v4"&gt;Adverserial Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://projector.tensorflow.org/"&gt;Google Projector&lt;/a&gt;: Display high-dimensional data&lt;/li&gt;
&lt;li&gt;Andrej Karpathy: &lt;a href="https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b#.p3xez1lr8"&gt;Yes you should understand backprop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opennmt.net/"&gt;OpenNMT&lt;/a&gt;: A machine translation system&lt;/li&gt;
&lt;li&gt;Pete Warden's blog: &lt;a href="https://petewarden.com/2015/04/20/why-gemm-is-at-the-heart-of-deep-learning/"&gt;Why GEMM is at the heart of deep learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archive.org/details/stackexchange"&gt;StackExchange Dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="meetings"&gt;Meetings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;London, 4. December 2016: &lt;a href="https://www.eventbrite.com/e/immigration-by-numbers-insights-through-data-visualisation-tickets-28920900191?aff=twitter"&gt;Data Visualization Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barcelona, 5. December 2016 - 10. December 2016: Neural Information Processing Systems (NIPS) (&lt;a href="https://nips.cc/"&gt;Link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="navigation clearfix"&gt;
&lt;div class="alignleft"&gt;
&lt;a href="https://martin-thoma.com/ml-review-1/" rel="prev"&gt;&amp;laquo; Previous Review&lt;/a&gt;
&lt;/div&gt;
&lt;div class="alignright"&gt;
&lt;a href="https://martin-thoma.com/ml-review-3/" rel="next"&gt;Next Review &amp;raquo;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category></entry><entry><title>NIPS 2016</title><link href="https://martin-thoma.com/nips-2016/" rel="alternate"></link><published>2016-12-24T20:00:00+01:00</published><updated>2016-12-24T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-12-24:/nips-2016/</id><summary type="html">&lt;p&gt;The Conference and Workshop on Neural Information Processing Systems (NIPS) is
probably the biggest conference with machine learning / deep learning as a
main topic. This year, about 6000 people attended it. My friend Marvin and me
were supported by &lt;a href="https://www.informatik.kit.edu/begabtenstiftung_informatik_karlsruhe.php"&gt;Begabtenstiftung Informatik Karlsruhe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The complete program can be found in the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Conference and Workshop on Neural Information Processing Systems (NIPS) is
probably the biggest conference with machine learning / deep learning as a
main topic. This year, about 6000 people attended it. My friend Marvin and me
were supported by &lt;a href="https://www.informatik.kit.edu/begabtenstiftung_informatik_karlsruhe.php"&gt;Begabtenstiftung Informatik Karlsruhe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The complete program can be found in the &lt;a href="https://media.nips.cc/Conferences/2016/NIPS-2016-Conference-Book.pdf"&gt;Conference Book&lt;/a&gt;, but I would like to point out some of my highlights.&lt;/p&gt;
&lt;h2 id="hot-topics"&gt;Hot Topics&lt;/h2&gt;
&lt;p&gt;To get an idea what NIPS 2016 was about, I generated a word cloud from the titles
of the accepted papers:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wordcloud of NIPS titles of 2016" src="https://martin-thoma.com/images/2016/12/nips-2016-wordcloud.png"/&gt;&lt;/p&gt;
&lt;p&gt;The organization team made something similar, but they had access to the
information how the papers were tagged:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NIPS 2016 areas submitted" src="https://martin-thoma.com/images/2016/12/subject_areas_submitted1.png"/&gt;&lt;/p&gt;
&lt;p&gt;(Image source: &lt;a href="http://www.tml.cs.uni-tuebingen.de/team/luxburg/misc/nips2016/index.php"&gt;www.tml.cs.uni-tuebingen.de&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The top 10 topics were:
&lt;ol&gt;
&lt;li&gt;01: Deep Learning or Neural Networks&lt;/li&gt;
&lt;li&gt;42: (Application) Computer Vision&lt;/li&gt;
&lt;li&gt;02: Large Scale Learning and Big Data&lt;/li&gt;
&lt;li&gt;05: Learning Theory&lt;/li&gt;
&lt;li&gt;53: (Other) Optimization&lt;/li&gt;
&lt;li&gt;08: Sparsity and Feature Selection&lt;/li&gt;
&lt;li&gt;51: (Other) Classification&lt;/li&gt;
&lt;li&gt;03: Convex Optimization&lt;/li&gt;
&lt;li&gt;54: (Other) Probabilistic Models and Methods&lt;/li&gt;
&lt;li&gt;56: (Other) Unsupervised Learning Methods&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;I would say the top five hot topics (first is hottest) are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GANs&lt;/li&gt;
&lt;li&gt;Reinforcment Learning: Look for "bandit" in the paper titles&lt;/li&gt;
&lt;li&gt;unsupervised learning&lt;/li&gt;
&lt;li&gt;alternative ways to train DNNs&lt;/li&gt;
&lt;li&gt;reducing the need for data (transfer learning, domain adaptation, semi-supervised learning)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="gans"&gt;GANs&lt;/h3&gt;
&lt;p&gt;Generative Adverserial Networks (short: GANs) were one hot topic at NIPS. The
idea is to train two networks: A generator &lt;span class="math"&gt;\(G\)&lt;/span&gt; and a discriminator &lt;span class="math"&gt;\(D\)&lt;/span&gt;. The
generator creates content (e.g. images) and the discriminator has to decide if
the content is of the natural distribution (the training set) or made by the
generator.&lt;/p&gt;
&lt;p&gt;An introduction can be found at &lt;a href="http://blog.evjang.com/2016/06/generative-adversarial-nets-in.html"&gt;blog.evjang.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Noteworthy papers and ideas are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6111-learning-what-and-where-to-draw.pdf"&gt;Learning What and Where to Draw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6399-infogan-interpretable-representation-learning-by-information-maximizing-generative-adversarial-nets.pdf"&gt;InfoGAN&lt;/a&gt;: Get more control about properties of the generated content.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/soumith/ganhacks"&gt;How to Train a GAN?&lt;/a&gt; Tips and tricks to make GANs work&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1609.03552v2"&gt;Generative Visual Manipulation on the Natural Image Manifold&lt;/a&gt;: Allow interactive generation of images (see also: &lt;a href="https://www.reddit.com/r/MachineLearning/comments/5m61d6/r_demystifying_neural_style_transfer/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="https://www.youtube-nocookie.com/embed/9c4z6YsBGQ0?rel=0" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;Applications of GANs are (according to &lt;a href="http://blog.evjang.com/2017/01/nips2016.html"&gt;Eric Jang&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reinforcement learning: &lt;a href="https://arxiv.org/abs/1611.03852"&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;domain adaptation&lt;/li&gt;
&lt;li&gt;security ML&lt;/li&gt;
&lt;li&gt;compression&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bayesian-deep-learning"&gt;Bayesian Deep Learning&lt;/h3&gt;
&lt;p&gt;Combinding deep learning with graphical models like CRFs / Markov Random Fields
has been done for semantic segmentation for a while now. It seems like the
combination of those two is called "bayesian deep learning". If you look for
the keyword "variational" it seems to belong in this category.&lt;/p&gt;
&lt;p&gt;I don't really know this area, so I leav it to &lt;a href="http://blog.evjang.com/2017/01/nips2016.html"&gt;Eric Jang&lt;/a&gt;
to point out important papers.&lt;/p&gt;
&lt;h2 id="nuts-and-bolts-of-ml_1"&gt;Nut's and Bolts of ML&lt;/h2&gt;
&lt;p&gt;Andrew Ng gave a talk in which he summarized what he thinks are some of the
most important topics when training machine learning systems. Most of it
is probably also in his book &lt;a href="http://www.mlyearning.org/"&gt;Machine Learning Yearning&lt;/a&gt;
or in his &lt;a href="https://www.coursera.org/learn/machine-learning"&gt;Coursera course&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some of the things he talked about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you design a speech recognition system, you can measure 3 types of errors:
  Human error, training set error and test set error. The difference between
  the human error and the training error is "avoidable error" (bias), the difference
  between training and test error is "variance".&lt;/li&gt;
&lt;li&gt;Human level performance is ambiguous: In a medical application, is an
  amateur, a doctor, an experienced doctor or a team of (experienced) doctors
  the "human level performance"?&lt;/li&gt;
&lt;li&gt;Role of an "AI Product Manager"&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-papers"&gt;More Papers&lt;/h2&gt;
&lt;p&gt;Clustering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6478-fast-and-provably-good-seedings-for-k-means"&gt;Fast and Provably Good Seedings for k-Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Optimization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6268-metagrad-multiple-learning-rates-in-online-learning"&gt;MetaGrad: Multiple Learning Rates in Online Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;https://bitbucket.org/wmkoolen/metagrad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6213-optimal-learning-for-multi-pass-stochastic-gradient-methods"&gt;Optimal Learning for Multi-pass Stochastic Gradient Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1607.06450"&gt;Layer Normalization&lt;/a&gt;: An successor for Batch Normalization?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Theory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6112-deep-learning-without-poor-local-minima"&gt;Deep Learning without Poor Local Minima&lt;/a&gt;: Local Minima are global minima in "typical" networks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6048-matrix-completion-has-no-spurious-local-minimum.pdf"&gt;Matrix Completion has No Spurious Local Minimum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.toronto.edu/~wenjie/papers/nips16/top.pdf"&gt;Understanding the Effective Receptive Field in Deep Convolutional Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topology learning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6372-learning-the-number-of-neurons-in-deep-networks"&gt;Learning the Number of Neurons in Deep Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;From another talk. Most add nodes / edges over time from an initial seed network:&lt;ul&gt;
&lt;li&gt;1960, Erd&amp;ouml;s &amp;amp; Renyi: Random graphs&lt;/li&gt;
&lt;li&gt;1998, Watts &amp;amp; Strogatz: Small-world graph&lt;/li&gt;
&lt;li&gt;1999, Barabasi &amp;amp; Albert: Preferential attachment&lt;/li&gt;
&lt;li&gt;1999, Kleinburg et al.: Copying model&lt;/li&gt;
&lt;li&gt;2003, Vazquez et al.: Duplication-divergence&lt;/li&gt;
&lt;li&gt;2007, Leskovec et al.: Forest fire&lt;/li&gt;
&lt;li&gt;2008, Clauset et al.: Hierarchical random graphs&lt;/li&gt;
&lt;li&gt;2010, Leskovec et al.: Kronecker graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network compression&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1608.04493"&gt;Dynamic Network Surgery for Efficient DNNs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1504.08362"&gt;PerforatedCNNs: Acceleration through Elimination of Redundant Convolutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1605.06465"&gt;Swapout: Learning an ensemble of deep architectures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Analysis of ML models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6482-blind-attacks-on-machine-learners"&gt;Blind Attacks on Machine Learners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1605.07262"&gt;Measuring Neural Net Robustness with Constraints&lt;/a&gt;: Measure robustnes against adverserial examples&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1608.08967"&gt;Robustness of classifiers: from adversarial to random noise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1606.05313"&gt;Unsupervised Risk Estimation Using Only Conditional Independence Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6482-blind-attacks-on-machine-learners"&gt;Blind Attacks on Machine Learners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://people.csail.mit.edu/beenkim/papers/KIM2016NIPS_MMD.pdf"&gt;Examples are not Enough, Learn to Criticize! Criticism for Interpretability&lt;/a&gt; (&lt;a href="https://github.com/BeenKim/MMD-critic"&gt;github&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.09064"&gt;Identifying Unknown Unknowns in the Open World: Representations and Policies for Guided Exploration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Content creation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visualdynamics.csail.mit.edu/"&gt;Visual Dynamics: Probabilistic Future Frame Synthesis via Cross Convolutional Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Labeling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.09730"&gt;Active Learning from Imperfect Labelers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1608.07328"&gt;Fundamental Limits of Budget-Fidelity Trade-off in Label Crowdsourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1606.05374"&gt;Avoiding Imposters and Delinquents: Adversarial Crowdsourcing and Peer Prediction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Content based Image Retrival (CBIR):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6200-improved-deep-metric-learning-with-multi-class-n-pair-loss-objective.pdf"&gt;Improved Deep Metric Learning with Multi-class N-pair Loss Objective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1611.00822"&gt;Learning Deep Embeddings with Histogram Loss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.08904"&gt;Local Similarity-Aware Deep Feature Embedding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1608.08792"&gt;CliqueCNN: Deep Unsupervised Exemplar Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6192-what-makes-objects-similar-a-unified-multi-metric-learning-approach"&gt;What Makes Objects Similar: A Unified Multi-Metric Learning Approach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Misc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/6323-learnable-visual-markers"&gt;Learnable Visual Markers&lt;/a&gt;: Visual markers are something like barcodes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1603.06143"&gt;Neurally-Guided Procedural Models: Amortized Inference for Procedural Graphics Programs using Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1606.03558v3.pdf"&gt;Universal Correspondence Network&lt;/a&gt;: Find semantically meaningful similar points in two images. For example, to frontal images of different humans, where the network finds eyes, nose, chin, lips in both images.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://places.csail.mit.edu/demo.html"&gt;Scene Recognition Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1612.00423"&gt;TorontoCity: Seeing the World with a Million Eyes&lt;/a&gt;: A new benchmark dataset by Raquel Urtasun&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.dropbox.com/s/vfmncjnyh57glkc/NIPS_LSCVS_ImageNet%20Analysis.pdf?dl=0"&gt;What makes ImageNet good for Transfer Learning?&lt;/a&gt;&lt;/strong&gt; by Jacob Huh (UC Berkeley), Pulkit Agrawal (UC Berkeley), and Alexei Efros (UC Berkeley)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lessons-learned-for-conferences"&gt;Lessons learned for conferences&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bring a camera: The information comes very fast. Too fast to take notes, but
  you can shoot a photo of the slides. In fact, quite a lot of people do so.&lt;/li&gt;
&lt;li&gt;Shoot a photo of the first slide, so that you know what the talk was about
  when you look at your slides.&lt;/li&gt;
&lt;li&gt;If you give a talk / poster...&lt;ul&gt;
&lt;li&gt;... let the first slide be there long enough, so that people can take a
  photo of it.&lt;/li&gt;
&lt;li&gt;... or have a URL / the title of the paper on every single slide&lt;/li&gt;
&lt;li&gt;... let every slide be visible long enough, so that people can take photos&lt;/li&gt;
&lt;li&gt;... don't use QR-codes only, but also (shortened) URLs&lt;/li&gt;
&lt;li&gt;... make it available online as PDF&lt;/li&gt;
&lt;li&gt;... answer key questions: (1) Which problem did you tackle? (2) How did you test your results? (3) To what is your "solution" similar?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;As a session organizer...&lt;ul&gt;
&lt;li&gt;... make sure there is a schedule at the door (outside)&lt;/li&gt;
&lt;li&gt;... make sure the schedule is online&lt;/li&gt;
&lt;li&gt;... make sure the schedule is changed everywhere, if it is actually changed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/book/advances-in-neural-information-processing-systems-29-2016"&gt;Advances in Neural Information Processing Systems 29 (NIPS 2016) pre-proceedings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jobs&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unify.id/fellowship-fall2016.html"&gt;unify.id&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bluevisionlabs.com/"&gt;bluevisionlabs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/benhamner/nips-papers"&gt;NIPS Papers Kaggle Dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;blog.aylien.com: &lt;a href="http://blog.aylien.com/highlights-nips-2016"&gt;Highlights of NIPS 2016: Adversarial Learning, Meta-learning and more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://salon-des-refuses.org/"&gt;salon-des-refuses.org&lt;/a&gt; should contain papers
  which were refused, but are also of high quality. However, the website seems to be down.&lt;/li&gt;
&lt;li&gt;Martin Zinkevich: &lt;a href="http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf"&gt;Rules of Machine Learning: Best Practices for ML Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/MachineLearning/comments/5hwqeb/project_all_code_implementations_for_nips_2016/"&gt;Implementations for NIPS 2016 papers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YouTube:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLJscN9YDD1buxCitmej1pjJkR5PMhenTF&amp;amp;app=desktop"&gt;GAN Workshop playlist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yann Le Cun &lt;a href="https://www.youtube.com/watch?v=88nKI-qqWEo&amp;amp;feature=youtu.be"&gt;Energy-based GANs &amp;amp; other adverserial training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="research"></category></entry><entry><title>ML Review 1</title><link href="https://martin-thoma.com/ml-review-1/" rel="alternate"></link><published>2016-11-22T20:00:00+01:00</published><updated>2016-11-22T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-11-22:/ml-review-1/</id><summary type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning. Most of it was posted in &lt;a href="https://ml-ka.de/"&gt;KITs machine learning group&lt;/a&gt; (on Facebook).&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;!-- Trends --&gt;
&lt;ul&gt;
&lt;li&gt;Random forests for courier detection: &lt;a href="https://www.theguardian.com/science/the-lay-scientist/2016/feb/18/has-a-rampaging-ai-algorithm-really-killed-thousands-in-pakistan"&gt;Has a rampaging AI algorithm called Skynet really killed thousands in Pakistan?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="live-demos-and-websites"&gt;Live Demos â€¦&lt;/h2&gt;</summary><content type="html">&lt;p&gt;This Review gives an overview of intersting stuff I stumbled over which are
related to machine learning. Most of it was posted in &lt;a href="https://ml-ka.de/"&gt;KITs machine learning group&lt;/a&gt; (on Facebook).&lt;/p&gt;
&lt;h2 id="new-developments"&gt;New Developments&lt;/h2&gt;
&lt;!-- Trends --&gt;
&lt;ul&gt;
&lt;li&gt;Random forests for courier detection: &lt;a href="https://www.theguardian.com/science/the-lay-scientist/2016/feb/18/has-a-rampaging-ai-algorithm-really-killed-thousands-in-pakistan"&gt;Has a rampaging AI algorithm called Skynet really killed thousands in Pakistan?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="live-demos-and-websites"&gt;Live Demos and Websites&lt;/h2&gt;
&lt;h3 id="quickdraw"&gt;Quickdraw&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://quickdraw.withgoogle.com/"&gt;Quickdraw&lt;/a&gt; is a program which tries to
guess what you drew. However, it is difficult to check if they really apply
machine learning, because it tells you what to draw and then tries to recognize
it.&lt;/p&gt;
&lt;figure style="display:table;margin: 0 auto 0.55em;"&gt;
&lt;a href="https://martin-thoma.com/images/2016/11/quickdraw.png"&gt;&lt;img align="middle" src="https://martin-thoma.com/images/2016/11/quickdraw.png" width="512"/&gt;&lt;/a&gt;
&lt;figcaption style="display:table-caption;caption-side:bottom"&gt;I had to draw a piano, a floor lamp, a chandelier, a suitcase, a candle and a lipstick each in under 20 seconds.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It looks very much like an attempt to get lots of training data. However, this
plan might not work that well: &lt;a href="https://imgur.com/a/hUrOj"&gt;Interesting Quickdraw Fails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might find more stuff like Quickdraw on
&lt;a href="https://aiexperiments.withgoogle.com/"&gt;aiexperiments.withgoogle.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="loss-functions"&gt;Loss Functions&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://lossfunctions.tumblr.com/"&gt;lossfunctions.tumblr.com&lt;/a&gt; is a blog created
by &lt;a href="http://cs.stanford.edu/people/karpathy/"&gt;Andrej Karpathy&lt;/a&gt; where he collects
- well, let's call them "interesting" - loss functions.&lt;/p&gt;
&lt;h2 id="publications_1"&gt;Publications&lt;/h2&gt;
&lt;!-- e.g. arXiv --&gt;
&lt;h3 id="deep-neural-networks-are-easily-fooled"&gt;Deep Neural Networks are Easily Fooled&lt;/h3&gt;
&lt;p&gt;The input of CNNs for image classification can be manipulated in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An image, on which a human does not recognize anything (e.g. white noise)
   gets a high score for some object class.&lt;/li&gt;
&lt;li&gt;An image on which a human is certain to recognize one class
   (e.g.&amp;nbsp;"cat")
   is manipulated in a way that the CNN classifies with high certainty something
   different
   (e.g.&amp;nbsp;"factory").&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anh Nguyen, Jason Yosinski, Jeff Clune: &lt;a href="http://arxiv.org/abs/1412.1897"&gt;Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images&lt;/a&gt; on arxiv.&lt;/li&gt;
&lt;li&gt;Evolving AI Lab: &lt;a href="https://www.youtube.com/watch?v=M2IebCN9Ht4"&gt;Deep Neural Networks are Easily Fooled&lt;/a&gt; on YouTube in 5:33 min.&lt;/li&gt;
&lt;li&gt;Google: &lt;a href="http://googleresearch.blogspot.de/2015/06/inceptionism-going-deeper-into-neural.html"&gt;Inceptionism: Going Deeper into Neural Networks&lt;/a&gt;. 17.06.2016.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="breaking-linear-classifiers-on-imagenet"&gt;Breaking Linear Classifiers on ImageNet&lt;/h3&gt;
&lt;p&gt;Andrej Karpathy has once again written a nice article. The article describes
the problem that &lt;a href="http://karpathy.github.io/2015/03/30/breaking-convnets/"&gt;linear classifiers can be broken easily&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hinton commented something simmilar &lt;a href="https://www.reddit.com/r/MachineLearning/comments/2lmo0l/ama_geoffrey_hinton/clyjbai"&gt;on Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="where-am-i"&gt;Where am I?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.technologyreview.com/s/600889/google-unveils-neural-network-with-superhuman-ability-to-determine-the-location-of-almost/"&gt;Google Unveils Neural Network with &amp;ldquo;Superhuman&amp;rdquo; Ability to Determine the Location of Almost Any Image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One gives the neural network a photo and it tells you where it was taken.&lt;/p&gt;
&lt;h3 id="lime"&gt;LIME&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/1602.04938"&gt;"Why Should I Trust You?": Explaining the Predictions of Any Classifier&lt;/a&gt; deals with the problem of analyzing black box models decision making process.&lt;/p&gt;
&lt;h3 id="lip-reading"&gt;Lip Reading&lt;/h3&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="https://www.youtube-nocookie.com/embed/fa5QGremQf8?rel=0" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;See the paper &lt;a href="https://openreview.net/pdf?id=BkjLkSqxg"&gt;LipNet: Sentence-Level Lipreading&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id="more"&gt;More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.06918"&gt;Learning to Protect Communications with Adversarial Neural Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ai100.stanford.edu/2016-report"&gt;2016 Report&lt;/a&gt;: One Hundred Year Study on Artificial Intelligence (AI100)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="software_1"&gt;Software&lt;/h2&gt;
&lt;!-- e.g. Theano, Keras, ... --&gt;
&lt;h3 id="seaborn"&gt;Seaborn&lt;/h3&gt;
&lt;figure style="display:table;margin: 0 auto 0.55em;"&gt;
&lt;a href="https://martin-thoma.com/images/2016/11/seaborn_hexbin_marginals.png"&gt;&lt;img align="middle" src="https://martin-thoma.com/images/2016/11/seaborn_hexbin_marginals.png" width="512"/&gt;&lt;/a&gt;
&lt;figcaption style="display:table-caption;caption-side:bottom"&gt;Example plot generated by Seaborn&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Seaborn is a Python package for the visualization of data and statistics.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://stanford.edu/~mwaskom/software/seaborn/"&gt;stanford.edu/~mwaskom/software/seaborn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="recnet"&gt;RecNet&lt;/h3&gt;
&lt;p&gt;J&amp;ouml;rg made &lt;a href="https://github.com/joergfranke/recnet"&gt;recnet&lt;/a&gt; publicly available.
It is a framework based on Theano to simplify the creation of recurrent
networks.&lt;/p&gt;
&lt;h3 id="image-segmentation-using-digits-5"&gt;Image Segmentation Using DIGITS 5&lt;/h3&gt;
&lt;p&gt;I didn't try it by now, but the images in the article
&lt;a href="https://devblogs.nvidia.com/parallelforall/image-segmentation-using-digits-5/"&gt;Image Segmentation Using DIGITS 5&lt;/a&gt; look awesome. I would be happy to hear what
you think about it.&lt;/p&gt;
&lt;h3 id="kerasjs"&gt;Keras.js&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Run Keras models (trained using Tensorflow backend) in your browser, with GPU support. Models are created directly from the Keras JSON-format configuration file, using weights serialized directly from the corresponding HDF5 file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://github.com/transcranial/keras-js"&gt;github.com/transcranial/keras-js&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="interesting-questions_1"&gt;Interesting Questions&lt;/h2&gt;
&lt;!-- For example StackExchange --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/10286/8820"&gt;When being in a perfect &amp;ldquo;Long Valley&amp;rdquo; situation, does momentum help?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/15188/8820"&gt;Are non-zero paddings used?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascience.stackexchange.com/q/15081/8820"&gt;Why do CNNs with ReLU learn that well?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs.stackexchange.com/q/65828/2914"&gt;Is there a metric for the similarity of two image filters?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="miscallenious"&gt;Miscallenious&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bigstory.ap.org/article/265cd8fb02fb44a69cf0eaa2063e11d9/mexico-taking-us-factory-jobs-blame-robots-instead"&gt;Why robots, not trade, are behind so many factory job losses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://halite.io/"&gt;halite.io&lt;/a&gt;: A website for ML challenges.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.theverge.com/2016/11/4/13518210/deepmind-starcraft-ai-google-blizzard"&gt;Google DeepMind's next gaming challenge: can AI beat StarCraft II?&lt;/a&gt; (and the &lt;a href="https://deepmind.com/blog/deepmind-and-blizzard-release-starcraft-ii-ai-research-environment/"&gt;post on deepnet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qz.com/823820/carnegie-mellon-made-a-special-pair-of-glasses-that-lets-you-steal-a-digital-identity/"&gt;All it takes to steal your face is a special pair of glasses&lt;/a&gt; - and the paper &lt;a href="https://www.cs.cmu.edu/~sbhagava/papers/face-rec-ccs16.pdf"&gt;Accessorize to a Crime: Real and Stealthy Attacks on State-of-the-Art Face Recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-physics-arxiv-blog/when-a-machine-learning-algorithm-studied-fine-art-paintings-it-saw-things-art-historians-had-never-b8e4e7bf7d3e"&gt;When A Machine Learning Algorithm Studied Fine Art Paintings, It Saw Things Art Historians Had Never Noticed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open_nsfw.gitlab.io/"&gt;Image Synthesis from Yahoo's open_nsfw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wired.com/2016/10/cops-database-117m-faces-youre-probably/"&gt;Cops have a database of 117M faces. You're probably in it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crowdai.org/challenges/ants-challenge-part-1"&gt;Ants Challenge - Part I&lt;/a&gt;: identify and track individual ants over time; recognize when ants engage in food transfer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcrunch.com/2016/10/11/five-years-of-observations-from-tandem-satellites-produce-3d-world-map-of-unprecedented-accuracy/"&gt;Five years of observations from tandem satellites produce 3D world map of unprecedented accuracy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_tramer.pdf"&gt;Stealing Machine Learning Models via Prediction APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.newscientist.com/article/2108934-deepminds-ai-has-learned-to-navigate-the-tube-using-memory/"&gt;DeepMind&amp;rsquo;s AI has learned to navigate the Tube using memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="meetings"&gt;Meetings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;London, 7. April 2016: Deep Learning in Healthcare Summit (&lt;a href="https://re-work.co/events/deep-learning-health-london-2016"&gt;Link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="navigation clearfix"&gt;
&lt;div class="alignright"&gt;
&lt;a href="https://martin-thoma.com/ml-review-2/" rel="next"&gt;Next Review &amp;raquo;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category></entry><entry><title>Machine Learning Glossary</title><link href="https://martin-thoma.com/ml-glossary/" rel="alternate"></link><published>2016-10-24T20:00:00+02:00</published><updated>2016-10-24T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-10-24:/ml-glossary/</id><summary type="html">&lt;p&gt;The following is a list of short explanations of different terms in machine
learning. The aim is to keep things simple and brief, not to explain the terms
in full detail.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn id="active-learning"&gt;Active Learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;The algorithm gives a pattern and asks for a label.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="backpropagation"&gt;Backpropagation&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A clever implementation of gradient descent â€¦&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;The following is a list of short explanations of different terms in machine
learning. The aim is to keep things simple and brief, not to explain the terms
in full detail.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn id="active-learning"&gt;Active Learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;The algorithm gives a pattern and asks for a label.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="backpropagation"&gt;Backpropagation&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A clever implementation of gradient descent for neural networks.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="bias"&gt;Bias&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Bias is a concept which describes a systematic error. A classifier
        with a high bias tends to give one answer more often, no matter what
        the input is. This concept is relatied to &lt;i&gt;variance&lt;/i&gt; and well
        described with the images &lt;a href="https://sebastianraschka.com/blog/2016/model-evaluation-selection-part2.html"&gt;here&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="blstm"&gt;BLSTM&lt;/dfn&gt;, &lt;dfn id="bilstm"&gt;BiLSTM&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Bidirectional long short-term memory (see &lt;a href="http://www.di.ufpe.br/~fnj/RNA/bibliografia/BRNN.pdf"&gt;paper&lt;/a&gt; and &lt;a href="https://www.cs.toronto.edu/~graves/asru_2013_poster.pdf"&gt;poster&lt;/a&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="co-training"&gt;Co-Training&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A form of semi-supervised learning. Two independant classifiers are
        trained on different labeled datasets. The classifiers are applied to
        the unlabeled data. Data with high confidence will be added to the
        other classifiers data.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="collaborative-filtering"&gt;Collaborative Filtering&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;You have users and items which are rated. No user rated everything.
        You want to fill the gaps (see &lt;a href="https://martin-thoma.com/collaborative-filtering/"&gt;article&lt;/a&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="computer-vision"&gt;Computer Vision&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;The academic discipline which deals with how to gain high-level understanding from digital images or videos. Common tasks include image classifiction, semantic segmentation, detection and localization.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="curriculum-learning"&gt;Curriculum learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A method for pretraining. First optimize a smoothed objective and gradually consider less smoothing. So a curriculum is a sequence of training criteria. One might show gradually more difficult training examples. See &lt;a href="http://ronan.collobert.com/pub/matos/2009_curriculum_icml.pdf"&gt;Curriculum Learning&lt;/a&gt; by Benigo, Louradour, Collobert and Weston for details.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="curse-of-dimensionality"&gt;&lt;a href="https://martin-thoma.com/curse-of-dimensionality"&gt;Curse of dimensionality&lt;/a&gt;&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Various problems of high-dimensional spaces that do not occur in low-dimensional spaces.
        High-dimensional often means several 100 dimensions.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="dcgan"&gt;DCGAN&lt;/dfn&gt; (&lt;dfn&gt;Deep Convolutional Generative Adverserial Networks&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;TODO&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="dcign"&gt;DCIGN&lt;/dfn&gt; (&lt;dfn&gt;Deep Convolutional Inverse Graphic Network&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;TODO&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="dcnn"&gt;DCNN&lt;/dfn&gt; (&lt;dfn&gt;Doubly Convolutional Neural Network&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;Introduced in &lt;a href="https://arxiv.org/pdf/1610.09716v1.pdf"&gt;this paper&lt;/a&gt; (&lt;a href="http://www.shortscience.org/paper?bibtexKey=conf/nips/ZhaiCZL16#martinthoma"&gt;summary&lt;/a&gt;).

    &lt;b&gt;Note&lt;/b&gt; Some people also call &lt;i&gt;Deep Convolutional Neural Networks&lt;/i&gt; DCNNs.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="dnn"&gt;DNN&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Deep Neural Network. The meaning of "deep" differs. Sometimes it means at
        least one hidden layer, sometimes it means at least 12 hidden layers.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="domain-adaptation"&gt;Domain adaptation&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A model is trained on dataset $A$. How does it have to be changed to work on dataset $B$?&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="object-detection"&gt;Detection in Computer Vision&lt;/dfn&gt; (&lt;dfn&gt;Object detection&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;Object detection in an image is a computer vision task. The input
        is an image and the output is a list with rectangles which contain
        objects of the given type. Face detection is one well-studied example.
        A photo could contain no face or hundrets of them. The rectangles
        can overlap.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="deep-learing"&gt;Deep Learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Buzzword. The meaning depends on who you ask / in which year you asked.
        Sometimes it means multi-layer perceptrons with more than $N$ layers
        (some say $N=2$ is already deep learning, others want N&amp;gt;20 or nowadays
        $N&amp;gt;100$).&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="discriminative-model"&gt;Discriminative Model&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;The model gives a conditional probability of the classes $k$, given the
        feature vector $x$: $P(k | x)$.
        This kind of model is often used for prediction.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="fc7-features"&gt;FC7-Features&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Features of an image which was run through a trained neural network.
        AlexNet called the last fully connected layer FC7. However, FC7
        features are not necessarily created by AlexNet.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="fmllr"&gt;FMLLR&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Feature-Space Maximum Likelihood Linear Regression&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="feature-map"&gt;Feature Map&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A feature map is the result of a single filter of a convolutional layer
        being applied. So it is the activation of that filter over the given
        input.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="fine-tuning"&gt;Fine-tuning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;See &lt;a href="#pre-training"&gt;pre-training&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Mixture_model"&gt;&lt;dfn id="gmm"&gt;GMM&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Gaussian Mixture Model&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="gemm"&gt;GEMM&lt;/dfn&gt; (&lt;dfn&gt;GEneral Matrix to Matrix Multiplication&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;General Matrix to Matrix Multiplication is the problem of
        calculating the result of $C = A \cdot B$ with $A \in \mathbb{R}^{n \times m}, B \in \mathbb{R}^{m \times k}, C \in \mathbb{R}^{n \times k}$.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="generative-model"&gt;Generative model&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;The model gives the relationship of variables: $P(x, y)$.
        This kind of model can be used for prediction, too.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="gradient-descent"&gt;Gradient Descent&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;An iterative optimization algorithm for differentiable functions.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Hidden_Markov_model"&gt;&lt;dfn id="hmm"&gt;HMM&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Hidden Markov Model&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="i-vector"&gt;i-vector&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;speaker identity vector. See &lt;a href="http://ieeexplore.ieee.org/abstract/document/5545402/"&gt;Front-End Factor Analysis for Speaker Verification&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="mann"&gt;MANN&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Memory-Augmented Neural Networks (see &lt;a href="http://rylanschaeffer.github.io/content/research/one_shot_learning_with_memory_augmented_nn/main.html"&gt;Blog post&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="machine-vision"&gt;Machine Vision&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Computer vision applied for industrial applications.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Matrix_completion"&gt;&lt;dfn id="matrix-completion"&gt;Matrix Completion&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;See &lt;a href="#collaborative-filtering"&gt;collaborative filtering&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="mllr"&gt;MLLR&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Maximum Likelihood Linear Regression&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="mmd"&gt;MMD&lt;/dfn&gt; (&lt;dfn id="maximum-mean-descripancy"&gt;Maximum Mean Descrepancy&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;MMD is a measure of the difference between a distribution $P$ and a distribution $Q$:

        $$MMD(F, p, q) = sup_{f \in F} (\mathbb{E}_{x \sim p} [f(x)] - \mathbb{E}_{y \sim q} [f(y)])$$

    &lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="multi-task-learning"&gt;Multi-Task learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Train a model which does multiple tasks at the same time, e.g.
        segmentation and detection (see &lt;a href="https://arxiv.org/abs/1612.07695"&gt;MultiNet&lt;/a&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies"&gt;&lt;dfn id="neat"&gt;NEAT&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Neuroevolution of Augmenting Topologies (see &lt;a href="http://blog.otoro.net/2016/05/07/backprop-neat/"&gt;Blogpost&lt;/a&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="object-recognition"&gt;Object recognition&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Classification on images. The task is to decide in which class a given
        image falls, judging by the content. This can be cat, dog, plane or
        similar.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="one-shot-learning"&gt;&lt;a href="https://en.wikipedia.org/wiki/One-shot_learning"&gt;One-Shot learning&lt;/a&gt;&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Learn only with one or very few examples per class. See &lt;a href="http://vision.stanford.edu/documents/Fei-FeiFergusPerona2006.pdf"&gt;One-Shot Learning of Object Categories&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Optical_flow"&gt;&lt;dfn id="optical-flow"&gt;Optical Flow&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Optical flow is defined for two images. It describes how the points in
        one image moved when switching to the second image.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Principal_component_analysis"&gt;&lt;dfn id="pca"&gt;PCA&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Principal component analysis (short: PCA) is a linear transformation
        which projects $n$ points $\mathbf{x} \in \mathbb{R}^{n \times s}$ with
        $s$ features each on a hyperplane in such a way
        that the projection error is minimal. Hence it is an unsupervised
        method for feature reduction. It simply works by finding a matrix
        $P \in \mathbb{R}^{s \times m}$, where $m \leq s$ can be chosen as small
        as desired.
        &lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="pre-training"&gt;Pre-training&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;ol&gt;
&lt;li&gt;You have machine learning model $m$.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Pre-training&lt;/i&gt;: You have a dataset $A$ on which you train $m$.&lt;/li&gt;
&lt;li&gt;You have a dataset $B$. Before you start training the model,
                you initialize some of the parameters of $m$ with the model
                which is trained on $A$.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Fine-tuning&lt;/i&gt;: You train $m$ on $B$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="regularization"&gt;Regularization&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Regularization are techniques to make the fitted function smoother. This
        helps to prevent overfitting.&lt;br/&gt;
        Examples: L1, L2, Dropout, Weight Decay in Neural Networks. Parameter $C$ in SVMs.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="reinforcement-learning"&gt;Reinforcement Learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Reinforcment learning is a sub-field of machine learning, which focuses
        on the question how to find actions which lead to higher rewards. See
        &lt;a href="../probabilistische-planung/#reinforcement-learning"&gt;German lecture notes&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="self-learning"&gt;Self-Learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;One form of semi-supervised learning, where you train an initial system
        on the labeled data, then label the unlabeled data where the classifier
        is 'sure enough'. After that, you train a new system on all data and
        re-label the unlabeled data. This is iterated.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="semi-supervised-learning"&gt;Semi-supervised learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Some training data has labels, but most has no labels.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="supervised-learning"&gt;Supervised learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;All training data has labels.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="spatial-pyramid-pooling"&gt;Spatial Pyramid Pooling&lt;/dfn&gt; (&lt;dfn&gt;SPP&lt;/dfn&gt;)&lt;/dt&gt;
&lt;dd&gt;SPP is the idea of dividing the image into a grid with a fixed number
        of cells and a variable size, depending on the input. Each cell computes
        one feature and hence leads to a fixed-size representation of a variable-sized
        input.&lt;br/&gt;
        See &lt;a href="https://arxiv.org/abs/1406.4729v4"&gt;paper&lt;/a&gt; and &lt;a href="http://www.shortscience.org/paper?bibtexKey=journals/corr/1406.4729"&gt;summary&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;&lt;dfn id="tf-idf"&gt;TF-IDF&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;TF-IDF (short for Term frequency&amp;ndash;inverse document frequency)
        is a measure that reflects how important a word is to a document in a
        collection or corpus.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="transductive-learning"&gt;Transductive learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;label unlabeled data (the aim here is NOT to find a hypothesis)&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="unsupervised-learning"&gt;Unsupervised learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;No training data has labels.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="vc-dimension"&gt;VC-Dimension&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A theoretical natural number assigned to any classifier. The higher
        the VC dimension of a classifier, the more situations it is able
        to capture (see &lt;a href="http://datascience.stackexchange.com/a/16144/8820"&gt;longer explanation&lt;/a&gt;, &lt;a href="https://martin-thoma.com/machine-learning-1-course/#vc-dimension"&gt;german explanation&lt;/a&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="vlad"&gt;VLAD&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Vector of Locally Aligned Descriptors&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="vtln"&gt;VTLN&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;vocal tract length normalization&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="wrn"&gt;WRN&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Wide residual network&lt;/dd&gt;
&lt;dt&gt;&lt;dfn id="zero-shot-learning"&gt;Zero-Shot learning&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;Learning to predict classes, of which no example has been seen during
        training. For example, Flicker gets several new tags each day and they
        want to predict tags for new images. One idea is to use WordNet and
        ImageNet to generate a common embedding. This way, new words of WordNet
        could already have an embedding and thus new images categories could also automatically be classified the right way. See &lt;a href="http://www.cs.cmu.edu/afs/cs/project/theo-73/www/papers/zero-shot-learning.pdf"&gt;Zero-Shot Learning with Semantic Output Codes&lt;/a&gt; as well as &lt;a href="https://www.youtube.com/watch?v=Pmv5JHKX2y4"&gt;this YouTube video&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lectures:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/analysetechniken-grosser-datenbestaende/"&gt;Analysetechniken gro&amp;szlig;er Datenbest&amp;auml;nde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/informationsfusion/"&gt;Informationsfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/machine-learning-1-course/"&gt;Machine Learning 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/machine-learning-2-course/"&gt;Machine Learning 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/mustererkennung-klausur/"&gt;Mustererkennung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/neuronale-netze-vorlesung/"&gt;Neuronale Netze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/lma/"&gt;Lokalisierung Mobiler Agenten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/probabilistische-planung/"&gt;Probabilistische Planung&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Main_Page"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scholarpedia.org/"&gt;scholarpedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Other&lt;ul&gt;
&lt;li&gt;&lt;a href="http://alumni.media.mit.edu/~tpminka/statlearn/glossary/"&gt;alumni.media.mit.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robotics.stanford.edu/~ronnyk/glossary.html"&gt;robotics.stanford.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ee.columbia.edu/~vittorio/Glossary.pdf"&gt;ee.columbia.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cse.unsw.edu.au/~billw/mldict.html"&gt;The Machine Learning Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://37steps.com/glossary/"&gt;37steps.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.asimovinstitute.org/neural-network-zoo/"&gt;asimovinstitute.org&lt;/a&gt;: The Neural Network Zoo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category></entry><entry><title>Average Distance of Random Points in a Unit Hypercube</title><link href="https://martin-thoma.com/curse-of-dimensionality/" rel="alternate"></link><published>2016-10-20T20:00:00+02:00</published><updated>2016-10-20T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-10-20:/curse-of-dimensionality/</id><summary type="html">&lt;p&gt;In machine learning, the "curse of dimensionality" is often stated but much
less often explained. At least not in detail. One just gets told that points
are farer away from each other in high dimensional spaces.&lt;/p&gt;
&lt;h2 id="maximum-minimal-distance"&gt;Maximum minimal distance&lt;/h2&gt;
&lt;p&gt;One approach to this is to calculate the maximum minimal distance â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In machine learning, the "curse of dimensionality" is often stated but much
less often explained. At least not in detail. One just gets told that points
are farer away from each other in high dimensional spaces.&lt;/p&gt;
&lt;h2 id="maximum-minimal-distance"&gt;Maximum minimal distance&lt;/h2&gt;
&lt;p&gt;One approach to this is to calculate the maximum minimal distance of &lt;span class="math"&gt;\(k\)&lt;/span&gt; points
in &lt;span class="math"&gt;\([0, 1]^n\)&lt;/span&gt;. So you try to place &lt;span class="math"&gt;\(k\)&lt;/span&gt; points in such a way, that the minimum
over the pairwise distances of those &lt;span class="math"&gt;\(k\)&lt;/span&gt; points is maximal.
Let's call this &lt;span class="math"&gt;\(\alpha(n, k)\)&lt;/span&gt;. However, it is not easily possible
to calculate &lt;span class="math"&gt;\(\alpha(n, k)\)&lt;/span&gt; for arbitrary &lt;span class="math"&gt;\(n &amp;gt; 2\)&lt;/span&gt; and &lt;span class="math"&gt;\(k &amp;gt; 2\)&lt;/span&gt; (see &lt;a href="http://math.stackexchange.com/q/1976250/6876"&gt;link&lt;/a&gt;).
But the special case &lt;span class="math"&gt;\(k = 2\)&lt;/span&gt; and &lt;span class="math"&gt;\(k = 2^n\)&lt;/span&gt; is easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\alpha(n, 2) = \sqrt{n}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\alpha(n, 2^n) = 1\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you can see that two points get can be farer apart in higher dimensions and
that it needs much more points in higher dimensions to force at least two of
them to have distance 1.&lt;/p&gt;
&lt;h2 id="average-distance"&gt;Average distance&lt;/h2&gt;
&lt;p&gt;Another approach is to calculate the average distance of &lt;span class="math"&gt;\(k\)&lt;/span&gt; uniformly randomly
sampled points in &lt;span class="math"&gt;\([0, 1]^n\)&lt;/span&gt;. Let's call it &lt;span class="math"&gt;\(\beta(n, k)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One first insight is that &lt;span class="math"&gt;\(\beta(n, k) = \beta(n, j)\)&lt;/span&gt; for and &lt;span class="math"&gt;\(k, j \geq 2\)&lt;/span&gt;.
Hence we will only use &lt;span class="math"&gt;\(\beta(n)\)&lt;/span&gt; in the following.&lt;/p&gt;
&lt;p&gt;It is possible to
calculate this, but it is rather tedious (&lt;a href="http://math.stackexchange.com/a/1254154/6876"&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Just two calculated solutions for &lt;span class="math"&gt;\(k=2\)&lt;/span&gt; points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\beta(1) = \frac{1}{3}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\beta(2) = \frac{2+\sqrt{2}+5\operatorname{arcsinh}(1)}{15}=\frac{2+\sqrt{2}+5\log(1+\sqrt{2})}{15} \approx 0.52140543316472\ldots\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it is pretty easy to simulate it.&lt;/p&gt;
&lt;h2 id="density-of-hypercubes"&gt;Density of Hypercubes&lt;/h2&gt;
&lt;p&gt;One interesting question is how much of the &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional hypercube can be
filled by one inscribed &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional hyperball.&lt;/p&gt;
&lt;p&gt;The volume of an &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional hypercube is &lt;span class="math"&gt;\(V_C(a) = a^n\)&lt;/span&gt; where &lt;span class="math"&gt;\(a\)&lt;/span&gt; is the
cubes side length. So for 1 dimension it is &lt;span class="math"&gt;\(a\)&lt;/span&gt;, for 2 dimensions (a square) it
is &lt;span class="math"&gt;\(a^2\)&lt;/span&gt;, for 3 dimensions it is &lt;span class="math"&gt;\(a^3\)&lt;/span&gt; (a cube).&lt;/p&gt;
&lt;p&gt;The volume of an &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional ball is
&lt;/p&gt;
&lt;div class="math"&gt;$$V_S(r) = r^n \frac{\pi^{n/2}}{\Gamma (\frac{n}{2} + 1)}$$&lt;/div&gt;
&lt;p&gt;
Source: &lt;a href="https://en.wikipedia.org/wiki/N-sphere#Closed_forms"&gt;Wikipedia&lt;/a&gt;&lt;br/&gt;
So for 1 dimension it is &lt;span class="math"&gt;\(r \frac{\sqrt{\pi}}{\Gamma(1.5)} = r \frac{\sqrt{\pi}}{0.5 \Gamma(0.5)} = 2r\)&lt;/span&gt;,
for 2 dimensions it is &lt;span class="math"&gt;\(r^2 \frac{\pi}{\Gamma (2)} = r^2 \frac{\pi}{\Gamma (1)} = r^2 \pi\)&lt;/span&gt;
and for 3 dimensions it is &lt;span class="math"&gt;\(r^3 \frac{\pi^{3/2}}{\Gamma (\frac{5}{2})} = r^3 \frac{\pi^{3/2}}{1.5 \cdot 0.5 \cdot \Gamma (\frac{1}{2})} = r^3 \frac{\pi}{\frac{3}{4}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This means the percentage of space of a unit hypercube which can be filled by
the biggest inscribed hyperball is&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
\frac{V_S(0.5)}{V_C(1)}
&amp;amp;= \frac{r^n \frac{\pi^{n/2}}{\Gamma (\frac{n}{2} + 1)}}{1} \\
&amp;amp;= \frac{0.5^n \pi^{n/2}}{\Gamma (\frac{n}{2} + 1)} \\
&amp;amp;= \frac{0.5^n \pi^{n/2}}{\frac{n}{2} \cdot \Gamma (\frac{n}{2})} \\
&amp;amp;= \frac{0.5^n \cdot 2 \cdot \pi^{n/2}}{n \cdot \frac{2 \frac{n}{2}!}{n}} \\
&amp;amp;= \frac{0.5^n \cdot \pi^{n/2}}{\frac{n}{2}!}
\end{align}
$$&lt;/div&gt;
&lt;p&gt;You can see that this term goes to 0 with increasing dimension. This means most
of the volume is not in the center, but in the edges of the &lt;span class="math"&gt;\(n\)&lt;/span&gt; dimensional
hypercube. It also means that &lt;span class="math"&gt;\(k\)&lt;/span&gt; nearest neighbors with Euclidean Distance
measure will need enormously large spheres to get to the next neighbours.&lt;/p&gt;
&lt;h2 id="average-angle"&gt;Average angle&lt;/h2&gt;
&lt;p&gt;One interesting question is how the average angle between two points (and the
origin) changes with higher dimensions. Suppose all points are in the &lt;span class="math"&gt;\([-1, 1]^n\)&lt;/span&gt;
hypercube.&lt;/p&gt;
&lt;p&gt;I thought about this for a while and came to the conclusion that it should be
90&amp;deg; in average due to symmetry. No matter how high the dimension is.&lt;/p&gt;
&lt;p&gt;A short experiment confirms that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;spatial&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cosine_dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Calculate the cosine distance between to points in R^n.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; cosine_dist([1, 0], [0, 1])&lt;/span&gt;
&lt;span class="sd"&gt;    90.0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; cosine_dist([1, 0], [2, 0])&lt;/span&gt;
&lt;span class="sd"&gt;    0.0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; cosine_dist([1, 0], [-1, 0])&lt;/span&gt;
&lt;span class="sd"&gt;    180.0&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;ang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spatial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cosine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;ang&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ang&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ang&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arccos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_angles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get angles of random points in n-dimensional unit hypercube."""&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;angles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cosine_dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;angles&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;angles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_angles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{:&amp;gt;5} dim: {:0.4f} avg angle"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                    &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also interesting: How does the distribution of angles change?&lt;/p&gt;
&lt;p&gt;The plots generated by the code from above:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 1D" src="../images/2017/04/angle-1d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 1D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 2D" src="../images/2017/04/angle-2d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 2D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 3D" src="../images/2017/04/angle-3d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 3D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 4D" src="../images/2017/04/angle-4d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 4D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 10D" src="../images/2017/04/angle-10d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 10D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 100D" src="../images/2017/04/angle-100d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 100D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 1000D" src="../images/2017/04/angle-1000d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 1000D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Distribution of angles between randomly placed points in 10000D" src="../images/2017/04/angle-10000d.png" style="width: 512px;"/&gt;
&lt;figcaption class="text-center"&gt;Distribution of angles between randomly placed points in 10000D&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hence I guess the cosine distance is not a good measure in high-dimensional
spaces. (One should measure this for non-random points to get more certain
about it.)&lt;/p&gt;
&lt;h2 id="empirical-results"&gt;Empirical results&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Get the empirical statements about the distance of two points in [0, 1]^n.&lt;/span&gt;

&lt;span class="sd"&gt;The points are uniformly randomly sampled.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy.random&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_points_dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get the distance of one sample of 2 points in [0, 1]^n."""&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Calculate the average distance of 2 points in [0, 1]^n."""&lt;/span&gt;
    &lt;span class="n"&gt;sum_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;count_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;less_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;max_d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_points_dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;less_one&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;max_d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sum_&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;count_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;less_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;count_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;avg_dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"beta(n=&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;) = &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;; "&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;avg_dist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Pr(d(p1, p2) &amp;lt; 1) = &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;; alpha(n=&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;, 2) = &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One can easily see that points get spaced much farer away in average the higher
the dimension &lt;span class="math"&gt;\(n\)&lt;/span&gt; is. Now lets try to calculate the probability that two points
in the unit hypercube have a distance of less than 1.&lt;/p&gt;
&lt;p&gt;Here are a couple of results. Just a short reminder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\alpha(n, 2)\)&lt;/span&gt; is the maximum distance two points can have in a unit cube in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\alpha'(n, 2)\)&lt;/span&gt; is the maximum observed distance of two points, when all dimensions are independently sampled &lt;span class="math"&gt;\(10^6\)&lt;/span&gt; times.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\beta(n)\)&lt;/span&gt; is the average distance of two points in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(Pr(d(p_1, p_2) &amp;lt; 1)\)&lt;/span&gt; is the probability, that two uniformly randomly placed points have a distance
  of less than 1 in &lt;span class="math"&gt;\(\mathbb{R}^n\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(V_S(0.5)/V_C(1)\)&lt;/span&gt; is the amount a unit ball can fill a unit cube&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;$n$&lt;/th&gt;
&lt;th&gt;$\alpha(n, 2)$&lt;/th&gt;
&lt;th&gt;$\alpha'(n, 2)$&lt;/th&gt;
&lt;th&gt;$\beta(n)$&lt;/th&gt;
&lt;th&gt;$Pr(d(p_1, p_2) &amp;lt; 1)$&lt;/th&gt;
&lt;th&gt;$V_S(0.5)/V_C(1)$&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;1&lt;/td&gt;
&lt;td&gt;1.0000&lt;/td&gt;
&lt;td&gt;0.9994&lt;/td&gt;
&lt;td&gt;0.3332&lt;/td&gt;
&lt;td&gt;1.0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;2&lt;/td&gt;
&lt;td&gt;1.4142&lt;/td&gt;
&lt;td&gt;1.3797&lt;/td&gt;
&lt;td&gt;0.5211&lt;/td&gt;
&lt;td&gt;0.9749&lt;/td&gt;
&lt;td&gt;0.7854&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;3&lt;/td&gt;
&lt;td&gt;1.7321&lt;/td&gt;
&lt;td&gt;1.6116&lt;/td&gt;
&lt;td&gt;0.6616&lt;/td&gt;
&lt;td&gt;0.9100&lt;/td&gt;
&lt;td&gt;0.5236&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;4&lt;/td&gt;
&lt;td&gt;2.0000&lt;/td&gt;
&lt;td&gt;1.8130&lt;/td&gt;
&lt;td&gt;0.7776&lt;/td&gt;
&lt;td&gt;0.8066&lt;/td&gt;
&lt;td&gt;0.3084&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;5&lt;/td&gt;
&lt;td&gt;2.2361&lt;/td&gt;
&lt;td&gt;1.8645&lt;/td&gt;
&lt;td&gt;0.8786&lt;/td&gt;
&lt;td&gt;0.6787&lt;/td&gt;
&lt;td&gt;0.1645&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;6&lt;/td&gt;
&lt;td&gt;2.4495&lt;/td&gt;
&lt;td&gt;1.9659&lt;/td&gt;
&lt;td&gt;0.9693&lt;/td&gt;
&lt;td&gt;0.5419&lt;/td&gt;
&lt;td&gt;0.0807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;7&lt;/td&gt;
&lt;td&gt;2.6458&lt;/td&gt;
&lt;td&gt;2.0891&lt;/td&gt;
&lt;td&gt;1.0515&lt;/td&gt;
&lt;td&gt;0.4125&lt;/td&gt;
&lt;td&gt;0.0369&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;8&lt;/td&gt;
&lt;td&gt;2.8284&lt;/td&gt;
&lt;td&gt;2.1513&lt;/td&gt;
&lt;td&gt;1.1280&lt;/td&gt;
&lt;td&gt;0.3006&lt;/td&gt;
&lt;td&gt;0.0159&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;9&lt;/td&gt;
&lt;td&gt;3.0000&lt;/td&gt;
&lt;td&gt;2.2888&lt;/td&gt;
&lt;td&gt;1.2002&lt;/td&gt;
&lt;td&gt;0.2096&lt;/td&gt;
&lt;td&gt;0.0064&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;10&lt;/td&gt;
&lt;td&gt;3.1623&lt;/td&gt;
&lt;td&gt;2.3327&lt;/td&gt;
&lt;td&gt;1.2671&lt;/td&gt;
&lt;td&gt;0.1411&lt;/td&gt;
&lt;td&gt;0.0025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;100&lt;/td&gt;
&lt;td&gt;10.000&lt;/td&gt;
&lt;td&gt;5.2152&lt;/td&gt;
&lt;td&gt;4.0753&lt;/td&gt;
&lt;td&gt;0.0000&lt;/td&gt;
&lt;td&gt;$\approx 10^{-70}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;1000&lt;/td&gt;
&lt;td&gt;31.6228&lt;/td&gt;
&lt;td&gt;14.0719&lt;/td&gt;
&lt;td&gt;12.9073&lt;/td&gt;
&lt;td&gt;0.0000&lt;/td&gt;
&lt;td&gt;$\approx 10^{-1187}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;10000&lt;/td&gt;
&lt;td&gt;100.000&lt;/td&gt;
&lt;td&gt;41.9675&lt;/td&gt;
&lt;td&gt;40.8245&lt;/td&gt;
&lt;td&gt;0.0000&lt;/td&gt;
&lt;td&gt;$\approx 10^{-16851}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right;"&gt;$n$&lt;/td&gt;
&lt;td&gt;$\sqrt{n}$&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;$\approx 0.41 \cdot \sqrt{n}$&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;$\frac{0.5^n \cdot \pi^{n/2}}{\frac{n}{2}!}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You can easily see that the average distance of two points gets less and less
different from the observed maximal distance of two points.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://perso.uclouvain.be/michel.verleysen/papers/tkde07df.pdf"&gt;The Concentration of Fractional Distances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://math.stackexchange.com/q/1976842/6876"&gt;How is the distance of two random points in a unit hypercube distributed?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Curse_of_dimensionality"&gt;Curse of dimensionality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category></entry><entry><title>Iterating over Graphs</title><link href="https://martin-thoma.com/graph-iteration/" rel="alternate"></link><published>2016-10-19T20:00:00+02:00</published><updated>2016-10-19T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-10-19:/graph-iteration/</id><summary type="html">&lt;p&gt;Today I was thinking if one could iterate over all possible feed forward network
architectures possible. A feed forward network is essentially only a directed
acyclic graph.&lt;/p&gt;
&lt;p&gt;To make things simpler, lets just think about multilayer perceptrons. This
means we only have connections between neighboring layers (and we have layers â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I was thinking if one could iterate over all possible feed forward network
architectures possible. A feed forward network is essentially only a directed
acyclic graph.&lt;/p&gt;
&lt;p&gt;To make things simpler, lets just think about multilayer perceptrons. This
means we only have connections between neighboring layers (and we have layers).&lt;/p&gt;
&lt;h2 id="terms"&gt;Terms&lt;/h2&gt;
&lt;p&gt;A directed acyclic graph (DAG) is a finite graph &lt;span class="math"&gt;\(G = (V, E)\)&lt;/span&gt; with vertices &lt;span class="math"&gt;\(V\)&lt;/span&gt;
and edges &lt;span class="math"&gt;\(E \subseteq V \times V\)&lt;/span&gt; where no cycle can be found. A cycle is a
set of edges &lt;span class="math"&gt;\(e_1, \dots, e_n\)&lt;/span&gt; such that &lt;span class="math"&gt;\(e_i = (v_i, v_{i+1})\)&lt;/span&gt; with &lt;span class="math"&gt;\(e_n =
(v_n, v_1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="iteration"&gt;Iteration&lt;/h3&gt;
&lt;p&gt;Now, what does it mean to iterate over the graphs?&lt;/p&gt;
&lt;p&gt;One can iterate over all natural numbers like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resulting in the sequence &lt;span class="math"&gt;\(1, 2, 3, \dots\)&lt;/span&gt; which is guaranteed to reach any
natural number &lt;span class="math"&gt;\(k \in \mathbb{N}\)&lt;/span&gt; at some point.&lt;/p&gt;
&lt;p&gt;Similar, one can iterate over &lt;span class="math"&gt;\(\mathbb{Q}_0^+\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this is the pattern in which the numbers are generated:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Iterate over Q+" src="../images/2016/10/iterate-q.png"/&gt;
&lt;figcaption class="text-center"&gt;Iterate over $\mathbb{Q}_0^+$&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="graph-iteration_1"&gt;Graph iteration&lt;/h2&gt;
&lt;p&gt;There are finitely many directed graphs &lt;span class="math"&gt;\(G = (V, E)\)&lt;/span&gt; with &lt;span class="math"&gt;\(E \subseteq V \times V\)&lt;/span&gt; with &lt;span class="math"&gt;\(n = |V|\)&lt;/span&gt; nodes. So if one wanted to iterate over all of them, one could iterate over all graphs with &lt;span class="math"&gt;\(n=1\)&lt;/span&gt; node (only one graph), then over all graphs with two nodes, ...&lt;/p&gt;
&lt;p&gt;At this point, it should be obvious that it is possible. However, how can we
iterate over the structures without unnecessary duplication? How can we take
into account that we also need connected graphs with a fixed size for the
first layer and a fixed size for the last layer?&lt;/p&gt;
&lt;p&gt;Similar to the iteration over &lt;span class="math"&gt;\(\mathbb{Q}_0^+\)&lt;/span&gt;, you first generate all MLPs
with exactly one neuron. Then all MLPs with exactly two neurons, ...&lt;/p&gt;
&lt;p&gt;To generate all MLPs with exactly &lt;span class="math"&gt;\(n\)&lt;/span&gt; neurons in &lt;span class="math"&gt;\(k\)&lt;/span&gt; layers, you first generate
all MLPs with &lt;span class="math"&gt;\(n-i\)&lt;/span&gt; neurons in &lt;span class="math"&gt;\(k-1\)&lt;/span&gt; layers and add &lt;span class="math"&gt;\(i\)&lt;/span&gt; neurons to the &lt;span class="math"&gt;\(k\)&lt;/span&gt;-th
layer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;"""Iterate over all MLPs."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_vecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Generate all integer vectors of length k which sums up to n."""&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"n=&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt; AND k=&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_vecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_all_mlps_size_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Generate all ways to have hidden layers with exactly n nodes.&lt;/span&gt;

&lt;span class="sd"&gt;    Make it by the number of hidden layers. First one hidden layer, then two,&lt;/span&gt;
&lt;span class="sd"&gt;    ... until n hidden layers with each exactly one neuron.&lt;/span&gt;

&lt;span class="sd"&gt;    There are 2^{n-1} of those.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;vec_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_vecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vec_generator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_all_mlps&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Generate all MLPs."""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;neurons&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_all_mlps_size_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neurons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;

&lt;span class="c1"&gt;# Just for fun, generate the first 100 graphs:&lt;/span&gt;
&lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_all_mlps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Machine Learning"></category></entry><entry><title>Diverging Gradient Descent</title><link href="https://martin-thoma.com/diverging-gradient-descent/" rel="alternate"></link><published>2016-07-21T16:00:00+02:00</published><updated>2016-07-21T16:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-07-21:/diverging-gradient-descent/</id><summary type="html">&lt;p&gt;When you take the function&lt;/p&gt;
&lt;div class="math"&gt;$$f(x, y) = 3x^2 + 3y^2 + 2xy$$&lt;/div&gt;
&lt;p&gt;and start gradient descent at &lt;span class="math"&gt;\(x_0 = (6, 6)\)&lt;/span&gt; with learning rate &lt;span class="math"&gt;\(\eta = \frac{1}{2}\)&lt;/span&gt;
it diverges.&lt;/p&gt;
&lt;h2 id="gradient-descent"&gt;Gradient descent&lt;/h2&gt;
&lt;p&gt;Gradient descent is an optimization rule which starts at a point &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; and
then applies the update rule â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you take the function&lt;/p&gt;
&lt;div class="math"&gt;$$f(x, y) = 3x^2 + 3y^2 + 2xy$$&lt;/div&gt;
&lt;p&gt;and start gradient descent at &lt;span class="math"&gt;\(x_0 = (6, 6)\)&lt;/span&gt; with learning rate &lt;span class="math"&gt;\(\eta = \frac{1}{2}\)&lt;/span&gt;
it diverges.&lt;/p&gt;
&lt;h2 id="gradient-descent"&gt;Gradient descent&lt;/h2&gt;
&lt;p&gt;Gradient descent is an optimization rule which starts at a point &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; and
then applies the update rule&lt;/p&gt;
&lt;div class="math"&gt;$$x_{k+1} = x_k + \eta d_k(x_k)$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\eta\)&lt;/span&gt; is the step length (learning rate) and &lt;span class="math"&gt;\(d_k\)&lt;/span&gt; is the direction.&lt;/p&gt;
&lt;p&gt;The direction is&lt;/p&gt;
&lt;div class="math"&gt;$$d_k(x_k) = - \nabla f(x_k)$$&lt;/div&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;div class="math"&gt;$$\nabla f(x, y) = \begin{pmatrix}6x + 2y\\6y + 2x\end{pmatrix}$$&lt;/div&gt;
&lt;div class="math"&gt;\begin{align}
x_0 &amp;amp;= (6, 6)       &amp;amp; d_k(6, 6)       &amp;amp;= (-24, -24)\\
x_1 &amp;amp;= (-18, -18)   &amp;amp; d_k(-18, -18)   &amp;amp;= (72, 72\\
x_2 &amp;amp;= (54, 54)     &amp;amp; d_k(54, 54)     &amp;amp;= (-216, -216)\\
x_3 &amp;amp;= (-162, -162) &amp;amp; d_k(-162, -162) &amp;amp;= (648, 648)
\end{align}&lt;/div&gt;
&lt;p&gt;In general:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
x_n &amp;amp;= (x_{n-1} - 8 \cdot \frac{1}{2} \cdot x_{n-1}, x_{n-1} - 8 \cdot \frac{1}{2} \cdot x_{n-1})\\
x_n &amp;amp;= (-3x_{n-1}, -3x_{n-1})
\end{align}&lt;/div&gt;
&lt;p&gt;You can clearly see that any learning rate &lt;span class="math"&gt;\(\eta &amp;gt; \frac{1}{8}\)&lt;/span&gt; will diverge.
For this example, the learning rate &lt;span class="math"&gt;\(\eta = \frac{1}{8}\)&lt;/span&gt; would find the
solution in one step and any &lt;span class="math"&gt;\(\eta &amp;lt; \frac{1}{8}\)&lt;/span&gt; will converge to the global
optimum.&lt;/p&gt;</content><category term="Gradient Descent"></category><category term="Optimization"></category></entry><entry><title>XOR tutorial with TensorFlow</title><link href="https://martin-thoma.com/tf-xor-tutorial/" rel="alternate"></link><published>2016-07-19T14:00:00+02:00</published><updated>2016-07-19T14:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-07-19:/tf-xor-tutorial/</id><summary type="html">&lt;p&gt;The XOR-Problem is a classification problem, where you only have four data
points with two features. The training set and the test set are exactly
the same in this problem. So the interesting question is only if the model is
able to find a decision boundary which classifies all four â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The XOR-Problem is a classification problem, where you only have four data
points with two features. The training set and the test set are exactly
the same in this problem. So the interesting question is only if the model is
able to find a decision boundary which classifies all four points correctly.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="The XOR classification problem. 4 datapoints and two classes. All datapoints have 2 features." src="../images/2016/07/xor-problem.png"/&gt;
&lt;figcaption class="text-center"&gt;The XOR classification problem. 4 datapoints and two classes. All datapoints have 2 features.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="neural-network-basics"&gt;Neural Network basics&lt;/h2&gt;
&lt;p&gt;I think of neural networks as a construction kit for functions. The basic building block - called a "neuron" - is usually visualized like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.stack.imgur.com/YD9IS.png"&gt;&lt;img alt="enter image description here" src="http://i.stack.imgur.com/YD9IS.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It gets a variable number of inputx &lt;span class="math"&gt;\(x_0, x_1, \dots, x_n\)&lt;/span&gt;, they get multiplied with weights &lt;span class="math"&gt;\(w_0, w_1, \dots, w_n\)&lt;/span&gt;, summed and a function &lt;span class="math"&gt;\(\varphi\)&lt;/span&gt; is applied to it. The weights is what you want to "fine tune" to make it actually work. When you have more of those neurons, you visualize it like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.stack.imgur.com/awAz8.png"&gt;&lt;img alt="enter image description here" src="http://i.stack.imgur.com/awAz8.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this example, it is only one output and 5 inputs, but it could be any number. The number of inputs and outputs is usually defined by your problem, the intermediate is to allow it to fit more exact to what you need (which comes with some other implications).&lt;/p&gt;
&lt;p&gt;Now you have some structure of the function set, you need to find weights which work. This is where backpropagation&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt; comes into play. The idea is the following: You took functions (&lt;span class="math"&gt;\(\varphi\)&lt;/span&gt;) which were differentiable and combined them in a way which makes sure the complete function is differentiable. Then you apply an error function (e.g. the euclidean distance of the output to the desired output, Cross-Entropy) which is also differentiable. Meaning you have a completely differentiable function. Now you see the weights as variables and the data as given parameters of a HUGE function. You can differentiate (calculate the gradient) and go from your random weights "a step" in the direction where the error gets lower. This adjusts your weights. Then you repeat this steepest descent step and hopefully end up some time with a good function.&lt;/p&gt;
&lt;p&gt;For two weights, this awesome image by Alec Radford visualizes how different algorithms based on gradient descent find a minimum (&lt;a href="http://imgur.com/a/Hqolp"&gt;Source&lt;/a&gt; with even more of those):&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.stack.imgur.com/ocZHU.gif"&gt;&lt;img alt="enter image description here" src="http://i.stack.imgur.com/ocZHU.gif"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So think of back propagation as a shortsighted hiker trying to find the lowest point on the error surface: He only sees what is directly in front of him. As he makes progress, he adjusts the direction in which he goes.&lt;/p&gt;
&lt;h2 id="targets-and-error-function"&gt;Targets and Error function&lt;/h2&gt;
&lt;p&gt;First of all, you should think about how your targets look like. For
classification problems, one usually takes as many output neurons as one has
classes. Then the softmax function is applied.&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; The softmax function makes sure that the output of every single neuron is in &lt;span class="math"&gt;\([0, 1]\)&lt;/span&gt; and the sum of all outputs is exactly &lt;span class="math"&gt;\(1\)&lt;/span&gt;. This means the output can be interpreted as a probability distribution over all classes.&lt;/p&gt;
&lt;p&gt;Now you have to adjust your targets. It is likely that you only have a list of labels, where the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th element in the list is the label for the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th element in your feature list &lt;span class="math"&gt;\(X\)&lt;/span&gt; (or the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th row in your feature matrix &lt;span class="math"&gt;\(X\)&lt;/span&gt;). But the tools need a target value which fits to the error function. The usual error function for classification problems is cross entropy (CE). When you have a list of &lt;span class="math"&gt;\(n\)&lt;/span&gt; features &lt;span class="math"&gt;\(x\)&lt;/span&gt;, the target &lt;span class="math"&gt;\(t\)&lt;/span&gt; and a classifier &lt;span class="math"&gt;\(clf\)&lt;/span&gt;, then you calculate the cross entropy loss for this single sample by:&lt;/p&gt;
&lt;div class="math"&gt;$$CE(x, t) = - \sum_{i=1}^n \left (t^{(i)} \log \left ({clf(x)}^{(i)} \right ) \right)$$&lt;/div&gt;
&lt;p&gt;Now we need a target value for each single neuron for every sample &lt;span class="math"&gt;\(x\)&lt;/span&gt;. We get those by so called &lt;em&gt;one hot encoding&lt;/em&gt;: The &lt;span class="math"&gt;\(k\)&lt;/span&gt; classes all have their own neuron. If a sample &lt;span class="math"&gt;\(x\)&lt;/span&gt; is of class &lt;span class="math"&gt;\(i\)&lt;/span&gt;, then the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th neuron should give &lt;span class="math"&gt;\(1\)&lt;/span&gt; and all others should give &lt;span class="math"&gt;\(0\)&lt;/span&gt;.&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sklearn&lt;/code&gt; provides a very useful &lt;code&gt;OneHotEncoder&lt;/code&gt; class. You first have to fit
it on your labels (e.g. just give it all of them). In the next step you can
transform a list of labels to an array of one-hot encoded targets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Mini-demo how the one hot encoder works."""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OneHotEncoder&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# The most intuitive way to label a dataset "X"&lt;/span&gt;
&lt;span class="c1"&gt;# (list of features, where X[i] are the features for a datapoint i)&lt;/span&gt;
&lt;span class="c1"&gt;# is to have a flat list "labels" where labels[i] is the label for datapoint i.&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# The OneHotEncoder transforms those labels to something our models can&lt;/span&gt;
&lt;span class="c1"&gt;# work with&lt;/span&gt;
&lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OneHotEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trans_for_ohe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Transform a flat list of labels to what one hot encoder needs."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;labels_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trans_for_ohe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# The encoder has to know how many classes there are and what their names are.&lt;/span&gt;
&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels_r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Now you can transform&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trans_for_ohe&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="install-tensorflow"&gt;Install Tensorflow&lt;/h2&gt;
&lt;p&gt;The documentation about the installation makes a VERY good impression. Better
than anything I can write in a few minutes, so ... &lt;a href="http://tensorflow.org/get_started/os_setup.md"&gt;RTFM&lt;/a&gt;
 ðŸ˜œ&lt;/p&gt;
&lt;p&gt;For Linux systems with CUDA and without root privileges, you can install it
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.5.0-cp27-none-linux_x86_64.whl --user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But remember you have to set the environment variable &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; and
&lt;code&gt;CUDA_HOME&lt;/code&gt;. For many configurations, adding the following lines to your
&lt;code&gt;.bashrc&lt;/code&gt; will work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="s2"&gt;:/usr/local/cuda/lib64"&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CUDA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/cuda
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I currently (19.07.2016) to use Tensorflow rc0.7 (&lt;a href="https://www.tensorflow.org/versions/r0.7/get_started/os_setup.html"&gt;installation instructions&lt;/a&gt;) with CUDA 7.5 (&lt;a href="http://askubuntu.com/a/799185/10425"&gt;installation instructions&lt;/a&gt;). I had a couple
of problems with other versions (e.g. &lt;a href="https://github.com/tensorflow/tensorflow/issues/3342"&gt;#3342&lt;/a&gt;, &lt;a href="https://github.com/tensorflow/tensorflow/issues/2810"&gt;#2810&lt;/a&gt;, &lt;a href="https://github.com/tensorflow/tensorflow/issues/2034"&gt;#2034&lt;/a&gt;, but that might only have been bad luck. Who knows.).&lt;/p&gt;
&lt;h2 id="tensorflow-basics"&gt;Tensorflow basics&lt;/h2&gt;
&lt;p&gt;Tensorflow helps you to define the neural network in a symbolic way. This means you do not explicitly tell the computer what to compute to inference with the neural network, but you tell it how the data flow works. This symbolic representation of the computation can then be used to automatically caluclate the derivates. This is awesome! So you don't have to make this your own. But keep it in mind that it is only symbolic as this makes a few things more complicated and different from what you might be used to.&lt;/p&gt;
&lt;p&gt;Tensorflow has &lt;em&gt;placeholders&lt;/em&gt; and &lt;em&gt;variables&lt;/em&gt;. Placeholders are the things in which
you later put your input. This is your features and your targets, but might be
also include more. Variables are the things the optimizer calculates.&lt;/p&gt;
&lt;p&gt;Now you should be able to understand the following code which solves the XOR
problem. It defines a neural network with two input neurons, 2&amp;nbsp;neurons in
a first hidden layer and 2&amp;nbsp;output neurons. All neurons have biases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Solve the XOR problem with Tensorflow.&lt;/span&gt;

&lt;span class="sd"&gt;The XOR problem is a two-class classification problem. You only have four&lt;/span&gt;
&lt;span class="sd"&gt;datapoints, all of which are given during training time. Each datapoint has&lt;/span&gt;
&lt;span class="sd"&gt;two features:&lt;/span&gt;

&lt;span class="sd"&gt;      x    o&lt;/span&gt;

&lt;span class="sd"&gt;      o    x&lt;/span&gt;

&lt;span class="sd"&gt;As you can see, the classifier has to learn a non-linear transformation of&lt;/span&gt;
&lt;span class="sd"&gt;the features to find a propper decision boundary.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Martin Thoma"&lt;/span&gt;
&lt;span class="n"&gt;__email__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"info@martin-thoma.de"&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tf&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OneHotEncoder&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trans_for_ohe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Transform a flat list of labels to what one hot encoder needs."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analyze_classifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XOR_T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Visualize the classification."""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Epoch &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hypothesis &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XOR_T&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'w1=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b1=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'w2=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b2=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cost (ce)=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cross_entropy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                               &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XOR_T&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="c1"&gt;# Visualize classification boundary&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pred_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pred_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]]})&lt;/span&gt;
            &lt;span class="n"&gt;pred_classes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;xs_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;xs_n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pred_classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;xs_n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ys_n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;xs_p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ys_p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs_n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c1"&gt;# The training data&lt;/span&gt;
&lt;span class="n"&gt;XOR_X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;  &lt;span class="c1"&gt;# Features&lt;/span&gt;
&lt;span class="n"&gt;XOR_Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Class labels&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XOR_Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# sanity check&lt;/span&gt;

&lt;span class="c1"&gt;# Transform labels to targets&lt;/span&gt;
&lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OneHotEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trans_for_ohe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XOR_Y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;XOR_T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trans_for_ohe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XOR_Y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# The network&lt;/span&gt;
&lt;span class="n"&gt;nb_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;input_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])],&lt;/span&gt;
                        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"output"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nb_hidden_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# enc = tf.one_hot([0, 1], 2)&lt;/span&gt;
&lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_uniform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_hidden_nodes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Weights1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;w2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_uniform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;nb_hidden_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Weights2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;nb_hidden_nodes&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Biases1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Biases2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;activation2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hypothesis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activation2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cross_entropy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;train_step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cross_entropy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Start training&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_all_variables&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20001&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XOR_T&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;analyze_classifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XOR_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XOR_T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Epoch 0
Hypothesis [[ 0.48712057  0.51287943]
 [ 0.3380821   0.66191792]
 [ 0.65063184  0.34936813]
 [ 0.50317246  0.4968276 ]]
w1=[[-0.79593647  0.93947881]
 [ 0.68854761 -0.89423609]]
b1=[-0.00733338  0.00893857]
w2=[[-0.79084051  0.93289936]
 [ 0.69278169 -0.8986907 ]]
b2=[ 0.00394399 -0.00394398]
cost (ce)=2.87031

Epoch 10000
Hypothesis [[ 0.99773693  0.00226305]
 [ 0.00290442  0.99709558]
 [ 0.00295531  0.99704474]
 [ 0.99804318  0.00195681]]
w1=[[-6.62694693  7.5230279 ]
 [ 6.91208076 -7.39292192]]
b1=[ 3.32245016  3.76204181]
w2=[[ 6.63465023 -6.49259233]
 [ 6.40471792 -6.61061859]]
b2=[-9.65064621  9.65065193]
cost (ce)=0.0100926

Epoch 20000
Hypothesis [[  9.98954773e-01   1.04520109e-03]
 [  1.35455502e-03   9.98645484e-01]
 [  1.37042452e-03   9.98629570e-01]
 [  9.99092221e-01   9.07782756e-04]]
w1=[[-7.04857063  7.84673214]
 [ 7.33061123 -7.68837786]]
b1=[ 3.53246188  3.89587545]
w2=[[ 7.35948515 -7.21742725]
 [ 7.14059925 -7.34649038]]
b2=[-10.74944687  10.74944115]
cost (ce)=0.00468077
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The resulting decision boundary looks like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Decision boundary of the trained network." src="../images/2016/07/xor-classification.png"&gt;
&lt;figcaption class="text-center"&gt;Decision boundary of the trained network.&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;I recommend reading the &lt;a href="http://download.tensorflow.org/paper/whitepaper2015.pdf"&gt;Tensorflow Whitepaper&lt;/a&gt; if you want to understand Tensorflow better.&lt;/p&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Softmax is similar to the sigmoid function, but with normalization.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Actually, we don't want this. The probability of any class should never be exactly zero as this might cause problems later. It might get very very small, but should never be 0.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;Backpropagation is only a clever implementation of gradient descent. It belongs to the bigger class of iterative descent algorithms.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category><category term="Python"></category><category term="Tensorflow"></category><category term="sklearn"></category></entry><entry><title>Optimization Basics</title><link href="https://martin-thoma.com/optimization-basics/" rel="alternate"></link><published>2016-07-06T20:00:00+02:00</published><updated>2016-07-06T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-07-06:/optimization-basics/</id><summary type="html">&lt;p&gt;Optimization is a subfield of mathematics / computer science which deals with finding the best solution. Typically, problems in optimization are stated like this:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
&amp;amp;\underset{x}{\operatorname{minimize}}&amp;amp; &amp;amp; f(x) \\
&amp;amp;\operatorname{subject\;to}
&amp;amp; &amp;amp;g_i(x) \leq 0, \quad i = 1,\dots,m \\
&amp;amp;&amp;amp;&amp;amp;h_i(x) = 0, \quad i = 1, \dots â€¦&lt;/div&gt;</summary><content type="html">&lt;p&gt;Optimization is a subfield of mathematics / computer science which deals with finding the best solution. Typically, problems in optimization are stated like this:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
&amp;amp;\underset{x}{\operatorname{minimize}}&amp;amp; &amp;amp; f(x) \\
&amp;amp;\operatorname{subject\;to}
&amp;amp; &amp;amp;g_i(x) \leq 0, \quad i = 1,\dots,m \\
&amp;amp;&amp;amp;&amp;amp;h_i(x) = 0, \quad i = 1, \dots,p
\end{align}
$$&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(f(x): \mathbb{R}^n \to \mathbb{R}\)&lt;/span&gt; is the &lt;strong&gt;loss function (objective function)&lt;/strong&gt; to be minimized over the variable &lt;span class="math"&gt;\(x\)&lt;/span&gt;,&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(g_i(x) \leq 0\)&lt;/span&gt; are called &lt;strong&gt;inequality constraints&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(h_i(x) = 0\)&lt;/span&gt; are called &lt;strong&gt;equality constraints&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By convention, the standard form defines a &lt;strong&gt;minimization problem&lt;/strong&gt;. A
&lt;strong&gt;maximization problem&lt;/strong&gt; can be treated by negating the objective function.&lt;/p&gt;
&lt;p&gt;(That was copied from &lt;a href="https://en.wikipedia.org/w/index.php?title=Optimization_problem&amp;amp;oldid=715562612#Continuous_optimization_problem"&gt;en.wikipedia.org/w/Optimization_problem&lt;/a&gt; and only slightly edited.)&lt;/p&gt;
&lt;p&gt;I'm now going to explain some very basic techniques which are used for finding good solutions to optimization problems. Please note that there are also discrete optimization problems where you have to finde a solution &lt;span class="math"&gt;\(x \in \mathbb{N}^n\)&lt;/span&gt;. I will only focus on continuous optimization problems.&lt;/p&gt;
&lt;h2 id="simulated-annealing"&gt;Simulated Annealing&lt;/h2&gt;
&lt;p&gt;Simulated Annealing is a heuristical optimization algorithm. It starts at a
random point &lt;span class="math"&gt;\(x \in \mathbb{R}^n\)&lt;/span&gt;. Then it takes a random point &lt;span class="math"&gt;\(y\)&lt;/span&gt; of the
environment of &lt;span class="math"&gt;\(x\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$y \in U(x)$$&lt;/div&gt;
&lt;p&gt;If &lt;span class="math"&gt;\(f(y) \leq f(x)\)&lt;/span&gt;, then the current position &lt;span class="math"&gt;\(x\)&lt;/span&gt; is overwritten with &lt;span class="math"&gt;\(y\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$x \leftarrow y$$&lt;/div&gt;
&lt;p&gt;Otherwise, it might be overwritten with probability &lt;span class="math"&gt;\(\exp \left (-\frac{f(y)-f(x)}{T(t)} \right )\)&lt;/span&gt; where &lt;span class="math"&gt;\(T: \mathbb{N}_0 \rightarrow \mathbb{R}_{&amp;gt; 0}\)&lt;/span&gt; is called the temperature at time &lt;span class="math"&gt;\(t\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So the optimization algorithm is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take a random point $x \in \mathbb{R}^n$&lt;/li&gt;
&lt;li&gt;Take a random point $y \in U(x)$&lt;/li&gt;
&lt;li&gt;$$x \leftarrow \begin{cases}y &amp;amp;\text{if } f(y) \leq f(x)\\
                          y &amp;amp;\text{if } \operatorname{rand}(0,1) &amp;lt; \exp \left (-\frac{f(y)-f(x)}{T(t)} \right )\\
                          x &amp;amp;\text{otherwise}\end{cases}$$&lt;/li&gt;
&lt;li&gt;Go to step 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also my &lt;a href="https://martin-thoma.com/neuronale-netze-vorlesung/#simulated-annealing"&gt;German description&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="gradient-descent"&gt;Gradient descent&lt;/h2&gt;
&lt;p&gt;The gradient descent algorithm can easily be applied when the optimization problem has no constraints and the objective function &lt;span class="math"&gt;\(f\)&lt;/span&gt; is differentiable.
The idea is to just take a random starting point &lt;span class="math"&gt;\(x \in \mathbb{R}^n\)&lt;/span&gt; and
iteratively improve it. There are many algorithms which follow this approach (Simulated annealing, L-BFGS, Newton's method, Quasi-Newtonian, Conjugate Gradient, ...).&lt;/p&gt;
&lt;p&gt;Instead of randomly going in other directions, the
gradient &lt;span class="math"&gt;\(\nabla f\)&lt;/span&gt; is calculated at the position &lt;span class="math"&gt;\(x\)&lt;/span&gt;. The gradient points
in the direction of maximum increase, so we go in the opposite direction:&lt;/p&gt;
&lt;div class="math"&gt;$$x_{\text{new}} = x - \nabla f(x)$$&lt;/div&gt;
&lt;p&gt;The problem with this approach is that the surface of the objective function
might first go down in the direction of &lt;span class="math"&gt;\(\nabla f(x)\)&lt;/span&gt;, but if you go a bit
further it can go up by a lot. So we want to make very small steps. To achive
this, we multiply the gradient with a factor &lt;span class="math"&gt;\(\eta \in (0, 1]\)&lt;/span&gt;. In machine
learining, this &lt;span class="math"&gt;\(\eta\)&lt;/span&gt; is called the &lt;em&gt;learning rate&lt;/em&gt; and typically one
chooses &lt;span class="math"&gt;\(\eta = 0.01\)&lt;/span&gt;. However, there are &lt;a href="https://martin-thoma.com/neuronale-netze-vorlesung/#learning-rate-scheduling"&gt;learning rate scheduling algorithms&lt;/a&gt; which adapt this parameter during training.&lt;/p&gt;
&lt;p&gt;The update rule is:&lt;/p&gt;
&lt;div class="math"&gt;$$x_{\text{new}} = x - \eta \nabla f(x)$$&lt;/div&gt;
&lt;h3 id="iterative-descent"&gt;Iterative Descent&lt;/h3&gt;
&lt;p&gt;A more general formulation of the Gradient descent algorithm is called
iterative descent. The idea is to start at some arbitrary &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; and iteratively
update the current guess of the minimum to&lt;/p&gt;
&lt;div class="math"&gt;$$x_{k+1} = x_k + \eta \cdot d_k$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\eta \in (0, 1]\)&lt;/span&gt; is the step length (learning rate) and&lt;/p&gt;
&lt;div class="math"&gt;$$d_k = -D_k \nabla f(x_k)$$&lt;/div&gt;
&lt;p&gt;is the direction of the descent. The direction depends on the Gradient
&lt;span class="math"&gt;\(\nabla f(x_k)\)&lt;/span&gt;, but also on a matrix &lt;span class="math"&gt;\(D_k\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$D_k = I$: Gradient descent&lt;/li&gt;
&lt;li&gt;$D_k = H_f^{-1}(x_k)$: Newtons method, where $H_f$ is the &lt;a href="https://en.wikipedia.org/wiki/Hessian_matrix"&gt;Hessian matrix&lt;/a&gt; of $f$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linear-regression-with-mse_1"&gt;Linear Regression with MSE&lt;/h2&gt;
&lt;p&gt;In linear regression one is given a list of &lt;span class="math"&gt;\(n\)&lt;/span&gt; points &lt;span class="math"&gt;\((x, y)\)&lt;/span&gt; with &lt;span class="math"&gt;\(x \in \mathbb{R}^m\)&lt;/span&gt; and &lt;span class="math"&gt;\(y \in \mathbb{R}\)&lt;/span&gt;. The task is to find a matrix &lt;span class="math"&gt;\(A \in \mathbb{1 \times m}\)&lt;/span&gt; such that the predicted value &lt;span class="math"&gt;\(\hat{y}\)&lt;/span&gt; of the linear model&lt;/p&gt;
&lt;div class="math"&gt;$$\hat{y}(x) = A \cdot x$$&lt;/div&gt;
&lt;p&gt;minimizes the term&lt;/p&gt;
&lt;div class="math"&gt;$$\text{MSE} = \sum_{i=1}^n (y_i - \hat{y}(x_i))^2$$&lt;/div&gt;
&lt;p&gt;For convenience, one can write the list of points as a matrix &lt;span class="math"&gt;\(\mathbf{X} \in \mathbb{R}^{n \times m}\)&lt;/span&gt; and
a vector &lt;span class="math"&gt;\(\mathbf{y} \in \mathbb{R}^n\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$\text{MSE} = \|\mathbf{y} - \mathbf{X} A^T\|_2$$&lt;/div&gt;
&lt;p&gt;with the Euclidean norm&lt;/p&gt;
&lt;div class="math"&gt;$$\| v \|_2 := \sqrt{ ( v_1 )^2 + ( v_2 )^2 + \dotsb + ( v_n )^2 } = \left( \sum_{i=1}^n ( v_i )^2 \right)^{1/2}$$&lt;/div&gt;
&lt;p&gt;Every part of the sum is non-negative, so exponentiating the Euclidean norm
with a positive factor will not change the result of the minimization:&lt;/p&gt;
&lt;div class="math"&gt;$$\operatorname{minimize}_{A} \|\mathbf{y} - \mathbf{X} A^T\|_2^2$$&lt;/div&gt;
&lt;p&gt;Now we can see that this is every element of the vector squared. So we can
get rid of the norm and then use distributivity:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
\operatorname{minimize}_{A}&amp;amp;(\mathbf{y} - \mathbf{X} A^T)^T \cdot (\mathbf{y} - \mathbf{X} A^T)\\
\Leftrightarrow \operatorname{minimize}_{A}&amp;amp;(\mathbf{y}^T - A \mathbf{X}^T) \cdot (\mathbf{y} - \mathbf{X} A^T)\\
\Leftrightarrow \operatorname{minimize}_{A}&amp;amp;\mathbf{y}^T \mathbf{y} - A \mathbf{X}^T \mathbf{y} - \mathbf{y}^T \mathbf{X} A^T + A\mathbf{X}^T \mathbf{X} A^T\\
\end{align}
$$&lt;/div&gt;
&lt;p&gt;You need to know that&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
A \mathbf{X}^T \mathbf{y} &amp;amp;= ((A \mathbf{X}^T \mathbf{y})^T)^T\\
&amp;amp;= (\mathbf{y}^T \mathbf{X} A^T)^T\\
&amp;amp;= \mathbf{y}^T \mathbf{X} A^T\\
\end{align}
$$&lt;/div&gt;
&lt;p&gt;You can get rid of the last transposing operation, because
&lt;/p&gt;
&lt;div class="math"&gt;$$(\mathbf{y}^T \mathbf{X} A^T) \in \mathbb{R}^{1 \times 1}$$&lt;/div&gt;
&lt;p&gt;This simplifies the optimization problem to&lt;/p&gt;
&lt;div class="math"&gt;$$\operatorname{minimize}_{A}\underbrace{\mathbf{y}^T \mathbf{y} - 2 A \mathbf{X}^T \mathbf{y} + A\mathbf{X}^T \mathbf{X} A^T}_{E_{X, y}(A)}$$&lt;/div&gt;
&lt;p&gt;Now you can calculate the gradient of this term with respect to &lt;span class="math"&gt;\(A\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$\nabla E_{X, y}(A) = 2 X^T X A^T - X^T y - X^T y = 2 X^T (X A^T - y)$$&lt;/div&gt;
&lt;p&gt;A necessary condition of a minimum is the gradient to be 0:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
\nabla E_{X, y}(A) &amp;amp;\overset{!}{=} 0\\
\Leftrightarrow 0 &amp;amp;\overset{!}{=} 2 X^T (X A^T - y)\\
\Leftrightarrow 0 &amp;amp;\overset{!}{=} X^T X A^T - X^T y\\
\Leftrightarrow A &amp;amp;\overset{!}{=} ((X^T X)^{-1} X^T y)^T\\
\end{align}
$$&lt;/div&gt;
&lt;p&gt;As &lt;span class="math"&gt;\(H_{E_{X, y}} = \nabla^2 E_{X, y}(A) = 2 X^T X\)&lt;/span&gt; is positive definite, this is a minimum. Hence, the optimal solution to this problem is:&lt;/p&gt;
&lt;div class="math"&gt;$$A = ((X^T X)^{-1} X^T y)^T$$&lt;/div&gt;
&lt;h2 id="lagrange-multipliers"&gt;Lagrange multipliers&lt;/h2&gt;
&lt;p&gt;Lagrange multipliers are a trick in optimization problems with constraints.
They can be used to get rid of the constraints.&lt;/p&gt;
&lt;p&gt;The Lagrange function has the form&lt;/p&gt;
&lt;div class="math"&gt;$$\mathcal{L} (x, \lambda_1, \dots, \lambda_n) = f(x) + \sum_{j=1}^n \lambda_j h_j(x)$$&lt;/div&gt;
&lt;p&gt;
with the &lt;em&gt;Lagrange multipliers&lt;/em&gt; &lt;span class="math"&gt;\(\lambda_j \in \mathbb{R}\)&lt;/span&gt; and &lt;span class="math"&gt;\(h_j\)&lt;/span&gt; are equality constraints.&lt;br/&gt;
&lt;br/&gt;
Necessary conditions for a minimum &lt;span class="math"&gt;\(x^*\)&lt;/span&gt; is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\nabla_x \mathcal{L} = \nabla_x f(x^*) + \sum_{j=1}^n \lambda_j \nabla_x h_j(x^*) \overset{!}{=} 0$&lt;/li&gt;
&lt;li&gt;$\frac{\partial}{\partial \lambda_j} \mathcal{L} = h_j(x^*) \overset{!}{=} 0, \quad j=1, \dots, $&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See [&lt;a href="#ref-smi04" name="ref-smi04-anchor"&gt;Smi04&lt;/a&gt;] for many examples.&lt;/p&gt;
&lt;h2 id="optimization-problem-characteristics"&gt;Optimization Problem characteristics&lt;/h2&gt;
&lt;p&gt;There are some properties of optimization problems which make it easier / harder
to solve:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Easy&lt;/th&gt;
&lt;th&gt;Hard&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Objective&lt;/td&gt;
&lt;td&gt;linear&lt;/td&gt;
&lt;td&gt;non-linear&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Optimization Variable&lt;/td&gt;
&lt;td&gt;small discrete, continuous&lt;/td&gt;
&lt;td&gt;large discrete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Constraints&lt;/td&gt;
&lt;td&gt;No Constraints&lt;/td&gt;
&lt;td&gt;Constraints&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reddit: &lt;a href="https://www.reddit.com/r/MachineLearning/comments/4582s0/overview_of_optimization_algorithms/"&gt;Overview of Optimization Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="#ref-smi04-anchor" name="ref-smi04"&gt;Smi04&lt;/a&gt;] B. T. Smith, &amp;ldquo;Lagrange multipliers tutorial in the context of support
  vector machines,&amp;rdquo; Memorial University of Newfoundland St. John&amp;rsquo;s,
  Newfoundland, Canada, Jun. 2004.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="optimization"></category><category term="gradient descent"></category></entry><entry><title>Linear Classification</title><link href="https://martin-thoma.com/linear-classification/" rel="alternate"></link><published>2016-06-22T20:00:00+02:00</published><updated>2016-06-22T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-06-22:/linear-classification/</id><summary type="html">&lt;p&gt;In classification problems you have data points &lt;span class="math"&gt;\(x \in \mathbb{R}^m\)&lt;/span&gt; which you want to classify into one of &lt;span class="math"&gt;\(k \in \mathbb{N}_{\geq 2}\)&lt;/span&gt; classes. This is a supervised task. This means you have &lt;span class="math"&gt;\(n\)&lt;/span&gt; data points for training in a matrix &lt;span class="math"&gt;\(X \in \mathbb{R}^{n â€¦&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In classification problems you have data points &lt;span class="math"&gt;\(x \in \mathbb{R}^m\)&lt;/span&gt; which you want to classify into one of &lt;span class="math"&gt;\(k \in \mathbb{N}_{\geq 2}\)&lt;/span&gt; classes. This is a supervised task. This means you have &lt;span class="math"&gt;\(n\)&lt;/span&gt; data points for training in a matrix &lt;span class="math"&gt;\(X \in \mathbb{R}^{n \times m}\)&lt;/span&gt; with their labels.&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Initially, the label might be something like "cat" or "dog". But the machine learning algorithms can't deal with those directly, so you need to encode the labels. The simplest way of encoding them is to use integers &lt;span class="math"&gt;\(0, 1, \dots, k - 1\)&lt;/span&gt;. However, in many cases it is handy to use a &lt;em&gt;one-hot encoding&lt;/em&gt;. This means you make a &lt;span class="math"&gt;\(k\)&lt;/span&gt;-dimensional vector for each label. &lt;span class="math"&gt;\((1, 0)\)&lt;/span&gt; might encode "dog" and &lt;span class="math"&gt;\((0, 1)\)&lt;/span&gt; might encode "cat". &lt;code&gt;sklearn&lt;/code&gt; supports this encoding in a convenient way
(&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html"&gt;docs&lt;/a&gt;). Another common encoding is &lt;span class="math"&gt;\(-1\)&lt;/span&gt; and &lt;span class="math"&gt;\(1\)&lt;/span&gt; for binary classification problems.&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;A linear model is one which applies only linear operations to the features. So basically the model may only be a matrix. Typically the elements of the matrix are called &lt;em&gt;weights&lt;/em&gt;, because they weight the importance of each feature.&lt;/p&gt;
&lt;p&gt;The objective of such a classifier&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt; is to find a matrix &lt;span class="math"&gt;\(W^*\)&lt;/span&gt; such that the MSE is as small as possible on the test set &lt;span class="math"&gt;\(D\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$W^* = \arg \min_{W} E_{MSE} (f_W, D)$$&lt;/div&gt;
&lt;h2 id="one-hot-encoding"&gt;One-hot encoding&lt;/h2&gt;
&lt;p&gt;If one-hot encoded labels are used,&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt; a linear classifier
&lt;/p&gt;
&lt;div class="math"&gt;$$f: \text{feature space} \rightarrow \text{class space}$$&lt;/div&gt;
&lt;p&gt;
usually works like this:
&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = {\arg \max}_{i \in 1, \dots, k} (W \cdot x)^{(i)}$$&lt;/div&gt;
&lt;p&gt;
with &lt;span class="math"&gt;\(W \in \mathbb{R}^{k \times m}\)&lt;/span&gt; and &lt;span class="math"&gt;\(^{(i)}\)&lt;/span&gt; denoting the &lt;span class="math"&gt;\(i\)&lt;/span&gt;-th element of the vector. Given a test set &lt;/p&gt;
&lt;div class="math"&gt;$$D = \{(x_i, y_i) \text{ with } i \in \{1, \dots, n_t\}, x_i \in \mathbb{R}^{m}, y_i \in \mathbb{R}_+^{k}\}$$&lt;/div&gt;
&lt;p&gt;
you can calculate the &lt;em&gt;mean squared error&lt;/em&gt; (MSE) of the classifier &lt;span class="math"&gt;\(f\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$E_{MSE}(f, D) = \frac{1}{n_t}\sum_{i=1}^{n_t} (t_i - W \cdot x_i)^T (t_i - W \cdot x_i)$$&lt;/div&gt;
&lt;p&gt;Please note that the MSE is always non-negative for every single data point.&lt;/p&gt;
&lt;h3 id="normalizing-the-output"&gt;Normalizing the output&lt;/h3&gt;
&lt;p&gt;The nice thing about the MSE is that it is simple. It can easily be calculated and is used in regression problems very often. What is not so nice is the fact that it punishes several good solutions, too. For example, say we have a data point &lt;span class="math"&gt;\(x_1\)&lt;/span&gt; which has the target &lt;span class="math"&gt;\((1, 0)^T\)&lt;/span&gt;. The classification output&lt;/p&gt;
&lt;div class="math"&gt;$$c_1 = \begin{pmatrix}101\\0\end{pmatrix}\quad E_{MSE}(f, x_1) = 100^2\tag{1.1}$$&lt;/div&gt;
&lt;p&gt;while the classification output of another point &lt;span class="math"&gt;\(x_2\)&lt;/span&gt; is&lt;/p&gt;
&lt;div class="math"&gt;$$c_2 = \begin{pmatrix}0\\0.1\end{pmatrix}\quad E_{MSE}(f, x_2) = 1 + 0.1^2\tag{1.2}$$&lt;/div&gt;
&lt;p&gt;This is problematic, as the actual classification in &lt;span class="math"&gt;\((1.1)\)&lt;/span&gt; is correct whereas the classification in &lt;span class="math"&gt;\((1.2)\)&lt;/span&gt; is wrong. However, this can easily be fixed by normalizing the result.&lt;/p&gt;
&lt;h4 id="simple-normalization"&gt;Simple Normalization&lt;/h4&gt;
&lt;p&gt;The simplest way to normalize the result of the classifier would be to divide each entry by the sum of all entries, e.g. for &lt;span class="math"&gt;\((1.1)\)&lt;/span&gt; we get&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
c_1' &amp;amp;= \begin{pmatrix}1\\0\end{pmatrix}\quad &amp;amp;E_{MSE}(f'', x_1) &amp;amp;= 0\tag{2.1}\\
c_2' &amp;amp;= \begin{pmatrix}0\\1\end{pmatrix}\quad &amp;amp;E_{MSE}(f', x_2) &amp;amp;= 1\tag{2.2}
\end{align}
$$&lt;/div&gt;
&lt;h4 id="standardization"&gt;Standardization&lt;/h4&gt;
&lt;p&gt;You might want to interpret the output of your classifier as a probability of the data point belonging to the different classes. Then you may not have negative values and you also want to avoid a probability of 0. A common normalization then is the &lt;em&gt;softmax function&lt;/em&gt; &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt;. It first exponentiates the single values and then normalizes:&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{align}
c_1'' &amp;amp;= \begin{pmatrix}\frac{e^{101}}{e^{101} + e^0}\\\frac{e^{0}}{e^{101} + e^0}\end{pmatrix} \approx \begin{pmatrix}1\\0\end{pmatrix}\quad &amp;amp;E_{MSE}(f'', x_1) &amp;amp;\approx 0\tag{3.1}\\
c_2'' &amp;amp;= \begin{pmatrix}\frac{e^{0}}{e^{0} + e^{0.1}}\\\frac{e^{0.1}}{e^{0} + e^{0.1}}\end{pmatrix} \approx \begin{pmatrix}0.475\\0.525\end{pmatrix}\quad &amp;amp;E_{MSE}(f'', x_2) &amp;amp;\approx 0.551\tag{3.2}
\end{align}$$&lt;/div&gt;
&lt;p&gt;Note that this is the same as a neural network with only an input layer and a softmax output layer.&lt;/p&gt;
&lt;p&gt;Now the optimization problem is:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
W^* &amp;amp;= \arg \min_{W \in \mathbb{R}^{k \times m}} E(f'', D)\\
  &amp;amp;= \arg \min_{W \in \mathbb{R}^{k \times m}} \frac{1}{n} \sum_{i=1}^n (t_i - \sigma(W x_i))(t_i - \sigma(W x_i))^T \\
  &amp;amp;= \arg \min_{W \in \mathbb{R}^{k \times m}} \sum_{i=1}^n (t_i - \sigma(W x_i))(t_i - \sigma(W x_i))^T \\
\end{align}
$$&lt;/div&gt;
&lt;p&gt;This is a differentiable function. This means to optimize we can calculate the gradient and apply gradient descent:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
&amp;amp;\frac{\partial}{\partial W} \sum_{i=1}^n (t_i - \sigma(W x_i))(t_i - \sigma(W x_i))^T\\
=&amp;amp; \sum_{i=1}^n \frac{\partial}{\partial W} (t_i - \sigma(W x_i))(t_i - \sigma(W x_i))^T\\
=&amp;amp; \sum_{i=1}^n \left (\frac{\partial}{\partial W} (t_i - \sigma(W x_i)) \right ) \left(t_i - \sigma(W x_i) \right)^T + (t_i - \sigma(W x_i)) \left (\frac{\partial}{\partial W} (t_i - \sigma(W x_i))\right )\\
=&amp;amp; \sum_{i=1}^n \left (\frac{\partial}{\partial W} \sigma(W x_i) \right ) \left(t_i - \sigma(W x_i) \right)^T + (t_i - \sigma(W x_i)) \left (\frac{\partial}{\partial W} \sigma(W x_i)\right )^T\\
\end{align}$$&lt;/div&gt;
&lt;p&gt;as you can see it gets quite ugly. I don't want to continue this calculation here.  But I hope you can see that this is possible. &lt;a href="http://stats.stackexchange.com/q/79454/25741"&gt;stats.stackexchange.com&lt;/a&gt; gives some hints on how to continue.&lt;/p&gt;
&lt;h3 id="decision-boundary"&gt;Decision boundary&lt;/h3&gt;
&lt;p&gt;The decision boundary for a two-class problem with 2-dimensional data vectors (and one bias) can be calculated as&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
&amp;amp;W^{(0, 0)} \cdot 1 + W^{(0, 1)} \cdot x_1 + W^{(0, 2)} \cdot x_2 = W^{(1, 0)} \cdot 1 + W^{(1, 1)} \cdot x_1 + W^{(1, 2)} \cdot x_2\tag{DB}\\
\Leftrightarrow x_2&amp;amp;= \frac{W^{(0, 0)} \cdot 1 + W^{(0, 1)} \cdot x_1 - (W^{(1, 0)} \cdot 1 + W^{(1, 1)} \cdot x_1)}{W^{(1, 2)} - W^{(0, 2)}}\\
\Leftrightarrow x_2 &amp;amp;= \frac{(W^{(0, 1)} - W^{(1, 1)})}{W^{(1, 2)} - W^{(0, 2)}} \cdot x_1 + \frac{W^{(0, 0)} - W^{(1, 0)}}{W^{(1, 2)} - W^{(0, 2)}}
\end{align}
$$&lt;/div&gt;
&lt;p&gt;As you can see, the decision boundary of the non-normalized form is a line:&lt;/p&gt;
&lt;div class="math"&gt;$$y = a \cdot x + b \qquad a, b \in \mathbb{R}$$&lt;/div&gt;
&lt;p&gt;Please also note that &lt;span class="math"&gt;\(W^{(1, 2)} = W^{(0, 2)}\)&lt;/span&gt; is possible, which would mean that the line is parallel to the &lt;span class="math"&gt;\(x_2\)&lt;/span&gt; axis. So &lt;strong&gt;this model basically only has 2&amp;nbsp;parameter combinations which matter, although it has 6&amp;nbsp;values which can be adjusted. But many combinations are equivalent.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What does normalization change?&lt;/p&gt;
&lt;p&gt;For given &lt;span class="math"&gt;\(W, x\)&lt;/span&gt; it only divides both sides of the equation by the same constant. Hence it doesn't change the decision boundary.&lt;/p&gt;
&lt;p&gt;What does standardization with softmax change?&lt;/p&gt;
&lt;p&gt;Just like with normalization, softmax makes equation &lt;span class="math"&gt;\((DB)\)&lt;/span&gt; to be divided by a constant. This can be ignored. The exponentiation can also be ignored as we can simply take the logartihm of both sides of &lt;span class="math"&gt;\((DB)\)&lt;/span&gt;. Or in other words: &lt;strong&gt;A neural network with only one input layer and one softmax output layer also has a linear decision boundary!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="-11-encoding_1"&gt;-1/+1 encoding&lt;/h2&gt;
&lt;p&gt;In the 2-class case one might consider to use -1 for one class and +1 for the other class as targets. Then the classifcation is&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{cases}
\text{class with label 1}&amp;amp;\text{if } f(x) \geq 0\\
\text{class with label -1}&amp;amp;\text{if } f(x) &amp;lt; 0
\end{cases}
$$&lt;/div&gt;
&lt;p&gt;The matrix &lt;span class="math"&gt;\(W\)&lt;/span&gt; is now in &lt;span class="math"&gt;\(\mathbb{R}^{1 \times 3}\)&lt;/span&gt; and the classifier is&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = W x$$&lt;/div&gt;
&lt;p&gt;To make sure that this is either &lt;span class="math"&gt;\(-1\)&lt;/span&gt; or &lt;span class="math"&gt;\(+1\)&lt;/span&gt;, one can modify it to&lt;/p&gt;
&lt;div class="math"&gt;$$f'(x) = \frac{W x}{|W x|}$$&lt;/div&gt;
&lt;p&gt;Note that this ignores the case &lt;span class="math"&gt;\(Wx = 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now we can easily calculate the MSE:&lt;/p&gt;
&lt;div class="math"&gt;$$E_{MSE}(f, D) = \sum_{i=1}^{n_t} {(t_i - f'(x))}^2$$&lt;/div&gt;
&lt;h2 id="differences-from-target-encoding"&gt;Differences from target encoding&lt;/h2&gt;
&lt;p&gt;You might wonder if it makes a difference which type of encoding you use for your target. There are some things which come to my mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(+) One-hot encoding can easily be expanded to more than two classes, in contrast to &lt;span class="math"&gt;\(-1/+1\)&lt;/span&gt; encoding.&lt;/li&gt;
&lt;li&gt;(+) With one-hot encoding, you can easily get a probability distribution for the classes you are interested in. This is certainly also possible with &lt;span class="math"&gt;\(-1/+1\)&lt;/span&gt; encoding, but it doesn't strike my eye as clearly.&lt;/li&gt;
&lt;li&gt;(-) One-hot encoding needs more storage space.&lt;/li&gt;
&lt;li&gt;(?) &lt;span class="math"&gt;\(-1/+1\)&lt;/span&gt; encoding is used in SVMs (see &lt;a href="https://martin-thoma.com/svm-with-sklearn/"&gt;SVM article&lt;/a&gt;), so it might have advantages in maximum margin classification.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;If I had to implement a linear binary classifier, I would use the delta rule
and a perceptron unit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Example for a linear classifier using a perceptron and the delta rule."""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.datasets.samples_generator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_blobs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Perceptron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Single perceptron unit.&lt;/span&gt;

&lt;span class="sd"&gt;        Credit to Sebastian Raschka:&lt;/span&gt;
&lt;span class="sd"&gt;        http://sebastianraschka.com/Articles/2015_singlelayer_neurons.html&lt;/span&gt;
&lt;span class="sd"&gt;        This was slightly modified.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eta&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eta&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
                &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;net_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Generate data&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_blobs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;centers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cluster_std&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Fit perceptron&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Perceptron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Plot decision boundary&lt;/span&gt;
&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'r--'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Plot data&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which gives:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;img alt="Classification with a Perceptron." src="../images/2016/06/perceptron-classification.png"/&gt;
&lt;figcaption class="text-center"&gt;Classification with a Perceptron.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Looks about right. You can also see that this probably minimizes the MSE, but
it does not maximize the margin between the classes. This would be done by
SVMs.&lt;/p&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;A label and a class are two different things. The class is a set which
  contains all data points which belong to this class. The label is only
  a pointer to this class.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Classification problems with only two classes.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;Also called "targets" sometimes, as we want our classifier to output those values.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;The objective function defines what is to be done during fitting / training / learning.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Algorithms"></category><category term="Machine Learning"></category><category term="optimization"></category><category term="Python"></category></entry><entry><title>Collaborative Filtering</title><link href="https://martin-thoma.com/collaborative-filtering/" rel="alternate"></link><published>2016-02-10T21:35:00+01:00</published><updated>2016-02-10T21:35:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-02-10:/collaborative-filtering/</id><summary type="html">&lt;p&gt;Suppose you are in the Netflix setting: You have &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(M\)&lt;/span&gt;&lt;/span&gt;
movies, &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(N\)&lt;/span&gt;&lt;/span&gt; users and integer ratings
&lt;span markdown="0"&gt;&lt;span class="math"&gt;\(1, \dots, K\)&lt;/span&gt;&lt;/span&gt; for some movies by some users.&lt;/p&gt;
&lt;p&gt;You want to predict all missing values. This means you want to say how the
users would rate movies they have not actually rated.&lt;/p&gt;
&lt;p&gt;Please â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Suppose you are in the Netflix setting: You have &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(M\)&lt;/span&gt;&lt;/span&gt;
movies, &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(N\)&lt;/span&gt;&lt;/span&gt; users and integer ratings
&lt;span markdown="0"&gt;&lt;span class="math"&gt;\(1, \dots, K\)&lt;/span&gt;&lt;/span&gt; for some movies by some users.&lt;/p&gt;
&lt;p&gt;You want to predict all missing values. This means you want to say how the
users would rate movies they have not actually rated.&lt;/p&gt;
&lt;p&gt;Please note that ratings for products on Amazon might be a very similar
situation. It might also be similar to the StumbleUpon rating.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Much Data&lt;/strong&gt;: You have 17&amp;thinsp;000 movies, 480&amp;thinsp;000 users and
  100&amp;thinsp;000&amp;thinsp;000 ratings of movies by those users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Missing Data&lt;/strong&gt;: Although you have a lot of ratings, a complete dataset
  would be &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(17\cdot 10^3 \cdot 480 \cdot 10^3 = 8160 \cdot 10^6\)&lt;/span&gt;&lt;/span&gt;
  ratings. This means you only have about 12% of all possible ratings. There
  is a lot of data missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-solution"&gt;A Solution&lt;/h2&gt;
&lt;p&gt;Train one RBM per user, but share weights amongst the RBMs. This simply means
the weights are averaged.&lt;/p&gt;
&lt;p&gt;The visible units are movies. But instead of having binary visible units, the
units have &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(K=5\)&lt;/span&gt;&lt;/span&gt; states on which softmax is applied.&lt;/p&gt;
&lt;p&gt;The hidden units (about 100) model dependencies between movie ratings.&lt;/p&gt;
&lt;p&gt;When you now want to predict the missing ratings, you can just perform a
sampling in the user-specific RBM. You calculate the values of the hidden units,
then you have a vector for this user which describes the users preferences.
You add the missing movies with the weights from the other users and sample
back.&lt;/p&gt;
&lt;h2 id="material"&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Salakhutdinov, Mnih and Hinton: &lt;a href="http://www.cs.toronto.edu/~rsalakhu/papers/rbmcf.pdf"&gt;Restricted Boltzmann machines for collaborative filtering&lt;/a&gt;. In Proceedings of the 24th international conference on Machine learning, 2007.&lt;/li&gt;
&lt;li&gt;Hinton: &lt;a href="https://www.youtube.com/watch?v=fzAuXMg_7n4"&gt;5. RBMs for Collaborative Filtering
&lt;/a&gt; on YouTube. 9th of November 2013.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://academictorrents.com/details/9b13183dc4d60676b773c9e2cd6de5e5542cee9a"&gt;Netflix Prize Data Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Rating"></category></entry><entry><title>Softmax</title><link href="https://martin-thoma.com/softmax/" rel="alternate"></link><published>2016-02-09T18:09:00+01:00</published><updated>2016-02-09T18:09:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-02-09:/softmax/</id><summary type="html">&lt;p&gt;Softmax is an activation function for multi-layer perceptrons (MLPs). It is
a function which gets applied to a vector in &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(\mathbb{x} \in \mathbb{R}^K\)&lt;/span&gt;&lt;/span&gt;
and returns a vector in &lt;span markdown="0"&gt;&lt;span class="math"&gt;\([0, 1]^K\)&lt;/span&gt;&lt;/span&gt; with the
property that the sum of all elements is 1:&lt;/p&gt;
&lt;div&gt;$$\varphi(\mathbb{x})_j = \frac â€¦&lt;/div&gt;</summary><content type="html">&lt;p&gt;Softmax is an activation function for multi-layer perceptrons (MLPs). It is
a function which gets applied to a vector in &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(\mathbb{x} \in \mathbb{R}^K\)&lt;/span&gt;&lt;/span&gt;
and returns a vector in &lt;span markdown="0"&gt;&lt;span class="math"&gt;\([0, 1]^K\)&lt;/span&gt;&lt;/span&gt; with the
property that the sum of all elements is 1:&lt;/p&gt;
&lt;div&gt;$$\varphi(\mathbb{x})_j = \frac{e^{x_j}}{\sum_{k=1}^K e^{x_k}} \;\;\;\text{ for } j=1, \dots, K$$&lt;/div&gt;
&lt;h2 id="python-implementation"&gt;Python implementation&lt;/h2&gt;
&lt;p&gt;The implementation is straight forward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Calculate the softmax of a list of numbers w.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    w : list of numbers&lt;/span&gt;

&lt;span class="sd"&gt;    Return&lt;/span&gt;
&lt;span class="sd"&gt;    ------&lt;/span&gt;
&lt;span class="sd"&gt;    a list of the same length as w of non-negative numbers&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; softmax([0.1, 0.2])&lt;/span&gt;
&lt;span class="sd"&gt;    array([ 0.47502081,  0.52497919])&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; softmax([-0.1, 0.2])&lt;/span&gt;
&lt;span class="sd"&gt;    array([ 0.42555748,  0.57444252])&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; softmax([0.9, -10])&lt;/span&gt;
&lt;span class="sd"&gt;    array([  9.99981542e-01,   1.84578933e-05])&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; softmax([0, 10])&lt;/span&gt;
&lt;span class="sd"&gt;    array([  4.53978687e-05,   9.99954602e-01])&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="short-analysis"&gt;Short analysis&lt;/h2&gt;
&lt;p&gt;One obvious property of the softmax function is that the sum of all elements
is one due to the normalization in the denominator.&lt;/p&gt;
&lt;p&gt;By printing the following you can see that values below 1 get closer together
and elements above 1 get farer away.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Before: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"After:  &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;experiments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;experiments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;experiments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;experiments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;experiments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Before: [ 1.1  1.1  1. ]
After:  [ 1.10517092  1.10517092  1.        ]
------------------------------------------------------------
Before: [3 2 1]
After:  [ 7.3890561   2.71828183  1.        ]
------------------------------------------------------------
Before: [ 1.33333333  1.16666667  1.        ]
After:  [ 1.22140276  1.10517092  1.        ]
------------------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;</content><category term="Machine Learning"></category><category term="Neural Networks"></category><category term="Activation Functions"></category></entry><entry><title>Comparing Classifiers</title><link href="https://martin-thoma.com/comparing-classifiers/" rel="alternate"></link><published>2016-01-19T20:13:00+01:00</published><updated>2016-01-19T20:13:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-01-19:/comparing-classifiers/</id><summary type="html">&lt;p&gt;Classification problems occur quite often and many different classification
algorithms have been described and implemented. But what is the best algorithm
for a given error function and dataset?&lt;/p&gt;
&lt;p&gt;I read questions like "I have problem X. What is the best classifier?" quite
often and my first impulse is always to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Classification problems occur quite often and many different classification
algorithms have been described and implemented. But what is the best algorithm
for a given error function and dataset?&lt;/p&gt;
&lt;p&gt;I read questions like "I have problem X. What is the best classifier?" quite
often and my first impulse is always to write: Just try them!&lt;/p&gt;
&lt;p&gt;I guess people asking this question might think that it is super difficult to
do so. However, the sklearn tutorial contains a very nice example where
many classifiers are compared (&lt;a href="http://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This article gives you an overview over some classifiers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html"&gt;SVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html"&gt;k-nearest neighbors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html"&gt;Random Forest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier.html"&gt;AdaBoost Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html"&gt;Gradient Boosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html"&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/0.16/modules/generated/sklearn.lda.LDA.html"&gt;LDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/0.16/modules/generated/sklearn.qda.QDA.html"&gt;QDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.neural_network.BernoulliRBM.html"&gt;RBMs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html"&gt;Logistic Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.neural_network.BernoulliRBM.html"&gt;RBM&lt;/a&gt; + Logistic Regression Classifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, neural networks are also one very powerful ML classifier I may not
forget. As sklearn does not have neural networks, I've installed
&lt;a href="https://github.com/tensorflow/skflow"&gt;&lt;code&gt;skflow&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="tutorial-example"&gt;Tutorial example&lt;/h2&gt;
&lt;p&gt;The sklearn tutorial creates three datasets with 100&amp;nbsp;points per dataset and
2&amp;nbsp;dimensions per point:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Moons&lt;/strong&gt;: Two interleaving half-circles&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Circles&lt;/strong&gt;: A larger circle containing the smaller one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linear&lt;/strong&gt;: A linearly seperable dataset&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of those three datasets has added noise. This means for some points there
might be no way of classifying them correclty.&lt;/p&gt;
&lt;p&gt;Here are the results&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/ml-classifiers-1.png"&gt;&lt;img alt="k nearest neighbors, linear and RBFSVM" class="" src="../images/2016/01/ml-classifiers-1.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;k nearest neighbors, linear and RBFSVM&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One can see that k nearest neighbors gives arbitrary decision boundaries.
Overall, they look reasonable. However, there are often strange zig-zag
patterns.&lt;/p&gt;
&lt;p&gt;The linear SVM in contrast has a very easy decision boundary: a line. It is no
suprise that it can't deal with the moons dataset. Note that a random guess
would be right in 50% of the cases.&lt;/p&gt;
&lt;p&gt;The RBF SVM has very nice decision boundary. It is smooth, matches the pattern
and is able to adjust to all three examles.&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/ml-classifiers-2.png"&gt;&lt;img alt="Decision Tree, Random Forest, AdaBoost" class="" src="../images/2016/01/ml-classifiers-2.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Decision Tree, Random Forest, AdaBoost&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Decision Trees, Decision Forests and AdaBoost all show very similar
patterns. The boundaries change in parallel to the coordinate axes which looks
very unnatural.&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/ml-classifiers-3.png"&gt;&lt;img alt="Naive Bayes, LDA, QDA" class="" src="../images/2016/01/ml-classifiers-3.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Naive Bayes, LDA, QDA&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Naive Bayes shows nice, smooth patterns. However, those patterns seem to be
a bit too simple. LDA is again linear (see linear SVM). Comparing QDA to
Naive Bayes is interesting. Although they get similar performance for the first
dataset, I would argue that the naive bayes classifier is much better as it is
much more confident for its classification. Even more extrem is the last example.
I'm astonished that the QDA gets 93% with that boundary; Naive Bayes seems to
find a much better boundary.&lt;/p&gt;
&lt;h2 id="the-hardware"&gt;The hardware&lt;/h2&gt;
&lt;p&gt;The following comparison is done on a PC with an &lt;a href="http://ark.intel.com/de/products/77781/Intel-Core-i7-4820K-Processor-10M-Cache-up-to-3_90-GHz"&gt;Intel i7-4820K CPU&lt;/a&gt; and a NVIDIA GeForce GTX Titan Black
GPU.&lt;/p&gt;
&lt;h2 id="mnist"&gt;MNIST&lt;/h2&gt;
&lt;p&gt;MNIST is a dataset of &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(28\text{px} \times 28\text{px}\)&lt;/span&gt;&lt;/span&gt; greyscale images.
Each of the images contains a digit (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). The
task is to classify the image into one of the 10 digit classes.&lt;/p&gt;
&lt;p&gt;Guessing randomly will give an accuracy of &lt;span markdown="0"&gt;&lt;span class="math"&gt;\(\frac{1}{10} = 0.1\)&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="neural-networks"&gt;Neural Networks&lt;/h3&gt;
&lt;p&gt;Please note that there are neural networks which get much better accuracy.
Most notably the &lt;a href="https://www.tensorflow.org/versions/master/tutorials/mnist/pros/index.html#deep-mnist-for-experts"&gt;MNIST Expert tutorial&lt;/a&gt; with 99.2% accuracy.&lt;/p&gt;
&lt;h4 id="simple-network"&gt;Simple Network&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NN&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;79.5696&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3480&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2248&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2565&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2258&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;2294&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;23&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2161&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;2237&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2355&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2161&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;2340&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9798&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="dropout-network"&gt;Dropout Network&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NN&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;dropout&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;118.2654&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3918&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2250&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2567&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;2272&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;2260&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2152&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;1983&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2237&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2363&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2170&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;2337&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9780&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="cnn"&gt;CNN&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CNN&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;391.8810&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.2035&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2243&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2548&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;2253&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;2290&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2164&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;2227&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2374&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;2145&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;2306&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9769&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="svm"&gt;SVM&lt;/h3&gt;
&lt;p&gt;There is a ton of literature / papers about &lt;abbr title="Support Vector Machines"&gt;SVMs&lt;/abbr&gt;.
I've summed up the basics on &lt;a href="https://martin-thoma.com/svm-with-sklearn/"&gt;Using SVMs with sklearn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've trained two SVMs: A simple, linear one and one with an RBF kernel as I
found it online (I'm sorry, I don't remember where I found those parameters :-/).&lt;/p&gt;
&lt;p&gt;Please note the the SVM implementation of sklearn does not use the GPU.
However, there are &lt;a href="http://fastml.com/running-things-on-a-gpu/"&gt;GPU implmentations of SVMs&lt;/a&gt;
around.&lt;/p&gt;
&lt;h4 id="linear-svm"&gt;Linear SVM&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;SVM&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;168.6950&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;158.0101&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2226&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2537&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;2158&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="mi"&gt;2188&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;47&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2117&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;73&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;1872&lt;/span&gt;   &lt;span class="mi"&gt;31&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;2179&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2268&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;   &lt;span class="mi"&gt;47&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;40&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;   &lt;span class="mi"&gt;64&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;61&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;2189&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9416&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="adjusted-svm"&gt;Adjusted SVM&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;SVM&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;347.1539&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;234.5724&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2258&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2566&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2280&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;2304&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2183&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2026&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2245&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2373&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2166&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2329&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9840&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="random-forest"&gt;Random Forest&lt;/h3&gt;
&lt;p&gt;Data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n_estimators=50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_jobs=10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;Forest&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.1359&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;26.0763&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2246&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2543&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2233&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="mi"&gt;2240&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2142&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;2210&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2315&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;2103&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;2262&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9641&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_depth=5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_estimators=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_features=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;Forest&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2077&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;22.2770&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1955&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt;   &lt;span class="mi"&gt;63&lt;/span&gt;   &lt;span class="mi"&gt;64&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;109&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2524&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;252&lt;/span&gt;  &lt;span class="mi"&gt;425&lt;/span&gt; &lt;span class="mi"&gt;1198&lt;/span&gt;  &lt;span class="mi"&gt;151&lt;/span&gt;   &lt;span class="mi"&gt;64&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;145&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;55&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;136&lt;/span&gt;  &lt;span class="mi"&gt;195&lt;/span&gt;  &lt;span class="mi"&gt;140&lt;/span&gt; &lt;span class="mi"&gt;1641&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;   &lt;span class="mi"&gt;95&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;92&lt;/span&gt;  &lt;span class="mi"&gt;320&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="mi"&gt;1199&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;76&lt;/span&gt;  &lt;span class="mi"&gt;153&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;288&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;312&lt;/span&gt;  &lt;span class="mi"&gt;383&lt;/span&gt;   &lt;span class="mi"&gt;67&lt;/span&gt;  &lt;span class="mi"&gt;655&lt;/span&gt;   &lt;span class="mi"&gt;78&lt;/span&gt;  &lt;span class="mi"&gt;268&lt;/span&gt;   &lt;span class="mi"&gt;47&lt;/span&gt;   &lt;span class="mi"&gt;94&lt;/span&gt;  &lt;span class="mi"&gt;134&lt;/span&gt;   &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;199&lt;/span&gt;  &lt;span class="mi"&gt;364&lt;/span&gt;  &lt;span class="mi"&gt;125&lt;/span&gt;   &lt;span class="mi"&gt;58&lt;/span&gt;   &lt;span class="mi"&gt;96&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;1408&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;83&lt;/span&gt;  &lt;span class="mi"&gt;424&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;70&lt;/span&gt;  &lt;span class="mi"&gt;101&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;1555&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;   &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;392&lt;/span&gt;  &lt;span class="mi"&gt;574&lt;/span&gt;   &lt;span class="mi"&gt;44&lt;/span&gt;  &lt;span class="mi"&gt;147&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;   &lt;span class="mi"&gt;71&lt;/span&gt;  &lt;span class="mi"&gt;106&lt;/span&gt;  &lt;span class="mi"&gt;773&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;71&lt;/span&gt;  &lt;span class="mi"&gt;338&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;43&lt;/span&gt;  &lt;span class="mi"&gt;579&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;632&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="mi"&gt;681&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5715&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="k-nearest-neightbors"&gt;k nearest neightbors&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.6439&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1261.7815&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2260&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2572&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;2235&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;2276&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2131&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;2239&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2349&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;34&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;2053&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2303&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9695&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="decision-tree"&gt;Decision Tree&lt;/h3&gt;
&lt;p&gt;Data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_depth=5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decision&lt;/span&gt; &lt;span class="n"&gt;Tree&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.1346&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0313&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1767&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mi"&gt;120&lt;/span&gt;  &lt;span class="mi"&gt;137&lt;/span&gt;   &lt;span class="mi"&gt;71&lt;/span&gt;  &lt;span class="mi"&gt;114&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2065&lt;/span&gt;  &lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="mi"&gt;108&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;   &lt;span class="mi"&gt;41&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;131&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;42&lt;/span&gt;   &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="mi"&gt;1248&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;  &lt;span class="mi"&gt;121&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;227&lt;/span&gt;   &lt;span class="mi"&gt;76&lt;/span&gt;  &lt;span class="mi"&gt;339&lt;/span&gt;  &lt;span class="mi"&gt;159&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;33&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;1484&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt;  &lt;span class="mi"&gt;107&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;   &lt;span class="mi"&gt;81&lt;/span&gt;  &lt;span class="mi"&gt;266&lt;/span&gt;  &lt;span class="mi"&gt;238&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="mi"&gt;1284&lt;/span&gt;   &lt;span class="mi"&gt;42&lt;/span&gt;   &lt;span class="mi"&gt;42&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;  &lt;span class="mi"&gt;213&lt;/span&gt;  &lt;span class="mi"&gt;492&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;42&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;229&lt;/span&gt;  &lt;span class="mi"&gt;166&lt;/span&gt;  &lt;span class="mi"&gt;577&lt;/span&gt;  &lt;span class="mi"&gt;137&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mi"&gt;254&lt;/span&gt;  &lt;span class="mi"&gt;510&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;34&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="mi"&gt;103&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt; &lt;span class="mi"&gt;1734&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="mi"&gt;102&lt;/span&gt;   &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;  &lt;span class="mi"&gt;179&lt;/span&gt;   &lt;span class="mi"&gt;57&lt;/span&gt;   &lt;span class="mi"&gt;53&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;1775&lt;/span&gt;   &lt;span class="mi"&gt;79&lt;/span&gt;  &lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;98&lt;/span&gt;  &lt;span class="mi"&gt;129&lt;/span&gt;   &lt;span class="mi"&gt;43&lt;/span&gt;   &lt;span class="mi"&gt;43&lt;/span&gt;   &lt;span class="mi"&gt;42&lt;/span&gt;  &lt;span class="mi"&gt;160&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;1439&lt;/span&gt;  &lt;span class="mi"&gt;231&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;86&lt;/span&gt;   &lt;span class="mi"&gt;59&lt;/span&gt;  &lt;span class="mi"&gt;125&lt;/span&gt;   &lt;span class="mi"&gt;95&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;75&lt;/span&gt;  &lt;span class="mi"&gt;167&lt;/span&gt; &lt;span class="mi"&gt;1734&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6540&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adaboost"&gt;Adaboost&lt;/h3&gt;
&lt;p&gt;You should note that you can use arbitrary base classifiers with Adaboost.
The default ones of &lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier.html"&gt;&lt;code&gt;sklearn.ensemble.AdaBoostClassifier&lt;/code&gt;&lt;/a&gt; is &lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html"&gt;&lt;code&gt;sklearn.tree.DecisionTreeClassifies&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AdaBoost&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;37.6443&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5815&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1994&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;75&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;113&lt;/span&gt;   &lt;span class="mi"&gt;51&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2435&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="mi"&gt;42&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;97&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="mi"&gt;1341&lt;/span&gt;   &lt;span class="mi"&gt;85&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt;   &lt;span class="mi"&gt;38&lt;/span&gt;  &lt;span class="mi"&gt;416&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt;  &lt;span class="mi"&gt;196&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt; &lt;span class="mi"&gt;1508&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;  &lt;span class="mi"&gt;313&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;64&lt;/span&gt;  &lt;span class="mi"&gt;122&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;48&lt;/span&gt;   &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;1662&lt;/span&gt;   &lt;span class="mi"&gt;49&lt;/span&gt;   &lt;span class="mi"&gt;23&lt;/span&gt;  &lt;span class="mi"&gt;134&lt;/span&gt;   &lt;span class="mi"&gt;90&lt;/span&gt;  &lt;span class="mi"&gt;155&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;81&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;  &lt;span class="mi"&gt;309&lt;/span&gt;   &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="mi"&gt;1255&lt;/span&gt;   &lt;span class="mi"&gt;57&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="mi"&gt;129&lt;/span&gt;   &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;29&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="mi"&gt;151&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;   &lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="mi"&gt;1914&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;25&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;70&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1761&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;  &lt;span class="mi"&gt;388&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;30&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;   &lt;span class="mi"&gt;48&lt;/span&gt;  &lt;span class="mi"&gt;215&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;85&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;1615&lt;/span&gt;   &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;   &lt;span class="mi"&gt;68&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;356&lt;/span&gt;   &lt;span class="mi"&gt;74&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;171&lt;/span&gt;   &lt;span class="mi"&gt;78&lt;/span&gt; &lt;span class="mi"&gt;1533&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7367&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gradient-boosting"&gt;Gradient Boosting&lt;/h3&gt;
&lt;p&gt;Gradient boosting with &lt;code&gt;xgboost&lt;/code&gt; has won in the Rossmann Store Sales prediction
(&lt;a href="http://blog.kaggle.com/2015/12/21/rossmann-store-sales-winners-interview-1st-place-gert/"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.kaggle.com/2015/09/22/caterpillar-winners-interview-1st-place-gilberto-josef-leustagos-mario/"&gt;Caterpillar Winners' Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.kaggle.com/2015/10/20/caterpillar-winners-interview-3rd-place-team-shift-workers/"&gt;Caterpillar Winners' Interview: 3rd place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.kaggle.com/2015/09/28/liberty-mutual-property-inspection-winners-interview-qingchen-wang/"&gt;Liberty Mutual Property Inspection, Winner's Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.kaggle.com/2015/10/21/recruit-coupon-purchase-winners-interview-2nd-place-halla-yang/"&gt;Recruit Coupon Purchase Winner's Interview: 2nd place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.kaggle.com/2015/10/30/dato-winners-interview-2nd-place-mortehu/"&gt;Dato Truly Native? Winner's Interview: 2nd place&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Gradient&lt;/span&gt; &lt;span class="n"&gt;Boosting&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2409.8094&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4159&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2214&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2528&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2165&lt;/span&gt;   &lt;span class="mi"&gt;34&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="mi"&gt;2182&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;42&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2088&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;41&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;1928&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;19&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;2181&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2246&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;2057&lt;/span&gt;   &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;24&lt;/span&gt;   &lt;span class="mi"&gt;49&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;54&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;2205&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9435&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="naive-bayes"&gt;Naive Bayes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Naive&lt;/span&gt; &lt;span class="n"&gt;Bayes&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3814&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8863&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2094&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;69&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;2432&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;77&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;278&lt;/span&gt;   &lt;span class="mi"&gt;64&lt;/span&gt;  &lt;span class="mi"&gt;703&lt;/span&gt;  &lt;span class="mi"&gt;143&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;558&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;528&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;202&lt;/span&gt;  &lt;span class="mi"&gt;136&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;  &lt;span class="mi"&gt;791&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;106&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;886&lt;/span&gt;  &lt;span class="mi"&gt;178&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;96&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;  &lt;span class="mi"&gt;296&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;169&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;  &lt;span class="mi"&gt;535&lt;/span&gt; &lt;span class="mi"&gt;1038&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;327&lt;/span&gt;   &lt;span class="mi"&gt;63&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="mi"&gt;87&lt;/span&gt;  &lt;span class="mi"&gt;100&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;1253&lt;/span&gt;  &lt;span class="mi"&gt;166&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;34&lt;/span&gt;   &lt;span class="mi"&gt;51&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2109&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;19&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;23&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;737&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="mi"&gt;1462&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;39&lt;/span&gt;  &lt;span class="mi"&gt;326&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;1482&lt;/span&gt;  &lt;span class="mi"&gt;281&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;26&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;41&lt;/span&gt;   &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="mi"&gt;2240&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5615&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lda"&gt;LDA&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LDA&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;20.6464&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0910&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2131&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;47&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2454&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;71&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;22&lt;/span&gt;   &lt;span class="mi"&gt;71&lt;/span&gt; &lt;span class="mi"&gt;1873&lt;/span&gt;   &lt;span class="mi"&gt;77&lt;/span&gt;   &lt;span class="mi"&gt;51&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;82&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;  &lt;span class="mi"&gt;101&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt; &lt;span class="mi"&gt;1992&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;77&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;40&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;   &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1983&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;142&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;19&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;112&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;1682&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;103&lt;/span&gt;   &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;28&lt;/span&gt;   &lt;span class="mi"&gt;30&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;43&lt;/span&gt;   &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="mi"&gt;2046&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;37&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;57&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;70&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1990&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;113&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;64&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt;  &lt;span class="mi"&gt;115&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;1781&lt;/span&gt;   &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;35&lt;/span&gt;  &lt;span class="mi"&gt;133&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;122&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;2032&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8642&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qda"&gt;QDA&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Classifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;QDA&lt;/span&gt;
&lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;23.0527&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.2259&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Confusion&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2212&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="mi"&gt;2409&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;32&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;39&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;961&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="mi"&gt;689&lt;/span&gt;  &lt;span class="mi"&gt;143&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;310&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;166&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1231&lt;/span&gt;   &lt;span class="mi"&gt;48&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;  &lt;span class="mi"&gt;606&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;232&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;810&lt;/span&gt;   &lt;span class="mi"&gt;22&lt;/span&gt;   &lt;span class="mi"&gt;25&lt;/span&gt;   &lt;span class="mi"&gt;27&lt;/span&gt;  &lt;span class="mi"&gt;250&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;143&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="mi"&gt;345&lt;/span&gt;  &lt;span class="mi"&gt;568&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;909&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;214&lt;/span&gt;  &lt;span class="mi"&gt;140&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;666&lt;/span&gt;   &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;83&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2146&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;81&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;776&lt;/span&gt;  &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="mi"&gt;1352&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;487&lt;/span&gt;  &lt;span class="mi"&gt;181&lt;/span&gt;   &lt;span class="mi"&gt;18&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;17&lt;/span&gt;   &lt;span class="mi"&gt;58&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;1320&lt;/span&gt;  &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;65&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;23&lt;/span&gt;   &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="mi"&gt;2225&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Accuracy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5561&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mnist-summary_1"&gt;MNIST Summary&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Classifier&lt;/th&gt;
&lt;th&gt;Accuracy&lt;/th&gt;
&lt;th&gt;Training Time&lt;/th&gt;
&lt;th&gt;Testing Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MLP (500:200)&lt;/td&gt;
&lt;td style="text-align: right"&gt;97.98%&lt;/td&gt;
&lt;td style="text-align: right"&gt;79.5696s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.3480s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dropout NN (500:200)&lt;/td&gt;
&lt;td style="text-align: right"&gt;97.80%&lt;/td&gt;
&lt;td style="text-align: right"&gt;118.2654s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.3918s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNN&lt;br/&gt;(32 5&amp;times;5 filters : 2&amp;times;2 max pool : 64 5&amp;times;5 filters : 2&amp;times;2 max pool : 1024)&lt;/td&gt;
&lt;td style="text-align: right"&gt;97.69%&lt;/td&gt;
&lt;td style="text-align: right"&gt;391.8810s&lt;/td&gt;
&lt;td style="text-align: right"&gt;1.2035s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adjusted SVM&lt;/td&gt;
&lt;td style="text-align: right"&gt;&lt;b&gt;98.40%&lt;/b&gt;&lt;/td&gt;
&lt;td style="text-align: right"&gt;347.1539s&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;234.5724s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linear SVM&lt;/td&gt;
&lt;td style="text-align: right"&gt;94.16%&lt;/td&gt;
&lt;td style="text-align: right"&gt;168.6950s&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;158.0101s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Random Forest (n_estimators=50, n_jobs=10)&lt;/td&gt;
&lt;td style="text-align: right"&gt;96.41%&lt;/td&gt;
&lt;td style="text-align: right"&gt;2.1359s&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;26.0763s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Random Forest (n_estimators=10, max_features=1, max_depth=5)&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;57.15%&lt;/td&gt;
&lt;td style="text-align: right"&gt;&lt;b&gt;0.2077s&lt;/b&gt;&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;22.2770s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k nearest neightbors (k=3)&lt;/td&gt;
&lt;td style="text-align: right"&gt;96.95%&lt;/td&gt;
&lt;td style="text-align: right"&gt;4.6439s&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;1261.7815s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decision Tree(max_depth=5)&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;65.40%&lt;/td&gt;
&lt;td style="text-align: right"&gt;3.1346s&lt;/td&gt;
&lt;td style="text-align: right"&gt;&lt;b&gt;0.0313s&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adaboost&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;73.67%&lt;/td&gt;
&lt;td style="text-align: right"&gt;37.6443s&lt;/td&gt;
&lt;td style="text-align: right"&gt;1.5815s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Naive Bayes&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;56.15%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.3814s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.8863s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LDA&lt;/td&gt;
&lt;td style="text-align: right"&gt;86.42%&lt;/td&gt;
&lt;td style="text-align: right"&gt;20.6464s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0910s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QDA&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;55.61%&lt;/td&gt;
&lt;td style="text-align: right"&gt;23.0527s&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;6.2259s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gradient Boosting&lt;/td&gt;
&lt;td style="text-align: right"&gt;94.35%&lt;/td&gt;
&lt;td style="text-align: right"&gt;2409.8094s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.4159s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logistic Regression (C=1)&lt;/td&gt;
&lt;td style="text-align: right"&gt;91.47%&lt;/td&gt;
&lt;td style="text-align: right"&gt;272.1309s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0531s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logistic Regression (C=10000)&lt;/td&gt;
&lt;td style="text-align: right"&gt;91.23%&lt;/td&gt;
&lt;td style="text-align: right"&gt;1807.0624s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0529s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="iris-summary"&gt;IRIS summary&lt;/h2&gt;
&lt;p&gt;Just for fun, I tried the script from above with very minor adjustments to the
&lt;a href="https://en.wikipedia.org/wiki/Iris_flower_data_set"&gt;IRIS flower dataset&lt;/a&gt;:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Classifier&lt;/th&gt;
&lt;th&gt;Accuracy&lt;/th&gt;
&lt;th&gt;Training Time&lt;/th&gt;
&lt;th&gt;Testing Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AdaBoost&lt;/td&gt;
&lt;td style="text-align: right"&gt;92.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.1203s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0101s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decision Tree&lt;/td&gt;
&lt;td style="text-align: right"&gt;92.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0005s&lt;/td&gt;
&lt;td style="text-align: right"&gt;&lt;b&gt;0.0001s&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gradient Boosting&lt;/td&gt;
&lt;td style="text-align: right"&gt;92.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.2227s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0007s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LDA&lt;/td&gt;
&lt;td style="text-align: right"&gt;&lt;b&gt;96.00%&lt;/b&gt;&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0027s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0002s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NN 20:5&lt;/td&gt;
&lt;td style="text-align: right"&gt;90.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;1.6628s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0046s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Naive Bayes&lt;/td&gt;
&lt;td style="text-align: right"&gt;90.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0010s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0004s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QDA&lt;/td&gt;
&lt;td style="text-align: right"&gt;94.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0009s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0003s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Random Forest&lt;/td&gt;
&lt;td style="text-align: right"&gt;90.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.2147s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.1395s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Random Forest 2&lt;/td&gt;
&lt;td style="text-align: right"&gt;90.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.1481s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.1249s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVM, adj.&lt;/td&gt;
&lt;td style="text-align: right"&gt;90.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0010s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0004s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVM, linear&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;88.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0006s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0002s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k nn&lt;/td&gt;
&lt;td style="text-align: right"&gt;92.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0007s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0009s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logistic Regression (C=1)&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;88.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0011s&lt;/td&gt;
&lt;td style="text-align: right"&gt;&lt;b&gt;0.0001s&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logistic Regression (C=1000)&lt;/td&gt;
&lt;td style="text-align: right"&gt;92.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0010s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0002s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBM 100&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;78.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0233s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0003s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBM 100, n_iter=20&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;70.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0427s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0003s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBM 200, n_iter=40, LR=0.01, Reg: C=1&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;88.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.2463s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0005s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBM 200, n_iter=40, LR=0.01, Reg: C=10000&lt;/td&gt;
&lt;td style="text-align: right"&gt;90.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.2437s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0005s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBM 256&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;84.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0424s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0006s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBM 512, n_iter=100&lt;/td&gt;
&lt;td class="danger" style="text-align: right"&gt;84.00%&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0723s&lt;/td&gt;
&lt;td style="text-align: right"&gt;0.0010s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Neural networks take their time to train and a feeling for the topology, but
their classification results are nice and the testing time is good as well.&lt;/p&gt;
&lt;p&gt;Random Forests and SVMs are also a model a type of model one should think of.
However, the standard implementation is very slow compared to neural networks.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/0.16/modules/generated/sklearn.lda.LDA.html"&gt;&lt;code&gt;sklearn.lda.LDA&lt;/code&gt;&lt;/a&gt;
might also be worth a try. The rest seems to be quite bad compared with those
classifiers.&lt;/p&gt;
&lt;p&gt;The code which generated the examples from above is &lt;a href="https://github.com/MartinThoma/algorithms/tree/master/ML/mnist/many-classifiers"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Python"></category><category term="Machine Learning"></category><category term="Classification"></category></entry><entry><title>Function Approximation</title><link href="https://martin-thoma.com/function-approximation/" rel="alternate"></link><published>2016-01-18T20:00:00+01:00</published><updated>2016-01-18T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-01-18:/function-approximation/</id><summary type="html">&lt;p&gt;I was recently quite disappointed by how bad neural networks are for function
approximation (see &lt;a href="http://datascience.stackexchange.com/q/9495/8820"&gt;How should a neural network for unbound function approximation be structured?&lt;/a&gt;). However, I've just found that
Gaussian processes are great for function approximation!&lt;/p&gt;
&lt;p&gt;There are two important types of function approximation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interpolation&lt;/strong&gt;: What values does â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I was recently quite disappointed by how bad neural networks are for function
approximation (see &lt;a href="http://datascience.stackexchange.com/q/9495/8820"&gt;How should a neural network for unbound function approximation be structured?&lt;/a&gt;). However, I've just found that
Gaussian processes are great for function approximation!&lt;/p&gt;
&lt;p&gt;There are two important types of function approximation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interpolation&lt;/strong&gt;: What values does the function have in between of known
  values?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extrapolation&lt;/strong&gt;: What values does the function have outsive of the known
  values?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did a couple of very quick examples which look promising.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;h3 id="square"&gt;Square&lt;/h3&gt;
&lt;p&gt;Approximating &lt;span class="math"&gt;\(f(x) = x^2\)&lt;/span&gt; worked very good:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/gauss-x2.png"&gt;&lt;img alt="f(x) = x^2" class="" src="../images/2016/01/gauss-x2.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;f(x) = x^2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I've tried if with higher order polynomials, more complex polynomials. No
problem.&lt;/p&gt;
&lt;h3 id="sin"&gt;Sin&lt;/h3&gt;
&lt;p&gt;Approximating &lt;span class="math"&gt;\(f(x) = \sin(3x)\)&lt;/span&gt; seems to be more complicated:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/gaussian-process-sin-3x.png"&gt;&lt;img alt="f(x) = sin(3x)" class="" src="../images/2016/01/gaussian-process-sin-3x.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;f(x) = sin(3x)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I guess a human would see the wave pattern and do a better job here.&lt;/p&gt;
&lt;h3 id="exp"&gt;exp&lt;/h3&gt;
&lt;p&gt;Approximating &lt;span class="math"&gt;\(f(x) = e^x\)&lt;/span&gt; works similar well as polynomials. One can see
that it does not perfectly fit it, but compared the the range of values seen
before and the distance from the last seen value I think this is absolutely
acceptable:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/gauss-exponential.png"&gt;&lt;img alt="f(x) = e^x" class="" src="../images/2016/01/gauss-exponential.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;f(x) = e^x&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="noise"&gt;noise&lt;/h3&gt;
&lt;p&gt;It is claimed that Gaussian processes implicitly model noise so that they can
easily deal with noise. However, in my experients this seems not to work so
great. The reason might be that I had points in &lt;span class="math"&gt;\([-3, 3]\)&lt;/span&gt; of the function&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = x^2$$&lt;/div&gt;
&lt;p&gt;with point-wise gaussian noise &lt;span class="math"&gt;\(N \sim \mathcal{N}(0, 1)\)&lt;/span&gt;. So the noise is
quite domintant on that intervall. One of the examples where it worked better
is:&lt;/p&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/gauss-noise.png"&gt;&lt;img alt="f(x) = x^2 with gaussian noise" class="" src="../images/2016/01/gauss-noise.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;f(x) = x^2 with gaussian noise&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="make-it-brake"&gt;Make it brake&lt;/h3&gt;
&lt;p&gt;I was a bit suspicious if I had another mistake here. So I wanted it to break.
This was the reason why I created the following function&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = \begin{cases}x^2 &amp;amp;\text{if } x \geq 0\\\\-1 &amp;amp;\text{otherwise}\end{cases}$$&lt;/div&gt;
&lt;figure class="aligncenter"&gt;
&lt;a href="../images/2016/01/gauss-cases.png"&gt;&lt;img alt="Function with discontinuity" class="" src="../images/2016/01/gauss-cases.png" style="max-width:500px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Function with discontinuity&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The predicted value is obviously not correct, but you should note that almost
all function values are within the 95% confidence intervall!&lt;/p&gt;
&lt;h2 id="code_1"&gt;Code&lt;/h2&gt;
&lt;p&gt;The following code needs &lt;a href="http://docs.scipy.org/doc/numpy-1.10.1/user/install.html"&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/a&gt;
and &lt;a href="http://scikit-learn.org/stable/install.html"&gt;&lt;code&gt;sklearn&lt;/code&gt;&lt;/a&gt;. For the plots,
you need &lt;a href="http://matplotlib.org/users/installing.html"&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Example how to use gaussion processes for regression."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gaussian_process&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Create the dataset&lt;/span&gt;
    &lt;span class="n"&gt;x_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast_2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
    &lt;span class="n"&gt;y_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;x_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast_2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;

    &lt;span class="c1"&gt;# Define the Regression Modell and fit it&lt;/span&gt;
    &lt;span class="n"&gt;gp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gaussian_process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GaussianProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="n"&gt;thetaL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="n"&gt;thetaU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Evaluate the result&lt;/span&gt;
    &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eval_MSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"MSE: &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mse&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"max MSE: &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mse&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plot_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"x^2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Function which gets approximated&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="n"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast_2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;noise&lt;/span&gt;
    &lt;span class="c1"&gt;# Totally fails for that one:&lt;/span&gt;
    &lt;span class="c1"&gt;# y = []&lt;/span&gt;
    &lt;span class="c1"&gt;# for el in x:&lt;/span&gt;
    &lt;span class="c1"&gt;#     if el &amp;gt;= 0:&lt;/span&gt;
    &lt;span class="c1"&gt;#         y.append(el**2)&lt;/span&gt;
    &lt;span class="c1"&gt;#     else:&lt;/span&gt;
    &lt;span class="c1"&gt;#         y.append(-1)&lt;/span&gt;
    &lt;span class="c1"&gt;# return np.array(y)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_tex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Plot the function, the prediction and the 95% confidence interval&lt;/span&gt;
    &lt;span class="c1"&gt;# based on the MSE&lt;/span&gt;
    &lt;span class="n"&gt;sigma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'r:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'$f(x) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;function_tex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markersize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Observations'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Prediction'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt;
            &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.9600&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.9600&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;)[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt;
            &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'None'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'95&lt;/span&gt;&lt;span class="si"&gt;% c&lt;/span&gt;&lt;span class="s1"&gt;onfidence interval'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$x$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$f(x)$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
    &lt;span class="n"&gt;y_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'upper left'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gaussianprocess.org/"&gt;www.gaussianprocess.org&lt;/a&gt;: The definitive book about gaussian processes. It's freely available online!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Kriging"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sklearn: &lt;a href="http://scikit-learn.org/stable/modules/gaussian_process.html"&gt;Gaussian Processes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sklearn: &lt;a href="http://scikit-learn.org/stable/auto_examples/gaussian_process/plot_gp_regression.html"&gt;Gaussian Processes regression: basic introductory example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Regression"></category></entry><entry><title>Using SVMs with sklearn</title><link href="https://martin-thoma.com/svm-with-sklearn/" rel="alternate"></link><published>2016-01-14T12:25:00+01:00</published><updated>2016-01-14T12:25:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2016-01-14:/svm-with-sklearn/</id><summary type="html">&lt;p&gt;Support Vector Machines (SVMs) is a group of powerful classifiers. In this
article, I will give a short impression of how they work. I continue
with an example how to use SVMs with sklearn.&lt;/p&gt;
&lt;h2 id="svm-theory"&gt;SVM theory&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="Support Vector Machines"&gt;SVMs&lt;/abbr&gt; can be described with
5&amp;nbsp;ideas in mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Linear, binary classifiers&lt;/b&gt;: If data â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Support Vector Machines (SVMs) is a group of powerful classifiers. In this
article, I will give a short impression of how they work. I continue
with an example how to use SVMs with sklearn.&lt;/p&gt;
&lt;h2 id="svm-theory"&gt;SVM theory&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="Support Vector Machines"&gt;SVMs&lt;/abbr&gt; can be described with
5&amp;nbsp;ideas in mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Linear, binary classifiers&lt;/b&gt;: If data is linearly separable, it
        can be separated by a hyperplane. There is one hyperplane which
        maximizes the distance to the next datapoints (support vectors). This
        hyperplane should be taken:&lt;br/&gt;
&lt;div&gt;
          $$
          \begin{aligned}
              \text{minimize}_{\mathbf{w}, b}\,&amp;amp;\frac{1}{2} \|\mathbf{w}\|^2\\
              \text{s.t. }&amp;amp; \forall_{i=1}^m y_i \cdot \underbrace{(\langle \mathbf{w}, \mathbf{x}_i\rangle + b)}_{\text{Classification}} \geq 1
          \end{aligned}$$&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Slack variables&lt;/b&gt;: Even if the underlying process which generates
          the features for the two classes is linearly separable, noise can
          make the data not separable. The introduction of &lt;i&gt;slack&amp;nbsp;variables&lt;/i&gt;
          to relax the requirement of linear separability solves
          this problem. The trade-off between accepting some errors and a more
          complex model is weighted by a parameter $C \in \mathbb{R}_0^+$. The
          bigger $C$, the more errors are accepted. The new optimization
          problem is:
          $$
          \begin{aligned}
              \text{minimize}_{\mathbf{w}, b}\,&amp;amp;\frac{1}{2} \|\mathbf{w}\|^2 + C \cdot \sum_{i=1}^m \xi_i\\
              \text{s.t. }&amp;amp; \forall_{i=1}^m y_i \cdot (\langle \mathbf{w}, \mathbf{x}_i\rangle + b) \geq 1 - \xi_i
          \end{aligned}$$

          Note that $0 \le \xi_i \le 1$ means that the data point is within
          the margin, whereas $\xi_i \ge 1$ means it is misclassified. An
          SVM with $C &amp;gt; 0$ is also called a &lt;i&gt;soft-margin SVM&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Dual Problem&lt;/b&gt;: The primal problem is to find the normal vector $\mathbf{w}$ and the
          bias $b$. The dual problem is to express $\mathbf{w}$ as a linear
          combination of the training data $\mathbf{x}_i$:
          $$\mathbf{w} = \sum_{i=1}^m \alpha_i y_i \mathbf{x}_i$$
          where $y_i \in \{-1, 1\}$ represents the class of the training
          example and $\alpha_i$ are Lagrange multipliers. The usage of
          Lagrange multipliers is explained with some examples
          in [&lt;a href="#ref-smi04" name="ref-smi04-anchor"&gt;Smi04&lt;/a&gt;]. The usage of the Lagrange multipliers
          $\alpha_i$ changes the optimization problem depend on the
          $\alpha_i$ which are weights for the feature vectors. It turns
          out that most $\alpha_i$ will be zero. The non-zero weighted vectors
          are called &lt;i&gt;support&amp;nbsp;vectors&lt;/i&gt;.

          The optimization problem is now, according to [&lt;a href="#ref-bur98" name="ref-bur98-anchor"&gt;Bur98&lt;/a&gt;] (a great read; if you really want to understand it I can recommend it!):
          $$
          \begin{aligned}
              \text{maximize}_{\alpha_i}\,&amp;amp; \sum_{i=1}^m \alpha_i - \frac{1}{2} \sum_{i=1}^m \sum_{j=1}^m \alpha_i \alpha_j y_i y_j \langle \mathbf{x}_i, \mathbf{x}_j \rangle\\
              \text{s.t. } &amp;amp; \forall_{i=1}^m 0 \leq \alpha_i \leq C\\
              \text{s.t. } &amp;amp; \sum_{i=1}^m \alpha_i y_i = 0
          \end{aligned}$$&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Kernel-Trick&lt;/b&gt;: Not every dataset is linearly separable. This problem is approached
          by transforming the feature vectors $\mathbf{x}$ with a non-linear
          mapping $\Phi$ into a higher dimensional (probably
          $\infty$-dimensional) space. As the feature vectors $\mathbf{x}$
          are only used within scalar product
          $\langle \mathbf{x}_i, \mathbf{x}_j \rangle$, it is not necessary to
          do the transformation. It is enough to do the calculation
          $$K(\mathbf{x}_i, \mathbf{x}_j) = \langle \mathbf{x}_i, \mathbf{x}_j \rangle$$

          This function $K$ is called a &lt;i&gt;kernel&lt;/i&gt;. The idea of never
          explicitly transforming the vectors $\mathbf{x}_i$ to the higher
          dimensional space is called the &lt;i&gt;kernel&amp;nbsp;trick&lt;/i&gt;. Common kernels
          include the polynomial kernel
          $$K_P(\mathbf{x}_i, \mathbf{x}_j) = (\langle \mathbf{x}_i, \mathbf{x}_j \rangle + r)^p$$
          of degree $p$ and coefficient $r$, the Gaussian &lt;abbr title="Radial Basis Function"&gt;RBF&lt;/abbr&gt; kernel
          $$K_{\text{Gauss}}(\mathbf{x}_i, \mathbf{x}_j) = e^{\frac{-\gamma\|\mathbf{x}_i - \mathbf{x}_j\|^2}{2 \sigma^2}}$$
          and the sigmoid kernel
          $$K_{\text{tanh}}(\mathbf{x}_i, \mathbf{x}_j) = \tanh(\gamma \langle \mathbf{x}_i, \mathbf{x}_j \rangle - r)$$
          where the parameter $\gamma$ determines how much influence single
          training examples have.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Multiple Classes&lt;/b&gt;: By using the &lt;i&gt;one-vs-all&lt;/i&gt; or the
        &lt;i&gt;one-vs-one&lt;/i&gt; strategy it is possible to get a classifying system
        which can distinguish many classes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A nice visualization of the transformation of the data in a higher-dimensional
space was done by&lt;/p&gt;
&lt;p&gt;TeamGrizzly's channel: &lt;a href="https://youtu.be/9NrALgHFwTo"&gt;Performing nonlinear classification via linear separation in higher dimensional space&lt;/a&gt; on YouTube. 22.11.2010.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://math.stackexchange.com/a/1620256/6876"&gt;What is an example of a SVM kernel, where one implicitly uses an infinity-dimensional space?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/4630731/562769"&gt;SVM - hard or soft margins?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sklearn"&gt;sklearn&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sklearn&lt;/code&gt; is the machine learning toolkit to get started for Python. It has
a very good documentation and many functions. You can find &lt;a href="http://scikit-learn.org/stable/install.html"&gt;installation
instructions&lt;/a&gt; on their website.&lt;/p&gt;
&lt;p&gt;It also includes &lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC"&gt;&lt;code&gt;sklearn.svm.SVC&lt;/code&gt;&lt;/a&gt;.
SVC is short for &lt;em&gt;support vector classifier&lt;/em&gt; and this is how you use it for
the MNIST dataset.&lt;/p&gt;
&lt;p&gt;Parameters for which you might want a further explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache_size&lt;/code&gt;: &lt;a href="http://datascience.stackexchange.com/a/996/8820"&gt;datascience.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Train a SVM to categorize 28x28 pixel images into digits (MNIST dataset).&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Orchestrate the retrival of data, training and testing."""&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Get classifier&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.svm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SVC&lt;/span&gt;
    &lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SVC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probability&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# cache_size=200,&lt;/span&gt;
              &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"rbf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mo"&gt;0073&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Start fitting. This may take a while"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# take all of it - make that number lower for experiments&lt;/span&gt;
    &lt;span class="n"&gt;examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;][:&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;][:&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;analyze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analyze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Analyze how well a classifier performs on data.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    clf : classifier object&lt;/span&gt;
&lt;span class="sd"&gt;    data : dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# Get confusion matrix&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;
    &lt;span class="n"&gt;predicted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Confusion matrix:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
          &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;confusion_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                   &lt;span class="n"&gt;predicted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Accuracy: &lt;/span&gt;&lt;span class="si"&gt;%0.4f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accuracy_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                                     &lt;span class="n"&gt;predicted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Print example&lt;/span&gt;
    &lt;span class="n"&gt;try_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;try_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# clf.predict_proba&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"out: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;try_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;view_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;try_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;try_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;view_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    View a single image.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    image : numpy array&lt;/span&gt;
&lt;span class="sd"&gt;        Make sure this is of the shape you want.&lt;/span&gt;
&lt;span class="sd"&gt;    label : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Label: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get data ready to learn with.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    dict&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Load the simple, but similar digits dataset&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_digits&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;
        &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_digits&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;

        &lt;span class="c1"&gt;# Scale data to [-1, 1] - This is of mayor importance!!!&lt;/span&gt;
        &lt;span class="c1"&gt;# In this case, I know the range and thus I can (and should) scale&lt;/span&gt;
        &lt;span class="c1"&gt;# manually. However, this might not always be the case.&lt;/span&gt;
        &lt;span class="c1"&gt;# Then try sklearn.preprocessing.MinMaxScaler or&lt;/span&gt;
        &lt;span class="c1"&gt;# sklearn.preprocessing.StandardScaler&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.cross_validation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;
        &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;test_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Load the original dataset&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fetch_mldata&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;
        &lt;span class="n"&gt;mnist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_mldata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MNIST original'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;

        &lt;span class="c1"&gt;# Scale data to [-1, 1] - This is of mayor importance!!!&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.cross_validation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;
        &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;test_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;The script from above gives the following results:&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Confusion matrix for an SVM classifier on the MNIST dataset&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;2258&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2566&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2280&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2304&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2183&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2026&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2245&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2373&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2166&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2329&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Accuracy: 98.40%&lt;/li&gt;
&lt;li&gt;Error: 1.60%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looks pretty good to me. However, note that there are much better results.
The best on &lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;the official website&lt;/a&gt; has an
error of 0.23% and is a committee of 35 convolutional neural networks.&lt;/p&gt;
&lt;p&gt;The best SVM I could find has an error of 0.56% and applies a polynomial kernel
of degree&amp;nbsp;9 as well as some preprocessing.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="#ref-smi04-anchor" name="ref-smi04"&gt;Smi04&lt;/a&gt;] B. T. Smith, &amp;ldquo;Lagrange multipliers tutorial in the context of support
  vector machines,&amp;rdquo; Memorial University of Newfoundland St. John&amp;rsquo;s,
  Newfoundland, Canada, Jun. 2004.&lt;/li&gt;
&lt;li&gt;[&lt;a href="#ref-bur98-anchor" name="ref-bur98"&gt;Bur98&lt;/a&gt;] C. J. Burges, &amp;ldquo;&lt;a href="http://research.microsoft.com/pubs/67119/svmtutorial.pdf"&gt;A tutorial on support vector machines for pattern recognition&lt;/a&gt;&amp;rdquo;, Data&amp;nbsp;mining and knowledge discovery, vol. 2, no. 2, pp.
  121&amp;ndash;167, 1998.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html"&gt;Recognizing hand-written digits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trung Huynh's tech blog: &lt;a href="http://www.trungh.com/2013/04/digit-recognition-using-svm-in-python/"&gt;Digit Recognition using SVM in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html"&gt;Classifier comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scikit-learn.org/stable/supervised_learning.html"&gt;Supervised learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stats.stackexchange.com/questions/80398/how-can-svm-find-an-infinite-feature-space-where-linear-separation-is-always-p"&gt;How can SVM 'find' an infinite feature space where linear separation is always possible?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Machine Learning"></category><category term="SVM"></category><category term="Classification"></category><category term="sklearn"></category></entry><entry><title>Tensor Flow - A quick impression</title><link href="https://martin-thoma.com/tensor-flow-quick/" rel="alternate"></link><published>2015-11-11T22:33:00+01:00</published><updated>2015-11-11T22:33:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2015-11-11:/tensor-flow-quick/</id><summary type="html">&lt;p&gt;Tensor Flow is a machine learning toolkit which recently got published by
Google. They published it under &lt;a href="https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)"&gt;Apache License 2.0&lt;/a&gt;. Looking at the source code overview, it seems to be mainly C++
with a significant bit of Python.&lt;/p&gt;
&lt;p&gt;I guess the abstract of the
&lt;a href="http://download.tensorflow.org/paper/whitepaper2015.pdf"&gt;Whitepaper&lt;/a&gt; is a good
description â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tensor Flow is a machine learning toolkit which recently got published by
Google. They published it under &lt;a href="https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)"&gt;Apache License 2.0&lt;/a&gt;. Looking at the source code overview, it seems to be mainly C++
with a significant bit of Python.&lt;/p&gt;
&lt;p&gt;I guess the abstract of the
&lt;a href="http://download.tensorflow.org/paper/whitepaper2015.pdf"&gt;Whitepaper&lt;/a&gt; is a good
description what TensorFlow is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TensorFlow is an interface for expressing machine learning algorithms, and an
implementation for executing such algorithms. A computation expressed using
TensorFlow can be executed with little or no change on a wide variety of
heterogeneous systems, ranging from mobile devices such as phones and tablets
up to large-scale distributed systems of hundreds of machines and thousands
of computational devices such as GPU cards. The system is flexible and can be
used to express a wide variety of algorithms, including training and
inference algorithms for deep neural network models, and it has been used for
conducting research and for deploying machine learning systems into
production across more than a dozen areas of computer science and other
fields, including speech recognition, computer vision, robotics, information
retrieval, natural language processing, geographic information extraction,
and computational drug discovery. This paper describes the TensorFlow
interface and an implementation of that interface that we have built at
Google. The TensorFlow API and a reference implementation were released as an
open-source package under the Apache 2.0 license in November, 2015 and are
available at www.tensorflow.org.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The core seems to be written in C++, but it has a Python front end.&lt;/p&gt;
&lt;p&gt;By now, I couldn't test much because I just made my GPU machine unusable
(while trying to get the GPU General Computing practical software to run...).
I'll try to expand this article as soon as possible, but I guess it might
take several weeks until I have enough time. Lets see...&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;The documentation about the installation makes a VERY good impression. Better
than anything I can write in a few minutes, so ... &lt;a href="http://tensorflow.org/get_started/os_setup.md"&gt;RTFM&lt;/a&gt;
 ðŸ˜œ&lt;/p&gt;
&lt;p&gt;For Linux systems with CUDA and without root privileges, you can install it
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.5.0-cp27-none-linux_x86_64.whl --user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But remember you have to set the environment variable &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; and
&lt;code&gt;CUDA_HOME&lt;/code&gt;. For many configurations, adding the following lines to your
&lt;code&gt;.bashrc&lt;/code&gt; will work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="s2"&gt;:/usr/local/cuda/lib64"&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CUDA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/cuda
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mnist"&gt;MNIST&lt;/h2&gt;
&lt;p&gt;The following code can be used to check if your Tensor Flow installation is
working. You have to have the &lt;a href="https://gist.github.com/MartinThoma/f37150d0c521f598b08a"&gt;&lt;code&gt;get_mnist_data_tf.py&lt;/code&gt;&lt;/a&gt;
in the same directory as the following script. I've - more or less - directly
copied it from &lt;a href="http://tensorflow.org/tutorials/mnist/pros/index.md"&gt;the tutorial&lt;/a&gt;.
Just execute the script below and see if it finishes without throwing errors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;get_mnist_data_tf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;read_data_sets&lt;/span&gt;
&lt;span class="n"&gt;mnist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_data_sets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"MNIST_data/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;one_hot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tf&lt;/span&gt;
&lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InteractiveSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;784&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;y_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;784&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_all_variables&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cross_entropy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;train_step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cross_entropy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_batch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;train_step&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="n"&gt;correct_prediction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;accuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;correct_prediction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;weight_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncated_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stddev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bias_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strides&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'SAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max_pool_2x2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;strides&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'SAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;W_conv1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b_conv1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bias_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;x_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;h_conv1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W_conv1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b_conv1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h_pool1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_pool_2x2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_conv1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;W_conv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b_conv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bias_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;h_conv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_pool1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W_conv2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b_conv2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h_pool2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_pool_2x2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_conv2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;W_fc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b_fc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bias_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;h_pool2_flat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_pool2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;h_fc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_pool2_flat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W_fc1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b_fc1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;keep_prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h_fc1_drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_fc1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keep_prob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;W_fc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b_fc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bias_variable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;y_conv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_fc1_drop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W_fc2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b_fc2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cross_entropy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_conv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;train_step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AdamOptimizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cross_entropy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;correct_prediction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_conv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;accuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;correct_prediction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_all_variables&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_batch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;train_accuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keep_prob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"step &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;, training accuracy &lt;/span&gt;&lt;span class="si"&gt;%g&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train_accuracy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;train_step&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keep_prob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test accuracy &lt;/span&gt;&lt;span class="si"&gt;%g&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keep_prob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="observations"&gt;Observations&lt;/h2&gt;
&lt;p&gt;While looking at the MNIST example, I made a couple of observations. Let's
begin with the nice parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tensor Flow has a usable documentation (e.g. &lt;a href="http://tensorflow.org/api_docs/python/nn.md"&gt;The neural network part&lt;/a&gt;). Not great, as Lasagne where you have lots of details (e.g. &lt;a href="http://lasagne.readthedocs.org/en/latest/modules/nonlinearities.html#lasagne.nonlinearities.sigmoid"&gt;activation functions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Seems to be quite easy to use.&lt;/li&gt;
&lt;li&gt;Seems to be well-tested by simply being used in many different projects by
  Google.&lt;/li&gt;
&lt;li&gt;Just like Theano (and thus Lasagne), Tensor flow has automatic
  differenciation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not sure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How easy is it to share trained models? In which format would you do so?&lt;/li&gt;
&lt;li&gt;How easy is it to understand a shared model?&lt;/li&gt;
&lt;li&gt;How easy is it to get something new to Tensor Flow like recurrent layers?
  (Actually, this seems rather to show that either the Whitepaper is a bit
  misleading or the documentation / Google search is not that good. In the
  whitepaper they write something about LTSM models, but I couldn't find any docs
  about that. Only by manually going through the manual,
  &lt;a href="http://tensorflow.org/tutorials/recurrent/index.md"&gt;I found it&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not so nice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doesn't work with Python&amp;nbsp;3.&lt;/li&gt;
&lt;li&gt;They don't follow &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;. I know
  that there is a &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Python style guide by Google&lt;/a&gt;,
  but it does not seem to follow that one either. See the next section for
  some more detailed feedback.&lt;/li&gt;
&lt;li&gt;Just like the other Toolkits, you need CUDA. It doesn't work with OpenCL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pep8"&gt;PEP8&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W = tf.Variable(tf.zeros([784, 10]))&lt;/code&gt; should be
    &lt;code&gt;W = tf.Variable(tf.zeros([784, 10]))&lt;/code&gt;.
    Missing whitespaces happened quite often.&lt;/li&gt;
&lt;li&gt;Indent with 2&amp;nbsp;spaces instead of 4&amp;nbsp;spaces. The Google guide seems
    also to use 4.&lt;/li&gt;
&lt;li&gt;Newlines between functions are missing.&lt;/li&gt;
&lt;li&gt;Print statement instead of a print function was used &amp;amp;rightarrow;
  only Python&amp;nbsp;2, not Python&amp;nbsp;3.&lt;/li&gt;
&lt;li&gt;I'm not sure why &lt;code&gt;y_&lt;/code&gt; has the trailing underscore. According to
  &lt;a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles"&gt;PEP8&lt;/a&gt;,
  a single trailing underscore is used by convention to avoid conflicts with
  Python keyword.&lt;/li&gt;
&lt;li&gt;A mixture of different styles as pointed out on &lt;a href="http://beust.com/weblog/2015/11/09/tensorflows-rough-exterior/"&gt;Credric's Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="videos_1"&gt;Videos&lt;/h2&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="https://www.youtube-nocookie.com/embed/oZikw5k_2FM?rel=0" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;Starting at 21m 2s:&lt;/p&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="https://www.youtube-nocookie.com/embed/90-S1M7Ny_o?rel=0" width="512"&gt;&lt;/iframe&gt;
&lt;h2 id="alternatives-similar-software"&gt;Alternatives / Similar software&lt;/h2&gt;
&lt;p&gt;As I don't really know by now what Tensor Flow is doing, I can't pin-point
alternatives. But I have some educated guesses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt; has been around for quite
  a while and seems to have a similar approach with its computational graph.
  Enhanced by &lt;a href="http://lasagne.readthedocs.org/en/latest/"&gt;Lasagne&lt;/a&gt;, it is a
  pretty good alternative when it comes to neural networks. Lasagne has an
  exceptionally good documentation, but parts of the tutorial could still be
  improved.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt; was something I recently tried.
  I didn't like it too much due to the lack of documentation, but it certainly
  is a big project. Especially when it comes to images.&lt;/li&gt;
&lt;li&gt;I haven't tried, but they look promising:&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chainer.org/"&gt;Chainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mxnet.readthedocs.org/en/latest/"&gt;MXNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rll.berkeley.edu/cgt/"&gt;CGT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://torch.ch/"&gt;Torch&lt;/a&gt; has a very nice example for &lt;a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/"&gt;a character
    predictor&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tensorflow.org/"&gt;Official Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow"&gt;github.com/tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://download.tensorflow.org/paper/whitepaper2015.pdf"&gt;TensorFlow: Large-Scale Machine Learning on Heterogeneous Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=10532957"&gt;news.ycombinator.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/programming/comments/3s4vkn/google_brains_deep_learning_library_tensorflow_is/"&gt;reddit.com/r/programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="Python"></category><category term="Tensorflow"></category></entry><entry><title>Lasagne for Python Newbies</title><link href="https://martin-thoma.com/lasagne-for-python-newbies/" rel="alternate"></link><published>2015-04-17T19:26:00+02:00</published><updated>2015-04-17T19:26:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2015-04-17:/lasagne-for-python-newbies/</id><summary type="html">&lt;p&gt;Lasagne is a Python package for training neural networks. The nice thing about
Lasagne is that it is possible to write Python code and execute the training
on nVidea GPUs with automatically generated CUDA code.&lt;/p&gt;
&lt;p&gt;However, installing Lasagne is not that easy. Especially if you are not
familiar with Python â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lasagne is a Python package for training neural networks. The nice thing about
Lasagne is that it is possible to write Python code and execute the training
on nVidea GPUs with automatically generated CUDA code.&lt;/p&gt;
&lt;p&gt;However, installing Lasagne is not that easy. Especially if you are not
familiar with Python. This article aims to guide you through the installation
process.&lt;/p&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Ubuntu-based systems will have Python installed, but I'm not too sure about
pip. You can get it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install python-pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure you have Python and &lt;code&gt;pip&lt;/code&gt;, the standard Python package installer.
Type the following commands to check if you have both:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python --version
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.8

$ pip --version
pip &lt;span class="m"&gt;6&lt;/span&gt;.1.1 from /usr/local/lib/python2.7/dist-packages &lt;span class="o"&gt;(&lt;/span&gt;python &lt;span class="m"&gt;2&lt;/span&gt;.7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="sklearn"&gt;sklearn&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/"&gt;sklearn&lt;/a&gt; is a nice package for machine
learning. You can install it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install scikit-learn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(When I write commands like this you either have to execute
&lt;code&gt;sudo pip install scikit-learn&lt;/code&gt; or &lt;code&gt;pip install scikit-learn --user&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This should work without problems.&lt;/p&gt;
&lt;p&gt;Each classifier has a &lt;code&gt;fit&lt;/code&gt; method and a &lt;code&gt;predict&lt;/code&gt; method. See
&lt;a href="http://scikit-learn.org/stable/auto_examples/svm/plot_iris.html"&gt;iris example&lt;/a&gt;
to get a feeling how to use it. It provides a lot of useful functions like
&lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.train_test_split.html"&gt;&lt;code&gt;train_test_split&lt;/code&gt;&lt;/a&gt;
and has an awesome documentation.&lt;/p&gt;
&lt;p&gt;You don't need this for Lasagne, but it might be good to use sklearn and
Lasagne in combination.&lt;/p&gt;
&lt;h2 id="graphics-drivers-and-cuda"&gt;Graphics drivers and CUDA&lt;/h2&gt;
&lt;p&gt;Make sure CUDA runs on your system by the following commands.
If it doesn't run, you could try the following guides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/q/451672/10425"&gt;Installing and testing CUDA in Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.r-tutor.com/gpu-computing/cuda-installation/cuda6.5-ubuntu"&gt;Installing CUDA Toolkit 6.5 on Ubuntu 14.04 Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/#axzz3XaMVcNwV"&gt;NVIDIA CUDA Getting Started Guide for Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nvidia-smi -L
GPU &lt;span class="m"&gt;0&lt;/span&gt;: GeForce GTX TITAN Black &lt;span class="o"&gt;(&lt;/span&gt;UUID: GPU-abcdef12-abcd-1234-1234-01234567890a&lt;span class="o"&gt;)&lt;/span&gt;

$ nvcc --version
nvcc: NVIDIA &lt;span class="o"&gt;(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt; Cuda compiler driver
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2005&lt;/span&gt;-2013 NVIDIA Corporation
Built on Thu_Mar_13_11:58:58_PDT_2014
Cuda compilation tools, release &lt;span class="m"&gt;6&lt;/span&gt;.0, V6.0.1

$ nvidia-smi -a

&lt;span class="o"&gt;==============&lt;/span&gt;NVSMI &lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;==============&lt;/span&gt;

Timestamp                           : Fri Apr &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:44:41 &lt;span class="m"&gt;2015&lt;/span&gt;
Driver Version                      : &lt;span class="m"&gt;331&lt;/span&gt;.79

Attached GPUs                       : &lt;span class="m"&gt;1&lt;/span&gt;
GPU &lt;span class="m"&gt;0000&lt;/span&gt;:01:00.0
    Product Name                    : GeForce GTX TITAN Black
    Display Mode                    : N/A
    Display Active                  : N/A
    Persistence Mode                : Disabled
    Accounting Mode                 : N/A
    Accounting Mode Buffer Size     : N/A
    Driver Model
        Current                     : N/A
        Pending                     : N/A
    Serial Number                   : N/A
    GPU UUID                        : GPU-fcff168f-a045-2f95-7a4f-8e1cf26a24eb
    Minor Number                    : &lt;span class="m"&gt;0&lt;/span&gt;
    VBIOS Version                   : &lt;span class="m"&gt;80&lt;/span&gt;.80.4E.00.01
    Inforom Version
        Image Version               : N/A
        OEM Object                  : N/A
        ECC Object                  : N/A
        Power Management Object     : N/A
    GPU Operation Mode
        Current                     : N/A
        Pending                     : N/A
    PCI
        Bus                         : 0x01
        Device                      : 0x00
        Domain                      : 0x0000
        Device Id                   : 0x100C10DE
        Bus Id                      : &lt;span class="m"&gt;0000&lt;/span&gt;:01:00.0
        Sub System Id               : 0x106610DE
        GPU Link Info
            PCIe Generation
                Max                 : N/A
                Current             : N/A
            Link Width
                Max                 : N/A
                Current             : N/A
        Bridge Chip
            Type                    : N/A
            Firmware                : N/A
    Fan Speed                       : &lt;span class="m"&gt;26&lt;/span&gt; %
    Performance State               : N/A
    Clocks Throttle Reasons         : N/A
    FB Memory Usage
        Total                       : &lt;span class="m"&gt;6143&lt;/span&gt; MiB
        Used                        : &lt;span class="m"&gt;39&lt;/span&gt; MiB
        Free                        : &lt;span class="m"&gt;6104&lt;/span&gt; MiB
    BAR1 Memory Usage
        Total                       : N/A
        Used                        : N/A
        Free                        : N/A
    Compute Mode                    : Default
    Utilization
        Gpu                         : N/A
        Memory                      : N/A
    Ecc Mode
        Current                     : N/A
        Pending                     : N/A
    ECC Errors
        Volatile
            Single Bit
                Device Memory       : N/A
                Register File       : N/A
                L1 Cache            : N/A
                L2 Cache            : N/A
                Texture Memory      : N/A
                Total               : N/A
            Double Bit
                Device Memory       : N/A
                Register File       : N/A
                L1 Cache            : N/A
                L2 Cache            : N/A
                Texture Memory      : N/A
                Total               : N/A
        Aggregate
            Single Bit
                Device Memory       : N/A
                Register File       : N/A
                L1 Cache            : N/A
                L2 Cache            : N/A
                Texture Memory      : N/A
                Total               : N/A
            Double Bit
                Device Memory       : N/A
                Register File       : N/A
                L1 Cache            : N/A
                L2 Cache            : N/A
                Texture Memory      : N/A
                Total               : N/A
    Retired Pages
        Single Bit ECC              : N/A
        Double Bit ECC              : N/A
        Pending                     : N/A
    Temperature
        Gpu                         : &lt;span class="m"&gt;29&lt;/span&gt; C
    Power Readings
        Power Management            : N/A
        Power Draw                  : N/A
        Power Limit                 : N/A
        Default Power Limit         : N/A
        Enforced Power Limit        : N/A
        Min Power Limit             : N/A
        Max Power Limit             : N/A
    Clocks
        Graphics                    : N/A
        SM                          : N/A
        Memory                      : N/A
    Applications Clocks
        Graphics                    : N/A
        Memory                      : N/A
    Default Applications Clocks
        Graphics                    : N/A
        Memory                      : N/A
    Max Clocks
        Graphics                    : N/A
        SM                          : N/A
        Memory                      : N/A
    Compute Processes               : N/A
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to see if CUDA was installed correctly.&lt;/p&gt;
&lt;h2 id="theano"&gt;Theano&lt;/h2&gt;
&lt;p&gt;The installation of Theano is a bit tricky (see &lt;a href="http://deeplearning.net/software/theano/install.html"&gt;official page&lt;/a&gt;). I don't remember if I installed additional packages, but try&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -H pip install theano
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure that your &lt;code&gt;~/.theanorc&lt;/code&gt; exists and looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[global]
device=gpu
floatX=float32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;float32&lt;/code&gt; is required, even if you have a 64bit system.&lt;/p&gt;
&lt;p&gt;To test your installation, save the following as &lt;code&gt;theanotest.py&lt;/code&gt; and execute
it with &lt;code&gt;python theanotest.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;theano&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sandbox&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;theano.tensor&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;T&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;vlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;  &lt;span class="c1"&gt;# 10 x #cores x # threads per core&lt;/span&gt;
&lt;span class="n"&gt;iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;

&lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vlen&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floatX&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toposort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Looping &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; times took'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'seconds'&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Result is'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Elemwise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toposort&lt;/span&gt;&lt;span class="p"&gt;()]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Used the cpu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Used the gpu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should print the following (well, something similar):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Using gpu device 0: GeForce GTX TITAN Black
[GpuElemwise{exp,no_inplace}(&amp;lt;CudaNdarrayType(float32, vector)&amp;gt;), HostFromGpu(GpuElemwise{exp,no_inplace}.0)]
Looping 1000 times took 0.38205909729 seconds
Result is [ 1.23178029  1.61879349  1.52278066 ...,  2.20771813  2.29967761
  1.62323296]
Used the gpu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Especially "used the gpu" is important. Theano code work on both, CPU and GPU.
If you have a GPU and it does not currently work on a task and it is configured
correctly, then Theano should automatically use the GPU.&lt;/p&gt;
&lt;p&gt;(Don't try to run two Theano scripts at a time ... weird things could happen.)&lt;/p&gt;
&lt;h2 id="lasagne"&gt;Lasagne&lt;/h2&gt;
&lt;p&gt;Lasagne is hosted at Github: &lt;a href="https://github.com/Lasagne/Lasagne"&gt;https://github.com/Lasagne/Lasagne&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently, it is not on pip as Sander wants to wait until we get to version
1.0. So you have to install it manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/Lasagne/Lasagne.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; Lasagne
Lasagne$ sudo -H python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can test if it worked by executing the MNIST example in Lasagne
(&lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;MNIST&lt;/a&gt; is a huge digit dataset). This
might first take some time to download, but should then run quite fast. If
your machine does not use the GPU it will take ages (e.g. on my laptop it takes
about a minute for one epoch)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Lasagne/examples$ python mnist.py
Loading data...
Downloading MNIST dataset
Building model and compiling functions...
/usr/local/lib/python2.7/dist-packages/Lasagne-0.1dev-py2.7.egg/lasagne/init.py:30: UserWarning: The uniform initializer no longer uses Glorot et al.'s approach to determine the bounds, but defaults to the range (-0.01, 0.01) instead. Please use the new GlorotUniform initializer to get the old behavior. GlorotUniform is now the default for all layers.
  warnings.warn("The uniform initializer no longer uses Glorot et al.'s "
/usr/local/lib/python2.7/dist-packages/Lasagne-0.1dev-py2.7.egg/lasagne/layers/helper.py:55: UserWarning: get_all_layers() has been changed to return layers in topological order. The former implementation is still available as get_all_layers_old(), but will be removed before the first release of Lasagne. To ignore this warning, use `warnings.filterwarnings('ignore', '.*topo.*')`.
  warnings.warn("get_all_layers() has been changed to return layers in "
Starting training...
Epoch 1 of 500 took 72.593s
  training loss:        1.330231
  validation loss:        0.470251
  validation accuracy:        87.54 %%
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="nolearn"&gt;nolearn&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/dnouri/nolearn"&gt;nolearn&lt;/a&gt; is another Python package. It was
created to make using Lasagne even simpler.&lt;/p&gt;
&lt;p&gt;You can install it via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/dnouri/nolearn.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; nolearn
$ python setup.py install --user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, the following code downloads the MNIST dataset, trains a model on
it and evaluates the result for a single image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lasagne&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lasagne&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lasagne.updates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nesterov_momentum&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nolearn.lasagne&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NeuralNet&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gzip&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;


&lt;span class="n"&gt;PY2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;PY2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlretrieve&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pickle_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlretrieve&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pickle_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DATA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://deeplearning.net/data/mnist/mnist.pkl.gz'&lt;/span&gt;
&lt;span class="n"&gt;DATA_FILENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'mnist.pkl.gz'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATA_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATA_FILENAME&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Load data from `url` and store the result in `filename`."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Downloading MNIST dataset"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pickle_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'latin-1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get data with labels, split into training, validation and test set."""&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;y_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;y_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;num_examples_train&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;num_examples_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;num_examples_test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;input_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;output_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nn_example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;net1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NeuralNet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'input'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InputLayer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hidden'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DenseLayer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'output'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DenseLayer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;# layer parameters:&lt;/span&gt;
        &lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;hidden_num_units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# number of units in 'hidden' layer&lt;/span&gt;
        &lt;span class="n"&gt;output_nonlinearity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lasagne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nonlinearities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;output_num_units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 10 target values for the digits 0, 1, 2, ..., 9&lt;/span&gt;

        &lt;span class="c1"&gt;# optimization method:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nesterov_momentum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;update_learning_rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;update_momentum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="n"&gt;max_epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Train the network&lt;/span&gt;
    &lt;span class="n"&gt;net1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X_train'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'y_train'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# Try the network on new data&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Feature vector (100-110): &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X_test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Label: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'y_test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Predicted: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;net1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X_test'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Got &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt; testing datasets."&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X_train'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;nn_example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Neural Network with 79510 learnable parameters

## Layer information

  #  name      size
---  ------  ------
  0  input      784
  1  hidden     100
  2  output      10

  epoch    train loss    valid loss    train/val    valid acc  dur
-------  ------------  ------------  -----------  -----------  -----
      1       0.59132       0.32314      1.82993      0.90988  1.70s
      2       0.30733       0.26644      1.15348      0.92623  1.96s
      3       0.25879       0.23606      1.09629      0.93363  2.09s
      4       0.22680       0.21424      1.05865      0.93897  2.13s
      5       0.20187       0.19633      1.02827      0.94313  2.21s
      6       0.18129       0.18187      0.99685      0.94758  1.81s
      7       0.16398       0.16992      0.96506      0.95074  2.14s
      8       0.14941       0.16020      0.93265      0.95262  1.88s
      9       0.13704       0.15189      0.90222      0.95460  2.15s
     10       0.12633       0.14464      0.87342      0.95707  2.21s
Feature vector (100-110): [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
Label: 7
Predicted: [7]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pyimagesearch.com/2014/09/22/getting-started-deep-learning-python/"&gt;Getting Started with Deep Learning and Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Machine Learning"></category></entry><entry><title>Gradient Descent, the Delta Rule and Backpropagation</title><link href="https://martin-thoma.com/gradient-descent-the-delta-rule-and-backpropagation/" rel="alternate"></link><published>2014-10-26T21:06:00+01:00</published><updated>2014-10-26T21:06:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2014-10-26:/gradient-descent-the-delta-rule-and-backpropagation/</id><summary type="html">&lt;p&gt;If you learn about machine learning you will stumble over three terms that are
related:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradient descent,&lt;/li&gt;
&lt;li&gt;the Delta rule and&lt;/li&gt;
&lt;li&gt;backpropagation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gradient descent is a way to find a minimum in a high-dimensional space. You
go in direction of the steepest descent.&lt;/p&gt;
&lt;p&gt;The delta rule is an update rule â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you learn about machine learning you will stumble over three terms that are
related:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradient descent,&lt;/li&gt;
&lt;li&gt;the Delta rule and&lt;/li&gt;
&lt;li&gt;backpropagation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gradient descent is a way to find a minimum in a high-dimensional space. You
go in direction of the steepest descent.&lt;/p&gt;
&lt;p&gt;The delta rule is an update rule for single layer perceptrons. It makes use
of gradient descent.&lt;/p&gt;
&lt;p&gt;Backpropagation is an efficient implementation of gradient descent, where a
rule can be formulated which has some recursively defined parts. Those parts
belong to neurons of different layers and get calculated from the output-layer
(last layer) to the first hidden layer.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;Wikipedia pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gradient_descent"&gt;Gradient descent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Delta_rule"&gt;Delta rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Backpropagation"&gt;Backpropagation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Machine Learning"></category><category term="AI"></category></entry><entry><title>The Twiddle Algorithm</title><link href="https://martin-thoma.com/twiddle/" rel="alternate"></link><published>2014-09-06T13:49:00+02:00</published><updated>2014-09-06T13:49:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2014-09-06:/twiddle/</id><summary type="html">&lt;p&gt;Twiddle is an algorithm that tries to find a good choice of parameters &lt;span class="math"&gt;\(p\)&lt;/span&gt;
for an algorithm &lt;span class="math"&gt;\(\mathcal{A}\)&lt;/span&gt; that returns an error.&lt;/p&gt;
&lt;p&gt;The algorithm is quite simple to implement. I guess gradient descent might be
better for most cases, but Twiddle does not require any knowledge about the
algorithm â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Twiddle is an algorithm that tries to find a good choice of parameters &lt;span class="math"&gt;\(p\)&lt;/span&gt;
for an algorithm &lt;span class="math"&gt;\(\mathcal{A}\)&lt;/span&gt; that returns an error.&lt;/p&gt;
&lt;p&gt;The algorithm is quite simple to implement. I guess gradient descent might be
better for most cases, but Twiddle does not require any knowledge about the
algorithm &lt;span class="math"&gt;\(\mathcal{A}\)&lt;/span&gt; which might be a big advantage. And you don't have to
calculate the gradient of high dimensional functions, which is nice, too.&lt;/p&gt;
&lt;h2 id="the-algorithm"&gt;The algorithm&lt;/h2&gt;
&lt;p&gt;Here is some pythonic pseudo code. &lt;code&gt;A&lt;/code&gt; is an algorithm that returns an error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Choose an initialization parameter vector&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Define potential changes&lt;/span&gt;
&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Calculate the error&lt;/span&gt;
&lt;span class="n"&gt;best_err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# There was some improvement&lt;/span&gt;
            &lt;span class="n"&gt;best_err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# There was no improvement&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Go into the other direction&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# There was an improvement&lt;/span&gt;
                &lt;span class="n"&gt;best_err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
                &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;1.05&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;  &lt;span class="c1"&gt;# There was no improvement&lt;/span&gt;
                &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="c1"&gt;# As there was no improvement, the step size in either&lt;/span&gt;
                &lt;span class="c1"&gt;# direction, the step size might simply be too big.&lt;/span&gt;
                &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2uQ2BSzDvXs"&gt;Twiddle - CS373 Unit 5 - Udacity&lt;/a&gt;:
  Explanation of Twiddle by Sebastian Thrun&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.htw-mechlab.de/index.php/numerische-optimierung-in-matlab-mit-twiddle-algorithmus/"&gt;Numerische Optimierung in Matlab mit Twiddle-Algorithmus&lt;/a&gt; (German)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="AI"></category><category term="Machine Learning"></category></entry><entry><title>GPUs - Supercomputers for your home</title><link href="https://martin-thoma.com/gpus-supercomputers-for-your-home/" rel="alternate"></link><published>2014-08-20T23:26:00+02:00</published><updated>2014-08-20T23:26:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2014-08-20:/gpus-supercomputers-for-your-home/</id><summary type="html">&lt;p&gt;A few days ago I got some of my neural net code to work with a GPU.
The GPU is called "Tesla C2075". It is able to get 515 GFlops peak performance.
It has 448 CUDA cores that work with 1.15 GHz and it has 6GB GDDR5 memory.&lt;/p&gt;
&lt;p&gt;My â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few days ago I got some of my neural net code to work with a GPU.
The GPU is called "Tesla C2075". It is able to get 515 GFlops peak performance.
It has 448 CUDA cores that work with 1.15 GHz and it has 6GB GDDR5 memory.&lt;/p&gt;
&lt;p&gt;My code needed about 10 hours to run before. After that, it only needed 10
minutes. That is 60 times faster! The library that did this miracle for me is
called &lt;a href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Out of curiosity, I've searched for current high-end gamer graphic cards.
I found nVidia Titan Z:&lt;/p&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="//www.youtube.com/embed/2JjxgJcXVE0" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;The Titan Z has 5760 CUDA cores. It can get 4061 GFLOPS x2 and has 12 GB of
memory. That technological wonder-work costs only 2802 Euro.&lt;/p&gt;
&lt;p&gt;To put that into perspective: In 2005, you would probably have been on place
68 of the TOP500 supercomputers world wide! (&lt;a href="http://www.top500.org/list/2005/06/?page=1"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Isn't that crazy?&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.geforce.com/hardware/desktop-gpus/geforce-gtx-titan-z/specifications"&gt;Titan Z Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/805217/what-are-the-differences-between-scientific-gpus-and-gaming-gpus"&gt;What are the differences between &amp;ldquo;scientific GPUs&amp;rdquo; and &amp;ldquo;gaming GPUs&amp;rdquo;?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Theano"></category><category term="GPU"></category><category term="nVidea"></category><category term="CUDA"></category><category term="AI"></category><category term="Machine Learning"></category></entry><entry><title>A.I. in Computer Games</title><link href="https://martin-thoma.com/ai-in-computer-games/" rel="alternate"></link><published>2014-07-01T23:52:00+02:00</published><updated>2014-07-01T23:52:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2014-07-01:/ai-in-computer-games/</id><summary type="html">&lt;p&gt;Artificial Intelligences (A.I.s) are computer programs that are able to adjust
their behaviour according to data they see. So A.I.s are able to adjust to
the data a human player generates.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Game A.I.s" src="http://imgs.xkcd.com/comics/game_ais.png"/&gt;
&lt;figcaption&gt;Game A.I.s&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="solved-games"&gt;Solved games&lt;/h2&gt;
&lt;p&gt;There is a number of games which are definitely â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Artificial Intelligences (A.I.s) are computer programs that are able to adjust
their behaviour according to data they see. So A.I.s are able to adjust to
the data a human player generates.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Game A.I.s" src="http://imgs.xkcd.com/comics/game_ais.png"/&gt;
&lt;figcaption&gt;Game A.I.s&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="solved-games"&gt;Solved games&lt;/h2&gt;
&lt;p&gt;There is a number of games which are definitely solved. That means the A.I.
plays perfectly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tic-Tac-Toe&lt;/li&gt;
&lt;li&gt;Connect Four: &lt;a href="http://www.informatik.uni-trier.de/~fernau/DSL0607/Masterthesis-Viergewinnt.pdf"&gt;A Knowledge-based Approach of Connect-Four&lt;/a&gt;. Amsterdam, 1988. Victor Allis.&lt;/li&gt;
&lt;li&gt;Checkers:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also: &lt;a href="https://en.wikipedia.org/wiki/Solved_game"&gt;Solved Game&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="computers-win-always"&gt;Computers win always&lt;/h2&gt;
&lt;p&gt;A second category are games in which A.I.s always win against human players, but
they don't have a perfect strategy. Or at least we have not proven that they
have a perfect strategy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chess&lt;/li&gt;
&lt;li&gt;Go on a 5&amp;times;5 board&lt;/li&gt;
&lt;li&gt;Reversi on a 4&amp;times;4 board&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Update: There are advances on the 19&amp;times;19 field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://storage.googleapis.com/deepmind-data/assets/papers/deepmind-mastering-go.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nature: &lt;a href="http://www.nature.com/nature/journal/v529/n7587/full/nature16961.html"&gt;Mastering the game of Go with deep neural networks and tree search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YouTube by nature: &lt;a href="https://www.youtube.com/watch?v=g-dKXOlsf98"&gt;The computer that mastered Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Blog: &lt;a href="https://googleblog.blogspot.de/2016/01/alphago-machine-learning-game-go.html"&gt;AlphaGo: using machine learning to master the ancient game of Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="unspecialized-game-ais"&gt;Unspecialized Game A.I.s&lt;/h2&gt;
&lt;p&gt;The following video is an explanation and demo of software Tom Murphy VII wrote that learns how to play a Nintendo Entertainment System game and then automatically plays it.
It's called "learnfun" (for learn function).&lt;/p&gt;
&lt;p&gt;You might want to skip to 6:13 for the demo:&lt;/p&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="//www.youtube.com/embed/xOCurBYI_gY" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;Interesting parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;09:46&lt;/code&gt; - Ridiculous Super Mario move&lt;/li&gt;
&lt;li&gt;&lt;code&gt;14:20&lt;/code&gt; - Super packman move&lt;/li&gt;
&lt;li&gt;&lt;code&gt;15:57&lt;/code&gt; - Tetris: The best move is not to play&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Research paper published in SIGBOVIK 2013: "&lt;a href="http://tom7.org/mario/mario.pdf"&gt;The first level of Super Mario Bros. is easy with lexicographic ordering a and time travel ...after that it gets a little tricky&lt;/a&gt;."&lt;/p&gt;
&lt;p&gt;There is a follow-up video with Zelda, Punch-Out, Dr. Mario (10:27), Contra
(12:10), Wall Street Kid (14:30) and Russian Attack (18:10):&lt;/p&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="//www.youtube.com/embed/YGJHR9Ovszs?list=UU3azLjQuz9s5qk76KEXaTvA" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;Interesting parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10:25&lt;/code&gt; - Exploiting a Random number generator in Dr. Mario&lt;/li&gt;
&lt;li&gt;&lt;code&gt;18:15&lt;/code&gt; - Russian Attack: Finding a save spot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;20:58&lt;/code&gt; - Russian Attack: Fight fast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a third episode with Super Mario, Gradius (4:06), Mega Man 2 (8:30), Pro
Wrestling, Color a Dinosaur, Nintendo Pinball (13:40), Cliffhanger (15:20),
Arkanoid (16:33), Double Dare (19:22), Ice hockey (21:44):&lt;/p&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="//www.youtube.com/embed/Q-WgQcnessA" width="512"&gt;&lt;/iframe&gt;
&lt;p&gt;Interesting parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;04:45&lt;/code&gt;: Playing Gradius like a YoLo-Pro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;05:42&lt;/code&gt;: Gradius - Insta-Kill the Boss&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10:04&lt;/code&gt;: Mega Man 2 - Manipulate the random number generator&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16:33&lt;/code&gt;: Arkanoid (Break Out) - Manipulate the random number generator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="super-mario-ai-competition"&gt;Super Mario A.I. Competition&lt;/h2&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="//www.youtube.com/embed/bBZ7kEphv3s?start=385" width="512"&gt;&lt;/iframe&gt;
&lt;h2 id="dota-dendi-vs-openai"&gt;DOTA: Dendi vs. OpenAI&lt;/h2&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="288" src="https://www.youtube.com/embed/wiOopO9jTZw" width="512"&gt;&lt;/iframe&gt;</content><category term="AI"></category><category term="games"></category><category term="Machine Learning"></category></entry><entry><title>Classification with PyBrain</title><link href="https://martin-thoma.com/classification-with-pybrain/" rel="alternate"></link><published>2014-06-16T01:02:00+02:00</published><updated>2014-06-16T01:02:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2014-06-16:/classification-with-pybrain/</id><summary type="html">&lt;p&gt;PyBrain is a Python library for machine learning. It's in version 0.31 and
the last change is 2 months ago (&lt;a href="https://github.com/pybrain/pybrain"&gt;source&lt;/a&gt;).
The source code is licensed under &lt;a href="https://tldrlegal.com/license/bsd-3-clause-license-(revised)"&gt;BSD 3 Clause License&lt;/a&gt;. The &lt;a href="http://pybrain.org/docs/"&gt;documentation&lt;/a&gt; is usable, but for
from perfect.&lt;/p&gt;
&lt;h2 id="classification-example"&gt;Classification example&lt;/h2&gt;
&lt;p&gt;The following is a slightly modified example from â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyBrain is a Python library for machine learning. It's in version 0.31 and
the last change is 2 months ago (&lt;a href="https://github.com/pybrain/pybrain"&gt;source&lt;/a&gt;).
The source code is licensed under &lt;a href="https://tldrlegal.com/license/bsd-3-clause-license-(revised)"&gt;BSD 3 Clause License&lt;/a&gt;. The &lt;a href="http://pybrain.org/docs/"&gt;documentation&lt;/a&gt; is usable, but for
from perfect.&lt;/p&gt;
&lt;h2 id="classification-example"&gt;Classification example&lt;/h2&gt;
&lt;p&gt;The following is a slightly modified example from the documentation. It shows
how PyBrain starts learning to classify 2-dimensional datapoints into 3 classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="c1"&gt;# Source: http://pybrain.org/docs/tutorial/fnn.html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ClassificationDataSet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.utilities&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;percentError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.tools.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;buildNetwork&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.supervised.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BackpropTrainer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.structure.modules&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SoftmaxLayer&lt;/span&gt;

&lt;span class="c1"&gt;# Only needed for data generation and graphical output&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ioff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contourf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;multivariate_normal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;normalvariate&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;INPUT_FEATURES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;cov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
    &lt;span class="n"&gt;alldata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassificationDataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INPUT_FEATURES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CLASSES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLASSES&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multivariate_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cov&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;
            &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;alldata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'minX'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'maxX'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'minY'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'maxY'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alldata&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_data2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;alldata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassificationDataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalvariate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalvariate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;alldata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSample&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalvariate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalvariate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;alldata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSample&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'minX'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'maxX'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'minY'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'maxY'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alldata&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perceptron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hidden_neurons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weightdecay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;momentum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;INPUT_FEATURES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;HIDDEN_NEURONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hidden_neurons&lt;/span&gt;
    &lt;span class="n"&gt;WEIGHTDECAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weightdecay&lt;/span&gt;
    &lt;span class="n"&gt;MOMENTUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;momentum&lt;/span&gt;

    &lt;span class="c1"&gt;# Generate the labeled set&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#g = generate_data2()&lt;/span&gt;
    &lt;span class="n"&gt;alldata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'minX'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'maxX'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'minY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'maxY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Split data into test and training dataset&lt;/span&gt;
    &lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trndata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alldata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitWithProportion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_convertToOneOfMany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# This is necessary, but I don't know why&lt;/span&gt;
    &lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_convertToOneOfMany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# http://stackoverflow.com/q/8154674/562769&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Number of training patterns: &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Input and output dimensions: &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                   &lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outdim&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hidden neurons: &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;HIDDEN_NEURONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"First sample (input, target, class):"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'input'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'target'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;fnn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buildNetwork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HIDDEN_NEURONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outdim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;outclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SoftmaxLayer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;trainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BackpropTrainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fnn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;momentum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MOMENTUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weightdecay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;WEIGHTDECAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Visualization&lt;/span&gt;
    &lt;span class="n"&gt;ticksX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxX&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ticksY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxY&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticksX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ticksY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# need column vectors in dataset, not arrays&lt;/span&gt;
    &lt;span class="n"&gt;griddata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassificationDataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INPUT_FEATURES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CLASSES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;griddata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSample&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;trainer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trainEpochs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;trnresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;percentError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trainer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testOnClassData&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                                 &lt;span class="n"&gt;trndata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;tstresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;percentError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trainer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testOnClassData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                 &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"epoch: &lt;/span&gt;&lt;span class="si"&gt;%4d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trainer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;totalepochs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;"  train error: &lt;/span&gt;&lt;span class="si"&gt;%5.2f%%&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trnresult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;"  test error: &lt;/span&gt;&lt;span class="si"&gt;%5.2f%%&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;tstresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fnn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activateOnDataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;griddata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# the highest output activation gives the class&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# always print on the same canvas&lt;/span&gt;
        &lt;span class="n"&gt;ioff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# interactive graphics off&lt;/span&gt;
        &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# clear the plot&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'input'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tstdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'input'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'o'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="c1"&gt;# safety check against flat field&lt;/span&gt;
            &lt;span class="n"&gt;contourf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# plot the contour&lt;/span&gt;
        &lt;span class="n"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# interactive graphics on&lt;/span&gt;
        &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# update the plot&lt;/span&gt;

    &lt;span class="n"&gt;ioff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add more options if you like&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-H"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"H"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"hidden_neurons"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"number of neurons in the hidden layer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"W"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"weightdecay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"weightdecay"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-m"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"M"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"momentum"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"momentum"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;perceptron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hidden_neurons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weightdecay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;momentum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See it in action:&lt;/p&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/FjvO3zqVYSw" width="420"&gt;&lt;/iframe&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pybrain.org/"&gt;Official website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackExchange&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/tagged/pybrain"&gt;StackOverflow&lt;/a&gt;: 134 questions&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stats.stackexchange.com/search?q=pybrain"&gt;stats.SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/MachineLearning/search?q=pybrain&amp;amp;restrict_sr=on"&gt;reddit.com/r/MachineLearning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="PyBrain"></category><category term="Neural Networks"></category><category term="Classification"></category><category term="AI"></category><category term="Machine Learning"></category></entry></feed>