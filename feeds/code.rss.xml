<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Martin Thoma - Code</title><link>https://martin-thoma.com/</link><description>A blog about Code, the Web and Cyberculture</description><lastBuildDate>Mon, 12 Feb 2024 20:00:00 +0100</lastBuildDate><item><title>Designing Event-Driven Systems in Local Python Applications</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/designing-event-driven-systems-in-local-python-applications-8abf7544d7e4</link><description>&lt;p&gt;&lt;img alt="An event-driven system decouples producers of events and the effects that those events should have on the remaining software system." src="../images/2024/02/event-driven-software.png"/&gt;&lt;em&gt;An event-driven system decouples producers of events and the effects that those events should have on the remaining software system.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An event-driven software architecture can help you write cleaner code. Most software engineers are likely familiar with pre-defined event systems such as those provided by frontend frameworks/languages: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event"&gt;keypress in …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 12 Feb 2024 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2024-02-12:/https://levelup.gitconnected.com/designing-event-driven-systems-in-local-python-applications-8abf7544d7e4</guid><category>Code</category><category>software architecture</category></item><item><title>Let your computer speak to you</title><link>https://martin-thoma.com/https://medium.com/@martinthoma/let-your-computer-speak-to-you-4a42994ed48f</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2023/02/tts-pipeline.drawio.png"&gt;&lt;img alt="A Text-to-Speech pipeline" src="../images/2023/02/tts-pipeline.drawio.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A Text-to-Speech pipeline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I recently injured my eye during a hike. Don&amp;rsquo;t worry, it&amp;rsquo;s be fine soon &amp;mdash; but it made me think about text-to-speech (TTS) software again. You probably all know the robotic voices that can read text, but are extremely hard to understand:&lt;/p&gt;
&lt;iframe allow="autoplay" frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1453260838&amp;amp;color=ff5500" width="100%"&gt;&lt;/iframe&gt;
&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/martin-thoma-172139021" style="color: #cccccc; text-decoration: none;" target="_blank" title="Martin Thoma"&gt;Martin Thoma&lt;/a&gt; &amp;middot; &lt;a href="https://soundcloud.com/martin-thoma-172139021/mark-twain-the-awful-german-language-by-espeak-ng" style="color: #cccccc; text-decoration: none;" target="_blank" title='eSpeak NG: "The Awful German Language" by Mark Twain'&gt;eSpeak NG …&lt;/a&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 28 Feb 2023 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2023-02-28:/https://medium.com/@martinthoma/let-your-computer-speak-to-you-4a42994ed48f</guid><category>Code</category><category>ML</category><category>AI</category></item><item><title>9 Clean Code Patterns I wish I knew earlier</title><link>https://martin-thoma.com/https://towardsdatascience.com/9-clean-code-patterns-i-wish-i-knew-earlier-57ee56c5892</link><description>&lt;p&gt;Do you know the feeling when you look back at code which you wrote early in
your career? I always feel a bit horrified. But there is a positive side to
it: I learned something new 😄&lt;/p&gt;
&lt;p&gt;A core part of good software is readability. Keeping the mental complexity low
so …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 17 Oct 2021 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-10-17:/https://towardsdatascience.com/9-clean-code-patterns-i-wish-i-knew-earlier-57ee56c5892</guid><category>Code</category><category>Python</category><category>Code</category><category>Programming</category><category>Software Development</category><category>Software Engineering</category></item><item><title>Python 3.10 is Released</title><link>https://martin-thoma.com/https://betterprogramming.pub/python-3-10-is-released-know-whats-new-and-if-it-s-worth-the-switch-19c7a5738f7c</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/10/python-3-10-title.png"&gt;&lt;img alt="Photo by Vraj Shah and Mike from pexels, edited by Martin Thoma" src="../images/2021/10/python-3-10-title.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Photo by Vraj Shah &lt;a href="https://www.pexels.com/de-de/foto/rotes-autokopflicht-638479/"&gt;from pexels&lt;/a&gt; and Mike &lt;a href="https://www.pexels.com/de-de/foto/graustufenfotografie-des-automotors-190574/"&gt;from pexels&lt;/a&gt;, edited by Martin Thoma&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Python 3.10 &lt;a href="https://www.python.org/downloads/release/python-3100/"&gt;was released&lt;/a&gt; on the 4th of October 2021 according to &lt;a href="https://www.python.org/dev/peps/pep-0619/"&gt;PEP 619&lt;/a&gt;. Let&amp;rsquo;s see what&amp;rsquo;s in store for us.&lt;/p&gt;
&lt;h2 id="type-annotations"&gt;Type Annotations&lt;/h2&gt;
&lt;p&gt;I absolutely love type annotations. Since Python 3.6, they …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 04 Oct 2021 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-10-04:/https://betterprogramming.pub/python-3-10-is-released-know-whats-new-and-if-it-s-worth-the-switch-19c7a5738f7c</guid><category>Code</category><category>Python</category><category>Release</category></item><item><title>Library vs Service: 7 Arguments to consider</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/library-vs-service-7-arguments-to-consider-5088dced6022</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/05/library-vs-service.png"&gt;&lt;img alt="Shared code can be in a library or in a service" src="../images/2021/05/library-vs-service.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Shared code can be in a library or in a service. Image by Martin Thoma.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Preventing code duplication is a software development principle called
&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;&lt;em&gt;DRY&lt;/em&gt;&lt;/a&gt; &amp;mdash; &lt;strong&gt;D&lt;/strong&gt;on&amp;rsquo;t
&lt;strong&gt;R&lt;/strong&gt;epeat &lt;strong&gt;Y&lt;/strong&gt;ourself. DRY is important because duplicated code usually
means way more code that needs to be maintained. If you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 14 May 2021 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-05-14:/https://levelup.gitconnected.com/library-vs-service-7-arguments-to-consider-5088dced6022</guid><category>Code</category><category>Software Engineering</category><category>Architecture</category></item><item><title>8 Techniques To Speed up Your Database</title><link>https://martin-thoma.com/https://betterprogramming.pub/8-techniques-to-speed-up-your-database-292754ff7739</link><description>&lt;p&gt;&lt;img alt="Photo by Christina Morillo (original). Thank you!" src="https://cdn-images-1.medium.com/max/10000/1*28TMGhQwjgRqkBU7mXcZcw.jpeg"/&gt;&lt;em&gt;Photo by Christina Morillo (&lt;a href="https://www.pexels.com/de-de/foto/frau-die-beim-tragen-des-laptops-steht-1181354/"&gt;original&lt;/a&gt;). Thank you!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Almost all web services for end-users have the need to store data. Almost all of them store them in a database. And quite a lot use a relational database like PostgreSQL, MySQL/MariaDB, or MSSQL. Database systems are pretty awesome because you can …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 01 Apr 2021 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-04-01:/https://betterprogramming.pub/8-techniques-to-speed-up-your-database-292754ff7739</guid><category>Code</category><category>Database</category></item><item><title>Scaling Vertically vs Scaling Horizontally</title><link>https://martin-thoma.com/https://medium.com/plain-and-simple/scaling-vertically-vs-scaling-horizontally-82547a77d925</link><description>&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2670/1*dHDSuy4b5y4eAdcD-PLJEQ.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The beauty of software development is that almost arbitrary many can profit from a developer&amp;rsquo;s work. Web services such as Facebook or YouTube have several hundred developers, but hundreds of millions of users. However, having many users is not for free. The servers need to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 31 Mar 2021 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-03-31:/https://medium.com/plain-and-simple/scaling-vertically-vs-scaling-horizontally-82547a77d925</guid><category>Code</category><category>Scaling</category></item><item><title>Programming Interviews: Fizz Buzz</title><link>https://martin-thoma.com/https://martinthoma.medium.com/programming-interviews-fizz-buzz-882d545c7ad2</link><description>&lt;p&gt;When companies interview potential new software developers, they typically also have a programming interview to make sure that the candidate can actually write very simple programs. Fizz Buzz is a very simple classical example. The problem is easy to describe and the solution is easy as well.&lt;/p&gt;
&lt;h2 id="problem-statement"&gt;Problem Statement&lt;/h2&gt;
&lt;p&gt;Write …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 09 Mar 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-03-09:/https://martinthoma.medium.com/programming-interviews-fizz-buzz-882d545c7ad2</guid><category>Code</category><category>Interviews</category></item><item><title>Encryption vs Encoding vs Hashing</title><link>https://martin-thoma.com/https://medium.com/plain-and-simple/encryption-vs-encoding-vs-hashing-bb1e166cf15a</link><description>&lt;p&gt;&lt;strong&gt;Encryption is about keeping a secret&lt;/strong&gt; and being able to restore it. &lt;strong&gt;Hashing is about fingerprinting&lt;/strong&gt; &amp;mdash; you don&amp;rsquo;t need to restore the original, but you need to make sure it is identical. &lt;strong&gt;Encoding is about data representation to enable information exchange&lt;/strong&gt;. Encoding does not involve keeping secrets.&lt;/p&gt;
&lt;p&gt;This was …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 02 Feb 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-02-02:/https://medium.com/plain-and-simple/encryption-vs-encoding-vs-hashing-bb1e166cf15a</guid><category>Code</category><category>hash</category><category>encryption</category><category>security</category><category>encoding</category></item><item><title>Merkle Trees</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/merkle-trees-e4fdaeaa3094</link><description>&lt;figure&gt;
&lt;img alt="A Merkle Tree is a binary tree with the data at the leaf nodes. All inner nodes are hashes." src="https://cdn-images-1.medium.com/max/3606/1*Ykn20LKvw2hyuyGV4ps5dA.png" width="800px"/&gt;
&lt;figcaption&gt;A Merkle Tree is a binary tree with the data at the leaf nodes. All inner nodes are hashes.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A Merkle Tree is a data structure that is used in Peer-to-Peer Networks. It is
a binary tree in which the value of an inner node is the hash of its …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 27 Jan 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-01-27:/https://levelup.gitconnected.com/merkle-trees-e4fdaeaa3094</guid><category>Code</category><category>Blockchain</category></item><item><title>HTTPS vs SSL vs TLS</title><link>https://martin-thoma.com/https://medium.com/plain-and-simple/https-vs-ssl-vs-tls-8a0ad0604276</link><description>&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/4810/1*BsJuDWE_7AozmMmahpJ47A.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTPS, SSL, and TLS are all related to encrypted (&amp;ldquo;secure&amp;rdquo;) internet connections. The problem they solve is that a &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;man in the middle&lt;/a&gt; could read the data you receive or send. It is clearly an issue when you log in to your bank or when you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 17 Jan 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-01-17:/https://medium.com/plain-and-simple/https-vs-ssl-vs-tls-8a0ad0604276</guid><category>Code</category><category>Protocols</category><category>HTTPS</category><category>AppSec</category><category>InfoSec</category></item><item><title>6 YAML Features most programmers don’t know</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/6-yaml-features-most-programmers-dont-know-164762343af3</link><description>&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/3474/1*1zw7ZZTxnY5LiSnn9w6zlw.png"/&gt;&lt;/p&gt;
&lt;p&gt;YAML is a file format commonly used for data serialization. There are a plethora of projects using YAML files for configuration, such as &lt;a href="https://docs.docker.com/compose/"&gt;Docker-compose&lt;/a&gt;, &lt;a href="https://pre-commit.com/#2-add-a-pre-commit-configuration"&gt;pre-commit&lt;/a&gt;, &lt;a href="https://docs.travis-ci.com/user/build-config-yaml"&gt;TravisCI&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-formats.html"&gt;AWS Cloudformation&lt;/a&gt;, &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;ESLint&lt;/a&gt;, &lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/#configmaps-and-pods"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;Ansible&lt;/a&gt;, and many more. Knowing the features of YAML helps you with all of them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s cover the basics …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 04 Jan 2021 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2021-01-04:/https://levelup.gitconnected.com/6-yaml-features-most-programmers-dont-know-164762343af3</guid><category>Code</category><category>Software Development</category></item><item><title>Pythons Scoping Rules</title><link>https://martin-thoma.com/https://towardsdatascience.com/but-its-not-declared-40501fb1e943</link><description>&lt;p&gt;It&amp;rsquo;s obvious that you cannot access a variable before it was declared. But if
it was declared inside a loop, can you access it outside a loop? If it was
declared in a function, can you access the variable outside of the function?&lt;/p&gt;
&lt;p&gt;This kind of &amp;ldquo;variable lifetime&amp;rdquo; is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 23 Nov 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-11-23:/https://towardsdatascience.com/but-its-not-declared-40501fb1e943</guid><category>Code</category><category>Code</category><category>Python</category><category>Scope</category></item><item><title>How to get an amazing Terminal</title><link>https://martin-thoma.com/https://towardsdatascience.com/how-to-get-an-amazing-terminal-91619a0beeb7</link><description>&lt;p&gt;As a developer with 10+ years of experience, I love using the shell. The commands never change, I can create custom shortcuts, it&amp;rsquo;s reliable and fast. The defaults are not great, though. After reading this article, you will know how to get an awesome shell + terminal on your system …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 13 Nov 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-11-13:/https://towardsdatascience.com/how-to-get-an-amazing-terminal-91619a0beeb7</guid><category>Code</category><category>Code</category><category>Linux</category><category>Windows</category></item><item><title>pydantic</title><link>https://martin-thoma.com/https://towardsdatascience.com/pydantic-688e897cfd3a</link><description>&lt;p&gt;Having complex nested data structures is hard. The traditional approach to store this kind of data in Python is nested dictionaries. Although &lt;a href="https://www.youtube.com/watch?v=npw4s1QTmPg"&gt;Python dictionaries are amazing&lt;/a&gt;, there are two issues which typically arise: (1) How do I, as a developer, know which kind of data is to be expected in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 02 Nov 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-11-02:/https://towardsdatascience.com/pydantic-688e897cfd3a</guid><category>Code</category><category>Python</category><category>mypy</category><category>hypothesis</category></item><item><title>Visual Studio Code — Python Editors in Review</title><link>https://martin-thoma.com/https://towardsdatascience.com/visual-studio-code-python-editors-in-review-e5e4f269b4e4</link><description>&lt;p&gt;&lt;img alt="Visual Studio Code 1.50.1. The screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/5118/1*h1KupJZHJWRs1OWjqbkmnA.png"/&gt;&lt;em&gt;Visual Studio Code 1.50.1. The screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Visual_Studio_Code"&gt;Visual Studio Code&lt;/a&gt; is a free editor written by Microsoft. Its first release was in 2015, and boy did that one take off. It has &lt;a href="https://stackoverflow.com/questions/tagged/visual-studio-code"&gt;over 28k questions on StackOverflow&lt;/a&gt;, is the 2nd most-used Python editor according …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 31 Oct 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-31:/https://towardsdatascience.com/visual-studio-code-python-editors-in-review-e5e4f269b4e4</guid><category>Code</category><category>Editor</category><category>IDE</category><category>Microsoft</category></item><item><title>PyCharm Professional — Python Editors in Review</title><link>https://martin-thoma.com/https://medium.com/python-in-plain-english/pycharm-professional-python-editors-in-review-b978f0e5c4ba</link><description>&lt;p&gt;&lt;img alt="PyCharm Professional 2020.2. The screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3840/1*C_Rys3U0YL3KBZRfL2k1Fg.png"/&gt;&lt;em&gt;PyCharm Professional 2020.2. The screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;PyCharm is an IDE developed by JetBrains since 2010. Yes, the same company that developed IntelliJ, the de-facto default for Java. It costs &lt;strong&gt;$200 per year&lt;/strong&gt; which is pretty expensive if you just get your feet wet with Python …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 27 Oct 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-27:/https://medium.com/python-in-plain-english/pycharm-professional-python-editors-in-review-b978f0e5c4ba</guid><category>Code</category><category>Editor</category><category>IDE</category><category>Python</category></item><item><title>A Beginner’s Guide to Python Development on Windows 10</title><link>https://martin-thoma.com/https://medium.com/python-in-plain-english/a-beginners-guide-to-python-development-on-windows-10-e9d80601f483</link><description>&lt;p&gt;The Python programming language is used for &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;web development&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/intro-to-data-analysis--ud170"&gt;data analysis&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/intro-to-machine-learning--ud120"&gt;machine learning&lt;/a&gt;, &lt;a href="https://towardsdatascience.com/hypothesis-testing-in-machine-learning-using-python-a0dc89e169ce"&gt;statistics&lt;/a&gt;, &lt;a href="https://martin-thoma.com/scraping-with-selenium/"&gt;web scraping&lt;/a&gt;, and so much more. There are tons of tutorials which, ironically, makes it pretty hard to recommend one. However, there is also a lack of support for Windows.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get the very first …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 20 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-20:/https://medium.com/python-in-plain-english/a-beginners-guide-to-python-development-on-windows-10-e9d80601f483</guid><category>Code</category><category>Code</category><category>Development</category><category>Windows</category></item><item><title>JSON encoding/decoding with Python</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/json-encoding-decoding-with-python-62a2cae63a6a</link><description>&lt;p&gt;JSON is a cornerstone for the exchange of data on the Internet. REST APIs use the standardized message format all around the world. Being a subset of JavaScript, it got a huge initial boost in its adoption right from the start. The fact that its syntax is pretty clear and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 05 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-10-05:/https://levelup.gitconnected.com/json-encoding-decoding-with-python-62a2cae63a6a</guid><category>Code</category><category>JSON</category><category>Python</category><category>Benchmark</category></item><item><title>How to write Flake8 plugins 😍</title><link>https://martin-thoma.com/https://medium.com/analytics-vidhya/how-to-write-flake8-plugins-5c5c47faffc2</link><description>&lt;p&gt;Really important parts of code reviews are almost impossible to automate:
Architectural decisions and logical bugs. They are too customized to your
codebase; too specific for the pull request.&lt;/p&gt;
&lt;p&gt;However, many comments in code reviews are not like that. They are about simply
style decisions, common minor mistakes, and misconceptions …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 25 Sep 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-09-25:/https://medium.com/analytics-vidhya/how-to-write-flake8-plugins-5c5c47faffc2</guid><category>Code</category><category>Flake8</category><category>Python</category></item><item><title>Logging Basics in Python</title><link>https://martin-thoma.com/https://towardsdatascience.com/logging-basics-in-python-d0db13e538f9</link><description>&lt;p&gt;&lt;img alt="The dmesg output. Screenshot taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3760/1*7bpeZdDGtnxRIFE0iYp7OQ.png"/&gt;&lt;em&gt;The &lt;a href="https://en.wikipedia.org/wiki/Dmesg"&gt;dmesg&lt;/a&gt; output. Screenshot taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Logging is the act of recording information about the current state of execution. It&amp;rsquo;s typically done for two purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;: To enable the developer to narrow down the cause of a system failure&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;: To enable people on operations to know …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 15 Sep 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-09-15:/https://towardsdatascience.com/logging-basics-in-python-d0db13e538f9</guid><category>Code</category><category>Python</category><category>Logging</category></item><item><title>Pre-commit hooks</title><link>https://martin-thoma.com/https://towardsdatascience.com/pre-commit-hooks-you-must-know-ff247f5feb7e</link><description>&lt;p&gt;pre-commit hooks are a mechanism of the version control system git. They let
you execute code right before the commit. Confusingly, there is also a Python
package called pre-commit which allows you to create and use pre-commit hooks
with a way simpler interface. The Python package has a plugin-system to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 04 Sep 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-09-04:/https://towardsdatascience.com/pre-commit-hooks-you-must-know-ff247f5feb7e</guid><category>Code</category><category>Software Development</category><category>Python</category><category>git</category></item><item><title>Pytest Plugins to Love ❤️</title><link>https://martin-thoma.com/https://towardsdatascience.com/pytest-plugins-to-love-%EF%B8%8F-9c71635fbe22</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-sugar-big.png"&gt;&lt;img alt="Plugins can modify and extend a lot of aspects of pylint, including how the output is done" src="../images/2020/08/pytest-sugar-big.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Plugins can modify and extend a lot of aspects of pylint, including how the output is done&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pytest is extensible and has plenty of plugins. You don&amp;rsquo;t need to use any of
them, but you might find some very useful. I love this because you have an easy
time …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 23 Aug 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-08-23:/https://towardsdatascience.com/pytest-plugins-to-love-%EF%B8%8F-9c71635fbe22</guid><category>Code</category><category>Python</category><category>pytest</category></item><item><title>How I moved a library from Python 2 to 3</title><link>https://martin-thoma.com/https://towardsdatascience.com/how-i-moved-a-library-from-python-2-to-3-60fc2b2a21a1</link><description>&lt;p&gt;&lt;img alt="Image by skylarvision from needpix.com" src="https://cdn-images-1.medium.com/max/2560/1*uvS55XJ3-uUny7j1cgye6g.jpeg"/&gt;&lt;em&gt;Image by &lt;a href="https://www.needpix.com/photo/download/1179523/phoenix-photoshop-adler-fire-eagle-digital-art-feuervogel-photoshop-composition-free-pictures"&gt;skylarvision from needpix.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last year I&amp;rsquo;ve given a workshop about packaging Python projects. One of the participants was a bioinformatics researcher. She needed advice because she wanted to switch from Python 2 to Python 3, but a library she needed was only available for Python 2 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 20 Aug 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-08-20:/https://towardsdatascience.com/how-i-moved-a-library-from-python-2-to-3-60fc2b2a21a1</guid><category>Code</category><category>Python</category></item><item><title>Static Code Analysis for Python</title><link>https://martin-thoma.com/https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287</link><description>&lt;p&gt;Static code analysis looks at the code without executing it. It is usually extremely fast to execute, requires little effort to add to your workflow, and can uncover common mistakes. The only downside is that it is not tailored towards your code.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 17 Aug 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-08-17:/https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287</guid><category>Code</category><category>Unit Testing</category><category>Flake8</category><category>mypy</category><category>Security</category><category>AppSec</category></item><item><title>Mutation Testing</title><link>https://martin-thoma.com/https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8</link><description>&lt;p&gt;&lt;img alt="Based on the Monster Character set by macrovector" src="https://cdn-images-1.medium.com/max/2400/1*WjcywqTPozcMSvrLYsQBJQ.png"/&gt;&lt;em&gt;Based on the &lt;a href="https://www.freepik.com/free-vector/monster-character-set_1538770.htm"&gt;Monster Character set&lt;/a&gt; by &lt;a href="https://www.freepik.com/macrovector"&gt;macrovector&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We need to kill the mutants &amp;mdash; no, I&amp;rsquo;m not a villain from the X-Men comics. I&amp;rsquo;m
a software engineer who wants to improve unit tests.&lt;/p&gt;
&lt;p&gt;In this article you will learn what mutation testing is and how it can help …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 10 Aug 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-08-10:/https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8</guid><category>Code</category><category>Python</category><category>pytest</category></item><item><title>Property-based Testing</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119/</link><description>&lt;p&gt;When you write unit tests, it&amp;rsquo;s hard to find the right test cases. You want to
be certain that you covered all the interesting cases, but you could simply not
know or forget one of them. For example, if you unit test a function which
receives an integer, you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 02 Aug 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-08-02:/https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119/</guid><category>Code</category><category>Python</category><category>Testing</category><category>Unit Testing</category><category>fuzzing</category><category>hypothesis</category></item><item><title>CI Pipelines</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38</link><description>&lt;p&gt;Continuous Integration is the practice of integrating code regularly with the main development branch. You can see the need for this when you look at huge projects like SciPy with currently &lt;a href="https://github.com/scipy/scipy/pulls"&gt;274 open pull requests&lt;/a&gt; (PRs). This means 274 different new features, bug fixes or other improvements want to be …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 30 Jul 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-07-30:/https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38</guid><category>Code</category><category>Python</category><category>DevOps</category></item><item><title>Structuring Unit Tests</title><link>https://martin-thoma.com/https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923</link><description>&lt;p&gt;Testing code is often pretty ugly: A lot of copy &amp;amp; paste, the code is all over
the place and hard to understand. In this article you will learn how to
structure unit testing code in Python.&lt;/p&gt;
&lt;h2 id="directory-layout"&gt;Directory Layout&lt;/h2&gt;
&lt;p&gt;I put the tests next to the package. So the tests are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 25 Jul 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-07-25:/https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923</guid><category>Code</category><category>Python</category><category>pytest</category></item><item><title>Unit Testing in Python — tox and nox</title><link>https://martin-thoma.com/https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/alice-full- Andrea-Caprotti.png"&gt;&lt;img alt="Image derived by Martin Thoma from Andrea Caprotti (nox project)" src="../images/2020/07/alice-full- Andrea-Caprotti.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Image derived by Martin Thoma from &lt;a href="https://github.com/theacodes/nox/blob/master/docs/_static/alice-full.png"&gt;Andrea Caprotti&lt;/a&gt; (nox project)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When I started developing Python packages, there was one mistake I did quite often: I forgot to add all dependencies. Additionally, I only tested on my machine for a single Python version.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know how …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 23 Jul 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-07-23:/https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729</guid><category>Code</category><category>Python</category><category>pytest</category><category>tox</category><category>nox</category><category>unit testing</category></item><item><title>How to Test Flask Applications</title><link>https://martin-thoma.com/https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c</link><description>&lt;p&gt;As a data scientist, I need to make my models accessible. I usually &lt;a href="https://medium.com/analytics-vidhya/deploying-a-machine-learning-model-on-web-using-flask-and-python-54b86c44e14a"&gt;deploy models with Flask&lt;/a&gt;. As a software engineer, I want to make sure things work as expected by unit testing them.&lt;/p&gt;
&lt;p&gt;Unit Testing websites or web services is hard for multiple reasons: You have Code-within-Code like HTML …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 19 Jul 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-07-19:/https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c</guid><category>Code</category><category>Python</category><category>Flask</category><category>Software Development</category><category>Unit Testing</category><category>Load Testing</category><category>Software Engineering</category></item><item><title>Unit Testing in Python — Patching, Mocks and Dependency Injection</title><link>https://martin-thoma.com/https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed</link><description>&lt;p&gt;Unit Testing in general is trivial with Python and pytest, but a lot of
developers get frustrated when they have to patch dependencies away to make
code testable. In this article, you will learn how to patch and create mocks.
If you want to refresh basics about unit testing in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 09 Jul 2020 17:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-07-09:/https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed</guid><category>Code</category><category>Python</category><category>Unit Testing</category><category>pytest</category><category>patching</category><category>Mock</category><category>dependency-injection</category></item><item><title>Unit Testing in Python — The Basics</title><link>https://martin-thoma.com/https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0</link><description>&lt;p&gt;Unit testing is the number one skill which separates people who just finished their degrees from people with practical experience. Especially for Python, that&amp;rsquo;s a shame as it is trivial to learn this skill.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to write and run unit tests in Python …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 29 Jun 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-06-29:/https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0</guid><category>Code</category><category>Python</category><category>Unit Testing</category><category>pytest</category></item><item><title>Type Annotations in Python 3.8</title><link>https://martin-thoma.com/https://medium.com/@MartinThoma/type-annotations-in-python-3-8-3b401384403d</link><description>&lt;p&gt;One reason why Python is so easy to get started with is that it has dynamic types. You don&amp;rsquo;t have to specify the type of a variable, you just use variables as labels for containers of data. But in bigger projects, having types is helpful. If you have an …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 22 Jun 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-06-22:/https://medium.com/@MartinThoma/type-annotations-in-python-3-8-3b401384403d</guid><category>Code</category><category>Python</category><category>mypy</category></item><item><title>Pythons super() function</title><link>https://martin-thoma.com/pythons-super/</link><description>&lt;p&gt;Python has a built-in function called &lt;a href="https://docs.python.org/3/library/functions.html#super"&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;.
It might behave different from what you thought.&lt;/p&gt;
&lt;h2 id="single-inheritance"&gt;Single Inheritance&lt;/h2&gt;
&lt;p&gt;As a first simple example, consider this script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 11 Jun 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-06-11:/pythons-super/</guid><category>Code</category><category>Python</category><category>Inheritance</category></item><item><title>Sorting Big Data</title><link>https://martin-thoma.com/sorting-big-data/</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_data"&gt;Big Data&lt;/a&gt; was a common buzzword in
industry in 2012 until 2017. It is still common, but hopefully less of a
buzzword. Now other buzzwords are more common:&lt;/p&gt;
&lt;script src="https://ssl.gstatic.com/trends_nrtr/2152_RC03/embed_loader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt; trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"/m/0bs2j8q","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/01hyh_","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/0138n0j1 …&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 29 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-29:/sorting-big-data/</guid><category>Code</category><category>Big Data</category><category>Python</category><category>Bash</category><category>sorting</category></item><item><title>Python EEL</title><link>https://martin-thoma.com/eel/</link><description>&lt;p&gt;&lt;a href="https://pypi.org/project/Eel/"&gt;Eel&lt;/a&gt; is a little Python library for making
simple Electron-like offline HTML/JS GUI apps, with full access to Python
capabilities and libraries.&lt;/p&gt;
&lt;h2 id="hello-world"&gt;Hello World&lt;/h2&gt;
&lt;p&gt;As a hello world example, I decided to create an offline version of &lt;a href="http://write-math.com/"&gt;write-math.com&lt;/a&gt;.
&lt;a href="https://github.com/MartinThoma/write-math-eel"&gt;Write-math in eel&lt;/a&gt; is on GitHub.&lt;/p&gt;
&lt;p&gt;The directory structure of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 23 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-23:/eel/</guid><category>Code</category><category>Python</category><category>GUI</category><category>electron</category></item><item><title>Python is interpreted</title><link>https://martin-thoma.com/python-is-interpreted/</link><description>&lt;p&gt;Python is interpreted. Python is a scripting language. I hear those two
statements pretty often when people want to say that Python is slow or that
Python is not suited for large systems. In this article I want to dispel those
myths.&lt;/p&gt;
&lt;h2 id="interpreted-language"&gt;Interpreted Language&lt;/h2&gt;
&lt;p&gt;What does it mean to say …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 20 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-20:/python-is-interpreted/</guid><category>Code</category><category>Python</category></item><item><title>Raw SQL vs Query Builder vs ORM</title><link>https://martin-thoma.com/https://towardsdatascience.com/raw-sql-vs-query-builder-vs-orm-eee72dbdd275#cbe8-27a45e3740e8</link><description>&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/relational-database.png"&gt;&lt;img alt="Screenshot of phpmyadmin" src="../images/2020/07/relational-database.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Screenshot of phpmyadmin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Databases are the core of storing state for almost all web applications. For
that reason taking care of the interactions with the database is crucial to
make sure the application keeps running. The way to interact with most
relational databases is SQL &amp;mdash; the &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;*tructured &lt;/strong&gt;Q&lt;strong&gt;uery …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 17 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-17:/https://towardsdatascience.com/raw-sql-vs-query-builder-vs-orm-eee72dbdd275/cbe8-27a45e3740e8</guid><category>Code</category><category>SQL</category><category>ORM</category><category>SQLAlchemy</category><category>pypika</category><category>Query Builder</category></item><item><title>Python Requirements</title><link>https://martin-thoma.com/python-requirements/</link><description>&lt;p&gt;Pythons package management is a constant source of confusion. One part of the
confusion is in which format dependencies should get denoted. It gets worse, because there are &lt;a href="https://stackoverflow.com/q/25337706/562769"&gt;too many tools&lt;/a&gt;. &lt;a href="https://xkcd.com/1987/"&gt;xkcd&lt;/a&gt; shows this pretty well:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://xkcd.com/1987/"&gt;&lt;img alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages." src="https://imgs.xkcd.com/comics/python_environment.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;xkcd The Python environmental protection agency wants to seal it in a cement chamber …&lt;/figcaption&gt;&lt;/figure&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 16 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-16:/python-requirements/</guid><category>Code</category><category>Python</category><category>setup.py</category><category>requirements.txt</category><category>Software Engineering</category></item><item><title>Naming Styles</title><link>https://martin-thoma.com/naming-styles/</link><description>&lt;p&gt;Naming styles are one of the trivial things in a style guide. Here are some of
then names you might hear.&lt;/p&gt;
&lt;h2 id="the-styles"&gt;The Styles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snake_case&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;camelCase&lt;/code&gt;: Also lowerCamelCase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PascalCase&lt;/code&gt;: Also UpperCamelCase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONSTANT_CASE&lt;/code&gt;: This is used in many languages for constants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cebab-case&lt;/code&gt;: I have only seen this within strings. This is likely …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 14 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-14:/naming-styles/</guid><category>Code</category><category>Code</category><category>Style Guide</category></item><item><title>XOR</title><link>https://martin-thoma.com/xor/</link><description>&lt;p&gt;XOR is a simple bit-wise defined function:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{XOR}:&amp;amp; {0, 1} \times {0, 1} \rightarrow {0, 1}\
    \text{XOR}(a, b) :&amp;amp;= \begin{cases}0 &amp;amp;\text{if } a= b\1&amp;amp;\text{otherwise}\end{cases}
\end{align}&lt;/p&gt;
&lt;p&gt;To make it more convenient, we define $a \oplus b := \text{XOR}(a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 12 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-12:/xor/</guid><category>Code</category><category>Python</category><category>Competitive Programming</category><category>Mathematical induction</category></item><item><title>MongoDB</title><link>https://martin-thoma.com/mongodb/</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/MongoDB"&gt;MongoDB&lt;/a&gt; is a document-oriented
database system. It is used to store JSON objects.&lt;/p&gt;
&lt;p&gt;The problem it solves is working with heterogenous data which does not fit into
a schema or where creating a schema would be overly complicated. If it fits into
a schema, use a SQL database like MySQL …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 11 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-11:/mongodb/</guid><category>Code</category><category>Database</category><category>Python</category><category>CRUD</category></item><item><title>File Encryption</title><link>https://martin-thoma.com/file-encryption/</link><description>&lt;p&gt;I recently wondered how difficult it is to encrypt a file. In this article I
will show you two ways to do it. I use a text file &lt;code&gt;content.txt&lt;/code&gt; with the
content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;This is a top secret message!
Don't show it to others!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard"&gt;GNU Privacy Guard&lt;/a&gt; (GnuPG
or …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 10 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-10:/file-encryption/</guid><category>Code</category><category>Python</category><category>Security</category><category>file-encryption</category></item><item><title>asyncio</title><link>https://martin-thoma.com/asyncio/</link><description>&lt;p&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt; is a
library to write concurrent code using the async/await syntax.&lt;/p&gt;
&lt;h2 id="concurrency-basics"&gt;Concurrency Basics&lt;/h2&gt;
&lt;h3 id="parallel-vs-interleaved"&gt;Parallel vs Interleaved&lt;/h3&gt;
&lt;p&gt;Running things concurrently means to run them at the same time. There are two
ways to run stuff concurrently: In parallel or interleaved.&lt;/p&gt;
&lt;p&gt;The following images show the difference for compute-bound two …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 04 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-04:/asyncio/</guid><category>Code</category><category>Python</category><category>multithreading</category><category>multiprocessing</category><category>async</category></item><item><title>Maximum Contiguous Subarray Sum</title><link>https://martin-thoma.com/maximum-subarray-sum/</link><description>&lt;p&gt;The maximum contiguous subarray sum problem is one of the classics. Given an
1D array of numbers $a_1, \dots, a_n$ with $a_i \in \mathbb{R}$, find $s$ such that:&lt;/p&gt;
&lt;p&gt;$$\exists l, r \in [1, \dots, n]: \forall p, q \in [1, \dots, n]: \sum_{i=p}^q \leq \sum_{i …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 03 May 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-05-03:/maximum-subarray-sum/</guid><category>Code</category><category>Competitive Programming</category><category>Brute-Force</category><category>Dynamic Programming</category></item><item><title>How to build reliable Software</title><link>https://martin-thoma.com/reliable-software/</link><description>&lt;p&gt;Reliability in software development is an ambiguous term. Without thinking much
about it, most people would call a system reliable if &lt;em&gt;it just works&lt;/em&gt;. When
reading specifications, you might read some of the following terms:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn&gt;Availability&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;For (web) services, availability is the probability that at a random
        time the service …&lt;/dd&gt;&lt;/dl&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 30 Apr 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-04-30:/reliable-software/</guid><category>Code</category><category>Software Engineering</category></item><item><title>Solving Equations</title><link>https://martin-thoma.com/solving-equations/</link><description>&lt;p&gt;A friend recently asked me if I could help her to find the solution to a
system of non-linear equations. I remembered &lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;Sympy&lt;/a&gt;,
a Python library for symbolic computations.&lt;/p&gt;
&lt;p&gt;Installation is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;sympy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="solving-single-equation"&gt;Solving Single Equation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sympy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 21 Apr 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-04-21:/solving-equations/</guid><category>Code</category><category>Computer Algebra System</category><category>sympy</category><category>Python</category></item><item><title>Dynamic Programming</title><link>https://martin-thoma.com/dynamic-programming/</link><description>&lt;p&gt;Dynamic Programming is a technique to find the solution to a problem by
computing the solution of one or more sub-problems. So the problem needs to
have &lt;a href="https://en.wikipedia.org/wiki/Optimal_substructure"&gt;optimal substructure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you compute the solution bottom-up, then it is Dynamic Programming. If you
compute it top-down, then you might use memoization …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 31 Mar 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-03-31:/dynamic-programming/</guid><category>Code</category><category>Algorithms</category><category>Code</category><category>Fibonacci</category><category>Python</category><category>COP</category><category>CSP</category></item><item><title>Backtracking</title><link>https://martin-thoma.com/backtracking/</link><description>&lt;p&gt;Backtracking is a concept for solving discrete constraint satisfaction problems
(CSPs). Those problems don't have an optimal solution, but just solutions which
satisfy the constraints. The idea of backtracking is to try a solution. If it
doesn't work, go back and try something else.&lt;/p&gt;
&lt;p&gt;Backtracking is often implemented with recursion …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 30 Mar 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-03-30:/backtracking/</guid><category>Code</category><category>Algorithms</category><category>Constraint-satisfaction</category><category>COP</category><category>CSP</category><category>Operations Research</category><category>Backtracking</category><category>Branch-and-Bound</category></item><item><title>Code Golf: Brackets Check</title><link>https://martin-thoma.com/brackets-check/</link><description>&lt;p&gt;Write a function &lt;code&gt;check_bracket_validity&lt;/code&gt; which takes a sequence of brackets as
input and determines if it is valid.&lt;/p&gt;
&lt;p&gt;A sequence is valid, iff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All opened brackets close&lt;/li&gt;
&lt;li&gt;Brackets come in pairs - only what was opened can be closed again&lt;/li&gt;
&lt;li&gt;The 3 styles which should be supported are:&lt;ul&gt;
&lt;li&gt;Round brackets: &lt;code&gt;(&lt;/code&gt; and …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 13 Mar 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-03-13:/brackets-check/</guid><category>Code</category><category>Code</category><category>Python</category><category>Code Golf</category></item><item><title>Software Architecture</title><link>https://martin-thoma.com/software-architecture/</link><description>&lt;p&gt;My mentee recently asked me what software architecture is. How do you draw
an architecture diagram? What is a bad one and how do I learn to draw good ones?&lt;/p&gt;
&lt;p&gt;The software architecture gives a very high-level overview of a software system.&lt;/p&gt;
&lt;h2 id="typical-components"&gt;Typical Components&lt;/h2&gt;
&lt;p&gt;A software architecture tries to solve …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 11 Mar 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-03-11:/software-architecture/</guid><category>Code</category><category>Software Engineering</category></item><item><title>Maximum Fixed-Length Contiguous Subarray</title><link>https://martin-thoma.com/maximum-fixed-length-contiguous-subarray/</link><description>&lt;p&gt;I recently taught a course about improving code for performance. An obvious
performance improvement is to not execute unnecessary operations. I lacked a
good example when I gave the course, but here is one: Find value of the largest
contiguous sub-array of fixed length in a huge array.&lt;/p&gt;
&lt;p&gt;This is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-02-23:/maximum-fixed-length-contiguous-subarray/</guid><category>Code</category><category>Python</category><category>Performance</category></item><item><title>Matrix Multiplication: 2020 Update</title><link>https://martin-thoma.com/matrix-multiplication-2020/</link><description>&lt;p&gt;In 2012 I wrote a series of articles about matrix
multiplication. Now I'm preparing a course about speeding up Python. For this
reason I need an example of code that is fairly simple to understand and can be
optimized. So let's update the results of my old articles 🙂&lt;/p&gt;
&lt;p&gt;The code …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 16 Feb 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-02-16:/matrix-multiplication-2020/</guid><category>Code</category><category>Python</category><category>C++</category><category>pypy</category></item><item><title>Current Python Versions</title><link>https://martin-thoma.com/current-python-versions/</link><description>&lt;p&gt;Which Python versions should my library support?&lt;/p&gt;
&lt;p&gt;For which version should I develop my web service / application?&lt;/p&gt;
&lt;p&gt;For the second question, I like to never take a x.y.0 version. Let them get
the patches out first.&lt;/p&gt;
&lt;h2 id="lifecycle-of-cpython"&gt;Lifecycle of cPython&lt;/h2&gt;
&lt;p&gt;I've asked which CPython versions get support right now …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 12 Feb 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-02-12:/current-python-versions/</guid><category>Code</category><category>Python</category></item><item><title>Python Packaging Course</title><link>https://martin-thoma.com/python-packaging-course/</link><description>&lt;p&gt;The Python Environment is old. Python development started before the internet.
Naturally, such a grown environment is messy:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://xkcd.com/1987/"&gt;&lt;img alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages." src="https://imgs.xkcd.com/comics/python_environment.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Python Environment&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In this course, you will learn the details about Python packaging and how all
of the tools related.&lt;/p&gt;
&lt;h2 id="application-types"&gt;Application Types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Library: Should be included in other code. It will never …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 08 Feb 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-02-08:/python-packaging-course/</guid><category>Code</category><category>Python</category><category>git</category><category>black</category><category>isort</category><category>cookiecutter</category></item><item><title>Virtual Environments</title><link>https://martin-thoma.com/virtual-environments/</link><description>&lt;p&gt;A virtual environment is an isolated Python environments. It has it's own
installed &lt;code&gt;site-packages&lt;/code&gt; which can be different from the systems
&lt;code&gt;site-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR: &lt;code&gt;pipenv&lt;/code&gt; is your friend; it allows you to forget about the others.&lt;/p&gt;
&lt;h2 id="virtualenv"&gt;virtualenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; was created by Ian Bicking. The first version on PyPI is from …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 08 Feb 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-02-08:/virtual-environments/</guid><category>Code</category><category>Python</category><category>venv</category><category>virtualenv</category></item><item><title>PyPI Analysis 2020</title><link>https://martin-thoma.com/pypi-2020/</link><description>&lt;p&gt;I've created an &lt;a href="https://martin-thoma.com/analyzing-pypi-metadata/"&gt;introductory post&lt;/a&gt;
where I looked at the packages meta data in a very superficial way.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://martin-thoma.com/analyzing-pypi-metadata-2/"&gt;second post&lt;/a&gt; I
analyzed the relationships between packages by looking at a dependency graph.&lt;/p&gt;
&lt;p&gt;Now, in the beginning of 2020, I've updated the code and ran my analysis again.
Have …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 09 Jan 2020 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2020-01-09:/pypi-2020/</guid><category>Code</category><category>Python</category><category>Community</category><category>PyPI</category></item><item><title>Coding Fonts</title><link>https://martin-thoma.com/coding-fonts/</link><description>&lt;p&gt;The font choice for developing software is important. Developers read code all
the time.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="powerline-fonts"&gt;Powerline Fonts …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 31 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-31:/coding-fonts/</guid><category>Code</category><category>Software Development</category></item><item><title>How to Speed up Docker</title><link>https://martin-thoma.com/docker-speedup/</link><description>&lt;p&gt;Building a Docker container can take quite a while. However, there are some
easy parts to speed them up.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or …&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 31 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-31:/docker-speedup/</guid><category>Code</category><category>Docker</category></item><item><title>Flask Plugins</title><link>https://martin-thoma.com/flask-plugins/</link><description>&lt;p&gt;The Flask Ecosystem has &lt;a href="http://flask.pocoo.org/extensions/"&gt;a lot of extensions&lt;/a&gt;.
I'll introduce a couple I've stumbled over. There is also an &lt;a href="https://github.com/humiaozuzu/awesome-flask"&gt;awesome list&lt;/a&gt;, but it contains too many extensions and too little
explanation when to use what.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part …&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 31 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-31:/flask-plugins/</guid><category>Code</category><category>Flask</category></item><item><title>Git Contribution Statistics</title><link>https://martin-thoma.com/git-contribution-statistics/</link><description>&lt;p&gt;I've just received a letter that the Scipy community will write a "scipy 1.0"
paper and is wondering who should be mentioned as an author. So they want to
figure out who "really" contributed something. While I think this should be a
manual process (and maybe just anybody who …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 31 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-31:/git-contribution-statistics/</guid><category>Code</category><category>git</category></item><item><title>Lynis</title><link>https://martin-thoma.com/lynis/</link><description>&lt;p&gt;&lt;a href="https://cisofy.com/documentation/lynis/get-started/"&gt;Lynis&lt;/a&gt; is a auditing tool.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;colorized-logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="problems"&gt;Problems&lt;/h2&gt;
&lt;h3 id="could-not-find-languages-directory"&gt;could not find languages directory …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 31 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-31:/lynis/</guid><category>Code</category><category>Lynis</category></item><item><title>Face Recognition</title><link>https://martin-thoma.com/face-recognition/</link><description>&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;A few days ago, I took a flight from Nepal back to Germany. I was 3 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 28 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-28:/face-recognition/</guid><category>Code</category><category>Machine Learning</category><category>Computer Vision</category></item><item><title>Software Stacks</title><link>https://martin-thoma.com/software-stacks/</link><description>&lt;p&gt;Software stacks are projects of software which nicely work together.
They are sometimes also called &lt;a href="https://en.wikipedia.org/wiki/Solution_stack"&gt;solution stacks&lt;/a&gt;. Here are some of which I know that they are widely spread.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published …&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 28 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-28:/software-stacks/</guid><category>Code</category><category>Development</category></item><item><title>Flask Chat - Part I</title><link>https://martin-thoma.com/flask-chat-1/</link><description>&lt;p&gt;Chat applications are everywhere nowadays. The two best-known ones are probably
Slack and WhatsApp. If you keep the amount of users low (e.g. less than 100)
and the number of features limited, then it is actually pretty easy to create
such a chat app.&lt;/p&gt;
&lt;p&gt;I've create a small proof …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 20 Dec 2019 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-20:/flask-chat-1/</guid><category>Code</category><category>Python</category><category>Flask</category></item><item><title>Python Itertools</title><link>https://martin-thoma.com/itertools/</link><description>&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html"&gt;Itertools&lt;/a&gt; is a tiny Python
module with limited functionality. But when you can use it, it is awesome. I
need to look up the names quite often. Recently, I found an
&lt;a href="https://stackoverflow.com/a/942551/562769"&gt;explanation by Ben Blank&lt;/a&gt; which is
simply beautiful.&lt;/p&gt;
&lt;h2 id="product"&gt;product&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.product"&gt;&lt;code&gt;product(*iterables, repeat=1)&lt;/code&gt;&lt;/a&gt; creates the cross product of two …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 09 Dec 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-12-09:/itertools/</guid><category>Code</category><category>Python</category><category>itertools</category><category>permutations</category><category>combinations</category></item><item><title>Bucketing in A/B-Testing</title><link>https://martin-thoma.com/bucketing-in-ab-testing/</link><description>&lt;p&gt;Bucketing users in two groups is a key part in A/B testing. We need to randomly
assign users to a bucket. And in practice, we need to make sure a user is
assigned to the same bucket consistently.&lt;/p&gt;
&lt;p&gt;First, we need a user identifier.&lt;/p&gt;
&lt;h2 id="database-solution"&gt;Database Solution&lt;/h2&gt;
&lt;p&gt;We want to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 28 Nov 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-11-28:/bucketing-in-ab-testing/</guid><category>Code</category><category>Data Science</category><category>A/B-Testing</category><category>Random Number Generator</category></item><item><title>Simulated Annealing</title><link>https://martin-thoma.com/simulated-annealing/</link><description>&lt;div class="info"&gt;This article is not quite finished, but I recently wanted to share some ideas.&lt;/div&gt;
&lt;p&gt;Simulated Annealing is an optimization algorithm. It is well-suited for
combinatoric problems.&lt;/p&gt;
&lt;h2 id="confusion-matrix-ordering"&gt;Confusion Matrix Ordering&lt;/h2&gt;
&lt;p&gt;A confusion matrix contains the predictions of a classifier together with their
ground truth. The cell $(i, j)$ gives the information …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 28 Nov 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-11-28:/simulated-annealing/</guid><category>Code</category><category>Data Science</category></item><item><title>jq</title><link>https://martin-thoma.com/jq/</link><description>&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; is a command line tool for processing JSON data. It is useful when
executing small ad-hoc tasks. In this sense, it is similar to &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt; and
&lt;code&gt;grep&lt;/code&gt;. It is very good for the first step in exploratory data analysis:
Getting an idea what you actually have.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ubuntu …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 03 Nov 2019 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-11-03:/jq/</guid><category>Code</category><category>Data analysis</category><category>EDA</category><category>JSON</category><category>JSONL</category></item><item><title>Ansible</title><link>https://martin-thoma.com/ansible/</link><description>&lt;p&gt;Ansible is a configuration management tool maintained by Red Hat. It has to be
installed on a controll machine. On the target machine, no configuration is
needed. The control machine connects to the target machines via SSH.&lt;/p&gt;
&lt;h2 id="which-problem-does-it-solve"&gt;Which problem does it solve?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;In short&lt;/strong&gt;: Ansible makes configurations repeatable.&lt;/p&gt;
&lt;p&gt;Why this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 03 Nov 2019 08:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-11-03:/ansible/</guid><category>Code</category><category>Python</category><category>Ansible</category><category>DevOps</category><category>IaC</category><category>Configuration Management</category><category>Continuous Delivery</category></item><item><title>Key-Value Stores</title><link>https://martin-thoma.com/key-value-stores/</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Key-value_database"&gt;Key-value stores&lt;/a&gt; are
specialized NoSQL databases. Essentially, they are dictionaries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="database-properties"&gt;Database Properties&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt; is a set of properties of database
transactions intended to guarantee validity even in the event of errors, power
failures, etc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;tomicity: Either all statements are applied or none. This is important for SELECTs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 29 Sep 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-09-29:/key-value-stores/</guid><category>Code</category><category>Database</category><category>Redis</category><category>MySQL</category><category>MariaDB</category><category>Postgres</category><category>pickledb</category><category>Python</category><category>NoSQL</category><category>sysbench</category><category>DBaaS</category></item><item><title>pyproject.toml</title><link>https://martin-thoma.com/pyproject-toml/</link><description>&lt;p&gt;The &lt;code&gt;pyproject.toml&lt;/code&gt; file allows package creators to define the build system as
a dependency as well as a projects metadata.
Also, other kinds of meta-data and the install requirements can be
defined in it.&lt;/p&gt;
&lt;p&gt;If you are interested in a sample project, try &lt;a href="https://github.com/pypa/sampleproject"&gt;pypa/sampleproject&lt;/a&gt; or try the &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;packaging …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 30 Jul 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-07-30:/pyproject-toml/</guid><category>Code</category><category>Python</category><category>packaging</category></item><item><title>How to analyze Set Data</title><link>https://martin-thoma.com/analyze-set-data/</link><description>&lt;p&gt;Exploratory Data Analysis (EDA) is nice and easy, if the entities you look at
are of one of the typical levels of measurement (see below). But if one feature
is a set, it becomes harder. In this post, I want to show a couple of
possibilities.&lt;/p&gt;
&lt;h2 id="level-of-measurement"&gt;Level of measurement&lt;/h2&gt;
&lt;p&gt;If …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 06 Jul 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-07-06:/analyze-set-data/</guid><category>Code</category><category>EDA</category><category>CMO</category></item><item><title>TLS and Nginx</title><link>https://martin-thoma.com/tls-and-nginx/</link><description>&lt;p&gt;Transport security is an important topic nowadays. We don't want a man in the
middle (MITM) to be able to read our communication with banks, our e-mails, or our
medical apps. Hence we need encryption of our data at the transport layer
level.&lt;/p&gt;
&lt;h2 id="the-problem-of-internet-connections"&gt;The Problem of Internet Connections&lt;/h2&gt;
&lt;p&gt;The internet …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 16 Jun 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-06-16:/tls-and-nginx/</guid><category>Code</category><category>nginx</category><category>SSL</category><category>TLS</category><category>Security</category></item><item><title>Celery</title><link>https://martin-thoma.com/celery/</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Celery_(software)"&gt;Celery&lt;/a&gt; is a task queue. I
was experimenting with it today and want to share some insights.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Think of YouTube. Users can upload videos, but before they are shown on the
platform they need to get processed. Converting the format, checking for
illegal content. This takes a considerable …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 10 Jun 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-06-10:/celery/</guid><category>Code</category><category>Message Queue</category><category>inter-process communication</category><category>Architecture</category></item><item><title>SQL Connection Strings</title><link>https://martin-thoma.com/sql-connection-strings/</link><description>&lt;p&gt;When you want to connect to a database in SQLAlchemy, you need a connection
string. It usually has the form&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dialect[+driver]://user:password@host/dbname[?key=value..]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quite often, the &lt;code&gt;user&lt;/code&gt; is &lt;code&gt;root&lt;/code&gt; and the &lt;code&gt;host&lt;/code&gt; is &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have the valid connection string, you can &lt;strong&gt;test if …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 02 Jun 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-06-02:/sql-connection-strings/</guid><category>Code</category><category>SQLAlchemy</category><category>Database</category><category>MySQL</category></item><item><title>Gunicorn</title><link>https://martin-thoma.com/gunicorn/</link><description>&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th rowspan="2"&gt;sync&lt;/th&gt;
&lt;th colspan="2"&gt;Async Workers&lt;/th&gt;
&lt;th rowspan="2"&gt;tornado&lt;/th&gt;
&lt;th colspan="2"&gt;AsyncIO Workers&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;worker&lt;/td&gt;
&lt;td&gt;gevent&lt;/td&gt;
&lt;td&gt;eventlet&lt;/td&gt;
&lt;td&gt;gaiohttp&lt;/td&gt;
&lt;td&gt;gthread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;core characteristic&lt;/td&gt;
&lt;td&gt;* Per request a process&lt;br/&gt;* Blocks other requests until it is finished&lt;/td&gt;
&lt;td&gt;*&amp;nbsp;based on the Greenlet library&lt;br/&gt;* Program-level threads&lt;/td&gt;
&lt;td&gt;*&amp;nbsp;based on the Greenlet library&lt;br/&gt;* Program-level threads&lt;/td&gt;
&lt;td&gt;*provides async I/O non-blocking design model&lt;br/&gt;*&amp;nbsp;ideal for handling long requests …&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 24 May 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-05-24:/gunicorn/</guid><category>Code</category><category>gunicorn</category><category>Flask</category></item><item><title>Simple Operations and Basic Numbers</title><link>https://martin-thoma.com/simple-operations/</link><description>&lt;p&gt;I just wondered how fast some simple operations are (in Python). Like the lookup of an
element in a dictionary. Here you have some, tested on my ThinkPad T460p (&lt;a href="https://ark.intel.com/content/www/de/de/ark/products/88967/intel-core-i7-6700hq-processor-6m-cache-up-to-3-50-ghz.html"&gt;i7-6700HQ&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="arithmethic"&gt;Arithmethic&lt;/h2&gt;
&lt;p&gt;I added/subtracted/multiplied/divided a thousand pairs of numbers to test the
speed of basic arithmetic operations. I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 17 Apr 2019 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-04-17:/simple-operations/</guid><category>Code</category><category>Python</category><category>Network</category><category>speed</category><category>Internet</category><category>Traffic</category></item><item><title>Python Puzzle 4</title><link>https://martin-thoma.com/python-puzzle-4/</link><description>&lt;p&gt;What is the output of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;bar=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;kwargs=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Test 1:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holla&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Test 2:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holla&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Test 1:
    bar=12
    kwargs={'holla': 13}
Test 2:
    bar=12
    kwargs={'holla' …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 25 Feb 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-02-25:/python-puzzle-4/</guid><category>Code</category><category>Programming</category><category>Python</category><category>puzzle</category></item><item><title>Code Optimization</title><link>https://martin-thoma.com/code-optimization/</link><description>&lt;p&gt;Code optimization is about making programs run faster. In this article, I'll
give some basic ideas how to do it.&lt;/p&gt;
&lt;div class="info"&gt;This article is NOT about &lt;a href="https://martin-thoma.com/optimization-basics/"&gt;optimization problems&lt;/a&gt;. It is also not about compression. Neither is it about churn rates (making users / companies happy).&lt;/div&gt;
&lt;p&gt;There is a ton of different ways …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 28 Jan 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2019-01-28:/code-optimization/</guid><category>Code</category><category>Software Engineering</category><category>Productivity</category></item><item><title>Code Quality</title><link>https://martin-thoma.com/code-quality/</link><description>&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Here are some rules that help you to write code of high quality. They are
inspired …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 30 Dec 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-12-30:/code-quality/</guid><category>Code</category><category>Python</category></item><item><title>Ways to store Data</title><link>https://martin-thoma.com/ways-to-store-data/</link><description>&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Data is one core element of machine learning. Hence it is worth to think about
ways …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 30 Dec 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-12-30:/ways-to-store-data/</guid><category>Code</category><category>Machine Learning</category><category>Data</category></item><item><title>Type Systems</title><link>https://martin-thoma.com/type-systems/</link><description>&lt;p&gt;The topic of type system keeps comming up when I hear people discuss
programming languages. So let's summarize it.&lt;/p&gt;
&lt;h2 id="dynamic-vs-static-typing"&gt;Dynamic vs Static Typing&lt;/h2&gt;
&lt;div style="background-color: #cdcdcd"&gt;Rule of thumb: Statically typed languages check their types at compile time,
while dynamically typed languages check their types at runtime.&lt;/div&gt;
&lt;p&gt;I like the definition of &lt;a href="https://pythonconquerstheuniverse.wordpress.com/2009/10/03/static-vs-dynamic-typing-of-programming-languages/"&gt;pythonconquerstheuniverse …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Mon, 26 Nov 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-11-26:/type-systems/</guid><category>Code</category><category>Programming Languages</category></item><item><title>Python Package Versions</title><link>https://martin-thoma.com/python-package-versions/</link><description>&lt;p&gt;Python packages should (must?) have a version. It would be best if that
version string was a &lt;a href="https://semver.org"&gt;semantic version&lt;/a&gt;, but this article
is not about how your version string should look like. It's about how to have
a consistent &lt;strong&gt;version string on PyPI&lt;/strong&gt; and &lt;strong&gt;accessible via
&lt;code&gt;[yourpackage].__version__&lt;/code&gt;&lt;/strong&gt; - and preferably …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 13 Nov 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-11-13:/python-package-versions/</guid><category>Code</category><category>Python</category></item><item><title>Pythons str vs repr</title><link>https://martin-thoma.com/str-vs-repr/</link><description>&lt;p&gt;The goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous and the goal of &lt;code&gt;__str__&lt;/code&gt; is to be readable. Bonus points, if &lt;code&gt;__repr__&lt;/code&gt; returns what is needed to create the object. Some examples are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s1"&gt;'[42, 1337]'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;'{1337, 42}'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Location'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'lon' …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 28 Oct 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-10-28:/str-vs-repr/</guid><category>Code</category><category>Python</category></item><item><title>Closures</title><link>https://martin-thoma.com/closures/</link><description>&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt; is a
technique for implementing lexically scoped name binding in a language with
first-class functions.&lt;/p&gt;
&lt;h2 id="pairs"&gt;Pairs&lt;/h2&gt;
&lt;p&gt;This post is triggered by &lt;a href="https://stackoverflow.com/q/52481607/562769"&gt;this question&lt;/a&gt;
and the nice answer by Martijn Pieters.&lt;/p&gt;
&lt;p&gt;Here is a super short example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 19 Oct 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-10-19:/closures/</guid><category>Code</category><category>Python</category><category>Software Engineering</category></item><item><title>Python property</title><link>https://martin-thoma.com/python-property/</link><description>&lt;p&gt;Python has a built-in decorator &lt;code&gt;@property&lt;/code&gt;. In this article, you will learn
why and how to use it.&lt;/p&gt;
&lt;p&gt;The following super basic &lt;code&gt;Location&lt;/code&gt; class is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="getters-and-setters"&gt;Getters and Setters&lt;/h2&gt;
&lt;p&gt;Let's say, you want to add a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Fri, 19 Oct 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-10-19:/python-property/</guid><category>Code</category><category>Python</category></item><item><title>Command Line</title><link>https://martin-thoma.com/command-line/</link><description>&lt;p&gt;As a software developer, I work daily many hours on the command line. This
article summarizes some tools and tricks to speed up this work.&lt;/p&gt;
&lt;h2 id="the-basics"&gt;The basics&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://tiswww.case.edu/php/chet/bash/bashtop.html"&gt;Bash&lt;/a&gt;, &lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;, &lt;a href="https://fishshell.com/"&gt;Fish&lt;/a&gt; are Linux shells.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;Oh-my-ZSH&lt;/a&gt; is a plugin for ZSH which is AWESOME!&lt;/p&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;h3 id="basics"&gt;Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: Change directory, e.g. &lt;code&gt;cd …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 09 Oct 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-10-09:/command-line/</guid><category>Code</category><category>Development</category><category>Command line</category></item><item><title>How old am I?</title><link>https://martin-thoma.com/age-calculation/</link><description>&lt;p&gt;Calculating the age of a person in a web service is harder than one might think
to get right. Things you must be aware of are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time zones&lt;/strong&gt;: The time zone at the client is likely not the same as on your
machine. Hence it could be that the person …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 03 Oct 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-10-03:/age-calculation/</guid><category>Code</category><category>Software Engineering</category><category>Datetime</category></item><item><title>Bugs</title><link>https://martin-thoma.com/bugs/</link><description>&lt;p&gt;Every software project which is not absolutely tiny likely has (or had) bugs,
but astonishingly I learned very little about bugs during my university
studies. So let's summarize a few important things.&lt;/p&gt;
&lt;h2 id="what-are-bugs"&gt;What are bugs&lt;/h2&gt;
&lt;p&gt;I define a bug like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;software bug&lt;/em&gt; is a fault in software that …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 21 Aug 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-08-21:/bugs/</guid><category>Code</category><category>Software Engineering</category><category>Bugs</category></item><item><title>Flask and Gunicorn</title><link>https://martin-thoma.com/flask-gunicorn/</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Flask_(web_framework)"&gt;Flask&lt;/a&gt; is a Python
web framework and &lt;a href="https://en.wikipedia.org/wiki/Gunicorn"&gt;Gunicorn&lt;/a&gt;
is a Python Web Server Gateway Interface (WSGI) HTTP server.&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Install the requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;flask&lt;span class="w"&gt; &lt;/span&gt;gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create an &lt;code&gt;exampleproject.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 11 Jul 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-07-11:/flask-gunicorn/</guid><category>Code</category><category>Flask</category><category>gunicorn</category></item><item><title>Git - Version Control Done Right</title><link>https://martin-thoma.com/git/</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Git"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; is a (the!) version control system.
In this article I'll try to show in a short way how to improve your usage of
it.&lt;/p&gt;
&lt;p&gt;I assume you already know &lt;a href="https://git-scm.com/docs/git-clone"&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-commit"&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-push"&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-pull"&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://git-scm.com/docs/git-branch"&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-version-control"&gt;Why Version Control&lt;/h2&gt;
&lt;p&gt;When you write software, you usually …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 08 Jul 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-07-08:/git/</guid><category>Code</category><category>Code</category><category>git</category></item><item><title>Testing in Python</title><link>https://martin-thoma.com/testing-python-code/</link><description>&lt;p&gt;Testing code is important for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;: You checked at least some cases if they work. So others can have
  more trust in the quality of your work and youself can also put more trust in
  it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Changes&lt;/strong&gt;: For a bigger project, it is sometimes hard to …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Tue, 03 Jul 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-07-03:/testing-python-code/</guid><category>Code</category><category>Code</category><category>Testing</category><category>tox</category><category>pytest</category><category>coverage</category></item><item><title>Python Style Guide</title><link>https://martin-thoma.com/python-style-guide/</link><description>&lt;p&gt;Having a consistent code style for a project is important as it allows
developers to code correctly without thinking too much about it. It makes code
&lt;strong&gt;easier to read, maintain&lt;/strong&gt; and after becomming used to the style also
&lt;strong&gt;easier to write&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Most of the time, it is not too important …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sun, 01 Jul 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-07-01:/python-style-guide/</guid><category>Code</category><category>Python</category><category>Style Guide</category><category>Flake8</category><category>PEP8</category></item><item><title>Make Python Objects JSON serializable</title><link>https://martin-thoma.com/make-json-serializable/</link><description>&lt;p&gt;When you're developing a service which has to communicate with a REST endpoint,
it is very likely that it will come in handy if you can convert some of your
objects to JSON (and back). Until recently, I always created a dictionary and
used &lt;code&gt;json.dumps&lt;/code&gt; in that case. Also …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 27 Jun 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-06-27:/make-json-serializable/</guid><category>Code</category><category>Python</category><category>Software Engineering</category><category>JSON</category></item><item><title>Stages of Software Development</title><link>https://martin-thoma.com/software-development-stages/</link><description>&lt;p&gt;Pythons Trove Classifiers have 7 stages of software development:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Development Status :: 1 - Planning
Development Status :: 2 - Pre-Alpha
Development Status :: 3 - Alpha
Development Status :: 4 - Beta
Development Status :: 5 - Production/Stable
Development Status :: 6 - Mature
Development Status :: 7 - Inactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this mini-article I try to describe what those stages are.&lt;/p&gt;
&lt;h2 id="semantic-versioning"&gt;Semantic …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 09 Jun 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-06-09:/software-development-stages/</guid><category>Code</category><category>Software Engineering</category></item><item><title>Pandas: Merge, join, concatenate</title><link>https://martin-thoma.com/pandas-merge-join-concatenate/</link><description>&lt;p&gt;I always get confused about the different methods how to join Pandas
dataframes. So here are some examples that should make it crystal clear.&lt;/p&gt;
&lt;p&gt;First, we create two dataframes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pandas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Germany"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"France"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Indonesia"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inhabitants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;82.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;66.9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Wed, 14 Mar 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-03-14:/pandas-merge-join-concatenate/</guid><category>Code</category><category>Pandas</category></item><item><title>Datetime</title><link>https://martin-thoma.com/datetime/</link><description>&lt;p&gt;Specifying a point in time is a pretty common task. And it is extraordinary
difficult. Lets have a look at the different ways to specify a point in time.&lt;/p&gt;
&lt;div&gt;If you want to learn more about time, read my summary &lt;a href="https://zenodo.org/record/1443533"&gt;What every developer should know about time&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;Imagine the following …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Sat, 27 Jan 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-01-27:/datetime/</guid><category>Code</category><category>Python</category><category>date</category><category>time</category><category>datetime</category></item><item><title>Python Projects</title><link>https://martin-thoma.com/python-projects/</link><description>&lt;p&gt;I recently thought a bit about what makes software good. Not from a functional
perspective, but from a developers perspective. As I did quite some work with
data science, machine learning and Python my view is a bit biased. Having said
that, here is my personal "best practices" guide.&lt;/p&gt;
&lt;h2 id="naming"&gt;Naming …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Thoma</dc:creator><pubDate>Thu, 18 Jan 2018 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:martin-thoma.com,2018-01-18:/python-projects/</guid><category>Code</category><category>Architecture</category><category>Software Engineering</category><category>Python</category></item></channel></rss>