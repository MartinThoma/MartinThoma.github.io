<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Martin Thoma - Code</title><link href="https://martin-thoma.com/" rel="alternate"></link><link href="https://martin-thoma.com/feeds/code.atom.xml" rel="self"></link><id>https://martin-thoma.com/</id><updated>2024-01-24T20:00:00+01:00</updated><subtitle>A blog about Code, the Web and Cyberculture</subtitle><entry><title>Designing Event-Driven Systems in Local Python Applications</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/designing-event-driven-systems-in-local-python-applications-8abf7544d7e4" rel="alternate"></link><published>2024-01-24T20:00:00+01:00</published><updated>2024-01-24T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2024-01-24:/https://levelup.gitconnected.com/designing-event-driven-systems-in-local-python-applications-8abf7544d7e4</id><summary type="html">&lt;p&gt;&lt;img alt="An event-driven system decouples producers of events and the effects that those events should have on the remaining softwaresystem." src="../images/2024/02/event-driven-software.png"/&gt;&lt;em&gt;An event-driven system decouples producers of events and the effects that those events should have on the remaining softwaresystem.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An event-driven software architecture sometimes allows you to write cleaner code. Most software engineers likely know pre-defined event systems such as the ones given by frontend frameworks/languages, e.g. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event"&gt;keypress …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="An event-driven system decouples producers of events and the effects that those events should have on the remaining softwaresystem." src="../images/2024/02/event-driven-software.png"/&gt;&lt;em&gt;An event-driven system decouples producers of events and the effects that those events should have on the remaining softwaresystem.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An event-driven software architecture sometimes allows you to write cleaner code. Most software engineers likely know pre-defined event systems such as the ones given by frontend frameworks/languages, e.g. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event"&gt;keypress in JavaScript&lt;/a&gt;, &lt;a href="https://www.geeksforgeeks.org/python-binding-function-in-tkinter/"&gt;bind in Tkinter&lt;/a&gt;, or &lt;a href="https://doc.qt.io/qtforpython-6/PySide6/QtGui/QKeyEvent.html#detailed-description"&gt;keyPressEvent in PyQt/PySide&lt;/a&gt;. You might also know &lt;a href="https://docs.djangoproject.com/en/5.0/topics/signals/"&gt;Django Signals&lt;/a&gt;. You might have heard of Apache Kafka or Google Cloud Pub/Sub in the context of distributed systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An event-driven software architecture does not have to be that complicated.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The components of an event-driven system are simple: You have events, producers of those events, and consumers of the events. Then you need some glue code that forwards the events from the producers to the consumers. This is the event registry.&lt;/p&gt;
&lt;h2 id="building-event-driven-software"&gt;Building Event-Driven Software&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m recently building the &lt;a href="https://pypi.org/project/flitz/"&gt;flitz file manager&lt;/a&gt; to tip my toes into the development of graphical user interfaces with Python. I started with the Tkinter framework but recognized it was not a good match. Porting to Qt is hard as I have a tight coupling with Tkinter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A file explorer with an up-button, a URL bar showing the current path, and a details view showing the content of the current directory." src="../images/2024/02/flitz-file-explorer.png"/&gt;&lt;em&gt;A file explorer with an up-button, a URL bar showing the current path, and a details view showing the content of the current directory.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example, when changing the current path via the URL bar, I want the listed documents to be changed. Flitz also has an &amp;ldquo;up&amp;rdquo; button. When it is clicked the current path shown in the URL bar is changed + the shown documents in the details pane are changed.&lt;/p&gt;
&lt;p&gt;Conceptionally, the code could look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;FileExplorer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Show the UI widgets&lt;/span&gt;
        &lt;span class="n"&gt;details_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DetailsView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;url_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UrlBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;up_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UpButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UrlBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;on_keypress_enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Let the main application know that the path changed&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Trigger follow-up changes&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;details_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UpButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;on_press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Let the main application know that the path changed&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;

        &lt;span class="c1"&gt;# Trigger follow-up changes&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;details_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DetailsView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Show the files from the root.current_path."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that there is logic duplication in UpButton.on_press and UrlBar.on_keypress_enter . Such parts become harder to maintain the bigger the application becomes. At some point, somebody will forget to update/refresh one GUI widget of the application.&lt;/p&gt;
&lt;p&gt;Instead, you can define an set_current_pathfunction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;FileExplorer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Show the UI widgets&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;details_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DetailsView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UrlBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UpButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_current_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;details_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UrlBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;on_keypress_enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_current_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UpButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;on_press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_current_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DetailsView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Show the files from the root.current_path."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next part we want to improve is the &lt;strong&gt;locality of the code&lt;/strong&gt;. Meaning, that one component should have all of its code in one place. Having several unrelated lines in set_current_path makes it harder to change those components and inspect if they do the right thing. I mean, how do you know if there is a component that should be touched in set_current_path without checking the code of every single component?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pathlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="c1"&gt;# events.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;consumed_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;current_path_changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"current_path_changed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Remaining code:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;FileExplorer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event_registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;  &lt;span class="c1"&gt;# Event registry to hold component listeners&lt;/span&gt;

        &lt;span class="c1"&gt;# Show the UI widgets&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;details_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DetailsView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UrlBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UpButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_current_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;
        &lt;span class="n"&gt;current_path_changed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UrlBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;current_path_changed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumed_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;on_keypress_enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_current_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_bar&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"UrlBar refreshed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UpButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;on_press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_current_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DetailsView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="n"&gt;current_path_changed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumed_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Show the files from the root.current_path."""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Refreshing details view with files from &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Example usage:&lt;/span&gt;
&lt;span class="n"&gt;explorer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileExplorer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;explorer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_press&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use a library like &lt;a href="https://pypi.org/project/blinker/"&gt;blinker&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And that&amp;rsquo;s it. You&amp;rsquo;ve seen an event-driven system 🎉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this case, the registry is every single Event object.&lt;/p&gt;
&lt;h2 id="thats-simple-why-does-apache-kafka-exist"&gt;That&amp;rsquo;s simple &amp;mdash; why does Apache Kafka exist?&lt;/h2&gt;
&lt;p&gt;Kafka is used in large distributed systems. That especially means that you have a network with latency and errors. Consumers might come and go; just like producers.&lt;/p&gt;
&lt;h2 id="gotcha-but-why-do-we-need-blinker"&gt;Gotcha, but why do we need blinker?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-threading&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disconnecting Consumers&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Attached data&lt;/strong&gt;: In this simple example the event didn&amp;rsquo;t come with any data. That is different in many use-cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="terminology-many-words-for-the-same-concepts"&gt;Terminology &amp;mdash; many words for the same concepts&lt;/h2&gt;
&lt;p&gt;Events and signals are the same thing. Similarly, we have a couple of pairs that belong together:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Follow-up&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Event&lt;/td&gt;
&lt;td&gt;Publisher&lt;/td&gt;
&lt;td&gt;Subscriber&lt;/td&gt;
&lt;td&gt;Apache Kafka, Google Pub/Sub&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Event&lt;/td&gt;
&lt;td&gt;Producer&lt;/td&gt;
&lt;td&gt;Consumer&lt;/td&gt;
&lt;td&gt;RabbitMQ, Spring Cloud Stream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Event&lt;/td&gt;
&lt;td&gt;Dispatch&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Signal&lt;/td&gt;
&lt;td&gt;Sender&lt;/td&gt;
&lt;td&gt;Receiver&lt;/td&gt;
&lt;td&gt;Blinker&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="pitfalls-of-event-driven-systems"&gt;Pitfalls of Event-Driven Systems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;: You should design your event-driven system in a way that the order of execution of the consumers does not matter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Infinite Loops&lt;/strong&gt;: Event A might cause Event B which causes Event A.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;: Event-driven systems have &lt;strong&gt;events&lt;/strong&gt;, parts of code that &lt;strong&gt;produce&lt;/strong&gt; those events, and other parts that &lt;strong&gt;consume&lt;/strong&gt; those events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;: It&amp;rsquo;s useful to decouple the senders from the receivers. That increases maintainability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt;: The simplest way to implement event-driven software is by using global objects for the signals. Those are then used by the producers and automatically call the consumers. Libraries like blinker can help. If you are in a distributed system things become more complicated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="software architecture"></category></entry><entry><title>Let your computer speak to you</title><link href="https://martin-thoma.com/https://medium.com/@martinthoma/let-your-computer-speak-to-you-4a42994ed48f" rel="alternate"></link><published>2023-02-28T20:00:00+01:00</published><updated>2023-02-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2023-02-28:/https://medium.com/@martinthoma/let-your-computer-speak-to-you-4a42994ed48f</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2023/02/tts-pipeline.drawio.png"&gt;&lt;img alt="A Text-to-Speech pipeline" src="../images/2023/02/tts-pipeline.drawio.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A Text-to-Speech pipeline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I recently injured my eye during a hike. Don&amp;rsquo;t worry, it&amp;rsquo;s be fine soon &amp;mdash; but it made me think about text-to-speech (TTS) software again. You probably all know the robotic voices that can read text, but are extremely hard to understand:&lt;/p&gt;
&lt;iframe allow="autoplay" frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1453260838&amp;amp;color=ff5500" width="100%"&gt;&lt;/iframe&gt;
&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/martin-thoma-172139021" style="color: #cccccc; text-decoration: none;" target="_blank" title="Martin Thoma"&gt;Martin Thoma&lt;/a&gt; &amp;middot; &lt;a href="https://soundcloud.com/martin-thoma-172139021/mark-twain-the-awful-german-language-by-espeak-ng" style="color: #cccccc; text-decoration: none;" target="_blank" title='eSpeak NG: "The Awful German Language" by Mark Twain'&gt;eSpeak NG …&lt;/a&gt;&lt;/div&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2023/02/tts-pipeline.drawio.png"&gt;&lt;img alt="A Text-to-Speech pipeline" src="../images/2023/02/tts-pipeline.drawio.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A Text-to-Speech pipeline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I recently injured my eye during a hike. Don&amp;rsquo;t worry, it&amp;rsquo;s be fine soon &amp;mdash; but it made me think about text-to-speech (TTS) software again. You probably all know the robotic voices that can read text, but are extremely hard to understand:&lt;/p&gt;
&lt;iframe allow="autoplay" frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1453260838&amp;amp;color=ff5500" width="100%"&gt;&lt;/iframe&gt;
&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/martin-thoma-172139021" style="color: #cccccc; text-decoration: none;" target="_blank" title="Martin Thoma"&gt;Martin Thoma&lt;/a&gt; &amp;middot; &lt;a href="https://soundcloud.com/martin-thoma-172139021/mark-twain-the-awful-german-language-by-espeak-ng" style="color: #cccccc; text-decoration: none;" target="_blank" title='eSpeak NG: "The Awful German Language" by Mark Twain'&gt;eSpeak NG: "The Awful German Language" by Mark Twain&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;This article guides you through the process of utilizing an improved text-to-speech system. Here, you will find complete, functional code that can be executed locally, as well as access to scientific publications for a deeper understanding. Audio examples will illustrate the notable advancements made in recent years. Without further ado, let&amp;rsquo;s delve into the topic at hand!&lt;/p&gt;
&lt;h2 id="the-old-stuff-pyttsx3-and-espeak"&gt;The old Stuff: pyttsx3 and eSpeak&lt;/h2&gt;
&lt;p&gt;After installing the necessary requirements for &lt;a href="https://github.com/nateshmbhat/pyttsx3#installation-"&gt;pyttsx3&lt;/a&gt;, you can use the following Python snippet to generate the audio sample from above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pathlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pyttsx3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;tts&lt;/span&gt;  &lt;span class="c1"&gt;# pip install pyttsx3==2.90&lt;/span&gt;

&lt;span class="c1"&gt;# Get the data&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# engine.say(data)  # say it directly&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# store to file&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runAndWait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pyttsx3 is just using the &lt;a href="https://en.wikipedia.org/wiki/ESpeak"&gt;eSpeak NG&lt;/a&gt; speech synthesizer. It uses formant synthesis. That technique was developed around 1995 with the &amp;ldquo;Speak&amp;rdquo; software by Jonathan Duddington.&lt;/p&gt;
&lt;h2 id="the-stages-of-the-text-to-speech-pipeline"&gt;The Stages of the Text-To-Speech Pipeline&lt;/h2&gt;
&lt;p&gt;A text-to-speech (TTS) pipeline contains the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Text Analysis&lt;/strong&gt;: Find sentence boundaries. Part-of-speech tagging (POS tagging) means that every word gets categorized with its grammatical role in the sentence (subject, verb, object). This helps to distinguish homographs like wind (blowing air) and wind (turn or twist).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Normalisation&lt;/strong&gt;: Convert abbreviations like &amp;ldquo;e.g.&amp;rdquo; and units like &amp;ldquo;&amp;deg;C&amp;rdquo; into their full form.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phonetic Analysis&lt;/strong&gt;: Generate a sequence of phonemes. Those are similar to letters, but describe sounds. For example, the word &amp;ldquo;phoneme&amp;rdquo; would be written as /ˈfoʊniːm/. The wind (blowing air) is /wɪnd/ whereas the wind (turn or twist) is /waɪnd/. The phonetic analysis might simply be a dictionary lookup (e.g. via &lt;a href="http://www.speech.cs.cmu.edu/cgi-bin/cmudict"&gt;CMUdict&lt;/a&gt;), but if the word is not found it becomes more complex. Then letter-to-sound (LTS) rules kick in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prosodic Analysis&lt;/strong&gt;: Figure out what to stress, how the intonation should be, and how the rhythm of the generated speech should be. The &lt;a href="https://en.wikipedia.org/wiki/ToBI"&gt;ToBI&lt;/a&gt; annotation system can be used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Audio synthesis&lt;/strong&gt;: The acoustic model typically generates mel-spectrograms as an input for the waveform generation. This is a high-level acoustic representation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waveform Generation&lt;/strong&gt;: The vocoder takes the high-level acoustic representation and converts it into a waveform that can be played as sound.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that the first parts &amp;mdash; text analysis and normalization &amp;mdash; are clearly natural language processing. Waveform generation is rather digital speech processing. And the rest is somewhere in between.&lt;/p&gt;
&lt;h2 id="wavenet-what-google-speech-services-are-using"&gt;WaveNet: What Google Speech Services are using&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://arxiv.org/abs/1609.03499"&gt;WaveNet paper&lt;/a&gt; was published in 2016 by Google (DeepMind) and it drastically improved audio synthesis and waveform generation. The change of approach is to use data to learn how text should sound, whereas formant synthesis uses knowledge and manual analysis to describe how the sounds are generated.&lt;/p&gt;
&lt;p&gt;Listen for yourself:&lt;/p&gt;
&lt;iframe allow="autoplay" frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1453260838&amp;amp;color=ff5500" width="100%"&gt;&lt;/iframe&gt;
&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/martin-thoma-172139021" style="color: #cccccc; text-decoration: none;" target="_blank" title="Martin Thoma"&gt;Martin Thoma&lt;/a&gt; &amp;middot; &lt;a href="https://soundcloud.com/martin-thoma-172139021/mark-twain-the-awful-german-language-by-espeak-ng" style="color: #cccccc; text-decoration: none;" target="_blank" title='eSpeak NG: "The Awful German Language" by Mark Twain'&gt;eSpeak NG: "The Awful German Language" by Mark Twain&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;You can use Google Text-to-Speech (TTS) to generate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;gtts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gTTS&lt;/span&gt;  &lt;span class="c1"&gt;# pip install gtts&lt;/span&gt;

&lt;span class="c1"&gt;# Get the data&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Generate an mp3&lt;/span&gt;
&lt;span class="n"&gt;tts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gTTS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"gtts-text.mp3"&lt;/span&gt;
&lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The core innovation of WaveNet compared to formant synthesis was to use a machine learning approach &amp;mdash; deep neural networks &amp;mdash; for generating raw audio waveforms. Please note that there were other breakthroughs between the two methods.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s good, but it&amp;rsquo;s an external service. You might want to actually generate it on your machine so that nobody else can get your data. Additionally, 2016 is already 8 years ago. A lot has happened in ML since.&lt;/p&gt;
&lt;h2 id="end-to-end-deep-learning"&gt;End-to-End Deep Learning&lt;/h2&gt;
&lt;p&gt;Deep learning has not only improved waveform generation but also the other parts. To cite from the Tacotron paper:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="tacotron-is-an-end-to-end-generative-text-to-speech-model-that-synthesizes-speech-directly-from-characters"&gt;Tacotron [is] an end-to-end generative text-to-speech model that synthesizes speech directly from characters.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few other papers in this context are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2017 (Google): &lt;a href="https://arxiv.org/abs/1703.10135"&gt;Tacotron&lt;/a&gt; and &lt;a href="https://ai.googleblog.com/2017/12/tacotron-2-generating-human-like-speech.html"&gt;Tacotron 2&lt;/a&gt;. Tacotron takes a text sequence and outputs a feature vector sequence that can be given to WaveNet.&lt;/li&gt;
&lt;li&gt;2017 (Baidu): &lt;a href="https://arxiv.org/abs/1710.07654"&gt;Deep Voice 3&lt;/a&gt; is a neural-network based approach for the acoustic model (the audio synthesis) just like Tacotron. Where Tacotron uses a recurrent neural network (RNN), Deep Voice 3 uses an attention-based approach.&lt;/li&gt;
&lt;li&gt;2019 (Microsoft): &lt;a href="https://arxiv.org/abs/1905.09263"&gt;FastSpeech&lt;/a&gt; improves the inference speed compared to Deep Voice 3.&lt;/li&gt;
&lt;li&gt;2020 (Kakao): &lt;a href="https://arxiv.org/abs/2005.11129"&gt;Glow-TTS&lt;/a&gt; speeded-up the training method of the used neural network.&lt;/li&gt;
&lt;li&gt;2021 (KAIST): &lt;a href="https://arxiv.org/pdf/2106.06103.pdf"&gt;VITS&lt;/a&gt; (Variational Inference with adversarial learning for end-to-end Text-to-Speech) improves the generated audio quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s judge VITS for yourself:&lt;/p&gt;
&lt;iframe allow="autoplay" frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1453478362&amp;amp;color=ff5500" width="100%"&gt;&lt;/iframe&gt;
&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/martin-thoma-172139021" style="color: #cccccc; text-decoration: none;" target="_blank" title="Martin Thoma"&gt;Martin Thoma&lt;/a&gt; &amp;middot; &lt;a href="https://soundcloud.com/martin-thoma-172139021/vits-the-awful-german-language-by-mark-twain" style="color: #cccccc; text-decoration: none;" target="_blank" title='VITS: "The Awful German Language" by Mark Twain'&gt;VITS: "The Awful German Language" by Mark Twain&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;Thanks to CoquiTTS (&lt;a href="https://huggingface.co/spaces/coqui/CoquiTTS"&gt;web demo&lt;/a&gt;) you can now use this as a complete TTS system to generate this on your machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;TTS.api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TTS&lt;/span&gt;  &lt;span class="c1"&gt;# pip install TTS&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;rdquo;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;ldquo;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Init TTS with the target model name&lt;/span&gt;
    &lt;span class="n"&gt;tts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TTS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;progress_bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gpu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"model=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"speakers=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speakers&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"languages=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;speaker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speakers&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;speaker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speakers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Select language and speaker&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;speaker&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;speaker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"en"&lt;/span&gt;

    &lt;span class="c1"&gt;# Generate it!&lt;/span&gt;
    &lt;span class="n"&gt;tts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tts_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speaker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;speaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;model_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tts_models/en/ljspeech/vits--neon"&lt;/span&gt;
    &lt;span class="n"&gt;speaker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"coqui.wav"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# if you want to see which models are available: TTS.list_models()&lt;/span&gt;
    &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this article, you have learned the basics of text-to-speech systems. You have enough entry-points that you make a deep-dive and you have complete code so that you can play around with existing systems.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;h2 id="additional-resources"&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ttssamples.syntheticspeech.de/"&gt;German Text-to-Speech&lt;/a&gt;: Lots of audio samples for many TTS systems.&lt;/li&gt;
&lt;li&gt;Andrew Gibiansky: &lt;a href="https://andrew.gibiansky.com/wavenet-and-tacotron-arent-tts-systems/"&gt;WaveNet and Tacotron aren&amp;rsquo;t TTS systems&lt;/a&gt;, 2020.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I love writing about software development and technology 🤩 Don&amp;rsquo;t miss updates: &lt;a href="https://martinthoma.medium.com/subscribe"&gt;**Get my free email newsletter&lt;/a&gt;** 📧 or &lt;a href="https://martinthoma.medium.com/membership"&gt;sign up for Medium&lt;/a&gt; ✍️ if you haven&amp;rsquo;t done it yet &amp;mdash; both encourage me to write more 🤗&lt;/p&gt;</content><category term="Code"></category><category term="ML"></category><category term="AI"></category></entry><entry><title>9 Clean Code Patterns I wish I knew earlier</title><link href="https://martin-thoma.com/https://towardsdatascience.com/9-clean-code-patterns-i-wish-i-knew-earlier-57ee56c5892" rel="alternate"></link><published>2021-10-17T20:00:00+02:00</published><updated>2021-10-17T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-10-17:/https://towardsdatascience.com/9-clean-code-patterns-i-wish-i-knew-earlier-57ee56c5892</id><summary type="html">&lt;p&gt;Do you know the feeling when you look back at code which you wrote early in
your career? I always feel a bit horrified. But there is a positive side to
it: I learned something new 😄&lt;/p&gt;
&lt;p&gt;A core part of good software is readability. Keeping the mental complexity low
so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Do you know the feeling when you look back at code which you wrote early in
your career? I always feel a bit horrified. But there is a positive side to
it: I learned something new 😄&lt;/p&gt;
&lt;p&gt;A core part of good software is readability. Keeping the mental complexity low
so that everybody (including the author) has an easy time understanding it.
Clean code patterns help to do so.&lt;/p&gt;
&lt;p&gt;In this article, you will get to know 9 clean code patterns that make code
easier to read. Please see such patterns as tools. They don&amp;rsquo;t apply all the
time. Don&amp;rsquo;t get religious about them. The language I use is Python, but the
patterns apply outside of Python as well. Let&amp;rsquo;s start!&lt;/p&gt;
&lt;h2 id="no1-explanatory-variables"&gt;&amp;numero;1: Explanatory Variables&lt;/h2&gt;
&lt;p&gt;This is probably the simplest trick which you can easily apply. If something
is hard to understand and you need a comment for it, try giving it a name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"""'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"""'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="n"&gt;is_tripple_quoted_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"""'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"""'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_tripple_quoted_string&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This applies mostly to boolean expressions, but also to regular expressions,
and sometimes to return values.&lt;/p&gt;
&lt;h2 id="no2-follow-conventions-and-style-guides"&gt;&amp;numero;2: Follow Conventions and Style Guides&lt;/h2&gt;
&lt;p&gt;Every programming language has a syntax that you need to follow, otherwise, it
will not work. And then there are conventions. You don&amp;rsquo;t have to follow them;
it will still work. However, it makes the life of others way easier if you do
follow them.&lt;/p&gt;
&lt;p&gt;One of the simplest conventions is &lt;strong&gt;style guides&lt;/strong&gt;. In Python it&amp;rsquo;s &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;, Google published guides for &lt;a href="https://google.github.io/styleguide/cppguide.html"&gt;C++&lt;/a&gt; / &lt;a href="https://google.github.io/styleguide/javaguide.html"&gt;Java&lt;/a&gt;, the &lt;a href="https://www.oracle.com/technetwork/java/codeconventions-150003.pdf"&gt;Oracle Java Code Conventions&lt;/a&gt;, in PHP there is &lt;a href="https://www.php-fig.org/psr/psr-1/"&gt;PSR-1&lt;/a&gt;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Other guides are implicit. For example, how a Django project is structured. Where you typically store views, models, and templates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="find-the-style-guides-that-are-relevant-for-you-and-follow-them"&gt;Find the style guide(s) that are relevant for you and follow them.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typically, there are also &lt;strong&gt;linters&lt;/strong&gt; or &lt;strong&gt;static code analysis tools&lt;/strong&gt; that help you to get used to the guides. For example, in Python, there is flake8 with a lot of plugins. For the simplest part, the formatting, you can use tools that do it for you. A code autoformatter for Python which I love is &lt;a href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="no3-type-checking"&gt;&amp;numero;3: Type Checking&lt;/h2&gt;
&lt;p&gt;I love type annotations in Python. They are optional, but I highly recommend
using them. There are also differences in how to use them.&lt;/p&gt;
&lt;p&gt;For example, if you have Dict[str, Any] you might want to consider using
NamedTuple / TypedDict / pydantic / dataclasses instead.&lt;/p&gt;
&lt;p&gt;In some case, when you use str as the type you might want to consider using
NewType to denote which kind of string you are using. Is it an AuthorId ? Is
it an UserId ?&lt;/p&gt;
&lt;p&gt;Those two patterns apply to other languages as well. Let&amp;rsquo;s phrase it like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="make-good-use-of-the-type-system"&gt;Make good use of the type system.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to know more about type annotations in Python, please read:
&lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;&lt;strong&gt;Type Annotations in Python 3.8&lt;/strong&gt;
&lt;em&gt;Learn how to make Python code easier to read and less error-prone by gradual typing&lt;/em&gt;medium.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to know about the most recent improvements, read my &lt;a href="https://betterprogramming.pub/python-3-10-is-released-know-whats-new-and-if-it-s-worth-the-switch-19c7a5738f7c"&gt;Python 3.10 article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="no4-consistent-terminology"&gt;&amp;numero;4 Consistent Terminology&lt;/h2&gt;
&lt;p&gt;I work at the FinTech company &lt;a href="https://cashlink.de/"&gt;Cashlink&lt;/a&gt; as a Python backend developer. We handle digital securities, e.g. tokens that represent a real value like a part of a solar farm. Those tokens can be transferred. And here it starts to become interesting. Depending on the type of transfer, we must do different things. Either because of regulations or because of technical reasons. So we started to name different types of transfers differently to not be confused all the time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transfer&lt;/strong&gt;: Any action that changes a balance. All terms below are some kind of transfer (although I would hesitate to call minting and burn a transfer).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minting&lt;/strong&gt;: The tokens are generated. This happens first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Issuance&lt;/strong&gt;: The transfer from the issuer to the investor. This happens second.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move&lt;/strong&gt;: A transfer from wallet A to wallet B, where A and B belong to the same investor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handover&lt;/strong&gt;: A transfer from wallet A to wallet B, where A and B belong to different investors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Burn&lt;/strong&gt;: Removing tokens from an investor's account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those things are important, but there are other examples where the terminology can be different. For example, internal product names and external ones. Marketing might have different needs than development. Try to get a vocabulary that fits most of the company.&lt;/p&gt;
&lt;h2 id="no5-meaningful-names"&gt;&amp;numero;5 Meaningful Names&lt;/h2&gt;
&lt;p&gt;Think of your codebase like a book. The book has many, many different storylines. The variables are the characters. You can rely a bit on the context, but readers will be confused if you call everybody just &amp;ldquo;the friend&amp;rdquo;. They will be annoyed if they need to read half a page just for the name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid too short names &lt;/strong&gt;like i orx . They are hard to search for. If you
  write a mathematical function, they might make sense, though.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid too long names&lt;/strong&gt; like
  InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonWindowNotFocusedState.
  Java developers regularly fall into this trap. Yes, the name might be super
  exact. However, it makes all the logic around it super hard to understand.
  There is a nice middle ground between x and
  InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonWindowNotFocusedState.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be consistent&lt;/strong&gt; with the vocabulary from &amp;numero;4. Also in spelling. Decide if
  you want to use American English or British English. Decide if you want to
  write display/show/present/print in your codebase.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid data structures in names&lt;/strong&gt; like user_dict . If you need that, it
  might be that you&amp;rsquo;re violating &amp;numero;6. Try to use only one representation of one
  object. But keep in mind that this is a general rule. It does make sense
  sometimes to use user_dict .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make use of context&lt;/strong&gt;. For example, the
  java.sql.SQLIntegrityContraintViolation could simply be a
  java.sql.IntegrityError . Within the sql package, everything should be about
  SQL. And a ConstraintViolation simply is an Error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A pattern I like when iterating is to use the plural form for the iterator
(ending in &amp;ldquo;s&amp;rdquo;) and the singular (without the final &amp;ldquo;s&amp;rdquo;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;registered_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way: Please share if you&amp;rsquo;ve seen &lt;a href="https://www.reddit.com/r/ProgrammerHumor/comments/k1wdrt/whats_the_most_inappropriate_variable_name/"&gt;funny variable naming&lt;/a&gt; in the wild 😄&lt;/p&gt;
&lt;h2 id="no6-the-step-down-rule"&gt;&amp;numero;6 The step-down rule&lt;/h2&gt;
&lt;p&gt;Keeping a function at one abstraction level helps you to focus on one topic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="separate-logic-data-collectiontransfer-presentation"&gt;Separate logic &amp;harr; data collection/transfer &amp;harr; presentation.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;The presentation does not necessarily have to be visual. It can be print
statements or it could be an API response.&lt;/p&gt;
&lt;p&gt;Marek Hudyma gives &lt;a href="https://marekhudyma.com/code-style/2021/03/02/step-down-rule.html"&gt;a good example&lt;/a&gt; of the step-down rule.&lt;/p&gt;
&lt;p&gt;In Python, you can sometimes see this when there is a lot of indentation.&lt;/p&gt;
&lt;h2 id="no7-remove-dead-code"&gt;&amp;numero;7 Remove Dead Code&lt;/h2&gt;
&lt;p&gt;Code that isn&amp;rsquo;t there is code that cannot break. It&amp;rsquo;s code that will not cause
security issues. It&amp;rsquo;s code that doesn&amp;rsquo;t need to be maintained. Instead of
commenting code out, remove it.&lt;/p&gt;
&lt;p&gt;You can use &lt;a href="https://pypi.org/project/vulture/"&gt;vulture&lt;/a&gt; and
&lt;a href="https://pypi.org/project/flake8-eradicate/"&gt;flake8-eradicate&lt;/a&gt; to find such
pieces in a Python codebase.&lt;/p&gt;
&lt;p&gt;I know the feeling when you have stuff that might be necessary later. I
typically try to write a really thorough commit message, removing only those
comments/files to be able to find it later if I need it. But there is YAGNI:
&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;You aren&amp;rsquo;t gonna need
it!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="no8-use-containers"&gt;&amp;numero;8 Use containers&lt;/h2&gt;
&lt;p&gt;If you pass the same few values around in several places of your codebase you might want to consider writing a container. That could be a class, in Python you can use a &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclass&lt;/a&gt;, a &lt;a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple"&gt;NamedTuple&lt;/a&gt;, or a &lt;a href="https://www.python.org/dev/peps/pep-0589/"&gt;TypedDict&lt;/a&gt;. If you need to serialize it, a Pydantic class is pretty nice as well.&lt;/p&gt;
&lt;p&gt;A prime example where you should likely use a container format is
configuration.&lt;/p&gt;
&lt;h2 id="no9-avoid-surprises"&gt;&amp;numero;9 Avoid Surprises&lt;/h2&gt;
&lt;p&gt;This is a no-brainer, but it is sometimes easy to forget. One core part is to
&lt;strong&gt;avoid side effects&lt;/strong&gt;. It should be clear whether a function changes state.
Another part is to &lt;strong&gt;document hacks&lt;/strong&gt;. Sometimes it is necessary to have
hacks, but at least leave a comment on why the hack is there.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t try to do something smart. Follow the KISS principle &amp;mdash; Keep it simple
and stupid!&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Writing good code is like writing good articles: It needs &lt;strong&gt;practice&lt;/strong&gt; and you will always improve. Read a lot, &lt;a href="https://codereview.stackexchange.com/"&gt;ask for feedback&lt;/a&gt; and encourage people to also give small little notes in feedback. The ones that don&amp;rsquo;t matter too much, but are just personal preferences.&lt;/p&gt;
&lt;p&gt;Finally, understand what you hate when you read code. Avoid &lt;a href="https://cs.fit.edu/~kgallagher/Schtick/How%20To%20Write%20Unmaintainable%20Code.html"&gt;those patterns&lt;/a&gt; 😄 &amp;mdash; but &lt;a href="https://github.com/zedr/clean-code-python/blob/master/README.md"&gt;apply this&lt;/a&gt; 😍 Practice, be open to feedback, look critical at your code. Then you will be an awesome software engineer 🥂&lt;/p&gt;
&lt;p&gt;I love writing about software development and technology 🤩 Don&amp;rsquo;t miss updates: &lt;a href="https://martinthoma.medium.com/subscribe"&gt;**Get my free email newsletter&lt;/a&gt;** 📧 or &lt;a href="https://martinthoma.medium.com/membership"&gt;sign up for Medium&lt;/a&gt; ✍️ if you haven&amp;rsquo;t done it yet &amp;mdash; both encourages me to write more 🤗&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Code"></category><category term="Programming"></category><category term="Software Development"></category><category term="Software Engineering"></category></entry><entry><title>Python 3.10 is Released</title><link href="https://martin-thoma.com/https://betterprogramming.pub/python-3-10-is-released-know-whats-new-and-if-it-s-worth-the-switch-19c7a5738f7c" rel="alternate"></link><published>2021-10-04T20:00:00+02:00</published><updated>2021-10-04T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-10-04:/https://betterprogramming.pub/python-3-10-is-released-know-whats-new-and-if-it-s-worth-the-switch-19c7a5738f7c</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/10/python-3-10-title.png"&gt;&lt;img alt="Photo by Vraj Shah and Mike from pexels, edited by Martin Thoma" src="../images/2021/10/python-3-10-title.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Photo by Vraj Shah &lt;a href="https://www.pexels.com/de-de/foto/rotes-autokopflicht-638479/"&gt;from pexels&lt;/a&gt; and Mike &lt;a href="https://www.pexels.com/de-de/foto/graustufenfotografie-des-automotors-190574/"&gt;from pexels&lt;/a&gt;, edited by Martin Thoma&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Python 3.10 &lt;a href="https://www.python.org/downloads/release/python-3100/"&gt;was released&lt;/a&gt; on the 4th of October 2021 according to &lt;a href="https://www.python.org/dev/peps/pep-0619/"&gt;PEP 619&lt;/a&gt;. Let&amp;rsquo;s see what&amp;rsquo;s in store for us.&lt;/p&gt;
&lt;h2 id="type-annotations"&gt;Type Annotations&lt;/h2&gt;
&lt;p&gt;I absolutely love type annotations. Since Python 3.6, they …&lt;/p&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/10/python-3-10-title.png"&gt;&lt;img alt="Photo by Vraj Shah and Mike from pexels, edited by Martin Thoma" src="../images/2021/10/python-3-10-title.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Photo by Vraj Shah &lt;a href="https://www.pexels.com/de-de/foto/rotes-autokopflicht-638479/"&gt;from pexels&lt;/a&gt; and Mike &lt;a href="https://www.pexels.com/de-de/foto/graustufenfotografie-des-automotors-190574/"&gt;from pexels&lt;/a&gt;, edited by Martin Thoma&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Python 3.10 &lt;a href="https://www.python.org/downloads/release/python-3100/"&gt;was released&lt;/a&gt; on the 4th of October 2021 according to &lt;a href="https://www.python.org/dev/peps/pep-0619/"&gt;PEP 619&lt;/a&gt;. Let&amp;rsquo;s see what&amp;rsquo;s in store for us.&lt;/p&gt;
&lt;h2 id="type-annotations"&gt;Type Annotations&lt;/h2&gt;
&lt;p&gt;I absolutely love type annotations. Since Python 3.6, they are super useful. If you don&amp;rsquo;t use them already, I highly recommend you to read &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;my introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python 3.10 has improved them again! Let&amp;rsquo;s see how&lt;/p&gt;
&lt;h3 id="typeguards-conditional-type-narrowing"&gt;TypeGuards: Conditional Type Narrowing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0647/"&gt;PEP 647&lt;/a&gt; introduces a new TypeGuard annotation. It&amp;rsquo;s backported via &lt;a href="https://pypi.org/project/typing-extensions/"&gt;typing_extensions&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing_extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypeGuard&lt;/span&gt;  &lt;span class="c1"&gt;# Before Python 3.10&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypeGuard&lt;/span&gt;  &lt;span class="c1"&gt;# With Python 3.10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without TypeGuards, you could not find that there is an issue with this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeGuard&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TypeGuard&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Martin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"info@martin-thoma.de"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But with the TypeGuard, you can see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;typeguard.py:17: error: TypedDict "User" has no key "x"

Found 1 error in 1 file (checked 1 source file)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neat! Now you can get rid of a couple of cast andassert calls or comments like # type: ignore .&lt;/p&gt;
&lt;h3 id="syntactic-sugar-allow-writing-union-types-as-x-y"&gt;Syntactic Sugar: Allow writing union types as X | Y ✨&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Readability counts&lt;/a&gt;. The documentation is a lot of the reason why I love type annotations so much. &lt;a href="https://www.python.org/dev/peps/pep-0604/"&gt;PEP 604&lt;/a&gt; allows you to use a more concise syntax that is easier to read:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Before 3.10&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# With 3.10&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="parameter-specification-variables-type-annotations-for-decorators"&gt;Parameter Specification Variables: Type Annotations for Decorators&lt;/h3&gt;
&lt;p&gt;Non-trivial decorators are a pain to understand once they are written. And writing type-annotations has been pretty hard. &lt;a href="https://www.python.org/dev/peps/pep-0612/"&gt;PEP 612&lt;/a&gt; introduces typing.ParamSpec and typing.Concatenate .&lt;/p&gt;
&lt;p&gt;The PEP already gives a good example for those. Imagine you wrote a decorator add_logging which executed log_to_database before the decorated function is called. The function could have any parameters &amp;mdash; the execution of the function should not be changed. How would you annotate that?&lt;/p&gt;
&lt;p&gt;With parameter specification variables you could do it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Awaitable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ParamSpec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParamSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"P"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;add_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Awaitable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;log_to_database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;


&lt;span class="nd"&gt;@add_logging&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;takes_int_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;


&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;takes_int_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Accepted&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;takes_int_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correctly rejected by the type checker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also add parameters or remove them with decorators. And now you can add proper types for that! Just have a look into &lt;a href="https://www.python.org/dev/peps/pep-0612/"&gt;PEP 612&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="explicit-type-aliases"&gt;Explicit Type Aliases&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0613/"&gt;PEP 613&lt;/a&gt; introduces typing.TypeAlias . This helps the type checker to distinguish between module-level assignments to create constants and actual type aliases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;StrCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeAlias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Cache[str]"&lt;/span&gt;  &lt;span class="c1"&gt;# a type alias&lt;/span&gt;
&lt;span class="n"&gt;LOG_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"LOG[DEBUG]"&lt;/span&gt;  &lt;span class="c1"&gt;# a module constant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This helps mypy to give better error messages.&lt;/p&gt;
&lt;h2 id="structural-pattern-matching_1"&gt;Structural Pattern Matching&lt;/h2&gt;
&lt;p&gt;Structural Pattern Matching is such a big new feature that it is covered by multiple PEPs: &lt;a href="https://www.python.org/dev/peps/pep-0634/"&gt;PEP 634&lt;/a&gt; (Specification), &lt;a href="https://www.python.org/dev/peps/pep-0635/"&gt;PEP 635&lt;/a&gt; (Rationale), and &lt;a href="https://www.python.org/dev/peps/pep-0636/"&gt;PEP 636&lt;/a&gt; (Tutorial)!&lt;/p&gt;
&lt;p&gt;An example from the tutorial explains it best:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;match command.split():
    case ["quit"]:
        print("Goodbye!")
        quit_game()
    case ["look"]:
        current_room.describe()
    case ["get", obj]:
        character.get(obj, current_room)
    case ["go", direction]:
        current_room = current_room.neighbor(direction)
    # The rest of your commands go here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the new keywords are match and case . The part after the match is what is evaluated. In this case, command.spit() returns a list of strings. An equivalent code before structural pattern matching would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Goodbye!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quit_game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"look"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;current_room&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"go"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;current_room&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_room&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the first example is way easier to read. There are a lot of other examples &amp;mdash; I recommend going through &lt;a href="https://www.python.org/dev/peps/pep-0636/"&gt;this tutorial&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="better-error-messages"&gt;Better Error Messages&lt;/h2&gt;
&lt;p&gt;Python 3.10 has improved a couple of error messages. Here are just two
examples, but there are many more:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/10/error-assignment-comparison.png"&gt;&lt;img alt="Error message for assignment instead of comparison" src="../images/2021/10/error-assignment-comparison.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Error message for assignment instead of comparison&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/10/error-missing-dict-close.png"&gt;&lt;img alt="Error message when a dictionary was not closed" src="../images/2021/10/error-missing-dict-close.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Error message when a dictionary was not closed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I&amp;rsquo;m using the &lt;a href="https://stackoverflow.com/a/59507107/562769"&gt;colored Python shell script&lt;/a&gt; to get the highlighting. In the Terminal I use ZSH and the solarized dark color theme.&lt;/p&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;p&gt;Comparing performance is always hard. It depends a lot on your workload and what exactly you&amp;rsquo;re interested in. One obvious part is the startup time. The interpreter starts roughly 10% faster than Python 3.8. Also, the rendering of Django templates improved quite a bit.&lt;/p&gt;
&lt;p&gt;Python 3.10 will be faster than 3.9 and 3.8:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Python 3.10 will be up to 10% faster: &lt;a href="https://t.co/7ydQ4iATsN"&gt;https://t.co/7ydQ4iATsN&lt;/a&gt;. Here's the email that I wrote to python-dev 4.5 years ago with some perf ideas: &lt;a href="https://t.co/tuJL7yXmjZ"&gt;https://t.co/tuJL7yXmjZ&lt;/a&gt;. Thanks to &lt;a href="https://twitter.com/pyblogsal?ref_src=twsrc%5Etfw"&gt;@pyblogsal&lt;/a&gt; for picking up my patch and polishing it to get it merged. 🚀&lt;/p&gt;&amp;mdash; Yury Selivanov (@1st1) &lt;a href="https://twitter.com/1st1/status/1318558048265404420?ref_src=twsrc%5Etfw"&gt;October 20, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Python 3.10 is bringing a lot of cool things but how much faster is going to be? 🤔 The answer is "it depends" 😉 In the performance benchmark suite (&lt;a href="https://t.co/RxzDk7vK33"&gt;https://t.co/RxzDk7vK33&lt;/a&gt;) we are seeing speedups up to 25% in some cases 🚀 How this translates to your code depends a lot. 🧵👇 &lt;a href="https://t.co/RZIfB09AlK"&gt;pic.twitter.com/RZIfB09AlK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pablo Galindo Salgado (@pyblogsal) &lt;a href="https://twitter.com/pyblogsal/status/1433411699235774466?ref_src=twsrc%5Etfw"&gt;September 2, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;p&gt;See the &lt;a href="https://speed.python.org/comparison/"&gt;official speed comparison&lt;/a&gt; for all benchmarks.&lt;/p&gt;
&lt;h2 id="how-to-get-python-310"&gt;How To Get Python 3.10&lt;/h2&gt;
&lt;p&gt;As a developer, I like to use &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; to get the Python versions I need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv install 3.10.0
pyenv local 3.10.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to use it in production environments, you&amp;rsquo;ll be interested in
&lt;a href="https://hub.docker.com/_/python"&gt;Docker&lt;/a&gt;. The base image is3.10 , but be
careful when you write this in YAML ⚠️ 3.10 might get interpreted as a float
and get converted to 3.1 . Write "3.10" in YAML. And maybe be more specific,
e.g. 3.10-slim-bullseye .&lt;/p&gt;
&lt;p&gt;By the way: &lt;a href="https://www.pypy.org/download.html"&gt;PyPy is currently at 3.7&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html"&gt;AWS Lambda is at 3.9&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-happened-before-310"&gt;What Happened Before 3.10?&lt;/h2&gt;
&lt;p&gt;Many people do not use Python 3.9 yet. For this reason, you might be interested in other changes that were introduced with Python 3.9 or maybe even Python 3.8:
&lt;a href="https://python.plainenglish.io/killer-features-by-python-version-c84ca12dba8"&gt;&lt;strong&gt;Killer Features by Python Version&lt;/strong&gt;
&lt;em&gt;Get to know what you miss when you support older Python versions: Python 2.7 to 3.5, 3.6, 3.7, 3.8 and 3.9&lt;/em&gt;python.plainenglish.io&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Python 3.10 is great! It has &amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improved type annotations a lot&lt;/li&gt;
&lt;li&gt;Structural Pattern Matching&lt;/li&gt;
&lt;li&gt;Better error messages&lt;/li&gt;
&lt;li&gt;Better performance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full list, see &lt;a href="https://docs.python.org/3.10/whatsnew/3.10.html"&gt;What&amp;rsquo;s New In Python 3.10&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Release"></category></entry><entry><title>Library vs Service: 7 Arguments to consider</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/library-vs-service-7-arguments-to-consider-5088dced6022" rel="alternate"></link><published>2021-05-14T20:00:00+02:00</published><updated>2021-05-14T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-05-14:/https://levelup.gitconnected.com/library-vs-service-7-arguments-to-consider-5088dced6022</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/05/library-vs-service.png"&gt;&lt;img alt="Shared code can be in a library or in a service" src="../images/2021/05/library-vs-service.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Shared code can be in a library or in a service. Image by Martin Thoma.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Preventing code duplication is a software development principle called
&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;&lt;em&gt;DRY&lt;/em&gt;&lt;/a&gt; &amp;mdash; &lt;strong&gt;D&lt;/strong&gt;on&amp;rsquo;t
&lt;strong&gt;R&lt;/strong&gt;epeat &lt;strong&gt;Y&lt;/strong&gt;ourself. DRY is important because duplicated code usually
means way more code that needs to be maintained. If you …&lt;/p&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/05/library-vs-service.png"&gt;&lt;img alt="Shared code can be in a library or in a service" src="../images/2021/05/library-vs-service.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Shared code can be in a library or in a service. Image by Martin Thoma.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Preventing code duplication is a software development principle called
&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;&lt;em&gt;DRY&lt;/em&gt;&lt;/a&gt; &amp;mdash; &lt;strong&gt;D&lt;/strong&gt;on&amp;rsquo;t
&lt;strong&gt;R&lt;/strong&gt;epeat &lt;strong&gt;Y&lt;/strong&gt;ourself. DRY is important because duplicated code usually
means way more code that needs to be maintained. If you need to fix a bug, you
need to fix it in all duplicated places. If you need to extend the
capabilities, you need to do it in multiple parts of the code. When a new
developer adjusts one part of the duplicated code and forgets to adjust the
other places, the situation gets more complicated.&lt;/p&gt;
&lt;p&gt;There are two very different ways to keep your code DRY: Put the shared code
in a library or put it in a service. Eric Knipp calls this &amp;ldquo;shared capability&amp;rdquo;
(&lt;a href="https://blogs.gartner.com/eric-knipp/2013/03/20/libraries-vs-services/"&gt;source&lt;/a&gt;),
which already shows that there is an abstraction difference. When you interact
with services, you typically don&amp;rsquo;t want to care about the implementation
details of that service. In a library, you might think more about runtime
complexity or even jump into the code once in a while.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know what the differences between a
library and a service are and when you should use one or another. Let&amp;rsquo;s start!&lt;/p&gt;
&lt;h2 id="the-differences"&gt;The differences&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/06/moon-jelly.jpg"&gt;&lt;img alt="differences" src="https://cdn-images-1.medium.com/max/9216/0*7euF5Y587KTF-LS8" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Photo by &lt;a href="https://unsplash.com/@cooljonez?utm_source=medium&amp;amp;utm_medium=referral"&gt;Denise Jones&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;img alt="..." src=""/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@cooljonez?utm_source=medium&amp;amp;utm_medium=referral"&gt;Denise Jones&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A library is shared code that gets deployed with each application. So the
library is part of the application and runs on the same machine as the
application. A library is accessed via function calls.&lt;/p&gt;
&lt;p&gt;In contrast, a service has its own infrastructure. This means it has its own
machine, but also logging, monitoring, alerting, potentially an on-call team
to fix issues. It gets deployed independently of the applications. Updates can
be rolled out without the users of the service noticing that there was a
change at all.&lt;/p&gt;
&lt;p&gt;Typically, when I interact with a service I like to keep that interaction in
one part of my code. I like to write an own module for each service I interact
with. This module only takes care of the service interaction. In some cases,
services provide such modules, e.g. the boto3 library for interacting with AWS
services. What I want to say: If you create a service, you might end up
creating a service &lt;em&gt;and&lt;/em&gt; a small library.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into the different arguments for one solution or the other!&lt;/p&gt;
&lt;h2 id="1-speed-of-calls"&gt;#1: Speed of Calls&lt;/h2&gt;
&lt;p&gt;Function calls on the local machine are executing in a few nanoseconds whereas
network requests take a few milliseconds. You can expect network requests to
take 1,000,000 times longer than the internal function call.&lt;/p&gt;
&lt;p&gt;Please keep in mind that this is only covering the communication part, not the
actual work. If you want to compute the hundredth billionth digit of pi, the
communication speed is dwarfed by the workload. Hence the speed of calls is
just an argument if the workload of the call is fast. If it is, this point
clearly goes to a library.&lt;/p&gt;
&lt;h2 id="2-reliability-of-calls"&gt;#2: Reliability of Calls&lt;/h2&gt;
&lt;p&gt;Networks fail all the time. CPU instructions can also fail, but this is so
rare that most developers can safely ignore this case for all of their lives.&lt;/p&gt;
&lt;p&gt;If you have network connections, you need to deal with timeouts. You need to
deal with unavailable services. For this reason, commercial services typically
provide a service level agreement (SLA). With an SLA you can get a grasp if
the service could be offline for too long or for a time that might severely
impact your own SLA.&lt;/p&gt;
&lt;p&gt;This point clearly goes to libraries.&lt;/p&gt;
&lt;h2 id="3-infrastructure"&gt;#3: Infrastructure&lt;/h2&gt;
&lt;p&gt;A service typically comes with its own infrastructure. It has its own machine.
This means you have to take care of one more machine than in the library case.
But it doesn&amp;rsquo;t end there. If you have a service, you need to make sure you
have logging, monitoring, alerting, and potentially an on-call team in place.&lt;/p&gt;
&lt;p&gt;This makes creating a library more straightforward than creating a service.&lt;/p&gt;
&lt;h2 id="4-development-overhead"&gt;#4: Development Overhead&lt;/h2&gt;
&lt;p&gt;A core reason why we try to follow the DRY principle is to keep development
and maintenance costs low. If we create a service, it comes with a lot of
overhead compared to a library.&lt;/p&gt;
&lt;p&gt;On the one hand, there is the already mentioned infrastructure cost. On the
other hand, you now have to think about secrets management and
&lt;a href="https://medium.com/plain-and-simple/identification-vs-authentication-vs-authorization-e1f03a0ca885"&gt;authentication/authorization&lt;/a&gt;.
How do you make sure that only authorized users can access the new service?&lt;/p&gt;
&lt;h2 id="5-scalability"&gt;#5: Scalability&lt;/h2&gt;
&lt;p&gt;You can &lt;a href="https://medium.com/plain-and-simple/scaling-vertically-vs-scaling-horizontally-82547a77d925"&gt;scale applications horizontally or vertically&lt;/a&gt;. Scaling vertically means buying a bigger machine, scaling horizontally means buying a second machine. Buying a bigger machine is trivial and cheap until a certain point. From that point it becomes impossible. If you&amp;rsquo;re lucky, you never feel the need to scale vertically. Scaling vertically is way more complicated and you need to spend development time on it, which typically makes it way more expensive.&lt;/p&gt;
&lt;p&gt;If you have a separate service, you might already be closer to an architecture
that allows you to scale vertically. However, this is not a strong argument
for a service as you need to take care of the infrastructure of the service.
You&amp;rsquo;re just paying the cost earlier &amp;mdash; the infrastructure argument.&lt;/p&gt;
&lt;h2 id="6-flexibility-in-development"&gt;#6: Flexibility in Development&lt;/h2&gt;
&lt;p&gt;Different problems require different solutions. You might even want to switch
programming languages for parts of your code because the community in one area
is way stronger. While Python and many other programming languages offer
foreign function interfaces
(&lt;a href="https://en.wikipedia.org/wiki/Foreign_function_interface"&gt;FFIs&lt;/a&gt;), it might
be simpler to completely encapsulate that part by a different service.&lt;/p&gt;
&lt;p&gt;Please note that I see flexibility in development as a strong argument, but
lack of knowledge of how FFIs work as a weak argument. If you have different
teams working on the different topics anyway and if the overhead caused by the
network is not relevant, go for the service.&lt;/p&gt;
&lt;h2 id="7-shared-state"&gt;#7: Shared State&lt;/h2&gt;
&lt;p&gt;If we have a stateless part of the code, it&amp;rsquo;s an indicator that a library
might be a good solution. If you have a shared state, maybe a service is
better.&lt;/p&gt;
&lt;p&gt;One specific case I&amp;rsquo;m currently thinking about is an external service that
might not be as reliable or fast as I would like it to be. It needs to be
wrapped in a local &amp;ldquo;caching&amp;rdquo; layer that also abstracts away some of the
complexity of the external service.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/05/external-service-library-vs-service.png"&gt;&lt;img alt="External Service Wrapper: Library vs Service" src="../images/2021/05/external-service-library-vs-service.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Image by Martin Thoma&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In this case, it&amp;rsquo;s not so clear if the library option is better or worse than
the application option. The handling of data makes me tend to use a service,
but then I would need to deal with the unreliabilities of a network. And it
would certainly take longer to access that data.&lt;/p&gt;
&lt;h2 id="library-vs-service-some-simple-examples"&gt;Library vs Service: Some simple Examples&lt;/h2&gt;
&lt;p&gt;The world is complex and I cannot give you a 5-step guide to decide if you
should use a service or a library. In cases like the one above, the situation
is not so clear. But there are simple cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pure algorithms, no shared state&lt;/strong&gt;: If you only want to share algorithms
  or maybe some constants (e.g. HTTP Status Codes, Country names/codes,
  currencies, timezones), it&amp;rsquo;s a pretty clear indicator that you want a
  &lt;strong&gt;library&lt;/strong&gt;. Examples that pop to my mind are &lt;a href="https://numpy.org/"&gt;Numpy&lt;/a&gt;,
  &lt;a href="https://www.scipy.org/"&gt;Scipy&lt;/a&gt;, &lt;a href="https://www.tensorflow.org/"&gt;Tensorflow&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Algorithms with lots of data&lt;/strong&gt;: The &lt;a href="https://developers.google.com/maps"&gt;Google
  maps&lt;/a&gt; service has complex functionality
  such as &amp;ldquo;What is the address closest to this GPS point?&amp;rdquo; or &amp;ldquo;What is the
  fastest route from A to B?&amp;rdquo; combined with lots of data to fuel those
  algorithms. The service is heavy, needs regular updates of the data, the
  infrastructure to make this possible is crazy complex. The applications
  which make use of this are very simple: Draw my running route. Display the
  fastest route in my navigation system. Calculate the area of my neighbors'
  property. Writing a &lt;strong&gt;service&lt;/strong&gt; to remove the burden of the heavy
  infrastructure is a good idea.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lots of memory needed&lt;/strong&gt;: If you have a part of the code that constantly
  needs a lot of memory, you might want to put it on its own machine. This way
  you might keep things vertically scalable for longer. And in some cases,
  like machine learning applications which only do predictions, it is trivial
  to scale: Just spin up another machine and serve requested in a round-robin
  fashion (or similar). You don&amp;rsquo;t have a shared state, just the model which
  needs to be in memory. All translation and OCR &lt;strong&gt;services&lt;/strong&gt; are good
  examples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only shred state, no algorithms&lt;/strong&gt;: You might consider just giving &lt;strong&gt;direct
  database access&lt;/strong&gt;. Please note that this comes with its own problems and
  it&amp;rsquo;s very unlikely that this is a good solution in the long run. It might be
  an acceptable intermediate solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="transitions"&gt;Transitions&lt;/h2&gt;
&lt;p&gt;Big software projects are typically not created from scratch but evolve over
time. It starts with the &amp;ldquo;&lt;strong&gt;Getting Stuff Done&lt;/strong&gt;&amp;rdquo; phase in which developers
have everything on their local machine or a hosted web service.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s something serious, it gets to the &amp;ldquo;&lt;strong&gt;Reliability Matters&lt;/strong&gt;&amp;rdquo; phase. In
this phase, developers start thinking about how to deal with a bigger amount
of users, how to deploy in a way that doesn&amp;rsquo;t disrupt users, multiple
environments like local/development/staging/production, logging, monitoring,
and alerting. Developers start to run things on multiple machines, e.g. the
database on a different one than the application and especially CPU intensive
stuff on another one. This got way simpler in the past years due to AWS.&lt;/p&gt;
&lt;p&gt;At some point, the need to scale development arises. If you have dozens of
developers, you need to make sure that not everybody needs to know about
everything. You need to &lt;strong&gt;Scale Development&lt;/strong&gt;. You need to partition the
software. Software can be partitioned by the type of value they provide. The
teams have a clearly defined responsibility and own their tech stack &amp;mdash; the
code, the infrastructure, the operations. They need to talk with their clients
and they need to define their interfaces.&lt;/p&gt;
&lt;p&gt;As an image, it might look like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2021/05/library-service-transition.png"&gt;&lt;img alt="Library to Service Transition" src="../images/2021/05/library-service-transition.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Image by Martin Thoma&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A transition I have seen a couple of times is to create a monolith first to
get the business going. When the company grows, they structure the monolith by
business functionality. For example, there might be modules dealing with
accounting and others dealing with analytics. When the monolith becomes really
hard to maintain because everything is dependant on everything else, (micro)
services are factored out of the monolith.&lt;/p&gt;
&lt;p&gt;An intermediate solution I&amp;rsquo;m currently thinking about is the problem of the
(potentially unreliable) external service described above. It would be
possible to first create a library solution where the different applications
could have different parts of the state. Potentially a small amount of data
will be in both applications. The data which is in multiple applications would
make a move from a library solution to a service solution hard as the
synchronization mechanism has to be considered.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Libraries and Services allow you to keep your code DRY (&lt;strong&gt;d&lt;/strong&gt;on&amp;rsquo;t &lt;strong&gt;r&lt;/strong&gt;epeat
&lt;strong&gt;y&lt;/strong&gt;ourself). Libraries are more integrated into the application and building
them comes with a lower upfront cost. Services provide a clear separation on
the infrastructure level, but you need to think about the issues of network
requests.&lt;/p&gt;
&lt;p&gt;Going from a library to a service is trivial in many cases. Going from a
service to a library can be completely infeasible after a while.&lt;/p&gt;</content><category term="Code"></category><category term="Software Engineering"></category><category term="Architecture"></category></entry><entry><title>8 Techniques To Speed up Your Database</title><link href="https://martin-thoma.com/https://betterprogramming.pub/8-techniques-to-speed-up-your-database-292754ff7739" rel="alternate"></link><published>2021-04-01T20:00:00+02:00</published><updated>2021-04-01T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-04-01:/https://betterprogramming.pub/8-techniques-to-speed-up-your-database-292754ff7739</id><summary type="html">&lt;p&gt;&lt;img alt="Photo by Christina Morillo (original). Thank you!" src="https://cdn-images-1.medium.com/max/10000/1*28TMGhQwjgRqkBU7mXcZcw.jpeg"/&gt;&lt;em&gt;Photo by Christina Morillo (&lt;a href="https://www.pexels.com/de-de/foto/frau-die-beim-tragen-des-laptops-steht-1181354/"&gt;original&lt;/a&gt;). Thank you!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Almost all web services for end-users have the need to store data. Almost all of them store them in a database. And quite a lot use a relational database like PostgreSQL, MySQL/MariaDB, or MSSQL. Database systems are pretty awesome because you can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Photo by Christina Morillo (original). Thank you!" src="https://cdn-images-1.medium.com/max/10000/1*28TMGhQwjgRqkBU7mXcZcw.jpeg"/&gt;&lt;em&gt;Photo by Christina Morillo (&lt;a href="https://www.pexels.com/de-de/foto/frau-die-beim-tragen-des-laptops-steht-1181354/"&gt;original&lt;/a&gt;). Thank you!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Almost all web services for end-users have the need to store data. Almost all of them store them in a database. And quite a lot use a relational database like PostgreSQL, MySQL/MariaDB, or MSSQL. Database systems are pretty awesome because you can forget about them. They just handle the data persistence for you&amp;hellip; until they get slow.&lt;/p&gt;
&lt;p&gt;In this article, you will learn the difference between vertical and horizontal partitioning, sharding, replication, and a few other ways to speed up your database. Let&amp;rsquo;s go!&lt;/p&gt;
&lt;h2 id="what-do-we-care-about"&gt;What Do We Care About?&lt;/h2&gt;
&lt;p&gt;For database systems, we care a lot about &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;availability&lt;/strong&gt;. We also need a working solution for exchanging broken equipment and continuous &lt;strong&gt;backups&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once the minimum requirements are fulfilled, we might have several performance metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read performance for simple queries&lt;/li&gt;
&lt;li&gt;Read performance for complex queries&lt;/li&gt;
&lt;li&gt;Insert / update performance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The workloads of different applications differ in important ways. Many web applications only use &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; and, once in a while, very simple JOINs. They need fast reads and relatively fast writes. They have a big amount of small transactions. They have an &lt;a href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;OLTP&lt;/a&gt;-style workload.&lt;/p&gt;
&lt;p&gt;Analytics teams in contrast need far more complex queries. It is also acceptable if those queries take more time. They have a small amount of complex select queries. They have an &lt;a href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;OLAP&lt;/a&gt;-style workload.&lt;/p&gt;
&lt;p&gt;One tool to find single slow queries is logging slow queries (&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.postgresql.org/docs/current/runtime-config-logging.html"&gt;PostgreSQL&lt;/a&gt;, &lt;a href="https://serverfault.com/a/182686/113899"&gt;MSSQL&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="algorithmic-improvements"&gt;Algorithmic Improvements&lt;/h2&gt;
&lt;p&gt;The code that runs in production is, in many cases, just the first thing that happened to work. For non-developers, think about the last few emails you&amp;rsquo;ve written. Very likely, there was at least one where you didn&amp;rsquo;t spend too much time to improve the way you communicate. It&amp;rsquo;s the same story with code. In good companies, at least a second person had a quick glance at the code. But when it looks reasonable, we developers will not go into detail over every single line. This means there will always be room for improvement.&lt;/p&gt;
&lt;p&gt;For databases, there are two common ways to improve: Adding reasonable indices and query optimization.&lt;/p&gt;
&lt;h2 id="1-indices"&gt;1. Indices&lt;/h2&gt;
&lt;p&gt;Indices allow the database to find relevant rows quicker by maintaining an efficient search data structure (e.g., a &lt;a href="https://en.wikipedia.org/wiki/B-tree"&gt;B-Tree&lt;/a&gt;). This is done per table. Adding an index can be computationally expensive and has to be executed on the production system, so it&amp;rsquo;s typically done infrequently.&lt;/p&gt;
&lt;p&gt;Creating an index is easy via SQL (&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.postgresql.org/docs/9.1/sql-createindex.html"&gt;PostgreSQL&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arbitrary_index_name&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your_table_name&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding an index can speed up searches in the database, but slows down UPDATE / INSERT / DELETE statements, except if the &amp;ldquo;WHERE&amp;rdquo; part is costing a lot of time.&lt;/p&gt;
&lt;h2 id="2-query-optimization"&gt;2. Query Optimization&lt;/h2&gt;
&lt;p&gt;Query optimization is done by the database user per query. Queries can be written in several different ways, and some of them can be more efficient than others. You might want to try different query versions on your data and &lt;a href="https://www.youtube.com/watch?v=5y8G72q-IpE"&gt;use the explain statement&lt;/a&gt;. A nice article about query optimization can be found here:
&lt;a href="https://www.sqlshack.com/query-optimization-techniques-in-sql-server-tips-and-tricks/"&gt;&lt;strong&gt;Query optimization techniques in SQL Server: tips and tricks&lt;/strong&gt;
&lt;em&gt;June 19, 2018 by Fixing bad queries and resolving performance problems can involve hours (or days) of research and&amp;hellip;&lt;/em&gt;www.sqlshack.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One tool to mention is &lt;a href="https://github.com/jarulraj/sqlcheck"&gt;sqlcheck&lt;/a&gt; (&lt;a href="https://www.youtube.com/watch?v=5vHhuuPy3FI"&gt;video&lt;/a&gt;). It checks for common SQL query antipatterns like having multiple values in one column instead of using an intersection table or wildcard selects.&lt;/p&gt;
&lt;p&gt;A slightly different sub-category of the query optimization topic is &lt;a href="https://levelup.gitconnected.com/raw-sql-vs-query-builder-vs-orm-eee72dbdd275#cbe8-27a45e3740e8"&gt;the n+1 problem&lt;/a&gt; / writing a loop to send multiple queries instead of having one query for the data.&lt;/p&gt;
&lt;h2 id="3-business-changes-and-partitioning"&gt;3. Business Changes and Partitioning&lt;/h2&gt;
&lt;p&gt;When you&amp;rsquo;re growing a business, you want to please your clients. If they ask for a small new feature, you try to include it. This can lead to feature-creep. The UNIX philosophy indicates that this was a problem already quite a while ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="write-programs-that-do-one-thing-and-do-it-well-doug-mcilroy"&gt;&amp;ldquo;Write programs that do one thing and do it well.&amp;rdquo; &amp;mdash; Doug McIlroy&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, it might be OK to split your web services data by user groups. Maybe it makes sense to split them into regions? I&amp;rsquo;ve seen that at &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt; and &lt;a href="https://www.securecodewarrior.com/"&gt;Secure Code Warrior&lt;/a&gt;. Maybe you can split it into &amp;ldquo;Private clients,&amp;rdquo; &amp;ldquo;Small business clients,&amp;rdquo; or &amp;ldquo;Large Business clients&amp;rdquo;? Maybe one part of the application can actually be its own service with its own database?&lt;/p&gt;
&lt;h2 id="4-replication"&gt;4. Replication&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*7uNbgHaB-3dSFOfMToqpig.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Replication is an easy solution if reads are your problem and if a bit of time-delay of updates is not a big deal. Replication continuously copies the database to another machine. It speeds up reads and acts as a failover mechanism.&lt;/p&gt;
&lt;p&gt;The idea is to have one primary server and multiple replication servers, which were formerly known under other names. The primary server handles any changes of data, while the replication servers just duplicate the primary server. There are &lt;a href="https://mariadb.com/kb/en/replication-overview/#common-replication-setups"&gt;other topologies&lt;/a&gt;, e.g., a ring or a star setup.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-switch.html"&gt;MySQL docs&lt;/a&gt;, &lt;a href="https://www.postgresql.org/docs/9.2/runtime-config-replication.html"&gt;PostgreSQL docs&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-US/sql/relational-databases/replication/sql-server-replication?view=sql-server-ver15"&gt;MSSQL docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="5-horizontal-partitioning"&gt;5. Horizontal Partitioning&lt;/h2&gt;
&lt;p&gt;Given a huge table, we could store some rows on one machine and others on another machine. The idea to split the data by row is called &lt;em&gt;horizontal partitioning&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An image explains more than many words:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Conceptual example for horizontal partitioning. Image by Martin Thoma." src="https://cdn-images-1.medium.com/max/5166/1*silDKsFQO0fkjPUV2Vr4Cg.png"/&gt;&lt;em&gt;Conceptual example for horizontal partitioning. Image by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Partitioning simply by id works like this in &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/partitioning-range.html"&gt;MySQL&lt;/a&gt; / &lt;a href="https://mariadb.com/kb/en/range-partitioning-type"&gt;MariaDB&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shopping_carts&lt;/span&gt;
&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RANGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Partition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Partition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4567&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Partition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LESS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THAN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;MAXVALUE&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You want the user of the database system to still be able to query the database with the typical queries, perhaps using the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shopping_carts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cart_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One important thing to note here: Horizontal partitioning is completely unrelated to &lt;a href="https://medium.com/plain-and-simple/scaling-vertically-vs-scaling-horizontally-82547a77d925"&gt;scaling horizontally&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="6-vertical-partitioning"&gt;6. Vertical Partitioning&lt;/h2&gt;
&lt;p&gt;Instead of dividing the big database based on rows, we can divide it by columns. This might give you an uneasy feeling because you&amp;rsquo;ve learned at university that normalizing a database is a good idea. The important thing to notice here is that we are talking about different stages in the database design. The &lt;a href="https://en.wikipedia.org/wiki/Database_normalization"&gt;various database normal forms&lt;/a&gt; are related to the logical design. At this stage, we take care of the physical design.&lt;/p&gt;
&lt;p&gt;Different parts of the application might not need most columns of a row. For this reason, it can be OK to split them away. Hence &lt;em&gt;vertical partitioning&lt;/em&gt; is also called &lt;em&gt;row splitting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One commonly done practice is to split metadata from the content. Here&amp;rsquo;s an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2646/1*f6PVSSxrlrr0P_v9FG3OqQ.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One important thing to note here: Vertical partitioning is completely unrelated to scaling vertically!&lt;/p&gt;
&lt;p&gt;Vertical partitioning can be useful when you avoid privacy or regulatory issues with it. Think of credit card information. That could logically fit well with other information, but most of the application does not need it. You might even put it in a completely different database and hide it behind a private microservice.&lt;/p&gt;
&lt;h2 id="7-sharding-taking-partitioning-to-the-next-level"&gt;7. Sharding &amp;mdash; Taking Partitioning To the Next Level&lt;/h2&gt;
&lt;p&gt;You have seen that the data can be grouped in two different ways. It might already make sense to partition the data on the same machine to help the database execute common queries faster. But if the database is maxing out the CPU or RAM, it might make sense to use different machines.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sharding&lt;/em&gt; is partitioning a single logical dataset and distributing it over different machines.&lt;/p&gt;
&lt;p&gt;As you might guess, this comes with a huge amount of issues &amp;mdash; and thus should only be your last way out. For example, Foursquare was down for 11 hours due to a sharding issue in October 2010 (&lt;a href="http://highscalability.com/blog/2010/10/15/troubles-with-sharding-what-can-we-learn-from-the-foursquare.html"&gt;source&lt;/a&gt;). I&amp;rsquo;ve been lucky so far that I didn&amp;rsquo;t have to deal with sharding.&lt;/p&gt;
&lt;p&gt;The first obvious issue is that your application needs to know which shard contains the data you&amp;rsquo;re looking for. Hence your application logic is affected, potentially in all places.&lt;/p&gt;
&lt;p&gt;A second big problem is JOINs across shards.&lt;/p&gt;
&lt;p&gt;The third problem is how shards are defined. To be truly scalable, you want to make a dynamic definition of the shards. Having a hierarchical structure can help to achieve this.&lt;/p&gt;
&lt;p&gt;If you still want to read more about sharding, I recommend the awesome article by &lt;a href="undefined"&gt;Jeeyoung Kim&lt;/a&gt;:
&lt;a href="https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6"&gt;&lt;strong&gt;How Sharding Works&lt;/strong&gt;
&lt;em&gt;This is a continuation of the last blog post, why I love databases.&lt;/em&gt;medium.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article by Digital Ocean is also very nice:
&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-database-sharding"&gt;&lt;strong&gt;Understanding Database Sharding | DigitalOcean&lt;/strong&gt;
&lt;em&gt;Sharded databases have been receiving lots of attention in recent years, but many don't have a clear understanding of&amp;hellip;&lt;/em&gt;www.digitalocean.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="8-database-clustering"&gt;8. Database Clustering&lt;/h2&gt;
&lt;p&gt;I only came across this term when looking at &lt;a href="https://vitess.io/"&gt;Vitess&lt;/a&gt;. The idea seems to hide the issues of sharding by, also, using replication under the hood:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/1a53ea0ff3903084cb945c350fe1d8e1"&gt;&lt;/iframe&gt;
&lt;p&gt;There is &lt;a href="https://www.postgresql.org/docs/9.5/creating-cluster.html"&gt;documentation for PostgreSQL&lt;/a&gt; as well and &lt;a href="https://www.mysql.com/de/products/cluster/"&gt;MySQL Cluster&lt;/a&gt; is another product.&lt;/p&gt;
&lt;h2 id="bonus-query-caching"&gt;Bonus: Query Caching&lt;/h2&gt;
&lt;p&gt;If you have some heavy queries which act on data that rarely changes, you could try to cache the query. I&amp;rsquo;m uncertain what databases offer by default, but you could simply put a Key-Value Store in place for that query. Instead of sending your query to the database directly, you send it to a microservice that looks for it in the Key-Value store. If it&amp;rsquo;s not there or it&amp;rsquo;s invalid, it queries the real database.&lt;/p&gt;
&lt;p&gt;The drawback is that you don&amp;rsquo;t know if the data you get is the most recent one.&lt;/p&gt;
&lt;h2 id="lets-summarize"&gt;Let&amp;rsquo;s Summarize!&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/3678/1*MirP_rcEMVxBigZnLwciLA.png"/&gt;&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;Some topics are crucial for development, but not part of day-to-day work or computer science curriculum. In our professional software development series, you can learn about more topics.&lt;/p&gt;
&lt;p&gt;I am thinking about adding articles of these kind, so please let me know what you&amp;rsquo;re interested in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Team Building&lt;/li&gt;
&lt;li&gt;Code Reviews&lt;/li&gt;
&lt;li&gt;Code Deployment: A &lt;a href="https://makeitnew.io/docker-ab1a6bddf389"&gt;basic Docker article&lt;/a&gt; already exists, but there is way more to write about this topic&lt;/li&gt;
&lt;li&gt;Infrastructure as Code (IaC)&lt;/li&gt;
&lt;li&gt;Monitoring and Alerting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;</content><category term="Code"></category><category term="Database"></category></entry><entry><title>Scaling Vertically vs Scaling Horizontally</title><link href="https://martin-thoma.com/https://medium.com/plain-and-simple/scaling-vertically-vs-scaling-horizontally-82547a77d925" rel="alternate"></link><published>2021-03-31T20:00:00+02:00</published><updated>2021-03-31T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-03-31:/https://medium.com/plain-and-simple/scaling-vertically-vs-scaling-horizontally-82547a77d925</id><summary type="html">&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2670/1*dHDSuy4b5y4eAdcD-PLJEQ.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The beauty of software development is that almost arbitrary many can profit from a developer&amp;rsquo;s work. Web services such as Facebook or YouTube have several hundred developers, but hundreds of millions of users. However, having many users is not for free. The servers need to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2670/1*dHDSuy4b5y4eAdcD-PLJEQ.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The beauty of software development is that almost arbitrary many can profit from a developer&amp;rsquo;s work. Web services such as Facebook or YouTube have several hundred developers, but hundreds of millions of users. However, having many users is not for free. The servers need to do more work. At some point, the machine you started with is not enough.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know the difference between scaling vertically and scaling horizontally. Let&amp;rsquo;s go!&lt;/p&gt;
&lt;h2 id="vertical-scaling-scaling-up"&gt;Vertical Scaling: Scaling up💸&lt;/h2&gt;
&lt;p&gt;The simplest solution when your server struggles is to buy a more powerful one. It might be more RAM, a better CPU, or a better network connection. Maybe even just a bigger hard disk.&lt;/p&gt;
&lt;p&gt;Vertical scaling is awesome as long as it works. There are limits in what money can buy you. For example, &lt;a href="https://electronics.stackexchange.com/q/122050/49719"&gt;CPU speed is limited&lt;/a&gt;. At some point, you&amp;rsquo;ve got the best that exists on the market. You might even approach physical limits.&lt;/p&gt;
&lt;p&gt;Vertical scaling is an early solution as long as you don&amp;rsquo;t reach the territory where the limits are:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Horizontal scaling is pretty cheap in every respect when you start with a tiny machine. For example, the difference from a Rasperry PI to a small PC is huge in computational power, but the cost is very small. At some point, improving the power even a tiny bit makes the machine way more expensive. Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*j1UpZc2kpog_BRzQFH9vjQ.png"/&gt;&lt;em&gt;Horizontal scaling is pretty cheap in every respect when you start with a tiny machine. For example, the difference from a Rasperry PI to a small PC is huge in computational power, but the cost is very small. At some point, improving the power even a tiny bit makes the machine way more expensive. Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Databases are typical examples that are scaled vertically as long as possible.&lt;/p&gt;
&lt;h2 id="horizontal-scaling-scaling-out"&gt;Horizontal Scaling: Scaling out&lt;/h2&gt;
&lt;p&gt;Suppose the disk space is your problem. You have a machine that has 8 TB of disk space. Such a disk costs about 180 EUR. You see that you will need 16 TB of disk space in the close future. You could scale vertically and buy a 16 TB disk for maybe 400 EUR. But what will you do when you need 32 TB of disk space?&lt;/p&gt;
&lt;p&gt;Instead of buying a single 16 TB disk, you can buy a second 8 TB disk. Then you need to think about how those two disks work together. This means the developers need to invest more time as with the vertical scaling solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="vertical-scaling-is-buying-a-bigger-machine-horizontal-scaling-is-buying-multiple-machines"&gt;Vertical scaling is buying a bigger machine, horizontal scaling is buying multiple machines.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can always buy another machine, but at some point, you cannot buy a bigger machine. Think of Aircraft: When you have more passengers, you can go up to a Boeing 747. After that, you need to use multiple airplanes.&lt;/p&gt;
&lt;p&gt;A static website is a good example you can scale horizontally without any issues.&lt;/p&gt;</content><category term="Code"></category><category term="Scaling"></category></entry><entry><title>Programming Interviews: Fizz Buzz</title><link href="https://martin-thoma.com/https://martinthoma.medium.com/programming-interviews-fizz-buzz-882d545c7ad2" rel="alternate"></link><published>2021-03-09T20:00:00+01:00</published><updated>2021-03-09T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-03-09:/https://martinthoma.medium.com/programming-interviews-fizz-buzz-882d545c7ad2</id><summary type="html">&lt;p&gt;When companies interview potential new software developers, they typically also have a programming interview to make sure that the candidate can actually write very simple programs. Fizz Buzz is a very simple classical example. The problem is easy to describe and the solution is easy as well.&lt;/p&gt;
&lt;h2 id="problem-statement"&gt;Problem Statement&lt;/h2&gt;
&lt;p&gt;Write …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When companies interview potential new software developers, they typically also have a programming interview to make sure that the candidate can actually write very simple programs. Fizz Buzz is a very simple classical example. The problem is easy to describe and the solution is easy as well.&lt;/p&gt;
&lt;h2 id="problem-statement"&gt;Problem Statement&lt;/h2&gt;
&lt;p&gt;Write a function that takes an integer and returns a string. If the number is divisible by 3, return &amp;ldquo;Fizz&amp;rdquo;. If the number is divisible by 5, return &amp;ldquo;Buzz&amp;rdquo;. If the number is divisible by 15, return &amp;ldquo;Fizz Buzz&amp;rdquo;. If the number is not divisible by 3 nor by 5, return the number itself.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;In Python, a solution looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Fizz Buzz"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Buzz"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="unit-tests"&gt;Unit Tests&lt;/h2&gt;
&lt;p&gt;Seeing which cases people test gives a good indicator of how used they are to testing at all. There are two groups of tests I want to see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typical Cases&lt;/li&gt;
&lt;li&gt;Edge Cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Python, you can use Pytest to run the following tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fizzbuzz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_5&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Buzz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Buzz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Buzz"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_15&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz Buzz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz Buzz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz Buzz"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"2"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_edge_cases&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-1"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Fizz Buzz"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="extensions"&gt;Extensions&lt;/h2&gt;
&lt;p&gt;As an interviewer, I like to have follow-up questions or extensions to interview questions. Just in case the candidate is good or knows the task already.&lt;/p&gt;
&lt;p&gt;FizzBuzz can be adjusted by changing the task from &amp;ldquo;3, 5, and 15&amp;rdquo; to &amp;ldquo;a, b, and a&amp;middot;b&amp;rdquo;. Or adding 11 to the mix.&lt;/p&gt;
&lt;h2 id="typical-mistakes"&gt;Typical Mistakes&lt;/h2&gt;
&lt;p&gt;A typical mistake is to check the properties in the order presented in the problem statement.&lt;/p&gt;
&lt;p&gt;Another typical mistake is trying to get smart by having fewer lines of code, but harder logic.&lt;/p&gt;
&lt;h2 id="what-i-dont-learn-as-an-interviewer"&gt;What I (don&amp;rsquo;t) learn as an Interviewer&lt;/h2&gt;
&lt;p&gt;Fizz Buzz is an indicator if people have any programming skills at all. If people don&amp;rsquo;t manage to solve this relatively quickly, they cannot do anything.&lt;/p&gt;
&lt;p&gt;You can see if they have reasonable unit test cases and how they make their code extensible. In the best case, people might use property-based testing for it:
&lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119"&gt;&lt;strong&gt;Property-Based Testing with Python&lt;/strong&gt;
&lt;em&gt;Test parametrization on steroids&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of important skills and factlets you will not see with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Algorithms&lt;/strong&gt;: What does the candidate know about data structures and algorithms? Do they have a good grasp of runtime and space complexity?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Architecture&lt;/strong&gt;: How well can the candidate structure code into packages and sub-packages (or modules/submodules; terminology differs in different languages)? How well can they create reasonable classes and use common design patterns? Does the candidate know how to make the application (horizontally/vertically) scalable and where the limits are?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System Architecture&lt;/strong&gt;: Which architectural components does the candidate have in her/his toolbelt? Which concrete product choices for the components do they know?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Workflow&lt;/strong&gt;: Is the candidate familiar with git, Jira, Scrum, retros, sprint planning/grooming? Have they heard of branching models like git flow / Github flow / GitLab flow? How would they handle incidents and urgent requests from the outside?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cultural fit&lt;/strong&gt;: What is the candidates' behavior if they don&amp;rsquo;t know something? What will they do if they made a mistake? Do they rather like to take decisions or have somebody else decide? How do they communicate with the rest of the team? How do they communicate with other stakeholders?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not all of those topics might be relevant to your organization or the specific position.&lt;/p&gt;
&lt;h2 id="tldr-score-of-fizz-buzz-for-interviews"&gt;TL;DR: Score of &amp;ldquo;Fizz Buzz&amp;rdquo; for Interviews&lt;/h2&gt;
&lt;p&gt;Overall, I think fizz buzz is too &lt;strong&gt;well-known&lt;/strong&gt; to lead to any interesting results. It is &lt;strong&gt;trivial to solve&lt;/strong&gt; and leaves big knowledge gaps.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;Let me know if you have interview questions you would like me to explore in a similar style 🙂&lt;/p&gt;
&lt;p&gt;Topics that might be interesting around interviewing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Soft questions&lt;/li&gt;
&lt;li&gt;Take-home exercises&lt;/li&gt;
&lt;li&gt;Architectural questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some combinatoric/algorithmic questions for coding interviews:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fibonacci-Number&lt;/li&gt;
&lt;li&gt;Two Sum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a couple of sequences based questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a missing number in a sequence of numbers&lt;/li&gt;
&lt;li&gt;Find a duplicate in a sequence of numbers&lt;/li&gt;
&lt;li&gt;Remove duplicates from a sequence of numbers&lt;/li&gt;
&lt;li&gt;Rotate an array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also many string-based coding tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reverse a string&lt;/li&gt;
&lt;li&gt;Check if two strings are palindromes&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Interviews"></category></entry><entry><title>Encryption vs Encoding vs Hashing</title><link href="https://martin-thoma.com/https://medium.com/plain-and-simple/encryption-vs-encoding-vs-hashing-bb1e166cf15a" rel="alternate"></link><published>2021-02-02T20:00:00+01:00</published><updated>2021-02-02T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-02-02:/https://medium.com/plain-and-simple/encryption-vs-encoding-vs-hashing-bb1e166cf15a</id><summary type="html">&lt;p&gt;&lt;strong&gt;Encryption is about keeping a secret&lt;/strong&gt; and being able to restore it. &lt;strong&gt;Hashing is about fingerprinting&lt;/strong&gt; &amp;mdash; you don&amp;rsquo;t need to restore the original, but you need to make sure it is identical. &lt;strong&gt;Encoding is about data representation to enable information exchange&lt;/strong&gt;. Encoding does not involve keeping secrets.&lt;/p&gt;
&lt;p&gt;This was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Encryption is about keeping a secret&lt;/strong&gt; and being able to restore it. &lt;strong&gt;Hashing is about fingerprinting&lt;/strong&gt; &amp;mdash; you don&amp;rsquo;t need to restore the original, but you need to make sure it is identical. &lt;strong&gt;Encoding is about data representation to enable information exchange&lt;/strong&gt;. Encoding does not involve keeping secrets.&lt;/p&gt;
&lt;p&gt;This was my Twitter-length explanation. Let&amp;rsquo;s dive into details!&lt;/p&gt;
&lt;h2 id="encoding"&gt;Encoding&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Quino Al on Unsplash" src="https://cdn-images-1.medium.com/max/9100/0*MNqRXPEMDul3bdKA"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@quinoal?utm_source=medium&amp;amp;utm_medium=referral"&gt;Quino Al&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Encoding is about data representation. For example, for icons on the web, we prefer not to store image files but have them directly on the web page. This prevents the client from creating many HTTP requests for little data.&lt;/p&gt;
&lt;p&gt;But then the binary data of the image has to be converted to text data. A common way to do that is &lt;a href="https://en.wikipedia.org/wiki/Base64"&gt;base64 encoding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/2150/1*xLjXcxEQETyNMAi9HrOJbg.png"/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the &amp;ldquo;translation&amp;rdquo; is trivial: We build 6-bit blocks of the binary data and look up the character in the table above. It&amp;rsquo;s called base64 because there are 2⁶ = 64 digits. Hence it can be interpreted as a &lt;a href="https://en.wikipedia.org/wiki/Positional_notation#Base_conversion"&gt;number base conversion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note that this does not keep the content secret. Base64 does not use a secret key. Hence it is not encryption.&lt;/p&gt;
&lt;p&gt;Character encodings are also extremely common. They map an integer to a character. The three which I stumble over most often are UTF8, ASCII, Latin1.&lt;/p&gt;
&lt;h2 id="encryption"&gt;Encryption&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Mauro Sbicego on Unsplash" src="https://cdn-images-1.medium.com/max/12000/0*hFOeoYAJZ47-pd4B"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@maurosbicego?utm_source=medium&amp;amp;utm_medium=referral"&gt;Mauro Sbicego&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Encryption is about keeping secrets. You don&amp;rsquo;t want to keep the method how you encrypt and decrypt secret. Instead, you should have a secret key that is necessary to decrypt. This is called Kerckhoffs&amp;rsquo;s principle.&lt;/p&gt;
&lt;p&gt;Mathematically speaking, you have two functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;encrypt(plain text, key) -&amp;gt; cipher text
decrypt(cipher text, key) -&amp;gt; plain text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is called a symmetric-key algorithm as you use the same key for encrypting and for decrypting. There are asymmetric-key algorithms as well, but this would go too far.&lt;/p&gt;
&lt;p&gt;A very early scheme to encrypt was to use a natural sentence as a key to encrypt single characters. If the sentence happens to have one character multiple times, the second and following characters are deleted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Sentence   : The quick brown fox jumps
Derived key: the quickbrownfxjmpsadglvyz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you translate character by character:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Original     : the quickbrownfxjmpsadglvyz
Translates to: abcdefghijklmnopqrstuvwxyz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &amp;ldquo;space&amp;rdquo; translates to &amp;ldquo;d&amp;rdquo; and &amp;ldquo;z&amp;rdquo; translates to &amp;ldquo;space&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Putting it all together, the message secret translates to tchkca .&lt;/p&gt;
&lt;p&gt;In Python, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;derive_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;plain_char&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cipher_char&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plain_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cipher_char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plain_char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plain_char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cipher_char&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plain_char&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plain_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cipher_char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cipher_char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cipher_char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The quick brown fox jumps"&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;derive_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"key: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plain_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"secret"&lt;/span&gt;
    &lt;span class="n"&gt;cipher_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"cipher_text: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;recovered_plain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"recovered_plain: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;recovered_plain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modern encryption algorithms are a bit more complicated. The state of the art is AES &amp;mdash; the &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;Advanced Encryption Standard&lt;/a&gt;. Notable mentions are Twofish, Serpent, &lt;a href="https://en.wikipedia.org/wiki/SM4_(cipher)"&gt;SM4&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/SEED"&gt;SEED&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="hashing"&gt;Hashing&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Immo Wegmann on Unsplash" src="https://cdn-images-1.medium.com/max/9856/0*areuO5qPgGps9b5U"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@macroman?utm_source=medium&amp;amp;utm_medium=referral"&gt;Immo Wegmann&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hashing is about fingerprinting. You want to be able to uniquely identify a list of bytes (e.g. a string or a file), but you don&amp;rsquo;t want to store it. You either don&amp;rsquo;t need to be able to go back to the original or you don&amp;rsquo;t even want it. Just like with a fingerprint: You can take two fingerprints and conclude that they belong to the same person. But given only one fingerprint, you cannot reconstruct that person.&lt;/p&gt;
&lt;p&gt;I wrote an article that explains in detail why this loss of information is desired:
&lt;a href="https://levelup.gitconnected.com/password-hashing-eb3b97684636"&gt;&lt;strong&gt;Password Hashing 😇&lt;/strong&gt;
&lt;em&gt;Prepare to get hacked&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there are several other applications of hash functions as well:
&lt;a href="https://levelup.gitconnected.com/the-3-applications-of-hash-functions-fab1a75f4d3d"&gt;&lt;strong&gt;The 3 Applications of Hash Functions&lt;/strong&gt;
&lt;em&gt;What they are, what the options are, and why they matter&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;State-of-the-art hash functions are SHA-256 or SHA-512.&lt;/p&gt;</content><category term="Code"></category><category term="hash"></category><category term="encryption"></category><category term="security"></category><category term="encoding"></category></entry><entry><title>Merkle Trees</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/merkle-trees-e4fdaeaa3094" rel="alternate"></link><published>2021-01-27T20:00:00+01:00</published><updated>2021-01-27T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-01-27:/https://levelup.gitconnected.com/merkle-trees-e4fdaeaa3094</id><summary type="html">&lt;figure&gt;
&lt;img alt="A Merkle Tree is a binary tree with the data at the leaf nodes. All inner nodes are hashes." src="https://cdn-images-1.medium.com/max/3606/1*Ykn20LKvw2hyuyGV4ps5dA.png" width="800px"/&gt;
&lt;figcaption&gt;A Merkle Tree is a binary tree with the data at the leaf nodes. All inner nodes are hashes.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A Merkle Tree is a data structure that is used in Peer-to-Peer Networks. It is
a binary tree in which the value of an inner node is the hash of its …&lt;/p&gt;</summary><content type="html">&lt;figure&gt;
&lt;img alt="A Merkle Tree is a binary tree with the data at the leaf nodes. All inner nodes are hashes." src="https://cdn-images-1.medium.com/max/3606/1*Ykn20LKvw2hyuyGV4ps5dA.png" width="800px"/&gt;
&lt;figcaption&gt;A Merkle Tree is a binary tree with the data at the leaf nodes. All inner nodes are hashes.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A Merkle Tree is a data structure that is used in Peer-to-Peer Networks. It is
a binary tree in which the value of an inner node is the hash of its leaf
nodes. The root node of that tree is called &amp;ldquo;Merkle root&amp;rdquo; or &amp;ldquo;root hash&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So much about the definition. To me, it&amp;rsquo;s always helpful to know the problem
technology solves to really understand it.&lt;/p&gt;
&lt;h2 id="bittorrent"&gt;BitTorrent&lt;/h2&gt;
&lt;p&gt;How do you send big amounts of data over a network which randomly introduces
errors? When you just send a stream of data, you cannot guarantee the
integrity.&lt;/p&gt;
&lt;p&gt;The first improvement is to add the value of a hash function:
&lt;a href="https://levelup.gitconnected.com/the-3-applications-of-hash-functions-fab1a75f4d3d"&gt;&lt;strong&gt;The 3 Applications of Hash Functions&lt;/strong&gt;
&lt;em&gt;What they are, what the options are, and why they matter&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the hash value of the downloaded file is not equal to the expected hash
value, you just download the file again.&lt;/p&gt;
&lt;p&gt;It should be clear that this is inefficient as errors happen rarely. Very
likely, most of the file is completely fine. Maybe there is just a single bit
that flipped its value. You want to download as little as possible and just
fix the broken part.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A big file that is split into 8 blocks. Block #2 is broken, the rest is fine. Image by Martin Thoma." src="https://cdn-images-1.medium.com/max/2000/1*VWinFE8Gmh8pmcg_IoN-ow.png"/&gt;&lt;em&gt;A big file that is split into 8 blocks. Block #2 is broken, the rest is fine. Image by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next idea is to build blocks. You store the hash of each block. When you
download the file, you first download a header. The header contains
meta-information, e.g. the total number of blocks, the hash of each block, and
a hash of the metadata itself. If the metadata block is broken, you download
it again. Then you download each block and verify it. If a block is broken,
the block is downloaded again.&lt;/p&gt;
&lt;p&gt;Now the question is which block-size makes the most sense. The smaller the
block sizes, the less you have to download in case of an error. But the more
blocks you have, the more metadata you need to store. Take the most extreme
case: Every single bit has its own hash value. A typical hash value has 256
bit. This means the total size would increase by a factor of 257! In other
words: You could download the file 257 times instead.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say the file we want to download has a size of 4 GiB. Then the following
table gives the number of blocks and the additional size you have to download.
If you make the blocks of size 32 Byte for a 32 Byte hash, you need to
download double the data. This means additionally 100%:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;block size     :       blocks  additional download size
-------------------------------------------------------
        32 Byte:  134,217,728  100.00%
       128 Byte:   33,554,432   25.00%
       512 Byte:    8,388,608    6.25%
         1 KiB :    4,194,304    3.12%
       256 KiB :       16,384    0.01%
         1 MiB :        4,096    0.00%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The torrent files of BitTorrent are essentially dictionaries with this information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"announce"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tracker url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"length"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"file size in bytes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"suggested file name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"piece length"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"typically 256 KiB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"pices"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;"sha-1 hash of block #1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;"sha-1 hash of block #2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;"sha-1 hash of block #3"&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To summarize: A list of hash values of blocks can speed up the download of
files over an unreliable network a lot.&lt;/p&gt;
&lt;h2 id="proof-of-inclusion"&gt;Proof of Inclusion&lt;/h2&gt;
&lt;p&gt;Suppose you wanted to show that a piece of data is part of your data
structure. This is easy with Merkle trees.&lt;/p&gt;
&lt;p&gt;&lt;img alt='Alice wants to prove to Bob that the red block &amp;ldquo;6&amp;rdquo; is included in the Merkle tree. Bob knows the green Root node. Alice provides the 3 blue nodes H(12,34), H(78), &amp;ldquo;5&amp;rdquo; and the red node &amp;ldquo;6". Bob then calculates the two yellow nodes. Bob never has to see the white nodes. Image by Martin Thoma.' src="https://cdn-images-1.medium.com/max/3606/1*Ykn20LKvw2hyuyGV4ps5dA.png"/&gt;&lt;em&gt;Alice wants to prove to Bob that the red block &amp;ldquo;6&amp;rdquo; is included in the Merkle tree. Bob knows the green Root node. Alice provides the 3 blue nodes H(12,34), H(78), &amp;ldquo;5&amp;rdquo; and the red node &amp;ldquo;6". Bob then calculates the two yellow nodes. Bob never has to see the white nodes. Image by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Merkle trees allow it to prove that a transaction is included. Suppose Alice
wants to prove to Bob that transaction T happened. To do that, she provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The transaction itself, for which Bob can easily create a hash.&lt;/li&gt;
&lt;li&gt;All hashes which are missing to calculate the root hash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bob then has to verify that the Merkle root is equal to the root he has. He
also needs to hash the transaction and builds all hashes up to the Merkle
root. As cryptographic hash functions make it impossible to find hash
functions to forge an image (&lt;a href="https://levelup.gitconnected.com/the-3-applications-of-hash-functions-fab1a75f4d3d"&gt;collisions-attack
resistance&lt;/a&gt;),
Bob does not have to have all the data. It&amp;rsquo;s enough to know which root to use.&lt;/p&gt;
&lt;p&gt;The supplied hashes (the blue nodes) are called a &lt;strong&gt;Merkle proof&lt;/strong&gt;. You prove
that the data belongs to the Merkle tree. If you want to see another example,
have a look at &lt;a href="undefined"&gt;Belavadi Prahalad&lt;/a&gt; article &lt;a href="https://medium.com/crypto-0-nite/merkle-proofs-explained-6dd429623dc5"&gt;Merkle proofs
explained&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the context of Bitcoin, this is called &lt;strong&gt;Simplified Payment Verification
(SPV)&lt;/strong&gt;. It&amp;rsquo;s chapter 8 of &lt;a href="https://bitcoin.org/bitcoin.pdf"&gt;the bitcoin
paper&lt;/a&gt;, or &lt;a href="https://medium.com/coinmonks/spv-proofs-explained-f38f8bb8f580"&gt;SVP proofs
explained&lt;/a&gt; by
&lt;a href="undefined"&gt;Albert Acebr&amp;oacute;n&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-does-bitcoin-use-merkle-trees"&gt;How does Bitcoin use Merkle Trees?&lt;/h2&gt;
&lt;p&gt;Every single block contains a Merkle tree of transactions. The Bitcoin blocks
have a size limitation of 4 MB for &lt;a href="https://bitcoinmagazine.com/what-is-bitcoin/what-is-the-bitcoin-block-size-limit"&gt;various
reasons&lt;/a&gt;.
Only the Merkle Trees root hash used to hash the block. This means that
Bitcoin nodes can throw quite a bit of data away and still compute the same
hash.&lt;/p&gt;
&lt;h2 id="applications-of-merkle-trees"&gt;Applications of Merkle Trees&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; uses a hash tree to store its data (&lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects"&gt;source&lt;/a&gt;). If you want to understand why read &lt;a href="https://nextjournal.com/blog/git"&gt;Towards Reproducibility: git&lt;/a&gt; by &lt;a href="undefined"&gt;Martin Kavalar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Systems&lt;/strong&gt;: Apache Cassandra uses Merkle Trees to detect inconsistencies in replicas (&lt;a href="https://docs.datastax.com/en/archived/cassandra/3.0/cassandra/operations/opsRepairNodesManualRepair.html"&gt;source&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=1Sz_K8UID6E"&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bitcoin &amp;amp; IPFS, and &lt;a href="https://storj.io/storj2014.pdf"&gt;Storj&lt;/a&gt;&lt;/strong&gt;: The core data structure to store data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ethereum&lt;/strong&gt; also uses a Merkle Tree, but a different type than Bitcoin. Ethereum uses a Merkle Patricia Trie.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;This article is part of my series about Blockchain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/coinmonks/the-blockchain-473aac352e5"&gt;An Introduction to Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/the-3-applications-of-hash-functions-fab1a75f4d3d"&gt;The 3 Applications of Hash Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: Merkle Trees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topics I will consider next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Merkle Patricia Tries&lt;/li&gt;
&lt;li&gt;Public-Key Cryptography and RSA: Public- and private keys, Digital Signatures, Trapdoor functions. What it is and why it&amp;rsquo;s so important&lt;/li&gt;
&lt;li&gt;Proof of Work: How it works, how difficult it is, and what Bitcoin / Ether / Stellar use.&lt;/li&gt;
&lt;li&gt;Smart contracts: What they are and how they work; e.g. with Etherium as an example&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Initial_coin_offering"&gt;Initial Coin Offering&lt;/a&gt; (ICO)&lt;/li&gt;
&lt;li&gt;Bitcoins consensus algorithm&lt;/li&gt;
&lt;li&gt;Bitcoin and the network: How do people connect?&lt;/li&gt;
&lt;li&gt;Bitcoin Wallets&lt;/li&gt;
&lt;li&gt;Peer-To-Peer Stuff: How Gossip Protocols work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know what you&amp;rsquo;re interested in!&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tara Vancil: &lt;a href="https://www.youtube.com/watch?v=YIc6MNfv5iQ"&gt;How Merkle Trees Enable the Decentralized Web!&lt;/a&gt;, 2017 on YouTube.&lt;/li&gt;
&lt;li&gt;Gaurav Sen: &lt;a href="https://www.youtube.com/watch?v=qHMLy5JjbjQ"&gt;Merkle Tree with real-world examples&lt;/a&gt;, 2019 on YouTube.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Blockchain"></category></entry><entry><title>HTTPS vs SSL vs TLS</title><link href="https://martin-thoma.com/https://medium.com/plain-and-simple/https-vs-ssl-vs-tls-8a0ad0604276" rel="alternate"></link><published>2021-01-17T20:00:00+01:00</published><updated>2021-01-17T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-01-17:/https://medium.com/plain-and-simple/https-vs-ssl-vs-tls-8a0ad0604276</id><summary type="html">&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/4810/1*BsJuDWE_7AozmMmahpJ47A.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTPS, SSL, and TLS are all related to encrypted (&amp;ldquo;secure&amp;rdquo;) internet connections. The problem they solve is that a &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;man in the middle&lt;/a&gt; could read the data you receive or send. It is clearly an issue when you log in to your bank or when you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/4810/1*BsJuDWE_7AozmMmahpJ47A.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTPS, SSL, and TLS are all related to encrypted (&amp;ldquo;secure&amp;rdquo;) internet connections. The problem they solve is that a &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;man in the middle&lt;/a&gt; could read the data you receive or send. It is clearly an issue when you log in to your bank or when you send messages via Twitter / Facebook that should be private. Similarly, you might not want people to know what you are interested in or what you don&amp;rsquo;t know when you use Wikipedia.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0"&gt;&lt;strong&gt;SSL&lt;/strong&gt;&lt;/a&gt; is short for Secure Sockets Layer. It was released in 1995 in version 2. The latest version, SSL 3, was deprecated in 2015 in favor of TLS.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://de.wikipedia.org/wiki/Transport_Layer_Security"&gt;&lt;strong&gt;TLS&lt;/strong&gt;&lt;/a&gt; is short for Transport Layer Security and can be seen as the successor of SSL.&lt;/p&gt;
&lt;p&gt;Both, SSL and TLS are encryption protocols on top of HTTP.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTPS"&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;&lt;/a&gt; is short for Hypertext Transfer Protocol Secure. It can also be called &amp;ldquo;&lt;strong&gt;HTTP over TLS&amp;rdquo;&lt;/strong&gt; or &lt;strong&gt;&amp;ldquo;HTTP over SSL&amp;rdquo;&lt;/strong&gt;, depending on which protocol you use for encryption.&lt;/p&gt;
&lt;p&gt;Protocols on the internet are working on top of each other. You&amp;rsquo;re not using only one protocol at a time, but many simultaneously. You can use the guarantees they give on the higher levels.&lt;/p&gt;</content><category term="Code"></category><category term="Protocols"></category><category term="HTTPS"></category><category term="AppSec"></category><category term="InfoSec"></category></entry><entry><title>6 YAML Features most programmers don’t know</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/6-yaml-features-most-programmers-dont-know-164762343af3" rel="alternate"></link><published>2021-01-04T20:00:00+01:00</published><updated>2021-01-04T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2021-01-04:/https://levelup.gitconnected.com/6-yaml-features-most-programmers-dont-know-164762343af3</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/3474/1*1zw7ZZTxnY5LiSnn9w6zlw.png"/&gt;&lt;/p&gt;
&lt;p&gt;YAML is a file format commonly used for data serialization. There are a plethora of projects using YAML files for configuration, such as &lt;a href="https://docs.docker.com/compose/"&gt;Docker-compose&lt;/a&gt;, &lt;a href="https://pre-commit.com/#2-add-a-pre-commit-configuration"&gt;pre-commit&lt;/a&gt;, &lt;a href="https://docs.travis-ci.com/user/build-config-yaml"&gt;TravisCI&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-formats.html"&gt;AWS Cloudformation&lt;/a&gt;, &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;ESLint&lt;/a&gt;, &lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/#configmaps-and-pods"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;Ansible&lt;/a&gt;, and many more. Knowing the features of YAML helps you with all of them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s cover the basics …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/3474/1*1zw7ZZTxnY5LiSnn9w6zlw.png"/&gt;&lt;/p&gt;
&lt;p&gt;YAML is a file format commonly used for data serialization. There are a plethora of projects using YAML files for configuration, such as &lt;a href="https://docs.docker.com/compose/"&gt;Docker-compose&lt;/a&gt;, &lt;a href="https://pre-commit.com/#2-add-a-pre-commit-configuration"&gt;pre-commit&lt;/a&gt;, &lt;a href="https://docs.travis-ci.com/user/build-config-yaml"&gt;TravisCI&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-formats.html"&gt;AWS Cloudformation&lt;/a&gt;, &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;ESLint&lt;/a&gt;, &lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/#configmaps-and-pods"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;Ansible&lt;/a&gt;, and many more. Knowing the features of YAML helps you with all of them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s cover the basics first: YAML is a superset of JSON (&lt;a href="https://yaml.org/spec/1.2/spec.html#id2759572"&gt;source&lt;/a&gt;). Every valid JSON file is also a valid YAML file. This means you have all of the types you expect: Integers, floats, strings, bool, null. Also sequences and maps. Depending on your programming language, you might say &amp;ldquo;array&amp;rdquo; or &amp;ldquo;list&amp;rdquo; instead of sequence and &amp;ldquo;dictionary&amp;rdquo; instead of map.&lt;/p&gt;
&lt;p&gt;It typically looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;something&lt;/span&gt;
&lt;span class="nt"&gt;preprocessing_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Line comments are available!&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;preprocessing.scale_and_center&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;32&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;32&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;preprocessing.dot_reduction&lt;/span&gt;
&lt;span class="nt"&gt;use_anonymous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="equivalent-notation"&gt;Equivalent Notation&lt;/h2&gt;
&lt;p&gt;YAML has a lot of equivalent ways to write stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;list_by_dash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;foo&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bar&lt;/span&gt;
&lt;span class="nt"&gt;list_by_square_bracets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;map_by_indentation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bar&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;baz&lt;/span&gt;
&lt;span class="nt"&gt;map_by_curly_braces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;string_no_quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Monty Python&lt;/span&gt;
&lt;span class="nt"&gt;string_double_quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Monty&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Python"&lt;/span&gt;
&lt;span class="nt"&gt;string_single_quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Monty&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Python'&lt;/span&gt;
&lt;span class="nt"&gt;bool_english&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;span class="nt"&gt;bool_english_no&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;
&lt;span class="nt"&gt;bool_python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;span class="nt"&gt;bool_json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some words of caution here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# ISO 639-1 code for the Norwegian language&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This no is interpreted as false . You need to write "no" or 'no' .&lt;/p&gt;
&lt;p&gt;In general, I recommend using true and false just like JSON does for booleans,
but &lt;a href="https://yaml.org/type/bool.html"&gt;YAML supports 11 ways to write booleans&lt;/a&gt;.
If you want to use quotes for strings, I would also use " like JSON does. You
still need to remember "no" , but at least the file looks a bit more familiar
to YAML beginners.&lt;/p&gt;
&lt;h2 id="long-strings"&gt;Long Strings&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;disclaimer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;In nec urna pellentesque, imperdiet urna vitae, hendrerit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;odio. Donec porta aliquet laoreet. Sed viverra tempus fringilla.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is equivalent to the following JSON (newlines are added for readability; please ignore them):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"disclaimer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In nec urna pellentesque, imperdiet urna vitae, hendrerit odio. Donec porta aliquet laoreet. Sed viverra tempus fringilla."&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="multi-line-string"&gt;Multi-Line String&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;mail_signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;Martin Thoma&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;Tel. +49 123 4567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is equivalent to the JSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"mail_signature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Martin Thoma\nTel. +49 123 4567"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how the leading whitespace is ignored. The first line (&amp;ldquo;Martin Thoma&amp;rdquo;)
determines the number of ignored leading whitespace.&lt;/p&gt;
&lt;h2 id="anchor"&gt;Anchor&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;&amp;amp;emailAddress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"info@example.de"&lt;/span&gt;
&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*emailAddress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is equivalent to the following JSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"info@example.de"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"info@example.de"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; defined a variable emailAddress with the value &lt;code&gt;"info@example.de&lt;/code&gt;.
The &lt;code&gt;*&lt;/code&gt; then indicated that the name of a variable follows.&lt;/p&gt;
&lt;p&gt;You can do the same with mappings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;amp;*&lt;/span&gt;&lt;span class="nv"&gt;*default_settings&lt;/span&gt;&lt;span class="err"&gt;**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main_db&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1337&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;admin@example.com&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(mailto:admin@example.com)&lt;/span&gt;
&lt;span class="nt"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*default_settings&lt;/span&gt;
&lt;span class="nt"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*default_settings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"db"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main_db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[admin@example.com](mailto:admin@example.com)"&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"db"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main_db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[admin@example.com](mailto:admin@example.com)"&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"prod"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"db"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main_db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[admin@example.com](mailto:admin@example.com)"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you might want to insert a password to the dev and prod settings. You can
do that by using the &lt;a href="https://yaml.org/type/merge.html"&gt;merge key&lt;/a&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;&amp;amp;default_settings&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main_db&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1337&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;admin@example.com&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(mailto:admin@example.com)&lt;/span&gt;
&lt;span class="nt"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*default_settings&lt;/span&gt;
&lt;span class="nt"&gt;**  app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80**&lt;/span&gt;
&lt;span class="nt"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*default_settings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is equivalent to this JSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"db"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main_db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[admin@example.com](mailto:admin@example.com)"&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"prod"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"db"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main_db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[admin@example.com](mailto:admin@example.com)"&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"db"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main_db"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[admin@example.com](mailto:admin@example.com)"&lt;/span&gt;&lt;span class="p"&gt;}},}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="type-casting"&gt;Type Casting&lt;/h2&gt;
&lt;p&gt;The double bang &lt;code&gt;!!&lt;/code&gt; has a special meaning in YAML. It is called &amp;ldquo;secondary tag
handle&amp;rdquo; and a shorthand for &lt;code&gt;!tag:yaml.org,2002:&lt;/code&gt;
(&lt;a href="https://yaml.org/spec/1.2/spec.html#id2782457"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You can do simple conversions like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!!float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;42&lt;/span&gt;
&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;!!str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or more complex ones, e.g. map to default Python types that are not specified in YAML directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;tuple_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;**&lt;/span&gt;&lt;span class="kt"&gt;!!python/tuple**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1337&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;42&lt;/span&gt;
&lt;span class="nt"&gt;set_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;**&lt;/span&gt;&lt;span class="kt"&gt;!!set**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;1337&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;42&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;date_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;**&lt;/span&gt;&lt;span class="kt"&gt;!!timestamp**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2020-12-31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can read it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pprint&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"example.yaml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrettyPrinter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pased&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unsafe_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pased&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you will get this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"date_example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;"set_example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"tuple_example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example uses the Python-specific tag !!python/tuple and some standard YAML tags. &lt;a href="https://pyyaml.org/wiki/PyYAMLDocumentation#yaml-tags-and-python-types"&gt;PyYaml has a nice overview&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;## Standard YAML tags
YAML               Python 3
!!null             None
!!bool             bool
!!int              int
!!float            float
!!binary           bytes
!!timestamp        datetime.datetime
!!omap, !!pairs    list of pairs
!!set              set
!!str              str
!!seq              list
!!map              dict

## Python-specific tags
YAML               Python 3
!!python/none      None
!!python/bool      bool
!!python/bytes     bytes
!!python/str       str
!!python/unicode   str
!!python/int       int
!!python/long      int
!!python/float     float
!!python/complex   complex
!!python/list      list
!!python/tuple     tuple
!!python/dict      dict

## Complex Python tags
!!python/name:module.name         module.name
!!python/module:package.module    package.module
!!python/object:module.cls        module.cls instance
!!python/object/new:module.cls    module.cls instance
!!python/object/apply:module.f    value of f(...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that loading non-standard tags is unsafe! It is possible to execute
arbitrary code with &lt;code&gt;!!python/object/apply:module.f&lt;/code&gt;. In PyYaml, you need
&lt;code&gt;yaml.unsafe_load&lt;/code&gt; to use it. Hence you should probably not use it!&lt;/p&gt;
&lt;h2 id="multiple-documents-in-one-yaml"&gt;Multiple Documents in one YAML&lt;/h2&gt;
&lt;p&gt;Three dashes separate documents in YAML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bar&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;fizz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;buzz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python, you can load it like this with &lt;a href="https://pypi.org/project/PyYAML/"&gt;PyYAML&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"example.yaml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safe_load_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# parsed is a generator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you converted parsed to a list and print it, you get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"fizz"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"buzz"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that this is NOT an alternative notation to write lists. It&amp;rsquo;s
different documents.&lt;/p&gt;
&lt;p&gt;The static site generator
&lt;a href="https://github.com/getpelican-plugins/pelican-md-yaml#usage"&gt;Pelican&lt;/a&gt; uses
this to distinguish metadata from the content. I haven&amp;rsquo;t seen any other
application using this feature.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;There are plenty of configuration file formats such as TOML, INI, JSON, XML,
dotenv, and data serialization formats such as Pythons pickle, HDF5, Numpys
NPZ, XML. Let me know if you&amp;rsquo;re interested in learning more about one of them!&lt;/p&gt;</content><category term="Code"></category><category term="Software Development"></category></entry><entry><title>Pythons Scoping Rules</title><link href="https://martin-thoma.com/https://towardsdatascience.com/but-its-not-declared-40501fb1e943" rel="alternate"></link><published>2020-11-23T20:00:00+01:00</published><updated>2020-11-23T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-11-23:/https://towardsdatascience.com/but-its-not-declared-40501fb1e943</id><summary type="html">&lt;p&gt;It&amp;rsquo;s obvious that you cannot access a variable before it was declared. But if
it was declared inside a loop, can you access it outside a loop? If it was
declared in a function, can you access the variable outside of the function?&lt;/p&gt;
&lt;p&gt;This kind of &amp;ldquo;variable lifetime&amp;rdquo; is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;rsquo;s obvious that you cannot access a variable before it was declared. But if
it was declared inside a loop, can you access it outside a loop? If it was
declared in a function, can you access the variable outside of the function?&lt;/p&gt;
&lt;p&gt;This kind of &amp;ldquo;variable lifetime&amp;rdquo; is known as scoping. After reading this
article, you will know the scoping rules of Python. Let&amp;rsquo;s start!&lt;/p&gt;
&lt;h2 id="the-3-scopes-of-python"&gt;The 3 Scopes of Python&lt;/h2&gt;
&lt;p&gt;Python has 3 scopes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Global&lt;/strong&gt;: In the main part of the script. By default, this already contains
  the built-ins. You can access all global variables with &lt;code&gt;globals()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enclosed&lt;/strong&gt;: In the outer function, if this is a nested function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local&lt;/strong&gt;: Within the current function. You can access all local variables
  with &lt;code&gt;locals()&lt;/code&gt;. Within the main script, &lt;code&gt;locals() == globals()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see all three in action here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"enclosing"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Bar is enclosed by 'foo'"""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Baz is also enclosed by 'foo'"""&lt;/span&gt;
        &lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"global"&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a crucial point here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="the-scope-of-a-variable-is-defined-at-compile-time"&gt;The scope of a variable is defined at compile-time!&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this reason, the following code throws an exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;throws the exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
  File "example.py", line 5, in &amp;lt;module&amp;gt;
    foo()
  File "example.py", line 2, in foo
    print(min([1, 2, 3]))
UnboundLocalError: local variable 'min' referenced before assignment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="the-global-statement"&gt;The &amp;ldquo;global&amp;rdquo; statement&lt;/h2&gt;
&lt;p&gt;You can assign a value to a global variable in a function with the global
statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"global"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# gives "local"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I need this very rarely. To make sure that I don&amp;rsquo;t confuse anything, I like to
use the globals() dictionary. In this case, I would rather use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"global"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# gives "local"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="the-nonlocal-statement"&gt;The &amp;ldquo;nonlocal&amp;rdquo; statement&lt;/h2&gt;
&lt;p&gt;You can assign a value to an enclosed variable with the nonlocal statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"global"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"enclosed"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;

    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# gives "local"&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# gives "local"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="confusing-examples"&gt;Confusing Examples&lt;/h2&gt;
&lt;h3 id="append-element-vs-element"&gt;Append element vs &amp;lsquo;+= [element]&amp;rsquo;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# OK&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# UnboundLocalError: local variable 'xs'&lt;/span&gt;
    &lt;span class="c1"&gt;# referenced before assignment&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason why the first works but not the second is that the first one calls a
function of &lt;code&gt;xs&lt;/code&gt;. It never assigns a value to &lt;code&gt;xs&lt;/code&gt;. The second one is equal to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When Python parses the assignment &lt;code&gt;xs = ...&lt;/code&gt;, the xs is assigned the local
scope. But in the local scope, &lt;code&gt;xs&lt;/code&gt; does not exist before &lt;code&gt;xs = xs + [42]&lt;/code&gt; is
executed. Hence the error.&lt;/p&gt;
&lt;p&gt;In the first example with &lt;code&gt;xs.append(42)&lt;/code&gt;, the global scope of xs is used.
Hence we don&amp;rsquo;t face any issue, because it is defined in the global scope.&lt;/p&gt;
&lt;h3 id="global-scope-does-fall-back-to-built-ins"&gt;Global scope DOES fall back to built-ins&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# prints 1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but the same does not work in a local scope&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# UnboundLocalError: local variable 'min' referenced before assignment&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason is that &lt;code&gt;locals() == globals()&lt;/code&gt; within the global scope. Although built-ins are a bit special, they kind of live in the global scope.&lt;/p&gt;
&lt;h3 id="assignment"&gt;Assignment&lt;/h3&gt;
&lt;p&gt;This one is confusing to people with a Java, C, or C++ background. This is
valid Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But in Java you need to declare it upfront to be able to use the variable after
the loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mypy"&gt;mypy&lt;/h3&gt;
&lt;p&gt;mypy is a wide-spread &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type-checker for Python&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;external_service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;
    &lt;span class="c1"&gt;# error: Incompatible types in assignment (expression has type "str", variable has type "int")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So mypy doesn&amp;rsquo;t like that you assign the string &amp;ldquo;foo&amp;rdquo; to y , because it first
read took the &lt;code&gt;bool(external_service()) == True&lt;/code&gt; path and assumed that y would
be an integer.&lt;/p&gt;
&lt;p&gt;Then you might want to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;external_service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;
    &lt;span class="c1"&gt;# error: Name 'y' already defined on line 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that mypy assumes the y should be the same type in both cases. It&amp;rsquo;s
reasonable because otherwise the following analysis might get extremely
complicated.&lt;/p&gt;
&lt;p&gt;The next try might be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="c1"&gt;# error: Incompatible types in assignment&lt;/span&gt;
&lt;span class="c1"&gt;# (expression has type "None", variable has type "Union[str, int]")&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;external_service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should have been expected. Assigning None is not possible to a type which
does not include None &amp;mdash; and adding None to that type might cause many more
issues down the road.&lt;/p&gt;
&lt;p&gt;You can do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;external_service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I can also see when this feels strange. What might be cleaner is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;external_service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="summary_1"&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have seen the three types of scopes in Python: Local, Enclosed, and global.
We&amp;rsquo;ve seen that you can access globals with the global keyword or over the
globals() dictionary. Locals can be accessed with the locals() dictionary and
enclosed variables with the nonlocal keyword. Keep that in mind and Python
scoping should make sense 🙂&lt;/p&gt;</content><category term="Code"></category><category term="Code"></category><category term="Python"></category><category term="Scope"></category></entry><entry><title>How to get an amazing Terminal</title><link href="https://martin-thoma.com/https://towardsdatascience.com/how-to-get-an-amazing-terminal-91619a0beeb7" rel="alternate"></link><published>2020-11-13T20:00:00+01:00</published><updated>2020-11-13T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-11-13:/https://towardsdatascience.com/how-to-get-an-amazing-terminal-91619a0beeb7</id><summary type="html">&lt;p&gt;As a developer with 10+ years of experience, I love using the shell. The commands never change, I can create custom shortcuts, it&amp;rsquo;s reliable and fast. The defaults are not great, though. After reading this article, you will know how to get an awesome shell + terminal on your system …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a developer with 10+ years of experience, I love using the shell. The commands never change, I can create custom shortcuts, it&amp;rsquo;s reliable and fast. The defaults are not great, though. After reading this article, you will know how to get an awesome shell + terminal on your system.&lt;/p&gt;
&lt;h2 id="terminology"&gt;Terminology&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;shell&lt;/strong&gt; is what actually executes the command. The &lt;strong&gt;terminal&lt;/strong&gt; is a
wrapper that runs the shell.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;terminal&lt;/strong&gt; is where you set the font face, font size, color schemes, support for multiple tabs. Examples for terminal emulators are &lt;a href="https://en.wikipedia.org/wiki/GNOME_Terminal"&gt;GNOME terminal&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Konsole"&gt;Konsole&lt;/a&gt; on KDE, &lt;a href="https://en.wikipedia.org/wiki/Terminator_(terminal_emulator)"&gt;Terminator&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Xterm"&gt;XTerm&lt;/a&gt;. On Linux, I recommend keeping the default. On Windows, the &lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701"&gt;Windows Terminal&lt;/a&gt; is awesome. On Mac, I&amp;rsquo;ve heard good things about &lt;a href="https://www.iterm2.com/"&gt;iTerm 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Four terminal emulators on Linux (Gnome Terminal, Konsole, XTerm, Terminator). XTerm does not directly support tabs. The others have 2 tabs open. All of them run the Bash shell. The image was created by Martin Thoma." src="https://cdn-images-1.medium.com/max/2754/1*OhItafIJ3T--kdh9F716VA.png"/&gt;&lt;em&gt;Four terminal emulators on Linux (Gnome Terminal, Konsole, XTerm, Terminator). XTerm does not directly support tabs. The others have 2 tabs open. All of them run the Bash shell. The image was created by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;shell&lt;/strong&gt; stores the history of entered commands, defines how you set
environment variables, how you switch the current directory. Examples for
shells on Linux are &lt;a href="https://en.wikipedia.org/wiki/Z_shell"&gt;ZSH&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;Bash&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Fish_(Unix_shell)"&gt;fish&lt;/a&gt;. On Windows, the
typical shells are &lt;a href="https://en.wikipedia.org/wiki/PowerShell"&gt;PowerShell&lt;/a&gt;. You
can see which shell you are running by executing echo $0 . On Linux, it&amp;rsquo;s most
likely Bash.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Three Linux shells (ZSH, Bash, fish) within the Gnome Terminal. I&amp;rsquo;ve heavily customized the ZSH shell; Bash and fish show the default. You can see that fish has an in-line autosuggestion feature that the two other shells lack. Image by Martin Thoma." src="https://cdn-images-1.medium.com/max/2692/1*FYSzehDiGtZNHjowCZxUXg.png"/&gt;&lt;em&gt;Three Linux shells (ZSH, Bash, fish) within the Gnome Terminal. I&amp;rsquo;ve heavily customized the ZSH shell; Bash and fish show the default. You can see that fish has an in-line autosuggestion feature that the two other shells lack. Image by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Every shell has a &lt;strong&gt;prompt&lt;/strong&gt;. The prompt is what is written before your cursor.
It signalizes that you can enter a command and gives useful context
information. In the example above, the prompt contains the user name &lt;code&gt;moose&lt;/code&gt;,
the current computer &lt;code&gt;pc08&lt;/code&gt;, the current working directory
&lt;code&gt;~/GitHub/MartinThoma/flake8-simplify&lt;/code&gt;, the active git branch &lt;code&gt;feature/19&lt;/code&gt; and
the fact that there are modifications &lt;code&gt;&amp;plusmn;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="fonts"&gt;Fonts&lt;/h2&gt;
&lt;p&gt;No matter what you take, the font matters. You might want to have a monospace
font. And you for sure want a &lt;a href="https://github.com/powerline/fonts"&gt;powerline
font&lt;/a&gt;; trust me with that one. The
powerline font gives your shell the possibility to use characters that look
like images. It can make the prompt way nicer.&lt;/p&gt;
&lt;p&gt;I like &lt;a href="https://github.com/powerline/fonts/tree/master/UbuntuMono"&gt;Ubuntu Mono&lt;/a&gt; and &lt;a href="https://github.com/powerline/fonts/tree/master/DroidSansMono"&gt;Droid Sans Mono&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The top line is Ubuntu Mono, the bottom example is written in Droid Sans Mono. I like Ubuntu Mono a bit better, but both are reasonable fonts. Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2236/1*TrxyQTnHKZA7DPuLZT4sfg.png"/&gt;&lt;em&gt;The top line is Ubuntu Mono, the bottom example is written in Droid Sans Mono. I like Ubuntu Mono a bit better, but both are reasonable fonts. Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are also &amp;ldquo;programming fonts&amp;rdquo; like &lt;a href="https://github.com/tonsky/FiraCode"&gt;Fira Code&lt;/a&gt; or &lt;a href="https://www.jetbrains.com/lp/mono/?ref=betterwebtype"&gt;Jetbrains Mono&lt;/a&gt;. I don&amp;rsquo;t like them, because they make it harder for me to really know what is written. They look nice, though.&lt;/p&gt;
&lt;h2 id="windows-terminal"&gt;Windows Terminal&lt;/h2&gt;
&lt;p&gt;First, make sure you have the &lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?source=lp&amp;amp;activetab=pivot:overviewtab"&gt;Windows Terminal&lt;/a&gt; installed:
&lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?source=lp&amp;amp;activetab=pivot:overviewtab"&gt;&lt;strong&gt;Get Windows Terminal &amp;mdash; Microsoft Store&lt;/strong&gt;
&lt;em&gt;The Windows Terminal is a modern, fast, efficient, powerful, and productive terminal application for users of&amp;hellip;&lt;/em&gt;www.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Launch a terminal and navigate to the settings. It&amp;rsquo;s this small downwards pointing &amp;ldquo;arrow&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Click on &amp;ldquo;Settings&amp;rdquo;. The screenshot was taken by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/0*FSlD8BQx1mNP532h.png"/&gt;&lt;em&gt;Click on &amp;ldquo;Settings&amp;rdquo;. The screenshot was taken by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You should see a JSON file which you can change to fit your taste. I have the following:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/db0a1b7a8b8d0eccc2a75276eec241da"&gt;&lt;/iframe&gt;
&lt;p&gt;Download and install all 4 &amp;ldquo;&lt;a href="https://github.com/powerline/fonts/tree/master/DejaVuSansMono"&gt;DejaVu Sans Mono Powerline&lt;/a&gt;&amp;rdquo; fonts. On all systems I know, installing a font is done by double-clicking it. Then a window opens which has an &amp;ldquo;Install&amp;rdquo; button.&lt;/p&gt;
&lt;h2 id="linux-and-windows-terminal-aminal"&gt;Linux and Windows Terminal: Aminal&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/liamg/aminal"&gt;Aminal&lt;/a&gt; is a Terminal Emulator written in Go. It can be used on Linux, Windows, and Mac. It allows configuration via a configuration file and includes the color and keyboard shortcuts in it.&lt;/p&gt;
&lt;p&gt;First, you need to install and configure Go on your system. On Ubuntu, it works like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;golang&lt;span class="w"&gt; &lt;/span&gt;libgl1-mesa-dev&lt;span class="w"&gt; &lt;/span&gt;xorg-dev
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/go"&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GOBIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;GOPATH&lt;span class="k"&gt;)&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can install and run aminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;github.com/liamg/aminal
$&lt;span class="w"&gt; &lt;/span&gt;aminal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="linux-gnome-terminal"&gt;Linux: Gnome Terminal&lt;/h2&gt;
&lt;p&gt;The Gnome terminal can be customized by editing the profile. Here I set the &lt;a href="https://github.com/powerline/fonts/tree/master/UbuntuMono"&gt;Ubuntu Mono derivate Powerline Regular&lt;/a&gt; with a font size of 12.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*DTs5EGYqnJvLIN16WMhwBA.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The command is set to zsh as this is my favorite shell.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*JNf0sfN047bN3AqDfVfRSw.png"/&gt;&lt;em&gt;Image by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The colors are set to &lt;a href="https://ethanschoonover.com/solarized/"&gt;solarized dark&lt;/a&gt; (left-to-right, top-line / bottom-line)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Background: #2e3436 / #555753&lt;/li&gt;
&lt;li&gt;Dark Red: #cc0000 / Light Red: ef2929&lt;/li&gt;
&lt;li&gt;Dark Green: #4e9a06 / Light Green: #8ae234&lt;/li&gt;
&lt;li&gt;Dark Yellow: #c4a000 / Light Yellow: #fce94f&lt;/li&gt;
&lt;li&gt;Dark Blue: #3465a4 / Light Blue: #729fcf&lt;/li&gt;
&lt;li&gt;Dark Purple: #75507b / Light Purple: #ad7fa8&lt;/li&gt;
&lt;li&gt;Dark Teal: #06989a / Light Teal: #34e2e2&lt;/li&gt;
&lt;li&gt;Dark Gray: #d3d7cf / Light Gray: #eeeeec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/2000/1*P4xCOjogPGb3SdquyLiC2Q.png"/&gt;&lt;/p&gt;
&lt;h2 id="linux-shell-fish"&gt;Linux Shell: fish&lt;/h2&gt;
&lt;p&gt;Install the &lt;strong&gt;fish&lt;/strong&gt; shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the default shell in your terminal emulator to fish . Within Gnome
terminal, it is called &amp;ldquo;custom command&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Then install &amp;ldquo;&lt;a href="https://github.com/oh-my-fish/oh-my-fish"&gt;&lt;strong&gt;Oh My Fish&lt;/strong&gt;&lt;/a&gt;&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;https://get.oh-my.fish&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And set the theme to &lt;strong&gt;agnoster&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;omf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;agnoster
omf&lt;span class="w"&gt; &lt;/span&gt;theme&lt;span class="w"&gt; &lt;/span&gt;agnoster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For cool features of the fish shell, read &lt;a href="https://medium.com/better-programming/why-i-use-fish-shell-over-bash-and-zsh-407d23293839"&gt;Why I Use Fish Shell Over Bash and Zsh&lt;/a&gt; by &lt;a href="undefined"&gt;Alec Brunelle&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="aliases"&gt;Aliases&lt;/h2&gt;
&lt;p&gt;A core part of making the terminal awesome is making common commands short. To do so, you create an alias for a command &amp;mdash; a shorter version of the original command. The most common example is changing a directory to go one level up. For example, if you are in /home/user/foo/bar , you want to get to /home/user/foo . In most shells, you have to enter cd .. . I like to abbreviate that to .. . So I have the alias alias ..='cd ..' . The syntax may vary, depending on your shell. For Bash, ZSH, and fish it is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;short&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'long'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For bash, you insert them in ~/.bashrc , for ZSH in ~/.zshrc . In fish, &lt;a href="https://stackoverflow.com/a/2763014/562769"&gt;it is different&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some aliases I like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Shorten things&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cd ..'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cd ../../'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls -alF'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;la&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls -A'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls -CF'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'clear'&lt;/span&gt;

&lt;span class="c1"&gt;# If your terminal supports colors, use them!&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'grep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fgrep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fgrep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;egrep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'egrep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'colordiff'&lt;/span&gt;

&lt;span class="c1"&gt;# Works only if you have notify-send&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'notify-send --urgency=low -i "$([ $? = 0 ] &amp;amp;&amp;amp; echo terminal || echo error)" "$(history|tail -n1|sed -e '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'s/^\s*[0-9]\+\s*//;s/[;&amp;amp;|]\s*alert$//'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;')"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you have a reasonable &lt;strong&gt;terminal emulator&lt;/strong&gt;. I suggest &lt;a href="https://en.wikipedia.org/wiki/GNOME_Terminal"&gt;Gnome Terminal&lt;/a&gt; for Linux, &lt;a href="https://www.iterm2.com/"&gt;iTerm 2&lt;/a&gt; for Mac, and &lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701"&gt;Windows Terminal&lt;/a&gt; for Windows.&lt;/li&gt;
&lt;li&gt;Install a good powerline font like &lt;a href="https://github.com/powerline/fonts/tree/master/UbuntuMono"&gt;**Ubuntu Mono Powerline&lt;/a&gt;**.&lt;/li&gt;
&lt;li&gt;Adjust the &lt;strong&gt;font face&lt;/strong&gt;, &lt;strong&gt;font size&lt;/strong&gt;, and &lt;strong&gt;color scheme&lt;/strong&gt; of your terminal emulator to your preferences.&lt;/li&gt;
&lt;li&gt;Install a good &lt;strong&gt;shell&lt;/strong&gt;. I suggest &lt;a href="https://en.wikipedia.org/wiki/Fish_(Unix_shell)"&gt;fish&lt;/a&gt; for Linux and &lt;a href="https://en.wikipedia.org/wiki/PowerShell"&gt;PowerShell&lt;/a&gt; for Windows.&lt;/li&gt;
&lt;li&gt;Adjust the &lt;strong&gt;prompt&lt;/strong&gt; of your shell to your needs. I like the &lt;strong&gt;agnoster theme&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Code"></category><category term="Linux"></category><category term="Windows"></category></entry><entry><title>pydantic</title><link href="https://martin-thoma.com/https://towardsdatascience.com/pydantic-688e897cfd3a" rel="alternate"></link><published>2020-11-02T20:00:00+01:00</published><updated>2020-11-02T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-11-02:/https://towardsdatascience.com/pydantic-688e897cfd3a</id><summary type="html">&lt;p&gt;Having complex nested data structures is hard. The traditional approach to store this kind of data in Python is nested dictionaries. Although &lt;a href="https://www.youtube.com/watch?v=npw4s1QTmPg"&gt;Python dictionaries are amazing&lt;/a&gt;, there are two issues which typically arise: (1) How do I, as a developer, know which kind of data is to be expected in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having complex nested data structures is hard. The traditional approach to store this kind of data in Python is nested dictionaries. Although &lt;a href="https://www.youtube.com/watch?v=npw4s1QTmPg"&gt;Python dictionaries are amazing&lt;/a&gt;, there are two issues which typically arise: (1) How do I, as a developer, know which kind of data is to be expected in the passed dictionary and (2) how do I prevent typos?&lt;/p&gt;
&lt;p&gt;If you use classes, your editor or mypy prevents typos in attribute names. For dictionaries, any valid string can be a key.&lt;/p&gt;
&lt;p&gt;A solution to both problems is using a library: &lt;a href="https://pypi.org/project/pydantic/"&gt;&lt;strong&gt;pydantic&lt;/strong&gt;&lt;/a&gt;. It is a validation and parsing library which maps your data to a Python class.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Install pydantic via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pydantic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this article, I assume that your data is a network of people in &lt;a href="https://gist.github.com/MartinThoma/517d20998501afc4fff72be032782d41"&gt;people.json&lt;/a&gt;. They have an ID, a name, a list of friends given by their ID, a birthdate, and the amount of money on their bank account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Anna"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"birthdate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1992-01-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"birthdate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1962-12-31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Charlie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"birthdate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1992-02-28"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;9007199254740993.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Martin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"birthdate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1990-04-28"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9007199254740993&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to calculate how much more everybody has than their median friend with this &lt;a href="https://gist.github.com/MartinThoma/fe33638b8a6228dc656e37dcf7a9fb92"&gt;example.py&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pathlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;friends_difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_account_difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends_difference&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;person_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;0.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; EUR"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_account_difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;friends_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;friend&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friends_account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;id2person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;id2person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id2person&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"people.json"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problems we want to approach are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ugly None&lt;/strong&gt;: Having None as a value for friends is pretty ugly. In some cases, None is different from an empty list. In this case, let&amp;rsquo;s just assume it means the same. Replacing missing data with something else is called &lt;a href="https://en.wikipedia.org/wiki/Imputation_(statistics)"&gt;imputation&lt;/a&gt; and there are several techniques.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ugly Any&lt;/strong&gt;: The type annotations have Dict[str, Any] , because it was considered too complicated or even impossible to know which values the dictionary representing a person can map too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ugly indexing&lt;/strong&gt;: It&amp;rsquo;s just syntax, but ["id"] is 50% longer than .id . This is the reason why &lt;a href="https://pypi.org/project/bunch/"&gt;bunch&lt;/a&gt;/&lt;a href="https://pypi.org/project/munch/"&gt;munch&lt;/a&gt; exists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typos&lt;/strong&gt;: If you make a typo in any of the string indices of a dictionary, no static code analysis tool can help you to detect them. No auto-completion will work properly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Late Errors&lt;/strong&gt;: Good software modularizes responsibilities. There is one module responsible for the business logic and one for input/output. When I write &amp;ldquo;module&amp;rdquo; I mean a unit of code &amp;mdash; it could be a Python module, a class, a function, a method. It is bad to have simply one function to deal with those different types of complexity. Getting the business logic right is inherently different from making sure your input/output looks as expected. One is about defining and validating proper interfaces, the other one is about understanding the domain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: New developers regularly have to read the code of bigger applications. Usually, there is no time to explain every single part in great detail by somebody who knows everything about the application. Most of the time, there isn&amp;rsquo;t even a single person who knows everything &amp;mdash; even if the project was done by a single developer. I always forget parts of my code. Hence documenting is crucial. In Python, documenting expected parameter types and its return values is crucial. Having Dict[str, Any] is better than nothing, but way worse than Person .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="create-a-pydantic-model"&gt;Create a pydantic model&lt;/h2&gt;
&lt;p&gt;We create a new type for the ID of a person, simply because PersonId is so much more meaningful than just int . Then we subclass &lt;a href="https://pydantic-docs.helpmanual.io/usage/models/#basic-model-usage"&gt;pydantic.BaseModel&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;decimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;

&lt;span class="n"&gt;PersonId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PersonId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PersonId&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;bank_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
    &lt;span class="n"&gt;birthdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PersonId&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="use-it-for-input-parsing"&gt;Use it for input parsing&lt;/h2&gt;
&lt;p&gt;Next, we use &lt;a href="https://pydantic-docs.helpmanual.io/usage/models/#parsing-data-into-a-specified-type"&gt;parse_file_as&lt;/a&gt; to read the JSON file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pathlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PersonId&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_file_as&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PersonId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_file_as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that &lt;a href="https://pydantic-docs.helpmanual.io/usage/types/#datetime-types"&gt;datetime&lt;/a&gt; and Decimal are automatically parsed &amp;mdash; you still should always look up how it is done. Doing data validation early is good so that errors also happen early and in a known place. This means pydantic nudges you into a good design. I love it 😍&lt;/p&gt;
&lt;h2 id="constrained-types"&gt;Constrained Types&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pydantic-docs.helpmanual.io/usage/types/#constrained-types"&gt;Constrained types&lt;/a&gt; are integers/floats in a certain value range or a string that matches a RegEx 😃&lt;/p&gt;
&lt;h2 id="missing-data-use-default-values"&gt;Missing data: Use default values&lt;/h2&gt;
&lt;p&gt;If your JSON might miss some attributes which you want to have, you need to work with default values. A typical default is None which means that you need to change the type to Optional[what it was before] . This is typically pretty ugly as you need to check for None later in the code.&lt;/p&gt;
&lt;p&gt;Especially for Lists, you might want to consider using an empty list instead. You do it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_factory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For immutable data types like strings, integers, floats, tuples, you can simply assign the value. For mutable ones, you need to use Field with the default_factory that generates a new list every time. &lt;a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"&gt;Learn why mutable defaults are evil&lt;/a&gt;, if you don&amp;rsquo;t know it already.&lt;/p&gt;
&lt;h2 id="additional-data-ignore-allow-or-forbid"&gt;Additional data: Ignore, allow, or forbid&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s sometimes impossible to know at development time which attributes a JSON object has. Still, you need to pass those around. This is super unfortunate and should be challenged, but it can happen.&lt;/p&gt;
&lt;p&gt;Pydantic calls those &lt;strong&gt;extras&lt;/strong&gt;. If you ignore them, the read pydantic model will not know them. &lt;strong&gt;Ignored extra arguments are dropped&lt;/strong&gt;. Allowing them means to accept that this unfortunate design is necessary. &lt;strong&gt;Allowed extras will be part of the parsed object&lt;/strong&gt;. Finally, to &lt;strong&gt;forbid&lt;/strong&gt; extra arguments means an pydantic.ValidationError&lt;strong&gt; exception&lt;/strong&gt; will be thrown if an extra argument occurs.&lt;/p&gt;
&lt;p&gt;This is configured by adding a subclass calledConfig to the pydantic model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PersonId&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;bank_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
    &lt;span class="n"&gt;birthdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PersonId&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"forbid"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rename-attributes"&gt;Rename attributes&lt;/h2&gt;
&lt;p&gt;Names are important. &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Readability counts&lt;/a&gt;. In Python, variables should follow a snake_case naming scheme, while in JavaScript variables should follow a camelCase naming scheme. To fulfill both, pydantic offers &lt;a href="https://pydantic-docs.helpmanual.io/usage/model_config/"&gt;allow_population_by_field_name&lt;/a&gt; as a config parameter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PersonId&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;bank_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
    &lt;span class="n"&gt;birthdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PersonId&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;allow_population_by_field_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="c1"&gt;# We use the Python attribute 'bank_account',&lt;/span&gt;
        &lt;span class="c1"&gt;# but read/write the JSON 'bankAccount'&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"bank_account"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"bankAccount"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="validators"&gt;Validators&lt;/h2&gt;
&lt;p&gt;Sometimes, simple types are not enough. You want to check more complex stuff.&lt;/p&gt;
&lt;p&gt;The docs already give a pretty good example for such a scenario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;password1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;password2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="nd"&gt;@validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;name_must_contain_space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"must contain a space"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"password2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;passwords_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"password1"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"password1"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"passwords do not match"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;

    &lt;span class="nd"&gt;@validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;username_alphanumeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalnum&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;"must be alphanumeric"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;


&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"samuel colvin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"scolvin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"zxcvbns"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"zxcvbn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check pretty much anything as long as you just need the class itself. Please don&amp;rsquo;t run queries against a database to do consistency checks; e.g. if you want a username to be unique or something similar. Although you can likely make this run, it will be unexpected to trigger a database query by creating a &amp;ldquo;data container&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In our case, we might want to prevent that people can be a friend of themselves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;decimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_validator&lt;/span&gt;

&lt;span class="n"&gt;PersonId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PersonId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PersonId&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;bank_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
    &lt;span class="n"&gt;birthdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PersonId&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"forbid"&lt;/span&gt;

    &lt;span class="nd"&gt;@root_validator&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cannot_self_friend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friend_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;self_id&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;friend_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"You cannot be a friend of yourself"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of throwing an exception, we can also simply fix it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;decimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_validator&lt;/span&gt;

&lt;span class="n"&gt;PersonId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PersonId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PersonId&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;bank_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
    &lt;span class="n"&gt;birthdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PersonId&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"forbid"&lt;/span&gt;

    &lt;span class="nd"&gt;@root_validator&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cannot_self_friend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"friends"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;friend_id&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;friend_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;friend_id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;self_id&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="property-based-testing-with-pydantic"&gt;Property-based Testing with Pydantic&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Science in HD on Unsplash" src="https://cdn-images-1.medium.com/max/12032/0*lF5tdh_5CjjsGaJt"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@scienceinhd?utm_source=medium&amp;amp;utm_medium=referral"&gt;Science in HD&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Property-based tests auto-generate inputs for the function under test and make sure a certain property is fulfilled. In the simplest case, this property is that the function under test does not crash. If you want to learn more about this type of testing, read my article about &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119"&gt;property-based testing with hypothesis&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;from_type&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_account_difference&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;from_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_two_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_account_difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, this test actually pointed out a potential issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Falsifying example: test_two_people(
    person_a=Person(id=0, name='', bank_account=Decimal('NaN'), birthdate=datetime.date(2000, 1, 1), friends=[]),
    person_b=Person(id=0, name='', bank_account=Decimal('NaN'), birthdate=datetime.date(2000, 1, 1), friends=[]),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="more-neat-stuff"&gt;More neat stuff&lt;/h2&gt;
&lt;p&gt;Pydantic is pretty awesome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can generate a schema from its models (&lt;a href="https://pydantic-docs.helpmanual.io/usage/schema/"&gt;source&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://pydantic-docs.helpmanual.io/mypy_plugin/"&gt;mypy plugin&lt;/a&gt; gives even better type checks&lt;/li&gt;
&lt;li&gt;Serialization to a dictionary can be done with the .dict() method, serialization to a JSON string can be done with the .json() method.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pydantic-docs.helpmanual.io/usage/types/#constrained-types"&gt;Constrained types&lt;/a&gt; allow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="operational-safety"&gt;Operational Safety&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by ThisisEngineering RAEng on Unsplash" src="https://cdn-images-1.medium.com/max/10944/0*fdsabhkbM69RDDI2"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@thisisengineering?utm_source=medium&amp;amp;utm_medium=referral"&gt;ThisisEngineering RAEng&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One part that usually worries me is general support. Here are some indicators that pydantic has a healthy community:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;✔️ &lt;a href="https://github.com/samuelcolvin/pydantic"&gt;GitHub&lt;/a&gt;: 4.5k stars, 404 forks, 172 contributors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✔️ Usage: &lt;a href="https://fastapi.tiangolo.com/#example-upgrade"&gt;FastAPI&lt;/a&gt; uses it. &lt;a href="https://github.com/microsoft/onefuzz"&gt;Microsoft Onefuzz&lt;/a&gt; uses it. &lt;a href="https://github.com/awslabs/aws-lambda-powertools-python"&gt;AWS Lambda Powertools&lt;/a&gt; as well. Many machine learning projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✘ &lt;a href="https://pypi.org/project/pydantic/"&gt;PyPI project&lt;/a&gt;: Sadly, this only has one maintainer. I always like it a bit better if there are two. Simply to prevent that one might lose their password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✔️Self-decided project status: The maintainer considers pydantic to be production-ready/stable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;pydantic is an awesome data parsing and validation library. It can support you very well to get better &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations in Python&lt;/a&gt;. Use it!&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="mypy"></category><category term="hypothesis"></category></entry><entry><title>Visual Studio Code — Python Editors in Review</title><link href="https://martin-thoma.com/https://towardsdatascience.com/visual-studio-code-python-editors-in-review-e5e4f269b4e4" rel="alternate"></link><published>2020-10-31T20:00:00+01:00</published><updated>2020-10-31T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-31:/https://towardsdatascience.com/visual-studio-code-python-editors-in-review-e5e4f269b4e4</id><summary type="html">&lt;p&gt;&lt;img alt="Visual Studio Code 1.50.1. The screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/5118/1*h1KupJZHJWRs1OWjqbkmnA.png"/&gt;&lt;em&gt;Visual Studio Code 1.50.1. The screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Visual_Studio_Code"&gt;Visual Studio Code&lt;/a&gt; is a free editor written by Microsoft. Its first release was in 2015, and boy did that one take off. It has &lt;a href="https://stackoverflow.com/questions/tagged/visual-studio-code"&gt;over 28k questions on StackOverflow&lt;/a&gt;, is the 2nd most-used Python editor according …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Visual Studio Code 1.50.1. The screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/5118/1*h1KupJZHJWRs1OWjqbkmnA.png"/&gt;&lt;em&gt;Visual Studio Code 1.50.1. The screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Visual_Studio_Code"&gt;Visual Studio Code&lt;/a&gt; is a free editor written by Microsoft. Its first release was in 2015, and boy did that one take off. It has &lt;a href="https://stackoverflow.com/questions/tagged/visual-studio-code"&gt;over 28k questions on StackOverflow&lt;/a&gt;, is the 2nd most-used Python editor according to the &lt;a href="https://www.jetbrains.com/lp/devecosystem-2019/python/"&gt;2019 Jetbrains survey&lt;/a&gt;, and the most popular one according to the &lt;a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments"&gt;2019 StackOverflow survey&lt;/a&gt;. VS Code has its own &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;marketplace&lt;/a&gt;, works on &lt;a href="https://code.visualstudio.com/docs/setup/windows"&gt;Windows&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/docs/setup/linux#_debian-and-ubuntu-based-distributions"&gt;Linux&lt;/a&gt;, and &lt;a href="https://code.visualstudio.com/docs/setup/mac"&gt;Mac&lt;/a&gt;. Microsoft has created a powerful language server called &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance"&gt;Pylance&lt;/a&gt; about which you certainly also want to read something &amp;hellip; but let&amp;rsquo;s first start with the basics.&lt;/p&gt;
&lt;p&gt;When you first start VS Code, it offers you a couple of plugins that might be helpful. I directly installed the Python integration as well as the Sublime Text key bindings. Keep especially the key bindings part in mind when I write about shortcuts.&lt;/p&gt;
&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;
&lt;p&gt;VS Code takes a bit more than a second to start. This means it&amp;rsquo;s way faster than &lt;a href="https://medium.com/python-in-plain-english/pycharm-professional-python-editors-in-review-b978f0e5c4ba"&gt;PyCharm&lt;/a&gt;, but slower than Sublime Text. VS Code stores everything, even if you don&amp;rsquo;t hit &lt;code&gt;Ctrl+S&lt;/code&gt;. This means you can at all times just close the editor. The next time you open it, it will tell you that there are unsaved changes 😍&lt;/p&gt;
&lt;h2 id="the-user-interface"&gt;The User Interface&lt;/h2&gt;
&lt;p&gt;In the screenshot above you can see what I have typically opened:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;editor&lt;/strong&gt; where you can read the code. Of course with Syntax highlighting and line numbers.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;explorer&lt;/strong&gt; where you can see the files of the workspace.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;activity bar&lt;/strong&gt; is left of the explorer. Here you can switch the explorer against a search tool, a version control system (VCS) integration, the debugger, and others. This was the main reason why I didn&amp;rsquo;t like VS code in the beginning. However, you can simply hide it 😍&lt;/li&gt;
&lt;li&gt;Right of the code, there is a &lt;strong&gt;minimap&lt;/strong&gt; of the code. This can be helpful to jump to weird sections.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="command-palette"&gt;Command Palette&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette"&gt;command palette&lt;/a&gt; is the way to reach any functionality of the editor. No more searching in deeply nested menus ❤️&lt;/p&gt;
&lt;p&gt;You can open the command palette with the key combination &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot was taken by the author" src="https://cdn-images-1.medium.com/max/2736/1*igS1h3Q9DeoR39SbQSnPxQ.png"/&gt;&lt;em&gt;Screenshot was taken by the author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Although I can&amp;rsquo;t quite pinpoint why, I like the command palette of Sublime Text slightly more and the one of PyCharm way less. To me, it feels as if the fuzzy search of Sublime Text is best. Visually, VS Code did a really good job.&lt;/p&gt;
&lt;h2 id="customizable-shortcuts"&gt;Customizable Shortcuts!&lt;/h2&gt;
&lt;p&gt;VS Code has an official cheat sheet for the default key bindings (&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf"&gt;source&lt;/a&gt;) and I already mentioned that you can use the default key bindings of other editors. That is neat, but I want to be able to customize it completely to my needs.&lt;/p&gt;
&lt;p&gt;And, of course, you can do that! VS Code even offers you a pretty nice interface which acknowledges that you might want different actions depending on the situation / the programming language.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The shortcut editor of VS Code. Screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/4210/1*UGslxnF7v1FkjFQGbm6oew.png"/&gt;&lt;em&gt;The shortcut editor of VS Code. Screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tab-interactions"&gt;Tab Interactions&lt;/h3&gt;
&lt;p&gt;You can close a tab with &lt;code&gt;Ctrl+W&lt;/code&gt; , just like in Chrome. You can switch to the first tab with &lt;code&gt;Alt+1&lt;/code&gt;, to the second with &lt;code&gt;Alt+2&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;You can open a new file with &lt;code&gt;Ctrl+N&lt;/code&gt; &amp;mdash; just like you would open a new window in Chrome.&lt;/p&gt;
&lt;h3 id="jump-to-line"&gt;Jump to Line&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ctrl+G&lt;/code&gt; to jump to a line. This is super handy when you&amp;rsquo;re debugging.&lt;/p&gt;
&lt;h3 id="goto-file"&gt;Goto File&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ctrl+P&lt;/code&gt; to go to any file in the current workspace. With fuzzy search again 🎉&lt;/p&gt;
&lt;h3 id="find-replace-all"&gt;Find / Replace all&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ctrl+F&lt;/code&gt; to find something, &lt;code&gt;Ctrl+H&lt;/code&gt; to replace. You can also use regex! Definitely a feature I don&amp;rsquo;t want to miss. This is pretty cool in combination with multiple cursors! (&lt;code&gt;Ctrl+Shift+L&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id="zen-mode"&gt;Zen mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; and search for &amp;ldquo;Zen&amp;rdquo;. Within that mode, you have the code. No mini-map, no file explorer, no footer. This is helpful if you want to show another developer something. And you can adjust what is shown in Zen mode. For example, I still want to see the line numbers.&lt;/p&gt;
&lt;h2 id="autocompletion_1"&gt;Autocompletion&lt;/h2&gt;
&lt;p&gt;VS Code + &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance"&gt;pylance&lt;/a&gt; offers an AMAZING autocompletion 💘 Please be aware that you need to tell it a little bit about what you&amp;rsquo;re doing. Use type annotations to help VS Code to help you. By the way, &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations are awesome&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Autocompletion example of VS Code with pylance. Screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/2000/1*P7gLzrH-OyRwxhGSBtpy-Q.png"/&gt;&lt;em&gt;Autocompletion example of VS Code with pylance. Screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="signature-hints"&gt;Signature hints&lt;/h2&gt;
&lt;p&gt;I sometimes want to get a hint about the signature of a function. In VS Code, you just hover over the name and you get it. The box contains the docstring 😍&lt;/p&gt;
&lt;p&gt;&lt;img alt="The function signature hint when you hover over the name. Screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/2600/1*DbdP6OjqWjoFZlgNYpQSZg.png"/&gt;&lt;em&gt;The function signature hint when you hover over the name. Screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="jump-to-definition"&gt;Jump to Definition&lt;/h2&gt;
&lt;p&gt;Click on whatever you&amp;rsquo;re interested in and press F11 . That&amp;rsquo;s it. It works. And works so well and smoothly! You can do this with anything: Functions, variables, 3rd party stuff, core library stuff.&lt;/p&gt;
&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;p&gt;The debugging interface for Visual Studio Code is lightweight and has exactly what you need in most cases: (1) You can click in the gutter where you want to set your break points. (2) You can start the debugger by clicking in the activity bar on the play button. Here you can also see the current value of all variables. (3) Continue, step over, step into, step out, restart and stop the debugger. (4) Observe the output in the terminal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot was taken by the author" src="https://cdn-images-1.medium.com/max/5114/1*FwK-pVUW1y0TRWx8-maN0w.png"/&gt;&lt;em&gt;Screenshot was taken by the author&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="unit-test-integration"&gt;Unit Test Integration&lt;/h2&gt;
&lt;p&gt;Hit &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and &lt;code&gt;Configure Tests&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/11/vs-code-tests.png"&gt;&lt;img alt="Configure Tests in VS Code" src="../images/2020/11/vs-code-tests.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Configure Tests in VS Code&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then you will be able to run tests with a single click on a test within VS Code 😍&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/11/vs-run-test.png"&gt;&lt;img alt="Run Tests within VS Code" src="../images/2020/11/vs-run-test.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Run Tests within VS Code&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="customizations"&gt;Customizations&lt;/h2&gt;
&lt;p&gt;Visual Studio code offers plenty of ways to customize. You have hundreds of settings, color themes, and plugins.&lt;/p&gt;
&lt;h3 id="themes"&gt;Themes&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;, search for &amp;ldquo;theme&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dark and light themes, including solarized and Textmate 😍 Screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/3072/1*FYSNb9AacRrY6aOqmWJY2Q.png"/&gt;&lt;em&gt;Dark and light themes, including solarized and Textmate 😍 Screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="settings"&gt;Settings&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Screenshot was taken by the author" src="https://cdn-images-1.medium.com/max/2320/1*YjHf_pXmRcPkbSI9Oo5CJg.png"/&gt;&lt;em&gt;Screenshot was taken by the author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can also customize things via a settings.json file. Here are some settings I like, using the &lt;a href="https://github.com/powerline/fonts/tree/master/UbuntuMono"&gt;Ubuntu Mono&lt;/a&gt; font:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"editor.renderWhitespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ubuntu Mono"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"workbench.colorTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"textmate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"python.formatting.provider"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"python.languageServer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Pylance"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"python.analysis.typeCheckingMode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"python.defaultInterpreterPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/home/moose/.pyenv/shims/python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"zenMode.hideLineNumbers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"zenMode.hideStatusBar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"python.analysis.extraPaths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"/home/moose/.pyenv/versions/3.8.6/lib/python3.8/site-packages"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"workbench.colorCustomizations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"terminal.background"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#373633"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"terminal.foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#dfdbd2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"terminal.integrated.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ubuntu Mono derivative Powerline"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="workspaces"&gt;Workspaces&lt;/h3&gt;
&lt;p&gt;You can customize which files/folders are ignored within your &lt;a href="https://code.visualstudio.com/docs/getstarted/settings"&gt;workspace settings&lt;/a&gt;. For example, create a .vscode/settings.json and add the following content for Python projects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"files.watcherExclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"**/.pytest_cache/**"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"files.exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"**/.mypy_cache"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"**/.pytest_cache"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"**/*.egg-info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"**/mypy-report"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="plugins_1"&gt;Plugins&lt;/h2&gt;
&lt;p&gt;Finally, the time has come to talk about the &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;marketplace&lt;/a&gt; and especially pylance!&lt;/p&gt;
&lt;h3 id="pylance"&gt;pylance&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance"&gt;Pylance&lt;/a&gt; is a Python language server. As a user, you don&amp;rsquo;t have to worry about it too much. Think of it as a plugin which gives you autocompletion, signature help, type checking and much more. It&amp;rsquo;s especially awesome if you &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;use type annotations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a developer who is wondering how things work under the hood, I must appreciate this nice design from Microsoft. They factored out one hard part so that a separate team can work on it. In theory, this could be integrated into other editors/IDEs/services. In practice, &lt;a href="https://github.com/microsoft/pylance-release/issues/4#issuecomment-654083567"&gt;the license forbids it&lt;/a&gt;. Also, defining such a &lt;a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide"&gt;language server interface&lt;/a&gt; allows developers to create language servers for other languages as well 🌟 Having this interface is a sign of good software architecture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="I had to enable the &amp;ldquo;basic&amp;rdquo; type checking mode for pylance in the user settings (Ctrl + Shift + P). Screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/3158/1*9kVDvFNHorYGMT6eWCnyJQ.png"/&gt;&lt;em&gt;I had to enable the &amp;ldquo;basic&amp;rdquo; type checking mode for pylance in the user settings (&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;). Screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="rainbow-brackets"&gt;Rainbow Brackets&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets"&gt;Rainbow brackets&lt;/a&gt; colors nested brackets:&lt;/p&gt;
&lt;p&gt;&lt;img alt="It&amp;rsquo;s easier to read with colored brackets, isn&amp;rsquo;t it?" src="https://cdn-images-1.medium.com/max/2000/1*bCMkMk2FiKN2pCWAafSO-g.png"/&gt;&lt;em&gt;It&amp;rsquo;s easier to read with colored brackets, isn&amp;rsquo;t it?&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="path-intellisense"&gt;Path Intellisense&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt; autocompletes your paths while your in the editor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot was taken by the author" src="https://cdn-images-1.medium.com/max/2166/1*FhUQvsd7oqD-JWa9GZ0jZw.png"/&gt;&lt;em&gt;Screenshot was taken by the author&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="gitlens"&gt;GitLens&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt; shows you information of the git history:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Do you notice the gray text? That is the name of the editor (me), when the edit was done and the first line of the commit message. Screenshot was taken by the author" src="https://cdn-images-1.medium.com/max/2666/1*b03mls5XchAuG84waM9lGA.png"/&gt;&lt;em&gt;Do you notice the gray text? That is the name of the editor (me), when the edit was done and the first line of the commit message. Screenshot was taken by the author&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you hover over the message you can jump to the commit which opens a graphical diff 😍&lt;/p&gt;
&lt;p&gt;&lt;img alt="A graphical diff of the commit highlighted before. Screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/4232/1*R0nnW6f-WcS8CPPVOREXPQ.png"/&gt;&lt;em&gt;A graphical diff of the commit highlighted before. Screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="aws-toolkit"&gt;AWS Toolkit&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode"&gt;AWS Toolkit&lt;/a&gt; plugin adds information about S3 Buckets, Lambdas, Cloudwatch logs, and more to your activity bar:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The screenshot was taken by the author" src="https://cdn-images-1.medium.com/max/2000/1*sX4rFWCXnw176U_z3lizqg.png"/&gt;&lt;em&gt;The screenshot was taken by the author&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="honorable-mentions"&gt;Honorable Mentions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mtxr.sqltools"&gt;&lt;strong&gt;SQLTools&lt;/strong&gt;&lt;/a&gt;: Running DB queries from within VS Code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;&lt;strong&gt;Live Share&lt;/strong&gt;&lt;/a&gt;: Pair programming support in Corona times. I haven&amp;rsquo;t tried this plugin so far, though.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="comparison-vs-code-vs-sublime-text-vs-pycharm_1"&gt;Comparison: VS Code vs Sublime Text vs PyCharm&lt;/h2&gt;
&lt;p&gt;Compared with Sublime Text, VS Code initially felt a bit more heavy-weight to me. However, this might simply be due to the fact that I&amp;rsquo;m using Sublime Text since roughly 2010 (I&amp;rsquo;ve bought the license in 2014). Having 10 years of experience in one tool means that you get used to that tool quite a bit. Except for the fact that Sublime is incredible fast, I don&amp;rsquo;t see any advantage of it over VS Code.&lt;/p&gt;
&lt;p&gt;Compared to PyCharm Professional, VS Code feels much more lightweight. It&amp;rsquo;s faster and the interface is cleaner. I&amp;rsquo;m not absolute certain, but pylance might also be better than the autocompletion of PyCharm. The advantages of PyCharm are in the edge cases: The database tool window, SciView, maybe some debugging features, and for sure the &lt;a href="https://www.jetbrains.com/help/pycharm/code-inspection.html"&gt;code inspections&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Microsoft did an amazing job with VS Code: It&amp;rsquo;s fast, customizable, has the necessary features, a marketplace, reasonable defaults, a clean interface, support for Windows/Mac/Linux and is for free. Kudos! I love it! 💜&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;In this &amp;ldquo;Python for Beginners&amp;rdquo; series, we already explained &lt;a href="https://medium.com/python-in-plain-english/a-beginners-guide-to-python-development-on-windows-10-e9d80601f483"&gt;how to use Python with WSL2 on Windows&lt;/a&gt;, &lt;a href="https://medium.com/python-in-plain-english/how-to-start-python-development-on-windows-10-anaconda-edition-cc91c2d57a1d"&gt;how to use Python on Windows with Anaconda&lt;/a&gt;. This article presented Visual Studio Code as a good IDE for beginners and professionals.&lt;/p&gt;
&lt;p&gt;Next, we should write a hello world application. I&amp;rsquo;m open to ideas 😁&lt;/p&gt;</content><category term="Code"></category><category term="Editor"></category><category term="IDE"></category><category term="Microsoft"></category></entry><entry><title>PyCharm Professional — Python Editors in Review</title><link href="https://martin-thoma.com/https://medium.com/python-in-plain-english/pycharm-professional-python-editors-in-review-b978f0e5c4ba" rel="alternate"></link><published>2020-10-27T20:00:00+01:00</published><updated>2020-10-27T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-27:/https://medium.com/python-in-plain-english/pycharm-professional-python-editors-in-review-b978f0e5c4ba</id><summary type="html">&lt;p&gt;&lt;img alt="PyCharm Professional 2020.2. The screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3840/1*C_Rys3U0YL3KBZRfL2k1Fg.png"/&gt;&lt;em&gt;PyCharm Professional 2020.2. The screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;PyCharm is an IDE developed by JetBrains since 2010. Yes, the same company that developed IntelliJ, the de-facto default for Java. It costs &lt;strong&gt;$200 per year&lt;/strong&gt; which is pretty expensive if you just get your feet wet with Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="PyCharm Professional 2020.2. The screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3840/1*C_Rys3U0YL3KBZRfL2k1Fg.png"/&gt;&lt;em&gt;PyCharm Professional 2020.2. The screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;PyCharm is an IDE developed by JetBrains since 2010. Yes, the same company that developed IntelliJ, the de-facto default for Java. It costs &lt;strong&gt;$200 per year&lt;/strong&gt; which is pretty expensive if you just get your feet wet with Python. It&amp;rsquo;s pretty cheap if you consider that the editor/IDE is one of the most important tools of a professional software developer.&lt;/p&gt;
&lt;p&gt;It is used by many Python developers as one can see in the number of &lt;a href="https://stackoverflow.com/questions/tagged/pycharm"&gt;StackOverflow questions&lt;/a&gt; (12,455), in the &lt;a href="https://www.jetbrains.com/lp/devecosystem-2019/python/"&gt;2019 Jetbrains Survey&lt;/a&gt;, and the &lt;a href="https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments"&gt;2019 StackOverflow survey&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;
&lt;p&gt;It takes roughly 9 seconds on my ThinkPad T490s to start. Sublime Text takes less than a second. PyCharm also has this annoying &amp;ldquo;do you really want to close me&amp;rdquo; pop-up. When you close it, it automatically saves the document &amp;mdash; but the edit history will be gone. This means you cannot to Ctrl+Z to undo edits.&lt;/p&gt;
&lt;p&gt;When you create a new file, you have to decide first which type it has, which name it has, and where it should be stored. In Sublime Text, you just start typing.&lt;/p&gt;
&lt;h2 id="the-user-interface"&gt;The User Interface&lt;/h2&gt;
&lt;p&gt;In the screenshot above you can see how PyCharm typically looks for me. As PyCharm allows quite a bit of customization, you have to say it like this. Let&amp;rsquo;s go through the &lt;a href="https://www.jetbrains.com/help/pycharm/guided-tour-around-the-user-interface.html"&gt;components of the UI&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;editor &lt;/strong&gt;dominates the view. It supports syntax highlighting, shows the line numbers in the &lt;strong&gt;gutter&lt;/strong&gt;, and the scroll bar indicates where it found warnings (yellow) and errors (red).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To the left of the editor, there is a &lt;strong&gt;file explorer&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To the right of the editor, there are two minimized elements that are pretty cool: A &lt;strong&gt;database explorer&lt;/strong&gt; and the &lt;strong&gt;SciView&lt;/strong&gt;. We will come to those later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the footer, there are also minimized elements. I like the &lt;strong&gt;problems &lt;/strong&gt;and the &lt;strong&gt;terminal &lt;/strong&gt;section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="find-action"&gt;Find Action&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/pycharm/guide/tips/find-action"&gt;Find Action&lt;/a&gt; allows you to search for any menu. No more searching in deeply nested menus. It is similar to the Command Palette in Sublime Text.&lt;/p&gt;
&lt;p&gt;If you have the Sublime Text key bindings, you can open the dialogue with Ctrl+Shift+P . It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The screenshot was taken by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*uBvSWUANnD_Ac_4cmU665g.png"/&gt;&lt;em&gt;The screenshot was taken by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In contrast to Sublime Text, PyCharm does not do a fuzzy search here.&lt;/p&gt;
&lt;h2 id="key-bindings-customizable-shortcuts"&gt;Key bindings: Customizable Shortcuts!&lt;/h2&gt;
&lt;p&gt;If you go to File &amp;rarr; Settings ( Ctrl+Alt+S ) and then to &lt;em&gt;Keymap&lt;/em&gt;, you can select the defaults of other editors like Sublime Text. This makes a switch pretty easy. You also have a nice interface to set key bindings.&lt;/p&gt;
&lt;h3 id="tab-interactions"&gt;Tab Interactions&lt;/h3&gt;
&lt;p&gt;You can close a tab with Ctrl+W , create a new file with Ctrl+N , select the previous/next tab with Ctrl+Page Down / Ctrl+Page up . I haven&amp;rsquo;t found a way to jump to the first/second/n-th tab.&lt;/p&gt;
&lt;h3 id="jump-to-line"&gt;Jump to Line&lt;/h3&gt;
&lt;p&gt;Ctrl+G lets you go to a line. You can even specify the column you want to go to!&lt;/p&gt;
&lt;h3 id="goto-file"&gt;Goto File&lt;/h3&gt;
&lt;p&gt;Ctrl+P lets you go to any file in the workspace. No fuzzy search, though 😢&lt;/p&gt;
&lt;h3 id="find-replace-all"&gt;Find / Replace All&lt;/h3&gt;
&lt;p&gt;Ctrl+F to find something, Ctrl+H to replace. You can also use RegEx! Definitely a feature I don&amp;rsquo;t want to miss. This is pretty cool in combination with multiple cursors!&lt;/p&gt;
&lt;p&gt;&lt;img alt="The screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/2000/1*3YENa0Oiuaiw3vNATWRhyQ.png"/&gt;&lt;em&gt;The screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="distraction-free-mode-and-zen-mode"&gt;Distraction-Free Mode and Zen Mode&lt;/h3&gt;
&lt;p&gt;Shift+F11 switches in &lt;a href="https://www.jetbrains.com/help/webstorm/ide-viewing-modes.html"&gt;distraction-free mode&lt;/a&gt;. You just see the code. No mini-map, no file explorer, no footer. This is helpful if you want to show another developer something. The Zen mode is even better 😃&lt;/p&gt;
&lt;h2 id="autocompletion_1"&gt;Autocompletion&lt;/h2&gt;
&lt;p&gt;The autocompletion of PyCharm works well. PyCharm obviously makes use of &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations&lt;/a&gt; 🎉&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyCharm automatically suggests using one of the attributes of the used class. The screenshot was taken by the author." src="https://cdn-images-1.medium.com/max/2000/1*pdNTT_-s7DBo2JPzqMGQug.png"/&gt;&lt;em&gt;PyCharm automatically suggests using one of the attributes of the used class. The screenshot was taken by the author.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;PyCharm also gives you hints when you create a new class or use a function:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyCharm tells you that there are two parameters &amp;mdash; x and y &amp;mdash; expected. It also lets you know that you have to enter the first one now (x is bold) and that it should be a float 😍" src="https://cdn-images-1.medium.com/max/2000/1*vaqHuVP0NgY7VK5_s-ONiA.png"/&gt;&lt;em&gt;PyCharm tells you that there are two parameters &amp;mdash; x and y &amp;mdash; expected. It also lets you know that you have to enter the first one now (x is bold) and that it should be a float 😍&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="jump-to-definition"&gt;Jump to Definition&lt;/h2&gt;
&lt;p&gt;F12 shows you the usage of the symbol under your cursor and brings you to the declaration of classes, methods, and functions. In contrast to Sublime Text, this works flawlessly in PyCharm.&lt;/p&gt;
&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;p&gt;PyCharm comes with a proper debugger. Have a look at the following image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The debugger of PyCharm. Screenshot was taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3788/1*esuda--UrsNMrgGd_z5iTA.png"/&gt;&lt;em&gt;The debugger of PyCharm. Screenshot was taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can set a breakpoint at the line you&amp;rsquo;re interested in by clicking next to it (1). Then you click on the &amp;ldquo;debug&amp;rdquo; icon (2). PyCharm opens a variable explorer (3). Now you can decide if you want to step over / step into / step into my code / step out (4). It&amp;rsquo;s simple to use, but extremely valuable if you don&amp;rsquo;t have a clue what is going on.&lt;/p&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;p&gt;PyCharm comes has a &lt;a href="https://plugins.jetbrains.com/pycharm"&gt;Marketplace&lt;/a&gt; that offers 2354 plugins. For Python, I like &lt;a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets"&gt;Rainbow Brackets&lt;/a&gt;: If you have multiple brackets after each other, it becomes hard to read them. Rainbow brackets colors the matching brackets to support you.&lt;/p&gt;
&lt;p&gt;Please let me know if you have any other plugin you use for Python!&lt;/p&gt;
&lt;h2 id="code-inspection"&gt;Code Inspection&lt;/h2&gt;
&lt;p&gt;PyCharm has various linters that don&amp;rsquo;t have a comparable free &lt;a href="https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287"&gt;static code analysis tool&lt;/a&gt;. They call this &lt;a href="https://www.jetbrains.com/help/pycharm/running-inspections.html#scopes_order"&gt;code inspection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Code Inpsection within PyCharm." src="https://cdn-images-1.medium.com/max/2000/1*150S-ODBhT6i-GsVtSvc3g.png"/&gt;&lt;em&gt;Code Inpsection within PyCharm.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Cool rules I&amp;rsquo;ve noticed are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/help/pycharm/spellchecking.html"&gt;&lt;strong&gt;Spell checking&lt;/strong&gt;&lt;/a&gt;: This works astonishingly well. Preventing typos is helpful because you don&amp;rsquo;t want to force downstream users to have to add typos e.g. if your function name was wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: PyCharm can check your docstrings against the function signature. This is pretty amazing 😻&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my &lt;a href="https://github.com/MartinThoma/mpu/commit/7be3a65acafed8bb902d88c4e65064e16397daa0"&gt;example repository mpu&lt;/a&gt; I had a couple of those. This is a repository where I try hard to follow good practices.&lt;/p&gt;
&lt;h2 id="database-explorer"&gt;Database Explorer&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.jetbrains.com/help/pycharm/database-tool-window.html"&gt;database tool window&lt;/a&gt; is a part of PyCharm where I don&amp;rsquo;t know yet what to think about it. One the one hand, it is useful. On the other hand, I like the Unix philosophy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="make-each-program-do-one-thing-well-to-do-a-new-job-build-afresh-rather-than-complicate-old-programs-by-adding-new-features"&gt;Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new &amp;ldquo;features&amp;rdquo;.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a couple of programs which fulfil the same purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/PhpMyAdmin"&gt;phpMyAdmin&lt;/a&gt;: For MySQL / MariaDB only&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sqlitebrowser.org/"&gt;SQLite Browser&lt;/a&gt;: For SQLite only&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/HeidiSQL"&gt;Heidi SQL&lt;/a&gt;: MySQL, MariaDB, PostgreSQL, SQLite, Microsoft SQL Server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/DBeaver"&gt;DBeaver&lt;/a&gt;: All databases which have a JDBC or ODBC driver, including MySQL, PostgreSQL, SQLite&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/de-de/datagrip/"&gt;Jetbrains DataGrip&lt;/a&gt;: Pretty much the same as the plugin, I suspect?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sciview"&gt;SciView&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.jetbrains.com/help/pycharm/matplotlib-support.html#sm"&gt;Scientific View&lt;/a&gt; is essentially trying to offer the capabilities of a Jupyter Notebook within PyCharm.&lt;/p&gt;
&lt;p&gt;More details can be found here:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/46RjXawJQgg" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="42-more-hints"&gt;42 more hints&lt;/h2&gt;
&lt;p&gt;PyCharm can do a lot. Way more than I can show you in this 6 minute article. Give the following video a try:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/NoDx0MEESDw" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="comparison-community-edition-and-sublime-text"&gt;Comparison: Community Edition and Sublime Text&lt;/h2&gt;
&lt;p&gt;PyCharms community edition editor is pretty crappy. Don&amp;rsquo;t even give it a try.&lt;/p&gt;
&lt;p&gt;In comparison to Sublime Text, one has to mention the big price difference. You can use Sublime Text pretty well for free. Even if you are super annoyed by the reminder to pay for it, it still is only $70 once for Sublime Text compared to $200 per year for PyCharm.&lt;/p&gt;
&lt;p&gt;Sublime Text offers what you need in 90% of your development time. In those cases, it is faster and less cluttered. However, especially the missing debugger might be a deal-breaker for you.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;PyCharm Professional is an &lt;strong&gt;amazing IDE&lt;/strong&gt; for professional Python developers. I love that they have &lt;strong&gt;nice autocompletion&lt;/strong&gt;, can &lt;strong&gt;jump to definitions&lt;/strong&gt;, and have a working &lt;strong&gt;spell-checker&lt;/strong&gt; integrated. The &lt;strong&gt;debugger&lt;/strong&gt; is also sometimes super helpful.&lt;/p&gt;
&lt;p&gt;On the downside, PyCharms interface is too cluttered. To me, the editor has too little screen space. The context menus are just crazy huge and the starting time is too long if you just want to edit a small file.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In this &amp;ldquo;Python for Beginners&amp;rdquo; series, we already explained &lt;a href="https://medium.com/python-in-plain-english/a-beginners-guide-to-python-development-on-windows-10-e9d80601f483"&gt;how to use Python with WSL2 on Windows&lt;/a&gt;, &lt;a href="https://medium.com/python-in-plain-english/how-to-start-python-development-on-windows-10-anaconda-edition-cc91c2d57a1d"&gt;how to use Python on Windows with Anaconda&lt;/a&gt;. The editor &lt;a href="https://medium.com/python-in-plain-english/python-editors-in-review-sublime-text-b71956c32375"&gt;Sublime Text&lt;/a&gt; was introduced as a good minimal starting point.&lt;/p&gt;
&lt;p&gt;This article briefly introduced PyCharm Professional. In a follow-up articles, you will see Visual Studio Code. Stay tuned!&lt;/p&gt;</content><category term="Code"></category><category term="Editor"></category><category term="IDE"></category><category term="Python"></category></entry><entry><title>A Beginner’s Guide to Python Development on Windows 10</title><link href="https://martin-thoma.com/https://medium.com/python-in-plain-english/a-beginners-guide-to-python-development-on-windows-10-e9d80601f483" rel="alternate"></link><published>2020-10-20T20:00:00+02:00</published><updated>2020-10-20T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-20:/https://medium.com/python-in-plain-english/a-beginners-guide-to-python-development-on-windows-10-e9d80601f483</id><summary type="html">&lt;p&gt;The Python programming language is used for &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;web development&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/intro-to-data-analysis--ud170"&gt;data analysis&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/intro-to-machine-learning--ud120"&gt;machine learning&lt;/a&gt;, &lt;a href="https://towardsdatascience.com/hypothesis-testing-in-machine-learning-using-python-a0dc89e169ce"&gt;statistics&lt;/a&gt;, &lt;a href="https://martin-thoma.com/scraping-with-selenium/"&gt;web scraping&lt;/a&gt;, and so much more. There are tons of tutorials which, ironically, makes it pretty hard to recommend one. However, there is also a lack of support for Windows.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get the very first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Python programming language is used for &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;web development&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/intro-to-data-analysis--ud170"&gt;data analysis&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/intro-to-machine-learning--ud120"&gt;machine learning&lt;/a&gt;, &lt;a href="https://towardsdatascience.com/hypothesis-testing-in-machine-learning-using-python-a0dc89e169ce"&gt;statistics&lt;/a&gt;, &lt;a href="https://martin-thoma.com/scraping-with-selenium/"&gt;web scraping&lt;/a&gt;, and so much more. There are tons of tutorials which, ironically, makes it pretty hard to recommend one. However, there is also a lack of support for Windows.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get the very first step done: Install it on Windows. You could &lt;a href="https://medium.com/python-in-plain-english/how-to-start-python-development-on-windows-10-anaconda-edition-cc91c2d57a1d"&gt;use Python through Anaconda&lt;/a&gt;, but in this article, we will use it on Windows with WSL. This prepares you to go with one of the many tutorials to start your Python career.&lt;/p&gt;
&lt;h2 id="what-is-wsl"&gt;What is WSL?&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux"&gt;Windows Subsystem for Linux&lt;/a&gt; (WSL) is a compatibility layer that allows you to run Linux binaries on Windows. WSL2 uses the Linux Kernel (&lt;a href="https://blogs.windows.com/windows-insider/2020/06/10/announcing-windows-10-insider-preview-build-19645/"&gt;source&lt;/a&gt;). On top of WSL, you can run the Linux-flavor &amp;ldquo;Ubuntu&amp;rdquo;. Such a kind of &amp;ldquo;flavor&amp;rdquo; is called a &lt;em&gt;distribution&lt;/em&gt;. There are many other distributions, but Ubuntu is by far the most wide-spread option.&lt;/p&gt;
&lt;p&gt;This is pretty awesome because most Python developers use Linux. This means many tutorials assume that you have access to Linux programs and some Python packages contain code that is platform-specific. The Python community is increasingly becoming aware of the issue that Windows support is sub-optimal, but for now, using (something similar to) Linux is just the easier path.&lt;/p&gt;
&lt;h2 id="install-wsl2-and-ubuntu"&gt;Install WSL2 and Ubuntu&lt;/h2&gt;
&lt;p&gt;I recommend to follow the official Microsoft guide:
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;&lt;strong&gt;Install Windows Subsystem for Linux (WSL) on Windows 10&lt;/strong&gt;
&lt;em&gt;Windows Subsystem for Linux has two different versions to choose between during the installation process. WSL 2 has&amp;hellip;&lt;/em&gt;docs.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Step 6, choose &amp;ldquo;Ubuntu 20.04 LTS&amp;rdquo;:
&lt;a href="https://www.microsoft.com/en-US/p/ubuntu-2004-lts/9n6svws3rx71?activetab=pivot:overviewtab"&gt;&lt;strong&gt;Get Ubuntu 20.04 LTS - Microsoft Store&lt;/strong&gt;
&lt;em&gt;Ubuntu 20.04 LTS on Windows allows you to use Ubuntu Terminal and run Ubuntu command line utilities including bash&amp;hellip;&lt;/em&gt;www.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="install-and-configure-windows-terminal"&gt;Install and Configure Windows Terminal&lt;/h2&gt;
&lt;p&gt;When Ubuntu is installed, install Windows Terminal:
&lt;a href="https://www.microsoft.com/en-US/p/windows-terminal/9n0dx20hk701?rtc=1&amp;amp;activetab=pivot:overviewtab"&gt;&lt;strong&gt;Get Windows Terminal - Microsoft Store&lt;/strong&gt;
&lt;em&gt;The Windows Terminal is a modern, fast, efficient, powerful, and productive terminal application for users of&amp;hellip;&lt;/em&gt;www.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download and install all 4 &amp;ldquo;&lt;a href="https://github.com/powerline/fonts/tree/master/DejaVuSansMono"&gt;DejaVu Sans Mono Powerline&lt;/a&gt;&amp;rdquo; fonts.&lt;/p&gt;
&lt;p&gt;Launch a terminal and navigate to the settings. It&amp;rsquo;s this small downwards pointing &amp;ldquo;arrow&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Click on &amp;ldquo;Settings&amp;rdquo;. The screenshot was taken by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*w5uAwDbarh47MQKJl6Ke6A.png"/&gt;&lt;em&gt;Click on &amp;ldquo;Settings&amp;rdquo;. The screenshot was taken by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You should see a JSON file which you can change to fit your taste. I have the following:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/db0a1b7a8b8d0eccc2a75276eec241da"&gt;&lt;/iframe&gt;
&lt;h2 id="install-pyenv"&gt;Install pyenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; lets you run any Python runtime you like. To install it, run the following commands. Lines that begin with $ indicate that you should enter what follows. Copy everything except the $ until the next $&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;git
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;https://github.com/pyenv/pyenv.git&lt;span class="o"&gt;](&lt;/span&gt;https://github.com/pyenv/pyenv.git&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.pyenv

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'export PYENV_ROOT="$HOME/.pyenv"'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'export PATH="$PYENV_ROOT/bin:$PATH"'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'export PYENV_ROOT="$HOME/.pyenv"'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'export PATH="$PYENV_ROOT/bin:$PATH"'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc

&lt;span class="c1"&gt;# Copy the next two lines, except the first $&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval "$(pyenv init -)"\nfi'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile

&lt;span class="c1"&gt;# Copy the next two lines, except the first $&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval "$(pyenv init -)"\nfi'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc

&lt;span class="c1"&gt;# Install the build dependencies&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--no-install-recommends&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;build-essential&lt;span class="w"&gt; &lt;/span&gt;libssl-dev&lt;span class="w"&gt; &lt;/span&gt;zlib1g-dev&lt;span class="w"&gt; &lt;/span&gt;libbz2-dev&lt;span class="w"&gt; &lt;/span&gt;libreadline-dev&lt;span class="w"&gt; &lt;/span&gt;libsqlite3-dev&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;llvm&lt;span class="w"&gt; &lt;/span&gt;libncurses5-dev&lt;span class="w"&gt; &lt;/span&gt;xz-utils&lt;span class="w"&gt; &lt;/span&gt;tk-dev&lt;span class="w"&gt; &lt;/span&gt;libxml2-dev&lt;span class="w"&gt; &lt;/span&gt;libxmlsec1-dev&lt;span class="w"&gt; &lt;/span&gt;libffi-dev&lt;span class="w"&gt; &lt;/span&gt;liblzma-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Close all terminals and open one again. Now the command pyenv should show you the help:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*nKXKMJmDFiUiATZM__i_1g.png"/&gt;&lt;em&gt;Screenshot by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most importantly the command pyenv install --list which shows you all the different Python versions you can install. I recommend installing 3.8.6 as of October 2020.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.6
Downloading&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.6.tar.xz...
-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz&lt;span class="o"&gt;](&lt;/span&gt;https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz&lt;span class="o"&gt;)&lt;/span&gt;
Installing&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.6...
Installed&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.6&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;/home/math/.pyenv/versions/3.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, you can use it globally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.6

$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;--version
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.6

$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--version
pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;.2.1&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;/home/math/.pyenv/versions/3.8.6/lib/python3.8/site-packages/pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="editor"&gt;Editor&lt;/h2&gt;
&lt;p&gt;There are two beginner-friendly, gratis, wide-spread editor options: &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;. A lot of people also like &lt;a href="https://www.jetbrains.com/pycharm/download"&gt;PyCharm Professional&lt;/a&gt; and some hackers like vim / Emacs. Personally, I do most of my work in Sublime Text. I like that it is super lightweight and doesn&amp;rsquo;t have a lot of distracting information.&lt;/p&gt;
&lt;p&gt;I highly recommend navigating within Windows to \wsl$\Ubuntu\home . So you are within Windows on the Linux part.&lt;/p&gt;
&lt;p&gt;You can also go to /mnt/c/Users within Ubuntu, but this way things become crazy slow.&lt;/p&gt;
&lt;h2 id="how-can-i-continue"&gt;How can I continue?&lt;/h2&gt;
&lt;p&gt;If you want an introduction to Python from the beginning, try &lt;a href="https://docs.python.org/3/tutorial/"&gt;the official Python tutorial&lt;/a&gt;. Although I already had programming experience when I started with Python, I went through this to make sure I know the basics.&lt;/p&gt;
&lt;p&gt;If you have some programming background, there is also the &lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;Python Jumpstart by building 10 apps&lt;/a&gt;. I haven&amp;rsquo;t tried it, but I love &lt;a href="https://talkpython.fm/"&gt;the talk Python podcast&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="acknowledgment"&gt;Acknowledgment&lt;/h2&gt;
&lt;p&gt;A big THANK YOU to my colleague &lt;a href="https://www.linkedin.com/in/marcuswindmark/"&gt;Marcus Windmark&lt;/a&gt; who helped me to get started with Python on Windows 🤗&lt;/p&gt;</content><category term="Code"></category><category term="Code"></category><category term="Development"></category><category term="Windows"></category></entry><entry><title>JSON encoding/decoding with Python</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/json-encoding-decoding-with-python-62a2cae63a6a" rel="alternate"></link><published>2020-10-05T20:00:00+02:00</published><updated>2020-10-05T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-10-05:/https://levelup.gitconnected.com/json-encoding-decoding-with-python-62a2cae63a6a</id><summary type="html">&lt;p&gt;JSON is a cornerstone for the exchange of data on the Internet. REST APIs use the standardized message format all around the world. Being a subset of JavaScript, it got a huge initial boost in its adoption right from the start. The fact that its syntax is pretty clear and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;JSON is a cornerstone for the exchange of data on the Internet. REST APIs use the standardized message format all around the world. Being a subset of JavaScript, it got a huge initial boost in its adoption right from the start. The fact that its syntax is pretty clear and easy to read also helped.&lt;/p&gt;
&lt;p&gt;JSON has libraries in every language I know for serialization and deserialization. In Python, there are actually multiple libraries. In this article, I will compare them for you.&lt;/p&gt;
&lt;h2 id="the-libraries"&gt;The libraries&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt; itself has a &lt;a href="https://docs.python.org/3/library/json.html"&gt;json&lt;/a&gt; module. It was originally developed by Bob Ippolito as simplejson and was merged into Python 2.4 (&lt;a href="https://docs.python.org/3/whatsnew/2.6.html#the-json-module-javascript-object-notation"&gt;source&lt;/a&gt;). CPython is licensed under the Python Software Foundation License.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;simplejson&lt;/strong&gt; still exists as its own library and you can install it via pip. It is a pure Python library with an optional C extension. Simplejson is licensed under the MIT and the Academic Free License (AFL) license.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/ujson/"&gt;&lt;strong&gt;ujson&lt;/strong&gt;&lt;/a&gt; is a binding to the C library &lt;a href="https://github.com/ultrajson/ultrajson"&gt;Ultra JSON&lt;/a&gt;. Ultra JSON was developed by ESN (&lt;a href="https://techcrunch.com/2012/09/26/electronic-arts-buys-online-gaming-development-studio-esn/"&gt;an Electronic Arts Inc. studio&lt;/a&gt;) and is licensed under the &lt;a href="https://tldrlegal.com/license/bsd-3-clause-license-(revised)"&gt;3-clause BSD License&lt;/a&gt;. Ultra JSON has 3k stars on Github, 305 forks, 50 contributors, the last commit is only 12 days old and the last issue was opened 5 days ago. I&amp;rsquo;ve heard that it is in &amp;ldquo;maintenance mode&amp;rdquo; (&lt;a href="https://github.com/ultrajson/ultrajson/issues/428#issuecomment-699456053"&gt;source&lt;/a&gt;), indicating that there is no new development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pysimdjson&lt;/strong&gt; is a binding to the C++ library &lt;a href="https://github.com/simdjson/simdjson"&gt;simdjson&lt;/a&gt;. SIMDjson received funding from Canada. simdjson has 12.2k stars on Github, 611 forks, 63 contributors, the last commit was 11 hours ago, and the last issue was opened 2 hours ago.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python-rapidjson&lt;/strong&gt; is a binding to the C++ library &lt;a href="https://github.com/Tencent/rapidjson"&gt;RapidJSON&lt;/a&gt;. RapidJSON was developed by &lt;a href="https://en.wikipedia.org/wiki/Tencent"&gt;Tencent&lt;/a&gt;. RapidJSON has 9.8k stars on GitHub, 2.7k forks, 150 contributors, the last commit was about 2 months ago and the last issue was opened 17 days ago.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/orjson/"&gt;&lt;strong&gt;orjson&lt;/strong&gt;&lt;/a&gt; is a Python package that relies on Rust to do the heavy lifting.&lt;/p&gt;
&lt;h2 id="maturity-and-operational-safety"&gt;Maturity and Operational Safety&lt;/h2&gt;
&lt;p&gt;All mentioned libraries worked for the benchmark examples without issues. Switching the JSON module is not a super big deal, but still, I want to know that the module is supported.&lt;/p&gt;
&lt;p&gt;CPython, simplejson, ujson, and orjson consider themselves production-ready.&lt;/p&gt;
&lt;p&gt;python-rapidjson marks itself as alpha, but one maintainer says that is a mistake and will be fixed soon (&lt;a href="https://github.com/python-rapidjson/python-rapidjson/issues/140#issuecomment-699475354"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;table class="table table-striped table-sm" style="width: 60%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;cPython JSON&lt;/th&gt;
&lt;th&gt;simplejson&lt;/th&gt;
&lt;th&gt;ujson&lt;/th&gt;
&lt;th&gt;orjson&lt;/th&gt;
&lt;th&gt;pysimdjson&lt;/th&gt;
&lt;th&gt;python-rapidjson&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;td&gt;Python Software Foundation License&lt;/td&gt;
&lt;td&gt;MIT / Academic Free License (AFL)&lt;/td&gt;
&lt;td&gt;BSD License&lt;/td&gt;
&lt;td&gt;MIT / Apache&lt;/td&gt;
&lt;td&gt;MIT&lt;/td&gt;
&lt;td&gt;MIT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="table-primary"&gt;
&lt;th colspan="7" style="text-align: center"&gt;Maturity&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;td&gt;3.8.6&lt;/td&gt;
&lt;td&gt;3.17.2&lt;/td&gt;
&lt;td&gt;3.2.0&lt;/td&gt;
&lt;td&gt;3.4.0&lt;/td&gt;
&lt;td&gt;3.0.0&lt;/td&gt;
&lt;td&gt;0.9.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Development Status&lt;/th&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Production/Stable&lt;/td&gt;
&lt;td&gt;Production/Stable&lt;/td&gt;
&lt;td&gt;Production/Stable&lt;/td&gt;
&lt;td style="background-color: red;"&gt;Alpha&lt;/td&gt;
&lt;td style="background-color: red;"&gt;Alpha&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GH First release&lt;/th&gt;
&lt;td&gt;&lt;span alt="v0.9.8"&gt;1993-01-10&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span alt="v1.1"&gt;2006-01-01&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span alt="v1.19"&gt;2012-06-18&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span alt="1.0.0"&gt;2018-11-23&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span alt="v1.2.0"&gt;2019-02-23&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span alt="v0.0.9"&gt;2017-03-02&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;CI-Pipeline&lt;/th&gt;
&lt;td&gt;GH, Travis, Azure&lt;/td&gt;
&lt;td&gt;GH, Travis, Appveyor&lt;/td&gt;
&lt;td&gt;GH, Travis&lt;/td&gt;
&lt;td&gt;Azure&lt;/td&gt;
&lt;td&gt;GH, Travis&lt;/td&gt;
&lt;td&gt;Appveyor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="table-primary"&gt;
&lt;th colspan="7" style="text-align: center"&gt;Operational Safety&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GH Organization&lt;/th&gt;
&lt;td style="font-weight: bold; color: green; font-size: 30px;"&gt;&amp;checkmark;&lt;/td&gt;
&lt;td style="font-weight: bold; color: green; font-size: 30px;"&gt;&amp;checkmark;&lt;/td&gt;
&lt;td style="font-weight: bold; color: green; font-size: 30px;"&gt;&amp;checkmark;&lt;/td&gt;
&lt;td style="font-weight: bold; color: red; font-size: 30px;"&gt;&amp;cross;&lt;/td&gt;
&lt;td style="font-weight: bold; color: red; font-size: 30px;"&gt;&amp;cross;&lt;/td&gt;
&lt;td style="font-weight: bold; color: green; font-size: 30px;"&gt;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GH Contributors&lt;/th&gt;
&lt;td&gt;1319&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Last release&lt;/th&gt;
&lt;td&gt;2020-09-23&lt;/td&gt;
&lt;td&gt;2020-07-16&lt;/td&gt;
&lt;td&gt;2020-09-08&lt;/td&gt;
&lt;td&gt;2020-09-25&lt;/td&gt;
&lt;td&gt;2020-08-21&lt;/td&gt;
&lt;td&gt;2019-11-13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Last Commit&lt;/th&gt;
&lt;td&gt;2020-09-25&lt;/td&gt;
&lt;td&gt;2020-07-16&lt;/td&gt;
&lt;td&gt;2020-09-19&lt;/td&gt;
&lt;td&gt;2020-09-25&lt;/td&gt;
&lt;td&gt;2020-08-31&lt;/td&gt;
&lt;td&gt;2020-05-08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;PyPI Maintainers&lt;/th&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style="background-color: red;"&gt;1&lt;/td&gt;
&lt;td style="background-color: red;"&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="table-primary"&gt;
&lt;th colspan="7" style="text-align: center"&gt;Users&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GH Stars&lt;/th&gt;
&lt;td style="background-color: green;"&gt;33,700&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;2966&lt;/td&gt;
&lt;td&gt;1348&lt;/td&gt;
&lt;td&gt;374&lt;/td&gt;
&lt;td&gt;397&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GH Forks&lt;/th&gt;
&lt;td style="background-color: green;"&gt;16,200&lt;/td&gt;
&lt;td&gt;290&lt;/td&gt;
&lt;td&gt;306&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GH Used By&lt;/th&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td style="background-color: green;"&gt;47,164&lt;/td&gt;
&lt;td style="background-color: green;"&gt;14,760&lt;/td&gt;
&lt;td&gt;613&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;661&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;StackOverflow Questions&lt;/th&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stackoverflow.com/questions/tagged/simplejson"&gt;279&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stackoverflow.com/questions/tagged/ujson"&gt;6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stackoverflow.com/questions/tagged/orjson"&gt;3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stackoverflow.com/questions/tagged/rapidjson"&gt;319&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="table-primary"&gt;
&lt;th colspan="7" style="text-align: center"&gt;Benchmarks&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GeoJSON Read&lt;/th&gt;
&lt;td&gt;48ms&lt;/td&gt;
&lt;td&gt;45ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;22ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;19ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;14ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;83ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GeoJSON Write&lt;/th&gt;
&lt;td&gt;291ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;352ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;34ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;15ms&lt;/td&gt;
&lt;td&gt;289ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;108ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Twitter Read&lt;/th&gt;
&lt;td style="background-color: green;"&gt;6ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;6ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;6ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;5ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;6ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;9ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Twitter Write&lt;/th&gt;
&lt;td&gt;25ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;33ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;5ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;3ms&lt;/td&gt;
&lt;td&gt;24ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;6ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2MB Float List Read&lt;/th&gt;
&lt;td&gt;36ms&lt;/td&gt;
&lt;td&gt;37ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;16ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;9ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;7ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;66ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2MB Float List Write&lt;/th&gt;
&lt;td&gt;161ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;186ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;25ms&lt;/td&gt;
&lt;td style="background-color: green;"&gt;12ms&lt;/td&gt;
&lt;td style="background-color: red;"&gt;164ms&lt;/td&gt;
&lt;td&gt;104ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="the-questions"&gt;The Questions&lt;/h2&gt;
&lt;p&gt;One indicator of how easy it might be to resolve problems is to ask questions and see how the behavior is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/simplejson/simplejson/issues/267"&gt;SimpleJSON&lt;/a&gt;: I&amp;rsquo;ve got a response the next day. The response was clear, easy to follow, friendly. &lt;a href="undefined"&gt;Bob Ippolito&lt;/a&gt; answered me &amp;mdash; the guy who originally developed it and who also is mentioned in the Python docs for the JSON module!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ultrajson/ultrajson/issues/428"&gt;uJSON&lt;/a&gt;: I&amp;rsquo;ve got a clear, friendly, easy to follow answer within 30 minutes. @hugovank&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ijl/orjson/issues/127"&gt;ORJSON&lt;/a&gt;: No answer after 8 days.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TkTech/pysimdjson/issues/54"&gt;PySIMDJSON&lt;/a&gt;: No answer after 8 days.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-rapidjson/python-rapidjson/issues/140"&gt;Python-RapidJSON&lt;/a&gt;: I&amp;rsquo;ve got a clear, friendly, easy to follow answer within 30 minutes. A &lt;a href="https://github.com/python-rapidjson/python-rapidjson/pull/143"&gt;simple PR&lt;/a&gt; wasn&amp;rsquo;t merged after two days.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One answer I&amp;rsquo;ve got for all of the projects is that they are essentially not in contact with each other.&lt;/p&gt;
&lt;h2 id="the-benchmark"&gt;The Benchmark&lt;/h2&gt;
&lt;p&gt;In order to benchmark the different libraries properly, I thought of the following scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;APIs&lt;/strong&gt;: Web services that exchange information. It might contain Unicode and have a nested structure. A JSON file from a Twitter API sounds good to test this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API JSON Error&lt;/strong&gt;: I was curious about how the performance would change if there was an error in the JSON API format. So I removed a brace in the middle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GeoJSON&lt;/strong&gt;: I&amp;rsquo;ve first seen &lt;a href="https://en.wikipedia.org/wiki/GeoJSON"&gt;the GeoJSON format&lt;/a&gt; with &lt;a href="https://overpass-turbo.eu/"&gt;Overpass Turbo&lt;/a&gt;, an Open Streep Map exporter. You will get crazy big JSON files with mostly coordinates, but also pretty nested.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt;: Just a massive list of floats. Those might be weights of a neural network layer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON Line&lt;/strong&gt;: Structured logs are heavily used in the industry. If you analyze those logs, you might need to go through Gigabytes of data. They are all simple dictionaries with a datetime object, a message, the logger, log status, and maybe some more.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deserialization-speed"&gt;Deserialization Speed&lt;/h3&gt;
&lt;p&gt;The speed of my hard drive gives a lower boundary for the speed to read. I&amp;rsquo;ve included it as a baseline in the following 3 charts.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/read-twitter.png"&gt;&lt;img alt="Read a complex, but small JSON" src="../images/2020/10/read-twitter.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Read a complex, but small JSON&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/read-geojson.png"&gt;&lt;img alt="Read a GeoJSON" src="../images/2020/10/read-geojson.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Read a GeoJSON&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/read-float.png"&gt;&lt;img alt="Read a massive float array" src="../images/2020/10/read-float.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Read a massive float array&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/read-structured-log.png"&gt;&lt;img alt="Read a structured log file" src="../images/2020/10/read-structured-log.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Read a structured log file&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/read-twitter-fail.png"&gt;&lt;img alt="Read a faulty twitter.json" src="../images/2020/10/read-twitter-fail.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Read a faulty twitter.json&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The conclusion from this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapidjson is slow, but for small JSONs like the twitter.json, you will not notice a difference. One can see this with the structured logs.&lt;/li&gt;
&lt;li&gt;simdjson, orjson, and ujson are all crazy fast.&lt;/li&gt;
&lt;li&gt;Reading a JSON file that contains a structural error is equally fast for most libraries. A notable exception is rapidjson. I guess that it aborts reading the file once it finds the error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="serialization-speed"&gt;Serialization Speed&lt;/h3&gt;
&lt;p&gt;In this case, I created the JSON-String beforehand and measured the time it takes to write it to disk as a baseline.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/write-twitter.png"&gt;&lt;img alt="Write a twitter.json" src="../images/2020/10/write-twitter.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Write a twitter.json&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/write-geojson.png"&gt;&lt;img alt="Write a GeoJSON" src="../images/2020/10/write-geojson.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Write a GeoJSON&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/write-float.png"&gt;&lt;img alt="Write a massive float array" src="../images/2020/10/write-float.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Write a massive float array&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/10/write-structured-log.png"&gt;&lt;img alt="Write a structured log file" src="../images/2020/10/write-structured-log.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Write a structured log file&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What I conclude from this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;orjson is just insanely fast. It is super close to maxing out my hard drive. And ujson is pretty close to that.&lt;/li&gt;
&lt;li&gt;rapidjson is pretty quick, but not on the same level as orjson or ujson.&lt;/li&gt;
&lt;li&gt;simdjson is slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-professional-workflow-with-json_1"&gt;A professional workflow with JSON&lt;/h2&gt;
&lt;p&gt;As a closing note, I want to point out some issues I see sometimes and have written myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calling variables foo_json : JSON is a string format. If it&amp;rsquo;s not a string, it&amp;rsquo;s not JSON. If you deserialized a JSON with bar = json.loads(foo) , then bar is not a JSON. You can serialize bar to a JSON which is equivalent to the JSONfoo , but bar is not a JSON. It&amp;rsquo;s a Python object. Very likely a dictionary. You can then all it foo_dict .&lt;/li&gt;
&lt;li&gt;Attribute checks all over the place: If you receive a JSON, it&amp;rsquo;s super easy to convert it to a Python object (e.g. a dict) and use it. This is fine for proof-of-concept code or very small JSON strings. It will bite you in the ass if you don&amp;rsquo;t convert it to something like a &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclass&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/samuelcolvin/pydantic"&gt;pydantic&lt;/a&gt; is a super helpful validation library. You can take the JSON-string, parse it to a Python base representation with dictionaries / lists / strings / numbers / booleans with your favorite JSON library and then parse it again with Pydantic. The advantage you get from this is that you know what you&amp;rsquo;re dealing with later. No longer just Dict[str, Any] as a &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotation&lt;/a&gt;. No longer unhelpful editor autocompletion. No longer checking if attributes exist all over your code.&lt;/p&gt;
&lt;p&gt;To include other json packages than the default json , I recommend the pattern&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;ujson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Flask, you can use another &lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.json.JSONEncoder"&gt;encoder&lt;/a&gt;/&lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.json.JSONDecoder"&gt;decoder&lt;/a&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;simplejson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONEncoder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSONDecoder&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_encoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONEncoder&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONDecoder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="undefined"&gt;Daniel Lemire&lt;/a&gt;: &lt;a href="https://www.youtube.com/watch?v=wlvKAT7SZIQ"&gt;Parsing JSON Really Quickly: Lessons Learned&lt;/a&gt; at InfoQ&lt;/li&gt;
&lt;li&gt;&lt;a href="undefined"&gt;Ng Wai Foong&lt;/a&gt;: &lt;a href="https://levelup.gitconnected.com/introduction-to-orjson-3d06dde79208"&gt;Introduction to orjson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="undefined"&gt;Nicolas Seriot&lt;/a&gt;: &lt;a href="http://seriot.ch/parsing_json.php"&gt;Parsing JSON is a Minefield&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="JSON"></category><category term="Python"></category><category term="Benchmark"></category></entry><entry><title>How to write Flake8 plugins 😍</title><link href="https://martin-thoma.com/https://medium.com/analytics-vidhya/how-to-write-flake8-plugins-5c5c47faffc2" rel="alternate"></link><published>2020-09-25T20:00:00+02:00</published><updated>2020-09-25T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-09-25:/https://medium.com/analytics-vidhya/how-to-write-flake8-plugins-5c5c47faffc2</id><summary type="html">&lt;p&gt;Really important parts of code reviews are almost impossible to automate:
Architectural decisions and logical bugs. They are too customized to your
codebase; too specific for the pull request.&lt;/p&gt;
&lt;p&gt;However, many comments in code reviews are not like that. They are about simply
style decisions, common minor mistakes, and misconceptions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Really important parts of code reviews are almost impossible to automate:
Architectural decisions and logical bugs. They are too customized to your
codebase; too specific for the pull request.&lt;/p&gt;
&lt;p&gt;However, many comments in code reviews are not like that. They are about simply
style decisions, common minor mistakes, and misconceptions. They are valuable
as well, but they distract the reviewer from the harder parts. The lining
system Flake8 allows you to write plugins that automatically capture those
simple things. You can execute them in your CI pipeline and thus never need to
think about them again.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to create a Flake8 plugin. As an example,
we will create a plugin which recognizes the pattern&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and thus can suggest using the following instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Cartoon by Geek-and-Poke (Oliver Widder)" src="https://cdn-images-1.medium.com/max/5602/1*1QTVPrx8DtO14F7-_jnBBw.png"/&gt;&lt;em&gt;Cartoon by &lt;a href="http://geek-and-poke.com/geekandpoke/2019/10/20/qa-best-practices"&gt;Geek-and-Poke&lt;/a&gt; (Oliver Widder)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="about-flake8"&gt;About Flake8&lt;/h2&gt;
&lt;p&gt;Flake8 is a linter which only checks rules. It does not change the code. Every rule has a message and a code. The built-in rule codes begin either with E (Error) or with W (Warning). After that, a 3-digit number follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E101: indentation contains mixed spaces and tabs&lt;/li&gt;
&lt;li&gt;E111: indentation is not a multiple of four&lt;/li&gt;
&lt;li&gt;E112: expected an indented block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can select the rules which one wants to check on a prefix-basis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check all rules beginning with "E1" and nothing else&lt;/span&gt;
flake8&lt;span class="w"&gt; &lt;/span&gt;--select&lt;span class="w"&gt; &lt;/span&gt;E1&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, one can blacklist rules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check all rules except the ones beginning with E1 or W512&lt;/span&gt;
flake8&lt;span class="w"&gt; &lt;/span&gt;--ignore&lt;span class="w"&gt; &lt;/span&gt;E1,W512&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plugins need a 3-character prefix. For my plugin &lt;a href="https://pypi.org/project/flake8-simplify/0.1.0/"&gt;flake8-simplify&lt;/a&gt;, I chose SIM as a prefix.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The 3-character prefix should not start with E or W as people might want to completely block Flake8 W-rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Comic by Geek and Poke (Oliver Widder)" src="https://cdn-images-1.medium.com/max/8534/1*TX5RSfIk0XrEeSX0aXm4hg.jpeg"/&gt;&lt;em&gt;Comic by &lt;a href="https://geekandpoke.typepad.com/geekandpoke/2012/01/good-coders.html"&gt;Geek and Poke&lt;/a&gt; (Oliver Widder)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="the-flake8-plugin-skeleton"&gt;The Flake8 Plugin Skeleton&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;Cookiecutter&lt;/a&gt; is a command-line utility that allows you to create a project from scratch by using a template. Install it via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;cookiecutter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create your Flake8 plugin template, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cookiecutter&lt;span class="w"&gt; &lt;/span&gt;https://github.com/MartinThoma/cookiecutter-flake8-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="the-flake8-plugin-class"&gt;The Flake8 Plugin class&lt;/h2&gt;
&lt;p&gt;You need to create a plugin class like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover (&amp;lt;PY38)&lt;/span&gt;
    &lt;span class="c1"&gt;# Third party&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;importlib_metadata&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover (PY38+)&lt;/span&gt;
    &lt;span class="c1"&gt;# Core Library&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;importlib.metadata&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;importlib_metadata&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;importlib_metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AST&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;visitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Visitor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to point to that class in the setup.cfg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[options.entry_points]&lt;/span&gt;
&lt;span class="na"&gt;flake8.extension&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;AWE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;flake8_awesome:Plugin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just replace AWE by the 3-character code you want to have for your rules. We are, of course, not there jet. The visitor class still needs to be implemented. But to understand the visitor, we need to understand Pythons AST.&lt;/p&gt;
&lt;h2 id="understanding-pythons-ast"&gt;Understanding Pythons AST&lt;/h2&gt;
&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree&lt;/a&gt; (AST) is another representation of the code.&lt;/p&gt;
&lt;p&gt;Install &lt;a href="https://pypi.org/project/astpretty/"&gt;astpretty&lt;/a&gt; to understand how the AST looks like for a piece of code you&amp;rsquo;re interested in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;astpretty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is how you use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;astpretty&lt;span class="w"&gt; &lt;/span&gt;--no-show-offsets&lt;span class="w"&gt; &lt;/span&gt;/dev/stdin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not a == b"&lt;/span&gt;

Module&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;Expr&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UnaryOp&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Not&lt;span class="o"&gt;()&lt;/span&gt;,
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;operand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Compare&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Load&lt;span class="o"&gt;())&lt;/span&gt;,
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;Eq&lt;span class="o"&gt;()]&lt;/span&gt;,
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;comparators&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;Name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Load&lt;span class="o"&gt;())]&lt;/span&gt;,
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;type_ignores&lt;/span&gt;&lt;span class="o"&gt;=[]&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to recognize that pattern.&lt;/p&gt;
&lt;h2 id="a-flake8-visitor-class"&gt;A Flake8 visitor class&lt;/h2&gt;
&lt;p&gt;The logic of the linter is in the visitor class. The visitor gets called for every node in the AST. It has various methods which are based on the operations you see within astpretty, e.g. visit_UnaryOp . This method receives an ast.UnaryOp with which you can do whatever you want. More often than not, this will not be of the pattern you need. In this example, you need to look for the op == Not() and operand==Compare and ops=[Eq()] .&lt;/p&gt;
&lt;p&gt;This is how it&amp;rsquo;s done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DefaultDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Visitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NodeVisitor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;visit_UnaryOp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnaryOp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;_get_not_equal_calls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generic_visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;_get_not_equal_calls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnaryOp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Get a list of all calls where an unary 'not' is used for an quality."""&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Not&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
    &lt;span class="n"&gt;comparison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operand&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparison&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparison&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comparators&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIM201&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like &lt;a href="https://pypi.org/project/astor/"&gt;astor&lt;/a&gt;.to_source to get a string like it was in the source code back from the AST node.&lt;/p&gt;
&lt;h2 id="testing-flake8-plugins"&gt;Testing Flake8 plugins&lt;/h2&gt;
&lt;p&gt;A big shoutout to Anthony Sottile. Before his video (linked below), I had no clue how to test Flake8 plugins. Thank you ❤️&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s trivial once you know it: You create a string that contains a line or multiple lines of code. You pass it to ast.parse to get the abstract syntax tree. That one can be passed to your plugin, which should generate some output. That output can then be checked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;

&lt;span class="c1"&gt;# First party&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flake8_simplify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Plugin&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Apply the plugin to the given code."""&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_trivial_case&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Check the plugins output for no code."""&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A non-trivial test looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_unary_not_equality&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"not a == b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="s2"&gt;"1:0 SIM201 Used 'not a == b' instead of 'a != b'"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="complete-example"&gt;Complete example&lt;/h2&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/MartinThoma/flake8-simplify/tree/0.2.0"&gt;flake8-simplify 0.2.0&lt;/a&gt;. I&amp;rsquo;ve pinned the version so that you can see the code in the simple form it has right now.&lt;/p&gt;
&lt;p&gt;Please make me proud and automate your reviews &amp;mdash; make the following comics true for Flake8 plugins as well :-)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comic by geek-and-poke (Oliver Widder)" src="https://cdn-images-1.medium.com/max/2000/1*WYl8FGvNz-nvPpzuQd54-w.jpeg"/&gt;&lt;em&gt;Comic by &lt;a href="https://geekandpoke.typepad.com/geekandpoke/2011/10/hyperinflation.html"&gt;geek-and-poke&lt;/a&gt; (Oliver Widder)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;I can highly recommend the following video by &lt;a href="undefined"&gt;Anthony Sottile&lt;/a&gt; (&lt;a href="https://www.linkedin.com/in/anthony-sottile-940008b1/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/asottile"&gt;Github&lt;/a&gt;). He is the awesome guy who develops &lt;a href="https://github.com/asottile/pyupgrade"&gt;pyupgrade&lt;/a&gt;, &lt;a href="https://github.com/asottile/blacken-docs"&gt;blacken-docs&lt;/a&gt;, and &lt;a href="https://github.com/asottile/astpretty"&gt;astpretty&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/ot5Z4KQPBL8" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Flake8"></category><category term="Python"></category></entry><entry><title>Logging Basics in Python</title><link href="https://martin-thoma.com/https://towardsdatascience.com/logging-basics-in-python-d0db13e538f9" rel="alternate"></link><published>2020-09-15T20:00:00+02:00</published><updated>2020-09-15T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-09-15:/https://towardsdatascience.com/logging-basics-in-python-d0db13e538f9</id><summary type="html">&lt;p&gt;&lt;img alt="The dmesg output. Screenshot taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3760/1*7bpeZdDGtnxRIFE0iYp7OQ.png"/&gt;&lt;em&gt;The &lt;a href="https://en.wikipedia.org/wiki/Dmesg"&gt;dmesg&lt;/a&gt; output. Screenshot taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Logging is the act of recording information about the current state of execution. It&amp;rsquo;s typically done for two purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;: To enable the developer to narrow down the cause of a system failure&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;: To enable people on operations to know …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="The dmesg output. Screenshot taken by Martin Thoma." src="https://cdn-images-1.medium.com/max/3760/1*7bpeZdDGtnxRIFE0iYp7OQ.png"/&gt;&lt;em&gt;The &lt;a href="https://en.wikipedia.org/wiki/Dmesg"&gt;dmesg&lt;/a&gt; output. Screenshot taken by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Logging is the act of recording information about the current state of execution. It&amp;rsquo;s typically done for two purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;: To enable the developer to narrow down the cause of a system failure&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;: To enable people on operations to know what is currently happening&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="hello-sweet-logging-world"&gt;Hello, Sweet logging World!&lt;/h2&gt;
&lt;p&gt;The simplest way to log is like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{asctime}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{levelname:&amp;lt;8}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{message}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It gives output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;2020-09-07 22:40:32,101 INFO     Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;BasicConfig should probably not be used&lt;/strong&gt;. Please continue reading &amp;ldquo;the 4 logging classes&amp;rdquo; to learn why 😁&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image by Oliver Widder from geek-and-poke.com" src="https://cdn-images-1.medium.com/max/4960/1*g34WT6mRV4_UKC06OnUNeg.jpeg"/&gt;&lt;em&gt;Image by Oliver Widder from &lt;a href="http://geek-and-poke.com/geekandpoke/2015/10/18/why-logging-is-so-important"&gt;geek-and-poke.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="the-4-logging-classes"&gt;The 4 Logging Classes&lt;/h2&gt;
&lt;p&gt;Python has a logger hierarchy in a tree structure. This means you can apply a log configuration for a single logger and make all child loggers behave the same way. This is useful if you want to configure a package. logging.basicConfig acts on the root logger. For this reason, it should only be used within application code, but not in library or framework code.&lt;/p&gt;
&lt;p&gt;Python distinguishes 4 main components that you can adjust to your needs: Loggers, handlers, filters, and formatters. They act on log records that are created when you pass your log message to the logger.&lt;/p&gt;
&lt;h3 id="loggers"&gt;Loggers&lt;/h3&gt;
&lt;p&gt;A logger is an object you use to emit log records:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can emit 5 levels of log messages :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;: extremely detailed, you can use this if you have no clue at a certain part of the code what is happening. Remember to remove it again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Info&lt;/strong&gt;: nothing to worry about, but helpful to understand the system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Warning&lt;/strong&gt;: something that could become a problem that happened. Maybe an event that might indicate an error if it happens too often. Maybe the remaining storage becomes low. Maybe the internet connection was broken. Maybe a file was not writable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;: an important event could not be executed, e.g. because of missing privileges or a file that should be read did not exist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Critical&lt;/strong&gt;: a problem that requires the app to restart happened. For example, a kill signal was received.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You use it like this :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"My first log message"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The specified file could not be opened."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="log-handlers"&gt;Log Handlers&lt;/h3&gt;
&lt;p&gt;File handlers store stuff to files, stream handlers write logs to a stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"spam.log"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;rsquo;re using a file handler, consider using a &lt;a href="https://docs.python.org/3/howto/logging-cookbook.html#using-file-rotation"&gt;RotatingFileHandler&lt;/a&gt;. It will create a new file once the log file becomes too big. You can specify how many files there might be. When the maximum is reached, the oldest file is deleted.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/logging.handlers.html#httphandler"&gt;HTTPHandler&lt;/a&gt; is also noteworthy because it allows you to integrate into other systems such as Slack.&lt;/p&gt;
&lt;p&gt;Commonly, you also want to set the log level to either the logger or the log handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Image by Oliver Widder from geek-and-poke.com" src="https://cdn-images-1.medium.com/max/2000/1*QR-5wpqk0J2X3O1vlYSrqQ.jpeg"/&gt;&lt;em&gt;Image by Oliver Widder from g&lt;a href="https://geekandpoke.typepad.com/geekandpoke/2010/01/geeks.html"&gt;eek-and-poke.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="log-formatters"&gt;Log Formatters&lt;/h3&gt;
&lt;p&gt;The log formatter changes the log message string. A formatter is attached to a log handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{asctime}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{levelname:&amp;lt;8}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{message}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The style attribute is interesting. The default is % which means the format string then needs to be (asctime)s (levelname)-8s (message)s . I never really learned how the percentage style formatting works. I like to stick to the curly braces.&lt;/p&gt;
&lt;p&gt;There are way more &lt;a href="https://docs.python.org/3/library/logging.html#logrecord-attributes"&gt;log record attributes&lt;/a&gt; which you can use.&lt;/p&gt;
&lt;h3 id="log-filters"&gt;Log Filters&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/logging.html#filter-objects"&gt;Log filters&lt;/a&gt; provide the possibility to define which log records get shown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;OnWeekendOnlyErrorsFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_weekday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_weekday&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;levelno&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;


&lt;span class="n"&gt;stdout_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdout_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdout_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OnWeekendOnlyErrorsFilter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Photo by Nigel Tadyanehondo on Unsplash" src="https://cdn-images-1.medium.com/max/7872/0*LdnHX9sPcoVbJMbF"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@nxvision?utm_source=medium&amp;amp;utm_medium=referral"&gt;Nigel Tadyanehondo&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="logging-vs-print-vs-exception_1"&gt;Logging vs print vs exception&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been very confused about when I should simply print out information and when I should log out or when I should throw an exception.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You throw an exception in a library function so that the user of that function can catch the exception and show the end-user a meaningful error message. The end-user should never see a traceback.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Logging is meant for other systems or developers&lt;/strong&gt; who try to understand what happened to a system, whereas &lt;strong&gt;print is for the user&lt;/strong&gt;. The confusing part is that print messages go by default to the standard error. You can easily do the same with print. I&amp;rsquo;ve used it in the past to give the user feedback of what is currently happening, simply because logging had an easy way to include time stamps.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo by Esteban Lopez on Unsplash" src="https://cdn-images-1.medium.com/max/7744/0*nCSTE1Mg5o-lyMj1"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@exxteban?utm_source=medium&amp;amp;utm_medium=referral"&gt;Esteban Lopez&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="warningswarn-vs-loggingwarning"&gt;Warnings.warn vs logging.warning&lt;/h2&gt;
&lt;p&gt;According to &lt;a href="https://docs.python.org/3/howto/logging.html#when-to-use-logging"&gt;the official docs&lt;/a&gt;, you have two options when you want to issue a warning regarding a particular runtime event:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/warnings.html#warnings.warn"&gt;warnings.warn()&lt;/a&gt; in library code, if the issue is avoidable and the client application should be modified to eliminate the warning&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/logging.html#logging.warning"&gt;logging.warning()&lt;/a&gt; if there is nothing the client application can do about the situation, but the event should still be noted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A typical use-case for warnings is &lt;a href="https://docs.python.org/3/library/exceptions.html#DeprecationWarning"&gt;DeprecationWarning&lt;/a&gt; with which a library can tell its users to remove a certain type of usage. Or Scipy warning you that no BLAS library was found.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Too few log messages are bad, but too many can be problematic as well. Photo by Christa Dodoo on Unsplash" src="https://cdn-images-1.medium.com/max/8064/0*OmKMed1DyMeALh3k"/&gt;&lt;em&gt;Too few log messages are bad, but too many can be problematic as well. Photo by &lt;a href="https://unsplash.com/@krystagrusseck?utm_source=medium&amp;amp;utm_medium=referral"&gt;Christa Dodoo&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="what-should-i-log"&gt;What should I log?&lt;/h2&gt;
&lt;p&gt;I typically log code that takes long to execute pretty well, whereas I don&amp;rsquo;t add much logging to functions which are called super often and are fast. Most of the time there are initialization functions which load configuration. I always log the complete configuration but strip away credentials.&lt;/p&gt;
&lt;p&gt;I also log errors and rare exceptions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s hard to find the right balance. Too many log messages make it hard to find relevant information. To few messages might mean that you didn&amp;rsquo;t log the important information at all.&lt;/p&gt;
&lt;h2 id="best-practices"&gt;Best practices&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a common practice for applications to create a log.py or a logger.py file in which the logger is initiated, log handler, and formatters are added. &lt;a href="https://github.com/OpenShot/openshot-qt"&gt;OpenShot&lt;/a&gt; is doing it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo by Kristina Flour on Unsplash" src="https://cdn-images-1.medium.com/max/9640/0*-2fIUT_dAjXX0-2q"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@tinaflour?utm_source=medium&amp;amp;utm_medium=referral"&gt;Kristina Flour&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="silencing-loggers"&gt;Silencing loggers&lt;/h2&gt;
&lt;p&gt;A common cause of frustration is log messages from 3rd party software which spam your application. If they behave well, it is easy to silence them: Get the logger and set the level to something high:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"urllib3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t even want critical log records, you can set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"urllib3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To disable the child loggers as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Disable all child loggers of urllib3, e.g. urllib3.connectionpool&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"urllib3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propagate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also remove all handlers / add the &lt;a href="https://docs.python.org/3/library/logging.handlers.html#nullhandler"&gt;NullHandler&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="should-i-always-use-pythons-logging-library"&gt;Should I always use Pythons&amp;rsquo; logging library?&lt;/h2&gt;
&lt;p&gt;For sure not! Some scripts are so short that logging isn&amp;rsquo;t reasonable. Others, &lt;a href="https://github.com/pirate/ArchiveBox/issues/468#issuecomment-688489159"&gt;like ArchiveBox&lt;/a&gt;, implement their own specialized logging. And there are other logging libraries like &lt;a href="https://pypi.org/project/structlog"&gt;structlog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="more-information"&gt;More information&lt;/h2&gt;
&lt;p&gt;Similar information is available in an amazing PyCon talk by &lt;a href="undefined"&gt;Curtis Maloney&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;You can directly read the &lt;a href="https://docs.python.org/3/library/logging.html"&gt;documentation&lt;/a&gt; or the official &lt;a href="https://docs.python.org/3/howto/logging.html"&gt;logging howto&lt;/a&gt;. To me, &lt;a href="https://stackoverflow.com/questions/tagged/logging+python"&gt;reading StackOverflow&lt;/a&gt; is also often helpful.&lt;/p&gt;
&lt;p&gt;With those resources, I hope nobody has to struggle with Python logging again. If you still have questions, let me know (info@martin-thoma.de).&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Logging"></category></entry><entry><title>Pre-commit hooks</title><link href="https://martin-thoma.com/https://towardsdatascience.com/pre-commit-hooks-you-must-know-ff247f5feb7e" rel="alternate"></link><published>2020-09-04T20:00:00+02:00</published><updated>2020-09-04T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-09-04:/https://towardsdatascience.com/pre-commit-hooks-you-must-know-ff247f5feb7e</id><summary type="html">&lt;p&gt;pre-commit hooks are a mechanism of the version control system git. They let
you execute code right before the commit. Confusingly, there is also a Python
package called pre-commit which allows you to create and use pre-commit hooks
with a way simpler interface. The Python package has a plugin-system to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;pre-commit hooks are a mechanism of the version control system git. They let
you execute code right before the commit. Confusingly, there is also a Python
package called pre-commit which allows you to create and use pre-commit hooks
with a way simpler interface. The Python package has a plugin-system to create
git pre-commit hooks automatically. It&amp;rsquo;s not only for Python projects but for
any project.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know my favorite plugins for professional
software development. Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h2 id="pre-commit-basics"&gt;pre-commit basics&lt;/h2&gt;
&lt;p&gt;Install pre-commit via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pre-commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a .pre-commit-config.yaml file within your project. This file contains the pre-commit hooks you want to run every time before you commit. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trailing-whitespace&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mixed-line-ending&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/psf/black&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/psf/black)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;20.8b1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;black&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pre-commit will look in those two repositories with the specified git tags for a file called .pre-commit-hooks.yaml. Within that file can be arbitrary many hooks defined. They all need an id so that you can choose which ones you want to use. The above git-commit config would use 3 hooks.&lt;/p&gt;
&lt;p&gt;Finally, you need to run pre-commit install to tell pre-commit to always run for this repository.&lt;/p&gt;
&lt;p&gt;Before I used it, I was worried about losing control. I want to know exactly which changes I commit. pre-commit will abort the commit if it changes anything. So you can still have a look at the code and check if the changes are reasonable. You can also choose not to run pre-commit by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;--no-verify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/09/geek-and-poke-code-review.jpg"&gt;&lt;img alt="Image by geek-and-poke under CC-BY-3.0" src="../images/2020/09/geek-and-poke-code-review.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Image by &lt;a href="http://geek-and-poke.com/geekandpoke/2010/11/1/how-to-make-a-good-code-review.html"&gt;geek-and-poke&lt;/a&gt; under CC-BY-3.0&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="file-formatting"&gt;File formatting&lt;/h2&gt;
&lt;p&gt;Formatting files in a similar way helps readability by improving consistency
and keeps git commits clean. For example, you usually don&amp;rsquo;t want trailing
spaces. You want the text files to end with exactly one newline character so
that some of the Linux command-line tools behave well. You want consistent
newline characters between Linux (&lt;code&gt;\n&lt;/code&gt;), Mac (&lt;code&gt;\r&lt;/code&gt; &amp;mdash; &lt;a href="https://superuser.com/questions/439440/did-mac-os-lion-switch-to-using-line-feeds-lf-n-for-line-breaks-instead-of"&gt;Mac
changed&lt;/a&gt;
to &lt;code&gt;\n&lt;/code&gt; 🎉) and windows (&lt;code&gt;\r\n&lt;/code&gt;). My configuration for that is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# pre-commit run --all-files&lt;/span&gt;
&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-byte-order-marker&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Forbid UTF-8 byte-order markers&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Check for files with names that would conflict on a case-insensitive&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# filesystem like MacOS HFS+ or Windows FAT.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-case-conflict&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-json&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-yaml&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;end-of-file-fixer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trailing-whitespace&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mixed-line-ending&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/09/pre-commit-batman-slap.jpg"&gt;&lt;img alt="Created via imgflip.com by Martin Thoma" src="../images/2020/09/pre-commit-batman-slap.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Created via &lt;a href="https://imgflip.com/i/4dqpwf"&gt;imgflip.com&lt;/a&gt; by Martin Thoma&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="code-style"&gt;Code style&lt;/h2&gt;
&lt;p&gt;We can write code in a lot of different ways. Many of them show almost no
difference in runtime, but there are differences in readability.&lt;/p&gt;
&lt;h3 id="code-autoformatter"&gt;Code Autoformatter&lt;/h3&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/09/xkcd-code_quality_2x.png"&gt;&lt;img alt="When your code looks ugly, don&amp;rsquo;t waste your time with learning style guides and applying it by hand. Run a code formatter. Image by Randall Munroe (xkcd)" src="../images/2020/09/xkcd-code_quality_2x.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;When your code looks ugly, don&amp;rsquo;t waste your time with learning style guides and applying it by hand. Run a code formatter. Image by Randall Munroe (&lt;a href="https://xkcd.com/1513/"&gt;xkcd&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Automatic code formatting has the same advantages as the file formatting.
Additionally, it prevents meaningless discussions. Thus it lets you and your
team focus on the important and complicated parts.&lt;/p&gt;
&lt;p&gt;I love Pythons autoformatter black and mentioned it already in the article about &lt;a href="https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287"&gt;static code analysis&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/psf/black&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/psf/black)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;20.8b1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;black&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/asottile/blacken-docs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/asottile/blacken-docs)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1.8.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;blacken-docs&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;additional_dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;black==20.8b1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first one is black itself, the second one is a project which applies the
black formatting to code-strings within docstrings.&lt;/p&gt;
&lt;p&gt;Additionally, I want my imports to be sorted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/asottile/seed-isort-config&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/asottile/seed-isort-config)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v2.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;seed-isort-config&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/mirrors-isort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/mirrors-isort)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v5.4.2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;isort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are autoformatters with pre-commit hooks for many languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://prettier.io/docs/en/precommit.html#option-3-pre-commithttpsgithubcompre-commitpre-commit"&gt;Prettier&lt;/a&gt;: HTML, CSS, JavaScript, GraphQL, and many more.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andrewseidl/githook-clang-format"&gt;Clang-format&lt;/a&gt;: C, C++, Java, JavaScript, Objective-C, Protobuf, C#&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/doublify/pre-commit-rust"&gt;Rustfmt&lt;/a&gt;: Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="modern-python"&gt;Modern Python&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/asottile/pyupgrade"&gt;pyupgrade&lt;/a&gt; runs over your Python code and automatically changes old-style syntax to new-style syntax. Just have a look at some examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# -&amp;gt; {a: b for a, b in y}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# -&amp;gt; class C:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;  &lt;span class="c1"&gt;# -&amp;gt; from unittest.mock import patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do you want it? Here you are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/asottile/pyupgrade&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/asottile/pyupgrade)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v2.7.2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyupgrade&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;--py36-plus&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="testing-your-code_1"&gt;Testing your Code&lt;/h2&gt;
&lt;p&gt;I thought about running the unit tests automatically by pre-commit. I decided not to do that as this might take quite a while. However, there are some quick tests which are good to run automatically and every time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-ast&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Is it valid Python?&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Check for debugger imports and py37+ breakpoint() calls&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# in python source.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;debug-statements&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/mirrors-mypy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/mirrors-mypy)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v0.782&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mypy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;--ignore-missing-imports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//gitlab.com/pycqa/flake8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://gitlab.com/pycqa/flake8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'3.8.3'&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;flake8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="security"&gt;Security&lt;/h2&gt;
&lt;p&gt;Checking in credentials is a pretty common mistake. Here is how you prevent it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-aws-credentials&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-private-key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="miscellaneous-pre-commit-hooks"&gt;Miscellaneous pre-commit hooks&lt;/h2&gt;
&lt;p&gt;Some hooks don&amp;rsquo;t fit in the above categories but are still useful. For example, this one prevents big files from being committed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-added-large-files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="working-in-a-team"&gt;Working in a Team&lt;/h2&gt;
&lt;p&gt;The pre-commit hooks are installed locally and thus every developer could
decide on their own if they want pre-commit hooks and which ones. However, I
think it is helpful to provide a .pre-commit-config.yaml with plugins you
recommend to execute.&lt;/p&gt;
&lt;h2 id="all-the-hooks"&gt;All the hooks!&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re looking for a complete .pre-commit-config.yaml ready to use, here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Apply to all files without commiting:&lt;/span&gt;
&lt;span class="c1"&gt;#   pre-commit run --all-files&lt;/span&gt;
&lt;span class="c1"&gt;# Update this file:&lt;/span&gt;
&lt;span class="c1"&gt;#   pre-commit autoupdate&lt;/span&gt;
&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/pre-commit-hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/pre-commit-hooks)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-ast&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-byte-order-marker&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-case-conflict&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-docstring-first&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-executables-have-shebangs&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-json&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;check-yaml&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;debug-statements&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-aws-credentials&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;detect-private-key&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;end-of-file-fixer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trailing-whitespace&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mixed-line-ending&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/mirrors-mypy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/mirrors-mypy)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v0.782&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mypy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;--ignore-missing-imports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/asottile/seed-isort-config&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/asottile/seed-isort-config)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v2.2.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;seed-isort-config&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/pre-commit/mirrors-isort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/pre-commit/mirrors-isort)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v5.4.2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;isort&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/psf/black&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/psf/black)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;20.8b1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;black&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/asottile/pyupgrade&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/asottile/pyupgrade)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v2.7.2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyupgrade&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;--py36-plus&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//github.com/asottile/blacken-docs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(https://github.com/asottile/blacken-docs)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1.8.0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;blacken-docs&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;additional_dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;black==20.8b1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;I love pre-commit as it fits so well in my workflow. I just commit as usual and
pre-commit does all the checks which I sometimes forget. It speeds up
development because the CI/CD pipeline is just way slower than executing the
same steps locally. Especially for linting, it&amp;rsquo;s an enormous time-saver to
quickly run black over the code instead of committing, waiting for the CI/CD
pipeline, finding an error, fixing that error locally, pushing, and waiting
again for the CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;Please let me know as a comment or email (info@martin-thoma.de) if there are
other pre-commit hooks you like!&lt;/p&gt;</content><category term="Code"></category><category term="Software Development"></category><category term="Python"></category><category term="git"></category></entry><entry><title>Pytest Plugins to Love ❤️</title><link href="https://martin-thoma.com/https://towardsdatascience.com/pytest-plugins-to-love-%EF%B8%8F-9c71635fbe22" rel="alternate"></link><published>2020-08-23T20:00:00+02:00</published><updated>2020-08-23T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-08-23:/https://towardsdatascience.com/pytest-plugins-to-love-%EF%B8%8F-9c71635fbe22</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-sugar-big.png"&gt;&lt;img alt="Plugins can modify and extend a lot of aspects of pylint, including how the output is done" src="../images/2020/08/pytest-sugar-big.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Plugins can modify and extend a lot of aspects of pylint, including how the output is done&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pytest is extensible and has plenty of plugins. You don&amp;rsquo;t need to use any of
them, but you might find some very useful. I love this because you have an easy
time …&lt;/p&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-sugar-big.png"&gt;&lt;img alt="Plugins can modify and extend a lot of aspects of pylint, including how the output is done" src="../images/2020/08/pytest-sugar-big.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Plugins can modify and extend a lot of aspects of pylint, including how the output is done&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pytest is extensible and has plenty of plugins. You don&amp;rsquo;t need to use any of
them, but you might find some very useful. I love this because you have an easy
time to &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;get started with unit
testing&lt;/a&gt;,
while still finding amazing stuff when you&amp;rsquo;re more experienced 🤩&lt;/p&gt;
&lt;p&gt;In this article, I&amp;rsquo;ll show you examples of plugins I use and the plugins I
found while writing this article. You might want to cover the &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;basics of unit
testing&lt;/a&gt;
first or refresh &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923"&gt;testing details like
fixtures&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-can-i-add-a-plugin"&gt;How can I add a plugin?&lt;/h2&gt;
&lt;p&gt;All plugins presented in this article can be installed via &lt;code&gt;pip&lt;/code&gt;. Most of them
are then already active. For example, when you install pytest-sugar via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pytest-sugar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can just execute pytest and the plugin will automatically work. Others need
to be used more directly. For example, after installing &lt;code&gt;pytest-timeout&lt;/code&gt; you
need to specify the timeout parameter you want to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--timeout&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don&amp;rsquo;t worry, I will explain those two plugins later 🙂&lt;/p&gt;
&lt;h2 id="how-many-pytest-plugins-exist"&gt;How many Pytest plugins exist?&lt;/h2&gt;
&lt;p&gt;Searching on pypi.org for the trove classifier &lt;code&gt;Framework :: Pytest&lt;/code&gt;, I found
668 packages. A stunning 1053 packages have &amp;ldquo;pytest&amp;rdquo; in the name. 461 packages
have both, the name and the trove classifier.&lt;/p&gt;
&lt;p&gt;I went through over 700 pytest-plugins for this article. I&amp;rsquo;ve jumped over
plugins that consider themselves to be in planning, pre-alpha, or alpha stage.
I&amp;rsquo;ve also skipped packages where I&amp;rsquo;ve seen a TODO in the readme or if the
package had less than 10 stars on GitHub.&lt;/p&gt;
&lt;p&gt;The packages I&amp;rsquo;ve found make pytest sparkle ✨, improve the speed 🏎, are
specialized to specific packages, or just unique in their behavior ❄️&lt;/p&gt;
&lt;p&gt;Last but not least, there are some plugins where I&amp;rsquo;m not sure if they are
awesome or if they are a bad idea. Let&amp;rsquo;s jump right into it and have a look
yourself!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: Maybe you remember my &lt;a href="https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287#9026"&gt;side note on typo squatting&lt;/a&gt;? I found a &lt;a href="https://github.com/pypa/warehouse/issues/8462"&gt;fixable issue on PyPI&lt;/a&gt; while writing this article, hopefully improving security for the community🎉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-shiny-ones"&gt;The shiny ones&lt;/h2&gt;
&lt;p&gt;The default output of pytest is already good, but some plugins make it amazing.
&lt;a href="https://github.com/Teemu/pytest-sugar"&gt;pytest-sugar&lt;/a&gt; is one of those plugins❤&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-sugar.png"&gt;&lt;img alt="Pytest sugar changes the dots to checkmarks and the percentage to a bar." src="../images/2020/08/pytest-sugar.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Pytest sugar changes the dots to checkmarks and the percentage to a bar.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If those dots or checkmarks are too decent for you,
give &lt;a href="https://pypi.org/project/pytest-emoji/"&gt;pytest-emoji&lt;/a&gt; and
&lt;a href="https://pypi.org/project/pytest-emoji-output/"&gt;pytest-emoji-out&lt;/a&gt; a try 😃&lt;/p&gt;
&lt;p&gt;The summary output now looks good, but the diffs between the expected value and
the actual value can be improved.
&lt;a href="https://pypi.org/project/pytest-icdiff/"&gt;pytest-icdiff&lt;/a&gt; is a plugin I&amp;rsquo;ve only
found while researching this article &amp;mdash; and it was love at first sight 🥰❤&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-error-message-normal-vs-icdiff.png"&gt;&lt;img alt="Normal pytest output vs pytest-icdiff" src="../images/2020/08/pytest-error-message-normal-vs-icdiff.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Normal pytest output vs pytest-icdiff&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Very similar is &lt;a href="https://pypi.org/project/pytest-clarity/"&gt;pytest-clarity&lt;/a&gt; &amp;mdash; be aware, that pytest-clarity is only active when you execute pytest -vv:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-error-message-normal-vs-clarity.png"&gt;&lt;img alt="Comparison of the normal output with pytest-clarity" src="../images/2020/08/pytest-error-message-normal-vs-clarity.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Comparison of the normal output with pytest-clarity&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once you're happy with the terminal output, you might think about getting
reports in the browser. This could help once you have to have a look at many
things, want to scroll and search. Then
&lt;a href="https://pypi.org/project/pytest-html/"&gt;pytest-html&lt;/a&gt; is your friend. It
generates reports like this one:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-html.png"&gt;&lt;img alt="Output of pytest-html" src="../images/2020/08/pytest-html.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Output of pytest-html&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now that we are happy with the output, we want to make it lightning fast!&lt;/p&gt;
&lt;h2 id="we-need-speed"&gt;We need speed!&lt;/h2&gt;
&lt;p&gt;Plugins can speed things up. For example, you can make pytest fail instantly
with &lt;a href="https://pypi.org/project/pytest-instafail/"&gt;&lt;code&gt;pytest-instafail&lt;/code&gt;&lt;/a&gt; instead of
executing all remaining tests. For tests which might take a long time or even
result in an infinite loop in case of errors, I use
&lt;a href="https://pypi.org/project/pytest-timeout/"&gt;&lt;code&gt;pytest-timeout&lt;/code&gt;&lt;/a&gt; ❤. That is
especially helpful when you apply &lt;a href="https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8"&gt;Mutation
testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also want to use our machine properly by using
&lt;a href="https://pypi.org/project/pytest-xdist/"&gt;&lt;code&gt;pytest-xdist&lt;/code&gt;&lt;/a&gt;. Install it, execute
&lt;code&gt;pytest -n auto&lt;/code&gt; and your tests run in parallel!
&lt;a href="https://pypi.org/project/pytest-parallel/"&gt;&lt;code&gt;pytest-parallel&lt;/code&gt;&lt;/a&gt; might also be
worth a shot.&lt;/p&gt;
&lt;p&gt;The most extreme speedup is not to execute stuff you don&amp;rsquo;t need.
&lt;a href="https://github.com/anapaulagomes/pytest-picked"&gt;&lt;code&gt;pytest-picked&lt;/code&gt;&lt;/a&gt; executes tests
that are related to unstaged files which can be way less than your complete
test suite.&lt;/p&gt;
&lt;p&gt;Going in a different direction, we want to make sure that the algorithms have
some speed behavior. With
&lt;a href="https://pypi.org/project/pytest-benchmark/"&gt;&lt;code&gt;pytest-benchmark&lt;/code&gt;&lt;/a&gt;, we can use
the benchmark fixture to annotate parts of a test which we want to benchmark:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;benchmark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running pytest then also gives this output, where you can see three functions
to which I&amp;rsquo;ve added a benchmark. Two of them test a factorization function. It
should not be a surprise that factorizing 3072 takes longer than factorizing
1024, but it is always astonishing to me how quickly the numbers grow. The
argmax of 3 examples is super quick, but factorization just needs way more
computation:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-benchmark.png"&gt;&lt;img alt="Minimum, Mean and Maximum execution time, as well as the standard deviation and the interquartile range, give you some insights into the execution time distribution" src="../images/2020/08/pytest-benchmark.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Minimum, Mean and Maximum execution time, as well as the standard deviation and the interquartile range, give you some insights into the execution time distribution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="the-unique-ones"&gt;The unique ones&lt;/h2&gt;
&lt;p&gt;Some plugins are unique and don&amp;rsquo;t fit in any of the other categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-cov"&gt;pytest-cov&lt;/a&gt; : Get a test coverage
  report 😍 ❤ I like to generate both, an HTML report and an output to the
  terminal. In some settings, an XML report is also helpful.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-socket/"&gt;pytest-socket&lt;/a&gt; : Make certain that
  you don&amp;rsquo;t query anything non-local. Very nice ❤&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-randomly"&gt;pytest-randomly&lt;/a&gt; and
  &lt;a href="https://pypi.org/project/pytest-rng/"&gt;pytest-rng&lt;/a&gt;: If you use
  &lt;code&gt;random.random&lt;/code&gt;, then the outcome depends on the random seed. This plugin
  changes the seed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-random-order/"&gt;pytest-random-order&lt;/a&gt; :
  Execute the tests in a random order, to make sure you see when a test leaves
  the system in a different state.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-lazy-fixture/"&gt;pytest-lazy-fixtures&lt;/a&gt; : Use
  fixtures in &lt;code&gt;@pytest.mark.parametrize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-freezegun/"&gt;pytest-freezegun&lt;/a&gt; : Freeze time!
  This is one I&amp;rsquo;ve also mentioned in &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;my patching
  article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-leaks/"&gt;pytest-leaks&lt;/a&gt; : Find resource leaks.
  This requires a debug-built of Python!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tholo/pytest-flake8"&gt;pytest-flake8&lt;/a&gt; : Run flake8 via
  pytest. I did that for a long time, but when I learned
  &lt;a href="https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38"&gt;how to use Continuous Integration pipelines&lt;/a&gt;
  more effectively, I stopped it. You can still execute flake8 directly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-mypy/"&gt;pytest-mypy&lt;/a&gt; and pytest-mccabe: Same
  story as for flake8. By the way, &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations are
  awesome&lt;/a&gt;!
  I like to have those &lt;a href="https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287"&gt;static code analysis
  tools&lt;/a&gt;
  in a linter step within the CI pipeline.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-deadfixtures/"&gt;pytest-deadfixtures&lt;/a&gt; : Point
  out which fixtures are not used or duplicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="17-specialized-plugins-youll-know-if-you-need-them"&gt;17 Specialized Plugins &amp;mdash; You&amp;rsquo;ll know if you need them&lt;/h2&gt;
&lt;p&gt;The following plugins are only interesting to you if you work with the applications for which they are written. They usually provide fixtures/mocks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-cookies/"&gt;pytest-cookie&lt;/a&gt; : Supports testing
  of &lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;cookiecutter&lt;/a&gt; templates.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-plt/"&gt;pytest-plt&lt;/a&gt; and
  &lt;a href="https://pypi.org/project/pytest-mpl/"&gt;pytest-mpl&lt;/a&gt;: Provides fixtures for
  matplotlib.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-responses/"&gt;pytest-responses&lt;/a&gt; : Provides
  fixtures for &lt;a href="https://requests.readthedocs.io/en/master/"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-asyncio/"&gt;pytest-asyncio&lt;/a&gt; : Use it when you
  develop async functions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-qt/"&gt;pytest-qt&lt;/a&gt; : GUI development via Qt /
  PySide / PySide2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web-development"&gt;Web Development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-djangoapp/"&gt;pytest-djangoapp&lt;/a&gt; /
  &lt;a href="https://pypi.org/project/pytest-django-queries/"&gt;pytest-djangoqueries&lt;/a&gt;:
  Exposes tools for Django application developers to facilitate test authoring,
  including settings override, template tag testing, and user creation.&lt;/li&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="https://pypi.org/project/pytest-flask/"&gt;pytest-flask&lt;/a&gt; and&lt;/dt&gt;
&lt;dt&gt;&lt;a href="https://pypi.org/project/pytest-flask-sqlalchemy/"&gt;pytest-flask-sqlalchemy&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Provides fixtures for running tests in transactions using Flask-SQLAlchemy.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-seleniumbase/"&gt;pytest-seleniumbase&lt;/a&gt; /
  &lt;a href="https://pypi.org/project/pytest-sbase/"&gt;pytest-sbase&lt;/a&gt; /
  &lt;a href="https://pypi.org/project/pytest-selenium/"&gt;pytest-selenium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mocks-and-fixtures-for-aws"&gt;Mocks and Fixtures for AWS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/moto/"&gt;moto&lt;/a&gt; : Mocks for boto3 &amp;mdash; AWS stuff. I don&amp;rsquo;t
  exactly love this one, but it is for sure the best you can do when you want
  to test code that uses S3.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-aws/"&gt;pytest-aws&lt;/a&gt; : Testing AWS resource
  configurations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-lambda/"&gt;pytest-lambda&lt;/a&gt; : Fixtures for AWS Lambda&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-localstack/"&gt;pytest-localstack&lt;/a&gt; : Create AWS
  integration tests via a Localstack Docker container&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="plugins-im-uncertain-about_1"&gt;Plugins I&amp;rsquo;m uncertain about&lt;/h2&gt;
&lt;p&gt;The following plugins sounded cool for me when I first read about them, but for
various reasons, I&amp;rsquo;m uncertain if they are really a good idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/okken/pytest-check"&gt;pytest-check&lt;/a&gt; : Allows multiple
  failures per test. At first, I loved the idea. Then I realized that this
  might lead to worse tests as the tests start to do many things. On the other
  hand, you might want to test a &amp;ldquo;workflow&amp;rdquo; once &amp;mdash; so not a unit test, but an
  integration test or even an end-to-end test. But then you would also need
  intermediate results.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest_docker_tools/"&gt;pytest-docker-tools&lt;/a&gt; and
  &lt;a href="https://github.com/pytest-docker-compose/pytest-docker-compose"&gt;pytest-docker-compose&lt;/a&gt;:
  I would just build the Docker image and execute the stuff in it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-mock/"&gt;pytest-mock&lt;/a&gt; : Provides a mocker
  fixture which is a thin wrapper around the patching API provided by the mock
  package.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-spec/"&gt;&lt;code&gt;pytest-spec&lt;/code&gt;&lt;/a&gt;,
  &lt;a href="https://pypi.org/project/pytest-pspec/"&gt;&lt;code&gt;pytest-pspec&lt;/code&gt;&lt;/a&gt;, and
  &lt;a href="https://pypi.org/project/pytest-testdox/"&gt;pytest-testdox&lt;/a&gt; modify the pytest
  output. They show what is tested. The tests should be written in such a way
  that they represent the software specification &amp;mdash; so the test is against a
  part of the specification.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-recording/"&gt;pytest-recording&lt;/a&gt; : It should
  record network interactions via VCR.py, but I didn&amp;rsquo;t get it to work.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RKrahl/pytest-dependency"&gt;pytest-dependency&lt;/a&gt; allows you
  to specify which tests need to succeed for others to be able to succeed. Unit
  tests should be independent and dependent code should be mocked&amp;hellip;maybe. I&amp;rsquo;m
  not certain about that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;pytest is the tool of choice to run tests in Python. While it has reasonable
defaults, it&amp;rsquo;s extensive plugin system lets you customize it to make it even
better.&lt;/p&gt;
&lt;p&gt;I love &lt;a href="https://github.com/Teemu/pytest-sugar"&gt;&lt;code&gt;pytest-sugar&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://pypi.org/project/pytest-icdiff/"&gt;&lt;code&gt;pytest-icdiff&lt;/code&gt;&lt;/a&gt;, because they make
the output of pytest easier to read.
&lt;a href="https://pypi.org/project/pytest-cov/"&gt;&lt;code&gt;pytest-cov&lt;/code&gt;&lt;/a&gt; generates line- and branch
coverage and thus is a valuable tool to find spots that need better tests. The
next step is to run the tests. You really don&amp;rsquo;t want to accidentally hit the
production environment. This is where
&lt;a href="https://pypi.org/project/pytest-socket/"&gt;&lt;code&gt;pytest-socket&lt;/code&gt;&lt;/a&gt; comes into play. It
just blocks everything and reports it to you. The other type of issue are
long-running tests that are potentially in infinite loops.pytest-timeout kills
those tests after the specified amount of time.&lt;/p&gt;
&lt;p&gt;There are so many other plugins; many add fixtures for specific packages which
are typically hard to test. You should now have a good idea of the many
possibilities added by pytest plugins &amp;mdash; use them!&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="pytest"></category></entry><entry><title>How I moved a library from Python 2 to 3</title><link href="https://martin-thoma.com/https://towardsdatascience.com/how-i-moved-a-library-from-python-2-to-3-60fc2b2a21a1" rel="alternate"></link><published>2020-08-20T20:00:00+02:00</published><updated>2020-08-20T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-08-20:/https://towardsdatascience.com/how-i-moved-a-library-from-python-2-to-3-60fc2b2a21a1</id><summary type="html">&lt;p&gt;&lt;img alt="Image by skylarvision from needpix.com" src="https://cdn-images-1.medium.com/max/2560/1*uvS55XJ3-uUny7j1cgye6g.jpeg"/&gt;&lt;em&gt;Image by &lt;a href="https://www.needpix.com/photo/download/1179523/phoenix-photoshop-adler-fire-eagle-digital-art-feuervogel-photoshop-composition-free-pictures"&gt;skylarvision from needpix.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last year I&amp;rsquo;ve given a workshop about packaging Python projects. One of the participants was a bioinformatics researcher. She needed advice because she wanted to switch from Python 2 to Python 3, but a library she needed was only available for Python 2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Image by skylarvision from needpix.com" src="https://cdn-images-1.medium.com/max/2560/1*uvS55XJ3-uUny7j1cgye6g.jpeg"/&gt;&lt;em&gt;Image by &lt;a href="https://www.needpix.com/photo/download/1179523/phoenix-photoshop-adler-fire-eagle-digital-art-feuervogel-photoshop-composition-free-pictures"&gt;skylarvision from needpix.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last year I&amp;rsquo;ve given a workshop about packaging Python projects. One of the participants was a bioinformatics researcher. She needed advice because she wanted to switch from Python 2 to Python 3, but a library she needed was only available for Python 2. Moving the library to Python 3 was pretty interesting and I&amp;rsquo;ll share here how I did it &amp;mdash; or rather how I would do it if I had the same situation again.&lt;/p&gt;
&lt;h2 id="local-setup"&gt;Local Setup&lt;/h2&gt;
&lt;p&gt;Make sure you can execute Python 2 and Python 3 locally. I like &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; for that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.18
$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.5
$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.5
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can &lt;a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-python.html#installing-a-different-version-of-python"&gt;use conda to switch between Python 2 and 3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="general-project-setup"&gt;General project setup&lt;/h2&gt;
&lt;p&gt;The project should be under &lt;strong&gt;version control&lt;/strong&gt; and you need to make sure that people can move back if they need to. You need to &lt;strong&gt;pin direct and transitive dependencies&lt;/strong&gt;. You should have a &lt;strong&gt;reproducible environment&lt;/strong&gt;, such as a &lt;a href="https://makeitnew.io/docker-ab1a6bddf389"&gt;Docker container&lt;/a&gt; with a fixed Python version like 2.7.18-slim-buster. Add a &lt;strong&gt;git tag&lt;/strong&gt; for the current version, deploy the latest one to pypi, and support your users in pinning that version.&lt;/p&gt;
&lt;p&gt;Make sure that you document the current state of the migration to Python 3. Typically this is done via an issue tracker, e.g. the builtin one of Github or Jira.&lt;/p&gt;
&lt;p&gt;First make sure that you can execute the tests, that the test coverage is OK (see &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;unit testing series&lt;/a&gt;) and that the general style is OK (see lining todo). Set up a &lt;a href="https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38"&gt;CI / CD pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="print-statements"&gt;Print statements&lt;/h2&gt;
&lt;p&gt;In Python 2, you could write print statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python 3, you have to write print functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Luckily, you can also have print functions in Python 2. And confusingly, it does not behave the same way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;py2&amp;gt;&amp;gt;&amp;gt; print(1, 2, 3)
(1, 2, 3)
py3&amp;gt;&amp;gt;&amp;gt; print(1, 2, 3)
1 2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to import the backported print function to make the Python 2 function behave like the Python 3 function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;py2&amp;gt;&amp;gt;&amp;gt; from __future__ import print_function
py2&amp;gt;&amp;gt;&amp;gt; print(1, 2, 3)
1 2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that I didn&amp;rsquo;t use the print_function &amp;mdash; I just imported it.&lt;/p&gt;
&lt;p&gt;Applying this small change is tedious, but you can use &lt;a href="https://docs.python.org/3.8/library/2to3.html"&gt;2to3&lt;/a&gt; to do it for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;2to3
$&lt;span class="w"&gt; &lt;/span&gt;2to3&lt;span class="w"&gt; &lt;/span&gt;--fix&lt;span class="o"&gt;=&lt;/span&gt;print&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="keeping-python-2-compatibility"&gt;Keeping Python 2 Compatibility&lt;/h2&gt;
&lt;p&gt;You should have a version that works for Python 2 and Python 3 in exactly the same way for a while. For bigger projects with lots of dependencies, it&amp;rsquo;s a big help if they can move gradually forward.&lt;/p&gt;
&lt;p&gt;Python 3 moved/renamed parts of the standard library. This breaks compatibility with Python 2. However, the workaround is simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;urllib.parse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;urllib.request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;urlparse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;urllib2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even nicer is the compatibility library six:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;six
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;six&lt;/code&gt; can then be used like this in both, Python 2 and Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;from&lt;span class="w"&gt; &lt;/span&gt;six.moves.urllib.parse&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;urlparse,&lt;span class="w"&gt; &lt;/span&gt;urlencode
from&lt;span class="w"&gt; &lt;/span&gt;six.moves.urllib.request&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;urlopen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you write code only to keep the support for older versions, make sure you
add a string that is easy to find. Something like &amp;ldquo;support for Python 2&amp;rdquo;&lt;/p&gt;
&lt;h2 id="iterators"&gt;Iterators&lt;/h2&gt;
&lt;p&gt;Python 2 creates a list when you call &lt;code&gt;range(10)&lt;/code&gt; whereas Python 3 creates a
range object for the same code. In some rare cases, you actually need the list
and thus need to change it to &lt;code&gt;list(range(10))&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="input-and-raw_input"&gt;input and raw_input&lt;/h2&gt;
&lt;p&gt;Python 2 has &lt;a href="https://docs.python.org/2/library/functions.html#input"&gt;input&lt;/a&gt; and &lt;a href="https://docs.python.org/2/library/functions.html#raw_input"&gt;raw_input&lt;/a&gt; , but Python 3 only has &lt;a href="https://docs.python.org/3/library/functions.html#input"&gt;input&lt;/a&gt;. The raw_input of Python 2 is like the input of Python 3.&lt;/p&gt;
&lt;h2 id="division-and-rounding"&gt;Division and Rounding&lt;/h2&gt;
&lt;p&gt;If you apply / to two integers, Python 2 gives you an integer division. Python 3 gives you a float as a result. You can still do integer division with // which works in both, Python 2 and 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 1 / 2
# Python 2: 0 vs Python 3: 0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rounding behavior at x.5 also changed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/functions.html#round"&gt;Python 2&lt;/a&gt;: if two multiples are equally close, rounding is done away from 0&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/functions.html#round"&gt;Python 3&lt;/a&gt;: if two multiples are equally close, rounding is done toward the even choice&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; round(2.4)
# Python 2: 2.0 vs Python 3: 2

&amp;gt;&amp;gt;&amp;gt; round(2.5)
# Python 2: 3.0 vs Python 3: 2

&amp;gt;&amp;gt;&amp;gt; round(2.6)
# Python 2: 3.0 vs Python 3: 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are ways to get the &lt;a href="https://stackoverflow.com/q/21839140/562769"&gt;same rounding behavior in Python 2 and 3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="unicode-and-strings"&gt;Unicode and Strings&lt;/h2&gt;
&lt;p&gt;Unicode was a big pain in Python 2 and got a lot simpler in Python 3. Unicode support was only added later to Python 2. In Python 2, there was a difference between a Unicode string and a string. Essentially, a string was a bytes object containing ASCII:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = u"abc"
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'unicode'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = "abc"
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type 'str'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; c = b"abc"
&amp;gt;&amp;gt;&amp;gt; type(c)
&amp;lt;type 'str'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; ord('&amp;ouml;')
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: ord() expected a character, but string of length 2 found

&amp;gt;&amp;gt;&amp;gt; '&amp;uuml;'[0]
'\xc3'
&amp;gt;&amp;gt;&amp;gt; '&amp;uuml;'[1]
'\xbc'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python 3, it&amp;rsquo;s the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = u"abc"
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;class 'str'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = "abc"
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;class 'str'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; c = b"abc"
&amp;gt;&amp;gt;&amp;gt; type(c)
&amp;lt;class 'bytes'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; ord('&amp;ouml;')
246

&amp;gt;&amp;gt;&amp;gt; '&amp;uuml;'[0]
'&amp;uuml;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could write a lot about Unicode and string representations, but to keep it
brief:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2 u"somethin" is the same as Python 3 "something" or u"something"&lt;/li&gt;
&lt;li&gt;I would not use from &lt;code&gt;__future__ import unicode_literals&lt;/code&gt;. You might want to
  &lt;a href="https://python-future.org/unicode_literals.html"&gt;read more about
  unicode_literals&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/26079392/562769"&gt;How is unicode represented internally in Python?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pure-python-and-universal-wheels"&gt;Pure Python and Universal Wheels&lt;/h2&gt;
&lt;p&gt;A wheel file is a form of distributing Python code. Python code is considered
&lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#pure-python-wheels"&gt;pure&lt;/a&gt;
if it does not have C extensions. If pure Python code is compatible with Python
2 and Python 3 and distributed via a wheel file, that file is called
&lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#universal-wheels"&gt;universal&lt;/a&gt;.
It should work on every machine with every Python version.&lt;/p&gt;
&lt;p&gt;You should always distribute your code in form of a source distribution and a
wheel distribution. If you can, try to create and publish one universal wheel.&lt;/p&gt;
&lt;h2 id="create-a-version-support-policy"&gt;Create a version support policy&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Sebastian Herrmann on Unsplash" src="https://cdn-images-1.medium.com/max/10162/0*npT3ah8HnHtz1Mq-"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@officestock?utm_source=medium&amp;amp;utm_medium=referral"&gt;Sebastian Herrmann&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Library creators need to decide which Python versions they want to support.
Newer versions of Python have killer features you want to have and supporting
all versions takes a lot of time. Make it transparent which versions you want
to support and when you want to drop the support. It&amp;rsquo;s best to link this to
bigger projects, e.g. the last 3 major Python versions.&lt;/p&gt;
&lt;p&gt;You should also know that the Python release cycle was changed in &lt;a href="https://www.python.org/dev/peps/pep-0602/"&gt;PEP-602&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="remove-python-2-compatibility"&gt;Remove Python 2 Compatibility&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by JESHOOTS.COM on Unsplash" src="https://cdn-images-1.medium.com/max/8400/0*TnzggyB55C5IxhvW"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@jeshoots?utm_source=medium&amp;amp;utm_medium=referral"&gt;JESHOOTS.COM&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Supporting Python 2 means you need to add additional code and likely that you
cannot use some of the killer features of newer Python versions.&lt;/p&gt;
&lt;p&gt;When you remove the support for a Python version, do it in one git commit so that the change is clear. Search for that string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-rnI&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"support for Python 2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="use-the-new-stuff"&gt;Use the new stuff!&lt;/h2&gt;
&lt;p&gt;Python 3 has some super cool features you should use when you can. Migrating to Python 3 opens up a whole new world: &lt;a href="https://medium.com/python-in-plain-english/killer-features-by-python-version-c84ca12dba8"&gt;Killer Features by Python Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/asottile/pyupgrade"&gt;pyupgrade&lt;/a&gt; can help you to use new-style syntax, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# -&amp;gt; {a: b for a, b in y}&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# -&amp;gt; '{} {}'.format(a, b)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s not strictly necessary to do this, but it makes your code more modern and easier to read.&lt;/p&gt;
&lt;h2 id="forking-the-project"&gt;Forking the project&lt;/h2&gt;
&lt;p&gt;I was pretty lucky that the maintainers of propy were welcoming the changes. However, with free software, you are not bound by the maintainers&amp;rsquo; support. You can simply create a so-called &lt;em&gt;fork&lt;/em&gt;: A copy of the original project which you control.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Scipy has over 3000 forks. Screenshot of Github by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*hCKfGX5UaIlATzolHLc5oA.png"/&gt;&lt;em&gt;Scipy has over 3000 forks. Screenshot of Github by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Forking happens all the time with free software. It&amp;rsquo;s also a mode of development, where independent developers make changes in their copy (their fork) and create a merge request (Github calls this a pull request (PR)).&lt;/p&gt;
&lt;p&gt;You can also upload your fork to pypi, but please only do this if you want to maintain that fork and continue the independent development.&lt;/p&gt;
&lt;h2 id="metaclasses"&gt;Metaclasses&lt;/h2&gt;
&lt;p&gt;There are topics like metaclasses and exception scopes which I haven&amp;rsquo;t covered. If you need that, I recommend this tutorial by Mike M&amp;uuml;ller:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/JgIgEjASOlk" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="undefined"&gt;Anders Hovm&amp;ouml;ller&lt;/a&gt; also wrote an interesting article about this topic. Check his &amp;ldquo;surprises in production&amp;rdquo; section:
&lt;a href="https://medium.com/@boxed/moving-a-large-and-old-codebase-to-python3-33a5a13f8c99"&gt;Moving a large and old codebase to Python3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tldr-how-do-i-move-from-python-2-to-python-3"&gt;TL;DR: How do I move from Python 2 to Python 3?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Get a professional Python 2 setup&lt;/li&gt;
&lt;li&gt;Move to a state where your codebase supports Python 2 and Python 3&lt;/li&gt;
&lt;li&gt;Let it run for a while, make sure it works&lt;/li&gt;
&lt;li&gt;Remove Python 2 support&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="related-resources"&gt;Related Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mike M&amp;uuml;ller: &lt;a href="https://www.youtube.com/watch?v=JgIgEjASOlk"&gt;Migration from Python 2 to 3&lt;/a&gt;, at PyCon US2020.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/archive/p/protpy/downloads"&gt;protpy&lt;/a&gt; was the library I moved. I created &lt;a href="https://github.com/MartinThoma/propy3"&gt;propy3&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Static Code Analysis for Python</title><link href="https://martin-thoma.com/https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287" rel="alternate"></link><published>2020-08-17T20:00:00+02:00</published><updated>2020-08-17T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-08-17:/https://towardsdatascience.com/static-code-analysis-for-python-bdce10b8d287</id><summary type="html">&lt;p&gt;Static code analysis looks at the code without executing it. It is usually extremely fast to execute, requires little effort to add to your workflow, and can uncover common mistakes. The only downside is that it is not tailored towards your code.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Static code analysis looks at the code without executing it. It is usually extremely fast to execute, requires little effort to add to your workflow, and can uncover common mistakes. The only downside is that it is not tailored towards your code.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to perform various types of static code analysis in Python. While the article focuses on Python, the types of analysis can be done in any programming language.&lt;/p&gt;
&lt;h2 id="code-complexity"&gt;Code Complexity&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by John Barkiple on Unsplash" src="https://cdn-images-1.medium.com/max/10368/0*hpBpO29k15vDdmHJ"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@barkiple?utm_source=medium&amp;amp;utm_medium=referral"&gt;John Barkiple&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One way to measure code complexity is the &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt;, also called McCabe complexity as defined in &lt;a href="https://books.google.de/books?id=vtNWAAAAMAAJ&amp;amp;pg=PA3&amp;amp;redir_esc=y"&gt;A Complexity Measure&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;$$CC = E - N + 2 \cdot P$$&lt;/p&gt;
&lt;p&gt;where N is the number of nodes in the control flow graph, E is the number of edges and P is the number of condition-nodes (if-statements, while/for loops).&lt;/p&gt;
&lt;p&gt;You can calculate it in Python with &lt;a href="https://pypi.org/project/radon/"&gt;radon&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;radon
$&lt;span class="w"&gt; &lt;/span&gt;radon&lt;span class="w"&gt; &lt;/span&gt;cc&lt;span class="w"&gt; &lt;/span&gt;mpu/aws.py&lt;span class="w"&gt; &lt;/span&gt;-s
mpu/aws.py
&lt;span class="w"&gt;    &lt;/span&gt;F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;85&lt;/span&gt;:0&lt;span class="w"&gt; &lt;/span&gt;s3_download&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;B&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:0&lt;span class="w"&gt; &lt;/span&gt;list_files&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;165&lt;/span&gt;:0&lt;span class="w"&gt; &lt;/span&gt;_s3_path_split&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;:0&lt;span class="w"&gt; &lt;/span&gt;s3_read&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;141&lt;/span&gt;:0&lt;span class="w"&gt; &lt;/span&gt;s3_upload&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;C&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;77&lt;/span&gt;:0&lt;span class="w"&gt; &lt;/span&gt;ExistsStrategy&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first letter shows the &lt;strong&gt;type of block&lt;/strong&gt; (F for function, C for class). Then radon gives the &lt;strong&gt;line number&lt;/strong&gt;, the &lt;strong&gt;name&lt;/strong&gt; of the class/function, a &lt;strong&gt;grade&lt;/strong&gt; (A, B, C, D, E, or F), and the actual &lt;strong&gt;complexity as a number&lt;/strong&gt;. Typically, a complexity below 10 is ok. &lt;a href="https://github.com/scipy/scipy/blob/master/scipy/sparse/linalg/eigen/lobpcg/lobpcg.py#L127"&gt;The most complex part of scipy&lt;/a&gt; has a complexity of 61.&lt;/p&gt;
&lt;p&gt;Besides radon, there are various other packages and Flake8 plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-annotations-complexity/"&gt;flake8-annotations-complexity&lt;/a&gt;: Nudge you to name complex types&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-cognitive-complexity/"&gt;flake8-cognitive-complexity&lt;/a&gt;: Validates cognitive functions complexity&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-expression-complexity/"&gt;flake8-expression-complexity&lt;/a&gt;: Make sure that single expressions are not too complicated; similar to cyclomatic complexity for functions / classes.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-functions/"&gt;flake8-functions&lt;/a&gt;: Report too long functions and functions with too many arguments&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/mccabe/"&gt;mccabe&lt;/a&gt;: This is used by a couple of other tools and projects&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/wily/"&gt;wily&lt;/a&gt;: A command-line application for tracking, reporting on the complexity of Python tests and applications.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/xenon/"&gt;xenon&lt;/a&gt;: Relies on radon&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="style-guides"&gt;Style Guides&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Make your code look professional. Photo by Hunters Race on Unsplash" src="https://cdn-images-1.medium.com/max/10132/0*gC2HdhBSJwqGfFAF"/&gt;&lt;em&gt;Make your code look professional. Photo by &lt;a href="https://unsplash.com/@huntersrace?utm_source=medium&amp;amp;utm_medium=referral"&gt;Hunters Race&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You might have heard the words &amp;ldquo;pythonic code&amp;rdquo;. It means to not only write correct Python code but use the languages features how they are intended to be used (&lt;a href="https://stackoverflow.com/a/25011492/562769"&gt;source&lt;/a&gt;). It is for sure an opinionated term, but there are a lot of plugins that show you what a large part of the community considers to be pythonic.&lt;/p&gt;
&lt;p&gt;Writing code in a similar style to other Python projects is valuable as people will have an easier time reading the code. This is important as we read software more often than we write it (&lt;a href="https://www.goodreads.com/quotes/835238-indeed-the-ratio-of-time-spent-reading-versus-writing-is"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So, what is pythonic code?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP-8&lt;/a&gt;: It&amp;rsquo;s a style guide written and accepted by the Python community in 2001. So it&amp;rsquo;s been around for a while and most people want to follow most of it. The main part which I&amp;rsquo;ve seen most people not to agree with is the &lt;a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;maximum line length of 79&lt;/a&gt;. I&amp;rsquo;m always recommending to follow this advice in 95% of your codebase. I gave &lt;a href="https://martin-thoma.com/python-style-guide/#maximum-line-length"&gt;reasons&lt;/a&gt; for that.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/black-logo.png"&gt;&lt;img alt="Logo of the black project" src="../images/2020/08/black-logo.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Logo of the black project. Image source: &lt;a href="https://github.com/psf/black/blob/master/docs/_static/logo2.png"&gt;Black Contributors&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For pure code formatting, you should use an auto formatter. I grew into liking &lt;a href="https://pypi.org/project/black/"&gt;black&lt;/a&gt; because it does NOT allow customization. Code formatted by black always looks the same. As you cannot customize it, you don&amp;rsquo;t need to discuss it. It just solves the issue of conflicting styles and arguments around it. Black is maintained by the Python Software Foundation and likely the most commonly adopted auto formatter for Python.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/yapf"&gt;yapf&lt;/a&gt; by Google is another auto formatter.&lt;/p&gt;
&lt;h2 id="docstrings"&gt;Docstrings&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Reading the manual can be fun if it&amp;rsquo;s written well. Lasagne and Scipy have pretty good documentation. Photo by Laura Dewilde on Unsplash" src="https://cdn-images-1.medium.com/max/8000/0*Ln2UNS74PuVuhOVM"/&gt;&lt;em&gt;Reading the manual can be fun if it&amp;rsquo;s written well. &lt;a href="https://lasagne.readthedocs.io/en/latest/modules/nonlinearities.html#lasagne.nonlinearities.sigmoid"&gt;Lasagne&lt;/a&gt; and &lt;a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.prewitt.html#scipy.ndimage.prewitt"&gt;Scipy&lt;/a&gt; have pretty good documentation. Photo by &lt;a href="https://unsplash.com/@lauradewilde97?utm_source=medium&amp;amp;utm_medium=referral"&gt;Laura Dewilde&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For docstrings, there is &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;PEP-257&lt;/a&gt;. All of those rules are widely accepted in the community, but they still allow a wide variety of docstrings. There are three commonly used styles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://numpydoc.readthedocs.io/en/latest/format.html"&gt;NumpyDoc-style&lt;/a&gt; docstrings: Used by Numpy and Scipy. It&amp;rsquo;s markdown with some specified sections such as &lt;code&gt;Parameters&lt;/code&gt; and &lt;code&gt;Returns&lt;/code&gt; in a fixed order.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings"&gt;Google-style&lt;/a&gt; docstrings: A super-slim format which has &lt;code&gt;Args:&lt;/code&gt;and &lt;code&gt;Returns:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html"&gt;Sphinx-style&lt;/a&gt; docstrings: A very flexible format that uses restructured text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I love the NumpyDoc format as it is super easy to read even when you just have it inside a text editor. Numpydoc is also well-supported by editors.&lt;/p&gt;
&lt;p&gt;Here you can see the three in comparison:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_meta_numpydoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get meta-information of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/span&gt;
&lt;span class="sd"&gt;    Aenean commodo&lt;/span&gt;
&lt;span class="sd"&gt;    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus&lt;/span&gt;
&lt;span class="sd"&gt;    et magnis dis&lt;/span&gt;
&lt;span class="sd"&gt;    parturient montes, nascetur ridiculus mus.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    filepath : str&lt;/span&gt;
&lt;span class="sd"&gt;        Get metadata from this file&lt;/span&gt;
&lt;span class="sd"&gt;    a_number : int&lt;/span&gt;
&lt;span class="sd"&gt;        Some more details&lt;/span&gt;
&lt;span class="sd"&gt;    a_dict : dict&lt;/span&gt;
&lt;span class="sd"&gt;        Configuration&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    meta : dict&lt;/span&gt;
&lt;span class="sd"&gt;        Extracted meta information&lt;/span&gt;

&lt;span class="sd"&gt;    Raises&lt;/span&gt;
&lt;span class="sd"&gt;    ------&lt;/span&gt;
&lt;span class="sd"&gt;    IOError&lt;/span&gt;
&lt;span class="sd"&gt;        File could not be read&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_meta_google_doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Get meta-information of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/span&gt;
&lt;span class="sd"&gt;    Aenean commodo&lt;/span&gt;
&lt;span class="sd"&gt;    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus&lt;/span&gt;
&lt;span class="sd"&gt;    et magnis dis&lt;/span&gt;
&lt;span class="sd"&gt;    parturient montes, nascetur ridiculus mus.&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        filepath: Get metadata from this file.&lt;/span&gt;
&lt;span class="sd"&gt;        a_number: Some more details.&lt;/span&gt;
&lt;span class="sd"&gt;        a_dict: Configuration.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;        Extracted meta information:&lt;/span&gt;

&lt;span class="sd"&gt;    Raises:&lt;/span&gt;
&lt;span class="sd"&gt;        IOError: File could not be read.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_meta_sphinx_doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get meta-information of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/span&gt;
&lt;span class="sd"&gt;    Aenean commodo&lt;/span&gt;
&lt;span class="sd"&gt;    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus&lt;/span&gt;
&lt;span class="sd"&gt;    et magnis dis&lt;/span&gt;
&lt;span class="sd"&gt;    parturient montes, nascetur ridiculus mus.&lt;/span&gt;

&lt;span class="sd"&gt;    :param filepath: Get metadata from this file&lt;/span&gt;
&lt;span class="sd"&gt;    :type filepath: str&lt;/span&gt;
&lt;span class="sd"&gt;    :param a_number: Some more details&lt;/span&gt;
&lt;span class="sd"&gt;    :type a_number: int&lt;/span&gt;
&lt;span class="sd"&gt;    :param a_dict: Configuration&lt;/span&gt;
&lt;span class="sd"&gt;    :type a_dict: dict&lt;/span&gt;

&lt;span class="sd"&gt;    :returns: dict -- Extracted meta information&lt;/span&gt;

&lt;span class="sd"&gt;    :raises: IOError&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="flake8"&gt;Flake8&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://medium.com/dailyjs/why-you-should-always-use-a-linter-and-or-pretty-formatter-bb5471115a76"&gt;You should always use a linter&lt;/a&gt;, as &lt;a href="undefined"&gt;Alberto Gimeno&lt;/a&gt; pointed out. They can check your style, but more importantly, show potential errors.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/flake8/"&gt;Flake8&lt;/a&gt; is a wrapper around PyFlakes, pycodestyle, and a McCabe script. It is the most commonly used tool for linting in Python. Flake8 is awesome because there are so many plugins for it. I found 223 packages with the string &amp;ldquo;flake8&amp;rdquo; within the name and looked at many of them. I&amp;rsquo;ve also looked at packages with the trove classifier Framework :: Flake8 and found 143 packages of which 122 started with flake8- . Only 21 packages had the Flake8 Framework trove classifier but didn&amp;rsquo;t start with flake8- and only two of them looked interesting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: Typo squatting is an issue every open package repository has to fight with (Bachelor&amp;rsquo;s Thesis: &lt;a href="https://incolumitas.com/data/thesis.pdf"&gt;Typosquatting in Programming Language Package Managers&lt;/a&gt; which has a &lt;a href="https://incolumitas.com/2016/06/08/typosquatting-package-managers/"&gt;blog post&lt;/a&gt; and an &lt;a href="https://arxiv.org/pdf/2003.03471.pdf"&gt;interesting follow-up&lt;/a&gt;, Bachelor&amp;rsquo;s Thesis: &lt;a href="https://is.muni.cz/th/y41ft/thesis_final_electronic.pdf"&gt;Attacks on Package Managers&lt;/a&gt;). There are examples in Python for it causing harm (&lt;a href="https://mail.python.org/pipermail/security-announce/2017-September/000000.html"&gt;2017&lt;/a&gt;, &lt;a href="https://www.bleepingcomputer.com/news/security/ten-malicious-libraries-found-on-pypi-python-package-index/"&gt;2017&lt;/a&gt;, &lt;a href="https://nakedsecurity.sophos.com/2017/09/19/pypi-python-repository-hit-by-typosquatting-sneak-attack/"&gt;2017&lt;/a&gt;, &lt;a href="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/typosquatting-in-python-repositories/"&gt;2019&lt;/a&gt;, &lt;a href="https://snyk.io/blog/malicious-packages-found-to-be-typo-squatting-in-pypi/"&gt;2019&lt;/a&gt;, &lt;a href="https://sysdig.com/blog/malicious-python-libraries-jeilyfish-dateutil/"&gt;2019&lt;/a&gt;). There is &lt;a href="https://github.com/jspeed-meyers/pypi-scan"&gt;pypi-scan&lt;/a&gt; for finding examples and &lt;a href="https://pypi.org/project/pypi-parker/"&gt;pypi-parker&lt;/a&gt; to prevent common typos to be used. &lt;a href="undefined"&gt;William Bengtsson&lt;/a&gt; also did something similar to harden the Python community against this thread. See his article below for more information about his project. Package parkinginflates the number of packages on PyPI and I filtered them by looking for the summary &amp;ldquo;A package to prevent exploit&amp;rdquo;.
&lt;a href="https://medium.com/@williambengtson/python-typosquatting-for-fun-not-profit-99869579c35d"&gt;&lt;strong&gt;Python Typosquatting for Fun not Profit&lt;/strong&gt;
&lt;em&gt;by William Bengtson | @__muscles&lt;/em&gt;medium.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some of the interesting flake8 plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mschwager/cohesion"&gt;cohesion&lt;/a&gt;: Check if class cohesion is below a threshold. This indicates that functionality should be split out of a class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/flake8-assert-msg/"&gt;flake8-assert-msg&lt;/a&gt;: Make sure assert statements have messages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-blind-except/"&gt;flake8-blind-except&lt;/a&gt;: Prevent Pokemon exception catching&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-builtins/"&gt;flake8-builtins&lt;/a&gt;: Check for python builtins being used as variables or parameters.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-docstrings/"&gt;flake8-docstrings&lt;/a&gt;: Adds pydocstyle support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-isort/"&gt;flake8-isort&lt;/a&gt;: Use &lt;a href="https://pypi.python.org/pypi/isort"&gt;isort&lt;/a&gt; to check if the imports on your python files are sorted the way you expect&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/globality-corp/flake8-logging-format"&gt;flake8-logging-format&lt;/a&gt;: Validate (lack of) logging format strings&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pytest-style/"&gt;flake8-pytest-style&lt;/a&gt;: Checking common style issues or inconsistencies with pytest-based tests&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-requirements/"&gt;flake8-requirements&lt;/a&gt;: Checks/validates package import requirements. It reports missing and/or not used project direct dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-graphql/"&gt;flake8-graphql&lt;/a&gt;: Lint GraphQL query strings&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8_implicit_str_concat/"&gt;flake8_implicit_str_concat&lt;/a&gt;: Goes well with black 🎉&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-mock/"&gt;flake8-mock&lt;/a&gt;: Check for mistakes using mocks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-nb/"&gt;flake8-nb&lt;/a&gt;: Check jupyter notebooks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pyi/"&gt;flake8-pyi&lt;/a&gt;: Lint stub files&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-variables-names/"&gt;flake8-variables-names&lt;/a&gt;: Find common &amp;ldquo;meaningless&amp;rdquo; variable names&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pep8-naming/"&gt;pep8-naming&lt;/a&gt;: Check your code against PEP 8 naming conventions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pandas-vet/"&gt;pandas-vet&lt;/a&gt;: Opinionated linting for Pandas code&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/wemake-python-styleguide/"&gt;wemake-python-styleguide&lt;/a&gt;: An opinionated style guide/checker which seems to be pretty popular. I haven&amp;rsquo;t seen that one before, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An alternative to parts of Flake8 &lt;a href="https://pypi.org/project/prospector/"&gt;prospector&lt;/a&gt;. It couples tools, but it is way less commonly used and thus not as flexible as Flake8.&lt;/p&gt;
&lt;h2 id="flake8-security-and-bugs"&gt;Flake8: Security and Bugs&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Be safe by looking at warning signs. Photo by Troy Bridges on Unsplash" src="https://cdn-images-1.medium.com/max/8064/0*F1jS0N6EjU66u4nu"/&gt;&lt;em&gt;Be safe by looking at warning signs. Photo by &lt;a href="https://unsplash.com/@esptroy?utm_source=medium&amp;amp;utm_medium=referral"&gt;Troy Bridges&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-bandit/"&gt;flake8-bandit&lt;/a&gt;: Security Testing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-bugbear/"&gt;flake8-bugbear&lt;/a&gt;: finding likely bugs and design problems in your program &amp;mdash; usually it&amp;rsquo;s silent, but when it&amp;rsquo;s not you should have a look 🐻&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-requests/"&gt;flake8-requests&lt;/a&gt;: checks usage of the request framework&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="flake8-remove-debugging-artifacts"&gt;Flake8: Remove Debugging Artifacts&lt;/h2&gt;
&lt;p&gt;It happened quite a couple of times to me: I&amp;rsquo;ve added some code while developing a new feature or debugging an old one and forgot to remove it afterward. It was most often caught by the reviewer, but it is not necessary to distract the reviewer with this.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/flake8-breakpoint/"&gt;flake8-breakpoint&lt;/a&gt; checks for forgotten breakpoints and &lt;a href="https://pypi.org/project/flake8-print/"&gt;flake8-print&lt;/a&gt; will complain about every print statement. &lt;a href="https://pypi.org/project/flake8-debugger/"&gt;flake8-debugger&lt;/a&gt;, &lt;a href="https://pypi.org/project/flake8-fixme/"&gt;flake8-fixme&lt;/a&gt;, &lt;a href="https://pypi.org/project/flake8-todo/"&gt;flake8-todo&lt;/a&gt; go in the same direction.&lt;/p&gt;
&lt;h2 id="let-dead-code-die"&gt;Let Dead Code Die&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Photo by Kenny Orr on Unsplash" src="https://cdn-images-1.medium.com/max/11520/0*HolQng-8Fkoy-A63"/&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@greyharpoon?utm_source=medium&amp;amp;utm_medium=referral"&gt;Kenny Orr&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Who hasn&amp;rsquo;t done it: You removed a functionality, but the code could be handy. So you comment it out. Or you add a if False block around it. Sometimes more sophisticated by adding a configuration option you don&amp;rsquo;t need.&lt;/p&gt;
&lt;p&gt;The clean solution is to have a single, clear commit that removes that feature. Maybe add a git tag so that you can find it later if you want to add it again.&lt;/p&gt;
&lt;p&gt;And then there is code which is dead, but you forgot about it. Luckily, you can automatically detect it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-eradicate/"&gt;flake8-eradicate&lt;/a&gt;: Find commented out (or so-called &amp;ldquo;dead&amp;rdquo;) code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/vulture/"&gt;vulture&lt;/a&gt;: Finds unused code in Python programs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="flake8-nudging-yourself-to-use-good-style"&gt;Flake8: Nudging Yourself to use Good Style&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Having an experienced developer review your code is awesome. In the best case, you will learn something new that you can apply in all further projects. And some plugins act like that. Photo by Brooke Cagle on Unsplash" src="https://cdn-images-1.medium.com/max/9446/0*lXvALfnWfaU_cFB_"/&gt;&lt;em&gt;Having an experienced developer review your code is awesome. In the best case, you will learn something new that you can apply in all further projects. And some plugins act like that. Photo by &lt;a href="https://unsplash.com/@brookecagle?utm_source=medium&amp;amp;utm_medium=referral"&gt;Brooke Cagle&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some plugins helped me to learn something about Python. For example, the following helped me to get rid of small little bugs and inconsistencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-comprehensions/"&gt;flake8-comprehensions&lt;/a&gt;: Helps you write better list/set/dict comprehensions &amp;mdash; I love this one 😍&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-executable/"&gt;flake8-executable&lt;/a&gt;: Check executable permissions and &lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebangs&lt;/a&gt;. Files should either executable and have a shebang, or not be executable and not have a shebang.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-raise/"&gt;flake8-raise&lt;/a&gt;: Finds improvements for raise statements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pytest/"&gt;flake8-pytest&lt;/a&gt;: Use assert instead of assertEqual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following new style nudging plugins aim to push you to use modern style Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-pathlib/"&gt;flake8-pathlib&lt;/a&gt;: &lt;a href="https://docs.python.org/3.4/library/pathlib.html"&gt;Pathlib&lt;/a&gt; was added in Python 3.4 and I&amp;rsquo;m still not quite used to it. This plugin might nudge me to use it when it&amp;rsquo;s appropriate.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-string-format/"&gt;flake8-string-format&lt;/a&gt;, &lt;a href="https://pypi.org/project/flake8-printf-formatting/"&gt;flake8-printf-formatting&lt;/a&gt;, &lt;a href="https://pypi.org/project/flake8-sfs/"&gt;flake8-sts&lt;/a&gt;: String formatting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is one of the most valuable categories for me. If you know more plugins which help to use new styles, let me know 😃&lt;/p&gt;
&lt;h2 id="flake8-meta-plugins"&gt;Flake8 Meta Plugins&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Image created by Martin Thoma via imgflip.com" src="https://cdn-images-1.medium.com/max/2400/1*E4HyDr73N_j4p3mn5X64pA.jpeg"/&gt;&lt;em&gt;Image created by Martin Thoma via imgflip.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Flake8 has some plugins which don&amp;rsquo;t add more linting functionality, but improve flake8 in another way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-colors/"&gt;flake8&amp;ndash;colors&lt;/a&gt;: ANSI colors highlight for Flake8&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-csv/"&gt;flake8-csv&lt;/a&gt;: Generate error reports in CSV format&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-json/"&gt;flake8-json&lt;/a&gt;: Generate error reports in JSON format&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-dashboard/"&gt;flake8-dashboard&lt;/a&gt; and &lt;a href="https://pypi.org/project/flake8-html/"&gt;flake8-html&lt;/a&gt;: Generate an HTML report (&lt;a href="https://aperezhortal.github.io/flake8-dashboard/example_dashboard/index.html"&gt;dashboard demo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-immediate/"&gt;flake8-immediate&lt;/a&gt;: Prints the errors directly without any delay&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-strftime/"&gt;flake8-strftime&lt;/a&gt;: Checks for use of platform-specific strftime codes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-SQL/"&gt;flake8-SQL&lt;/a&gt; and &lt;a href="http://py-find-injection"&gt;py-find-injection&lt;/a&gt;: Looks for SQL queries and checks them against an opinionated style&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8-tuple/"&gt;flake8-tuple&lt;/a&gt;: Checks for (probably) unintended one element tuples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And some plugins people might need for legal reasons like flake8-author, flake8-copyright, and flake8-license.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To Flake8 plugin authors: Please make sure that you list the error codes your plugin introduces and that you give at least some examples of what your plugin considers bad / good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="type-annotations-and-type-checking"&gt;Type Annotations and Type Checking&lt;/h2&gt;
&lt;p&gt;&lt;img alt="The mypy plugin for VS Code showing an issue with the types. Screenshot by Martin Thoma." src="https://cdn-images-1.medium.com/max/3442/1*jXmhQQBv0xgpPQPUN08Z_A.png"/&gt;&lt;em&gt;The mypy plugin for VS Code showing an issue with the types. Screenshot by Martin Thoma.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible in Python, but you need to do it. It&amp;rsquo;s not done automatically. I&amp;rsquo;ve written a longer article about how &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations work in Python&lt;/a&gt;. There are multiple tools you can use, but I recommend mypy. You can run it via pytest by using pytest-mypy or via flake8 by using flake8-mypy , but I prefer to run it separately. The main reason for it is that the output given by &lt;a href="https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38"&gt;CI pipelines&lt;/a&gt; is cleaner.&lt;/p&gt;
&lt;p&gt;You can integrate type checking (e.g. via mypy) into your editor, but the type annotations alone already go a long way as they document what is expected.&lt;/p&gt;
&lt;h2 id="package-structure"&gt;Package Structure&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Check that your package looks fine before shipping it. Photo by Toby Stodart on Unsplash" src="https://cdn-images-1.medium.com/max/10080/0*y67weckARV-M_yOh"/&gt;&lt;em&gt;Check that your package looks fine before shipping it. Photo by &lt;a href="https://unsplash.com/@tobystodart?utm_source=medium&amp;amp;utm_medium=referral"&gt;Toby Stodart&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/regebro/pyroma"&gt;pyroma&lt;/a&gt; rates how well a Python project complies with the best practices of the Python packaging ecosystem.&lt;/p&gt;
&lt;p&gt;Here are some examples of my projects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyroma&lt;span class="w"&gt; &lt;/span&gt;mpu
------------------------------
Checking&lt;span class="w"&gt; &lt;/span&gt;mpu
Found&lt;span class="w"&gt; &lt;/span&gt;mpu
------------------------------
Final&lt;span class="w"&gt; &lt;/span&gt;rating:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/10
Your&lt;span class="w"&gt; &lt;/span&gt;cheese&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;so&lt;span class="w"&gt; &lt;/span&gt;fresh&lt;span class="w"&gt; &lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;pe

$&lt;span class="w"&gt; &lt;/span&gt;pyroma&lt;span class="w"&gt; &lt;/span&gt;nox
------------------------------
Checking&lt;span class="w"&gt; &lt;/span&gt;nox
Found&lt;span class="w"&gt; &lt;/span&gt;nox
------------------------------
Your&lt;span class="w"&gt; &lt;/span&gt;long_description&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;valid&lt;span class="w"&gt; &lt;/span&gt;ReST:
&amp;lt;string&amp;gt;:2:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;WARNING/2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Explicit&lt;span class="w"&gt; &lt;/span&gt;markup&lt;span class="w"&gt; &lt;/span&gt;ends&lt;span class="w"&gt; &lt;/span&gt;without&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;blank&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unexpected&lt;span class="w"&gt; &lt;/span&gt;unindent.
&amp;lt;string&amp;gt;:3:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;WARNING/2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Field&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;ends&lt;span class="w"&gt; &lt;/span&gt;without&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;blank&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unexpected&lt;span class="w"&gt; &lt;/span&gt;unindent.
&amp;lt;string&amp;gt;:4:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;WARNING/2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Explicit&lt;span class="w"&gt; &lt;/span&gt;markup&lt;span class="w"&gt; &lt;/span&gt;ends&lt;span class="w"&gt; &lt;/span&gt;without&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;blank&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unexpected&lt;span class="w"&gt; &lt;/span&gt;unindent.
------------------------------
Final&lt;span class="w"&gt; &lt;/span&gt;rating:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/10
Cottage&lt;span class="w"&gt; &lt;/span&gt;Cheese
------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="want-to-know-more-about-unit-testing"&gt;Want to Know More About Unit Testing?&lt;/h2&gt;
&lt;p&gt;In this series, we already had:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;The basics of Unit Testing in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;Patching, Mocks, and Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c"&gt;How to test Flask applications&lt;/a&gt; with Databases, Templates and Protected Pages&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729"&gt;tox and nox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://towardsdatascience.com/unit-testing-in-python-structure-57acd51da923"&gt;Structuring Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://towardsdatascience.com/ci-pipelines-for-python-projects-9ac2830d2e38"&gt;CI-Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://towardsdatascience.com/unit-testing-in-python-property-based-testing-892a741fc119"&gt;Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8"&gt;Mutation Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 9: Static Code Analysis: Linters, Type Checking, and Code Complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you&amp;rsquo;re interested in other topics around testing with Python or professional software development with Python: info@martin-thoma.de&lt;/p&gt;</content><category term="Code"></category><category term="Unit Testing"></category><category term="Flake8"></category><category term="mypy"></category><category term="Security"></category><category term="AppSec"></category></entry><entry><title>Mutation Testing</title><link href="https://martin-thoma.com/https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8" rel="alternate"></link><published>2020-08-10T20:00:00+02:00</published><updated>2020-08-10T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-08-10:/https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8</id><summary type="html">&lt;p&gt;&lt;img alt="Based on the Monster Character set by macrovector" src="https://cdn-images-1.medium.com/max/2400/1*WjcywqTPozcMSvrLYsQBJQ.png"/&gt;&lt;em&gt;Based on the &lt;a href="https://www.freepik.com/free-vector/monster-character-set_1538770.htm"&gt;Monster Character set&lt;/a&gt; by &lt;a href="https://www.freepik.com/macrovector"&gt;macrovector&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We need to kill the mutants &amp;mdash; no, I&amp;rsquo;m not a villain from the X-Men comics. I&amp;rsquo;m
a software engineer who wants to improve unit tests.&lt;/p&gt;
&lt;p&gt;In this article you will learn what mutation testing is and how it can help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Based on the Monster Character set by macrovector" src="https://cdn-images-1.medium.com/max/2400/1*WjcywqTPozcMSvrLYsQBJQ.png"/&gt;&lt;em&gt;Based on the &lt;a href="https://www.freepik.com/free-vector/monster-character-set_1538770.htm"&gt;Monster Character set&lt;/a&gt; by &lt;a href="https://www.freepik.com/macrovector"&gt;macrovector&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We need to kill the mutants &amp;mdash; no, I&amp;rsquo;m not a villain from the X-Men comics. I&amp;rsquo;m
a software engineer who wants to improve unit tests.&lt;/p&gt;
&lt;p&gt;In this article you will learn what mutation testing is and how it can help you
to write better tests. The examples are for Python, but the concepts hold in
general and in the end I have a list of tools in other languages.&lt;/p&gt;
&lt;h2 id="why-do-we-need-mutation-testing"&gt;Why do we need mutation testing?&lt;/h2&gt;
&lt;p&gt;Unit tests have the issue that it&amp;rsquo;s unclear when your tests are good enough. Do
you cover the important edge cases? How do you test the quality of your unit
tests?&lt;/p&gt;
&lt;p&gt;Typical mistakes are slight confusions. Accessing &lt;code&gt;list[i]&lt;/code&gt; instead of
&lt;code&gt;list[i-1]&lt;/code&gt;, letting the loop run for &lt;code&gt;i &amp;lt; n&lt;/code&gt; instead of &lt;code&gt;i &amp;lt;= n&lt;/code&gt;, initializing
a variable with None instead of the empty string. There are a lot of those
slight changes which are usually just called &amp;ldquo;&lt;strong&gt;typos&lt;/strong&gt;&amp;rdquo; or &amp;ldquo;&lt;strong&gt;off-by-one&lt;/strong&gt;&amp;rdquo;
mistakes. When I make them, I often didn&amp;rsquo;t think about the part thoroughly
enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mutation testing tests your unit tests&lt;/strong&gt;. The key idea is to apply those
minor changes and run the unit tests that could fail. If a unit test fails, the
mutant was killed. Which is what we want. It shows that this kind of off-by-one
mistake cannot happen with our test suite. Of course, we assume that the unit
tests themselves are correct or at worst incomplete. Hence you can see a
mutation test as an alternative to test coverage. In contrast to test coverage,
the mutation testing toolkit can directly show you places and types of mistakes
you would not cover right now.&lt;/p&gt;
&lt;h2 id="which-mutation-testing-tools-are-there"&gt;Which mutation testing tools are there?&lt;/h2&gt;
&lt;p&gt;There are a couple of tools like cosmic-ray, but &lt;a href="undefined"&gt;Anders Hovm&amp;ouml;ller&lt;/a&gt; did a pretty amazing job by creating mutmut. As of August 2020, mutmut is the best library for Python to do mutation testing.&lt;/p&gt;
&lt;p&gt;To run the examples in this article, you have to install &lt;a href="https://pypi.org/project/mutmut/"&gt;mutmut&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;mutmut
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other languages, you might want to try these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C / C++: &lt;a href="https://github.com/mull-project/mull"&gt;mull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java: &lt;a href="https://pitest.org/"&gt;PIT&lt;/a&gt; (&lt;a href="https://github.com/hcoles/pitest"&gt;GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href="https://github.com/stryker-mutator/stryker/tree/master"&gt;Stryker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP: &lt;a href="https://github.com/infection/infection"&gt;Infection&lt;/a&gt; (formerly called humbug)&lt;/li&gt;
&lt;li&gt;Ruby: &lt;a href="https://github.com/mbj/mutant"&gt;mutant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust: &lt;a href="https://github.com/llogiq/mutagen"&gt;mutagen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swift: &lt;a href="https://github.com/muter-mutation-testing/muter"&gt;muter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-isnt-branch-and-line-coverage-enough"&gt;Why isn&amp;rsquo;t branch and line coverage enough?&lt;/h2&gt;
&lt;p&gt;It is pretty easy to get to a high line coverage by creating bad tests. For
example, take this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Get the n-th Fibonacci number, starting with 0 and 1."""&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="c1"&gt;# BUG! should be a!&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fibonacci&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This smoke test already adds some value as it makes sure that things are not
crashing for a single input. However, it would not find any logic bug. There is
an assert statement missing. This pattern can quickly drive up the line
coverage up to 100%, but you are then still lacking good tests.&lt;/p&gt;
&lt;p&gt;A mutation test cannot be fooled as easily. It would mutate the code and, for
example, initialize b with 0 instead of 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- a, b = 0, 1
+ a, b = 0, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test would still succeed and thus the mutant would survive. Which means the
mutation testing framework would complain that this line was not properly
tested. In other words:&lt;/p&gt;
&lt;p&gt;Mutation testing provides another way to get a more rigid line coverage. It can
still not guarantee that a tested line is correct, but it can show you
potential bugs that your current test suite would not detect.&lt;/p&gt;
&lt;h2 id="create-the-mutants"&gt;Create the mutants!&lt;/h2&gt;
&lt;p&gt;As always, I use my small &lt;a href="https://github.com/MartinThoma/mpu"&gt;mpu&lt;/a&gt; library as
an example. At the moment, it has a 99% branch and 99% line coverage.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mutmut run

- Mutation testing starting -

These are the steps:
1. A full test suite run will be made to make sure we
   can run the tests successfully and we know how long
   it takes (to detect infinite loops for example)
2. Mutants will be generated and checked

Results are stored in .mutmut-cache.
Print found mutants with `mutmut results`.

Legend for output:
🎉 Killed mutants.   The goal is for everything to end up in this bucket.
⏰ Timeout.          Test suite took 10 times as long as the baseline so were killed.
🤔 Suspicious.       Tests took a long time, but not long enough to be fatal.
🙁 Survived.         This means your tests needs to be expanded.
🔇 Skipped.          Skipped.

1. Running tests without mutations
⠧ Running...Done

2. Checking mutants
⠸ 1818/1818  🎉 1303  ⏰ 1  🤔 6  🙁 508  🔇 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This takes over 1.5 hours for mpu. mpu is a small project, with only about 2000
lines of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Language     files          blank        comment        code
---------------------------------------------------------------
Python       22            681           1399           2046
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One pytest run of the mpu example project takes roughly 9 seconds and the
slowest 3 tests are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;1.03s call     tests/test_main.py::test_parallel_for
0.80s call     tests/test_string.py::test_is_email
0.41s call     tests/test_io.py::test_download_without_path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the end, you will see how many mutants were successfully killed (🎉), how
many received a timeout (⏰) and which ones survived (😕). Especially the timeout
ones are annoying as they make the mutmut runs slower, but the code and the
tests might still be fine.&lt;/p&gt;
&lt;h2 id="which-mutations-are-applied"&gt;Which mutations are applied?&lt;/h2&gt;
&lt;p&gt;mutmut 2.0 creates the following mutants (&lt;a href="https://github.com/boxed/mutmut/blob/9fc568648ba81d193f986c25ab60cbee0660dd33/mutmut/__init__.py#L433-L446"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Operator mutations&lt;/strong&gt;: About 30 different patterns like replacing + by - , *
  by ** and similar, but also &amp;gt; by &amp;gt;= .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyword mutations&lt;/strong&gt;: Replacing True by False , in by not in and similar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number mutations&lt;/strong&gt;: You can write things like 0b100 which is the same as 4,
  0o100, which is 64, 0x100 which is 256, .12 which is 0.12 and similar. The
  number mutations try to capture mistakes in this area.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name mutations&lt;/strong&gt;: The name mutations capture copy vs deepcopy and "" vs None .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Argument mutations&lt;/strong&gt;: Replaces keyword arguments one by one from dict(a=b) to dict(aXXX=b).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;or_test and and_test&lt;/strong&gt;: and &amp;harr; or&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String mutation&lt;/strong&gt;: Adding XX to the string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those can be grouped into three very different kinds of mutations: &lt;strong&gt;value
mutations&lt;/strong&gt; (string mutation, number mutation), &lt;strong&gt;decision mutations&lt;/strong&gt; (switch
if-else blocks, e.g. the or_test / and_test and the keyword mutations) and
statement mutations (removing or changing a line of code).&lt;/p&gt;
&lt;p&gt;The value mutations are most often false-positive for me. I&amp;rsquo;m not certain if I
could write my code or my tests in another way to fix this. I&amp;rsquo;ve briefly
discussed it with the library author, but apparently he does not have the same
issue. If you&amp;rsquo;re interested in that discussion,
see &lt;a href="https://github.com/boxed/mutmut/issues/175"&gt;issue #175&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-can-i-get-a-html-report-with-mutmut"&gt;How can I get a HTML report with mutmut?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mutmut&lt;span class="w"&gt; &lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives you&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/mutmut-html-report.png"&gt;&lt;img alt="Index page of the mutmut HTML report" src="../images/2020/08/mutmut-html-report.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Index page of the mutmut HTML report&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/mutmut-html-pd.png"&gt;&lt;img alt="The complete pd.py report" src="../images/2020/08/mutmut-html-pd.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;The complete pd.py report&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, the index claims that 108 mutants survived and the HTML report
only shows one. That one is also a false-positive as a change in the logging
message does not cause any issue.&lt;/p&gt;
&lt;p&gt;Alternatively, you can use the junit XML to generate a report:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;junit2html
$&lt;span class="w"&gt; &lt;/span&gt;mutmut&lt;span class="w"&gt; &lt;/span&gt;junitxml&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;mutmut-results.xml
$&lt;span class="w"&gt; &lt;/span&gt;junit2html&lt;span class="w"&gt; &lt;/span&gt;mutmut-results.xml&lt;span class="w"&gt; &lt;/span&gt;mutmut-report.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The report shows this index page:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/mutmut-report.png"&gt;&lt;img alt="Test report generated from JUnit XML" src="../images/2020/08/mutmut-report.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Test report generated from JUnit XML&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Clicking on one mutant, you gets this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/mutmut-result-2.png"&gt;&lt;img alt="Mutant #3 was killed, but mutant #4 survived. I did not use the global variable &amp;ldquo;countries&amp;rdquo; anywhere in the tests" src="../images/2020/08/mutmut-result-2.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Mutant #3 was killed, but mutant #4 survived. I did not use the global variable &amp;ldquo;countries&amp;rdquo; anywhere in the tests&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The issue with this generated HTML report is that it shows many results for a single line of code and no grouping. If the failures were grouped by file and if one could see the code in which lines with surviving mutants would be highlighted, it would be way more useful.&lt;/p&gt;
&lt;h2 id="mutation-testing-for-machine-learning-systems"&gt;Mutation Testing for Machine Learning Systems&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve searched for cool applications of machine learning to generate mutants in
code, but I&amp;rsquo;ve only found &amp;ldquo;Machine Learning Approach in Mutation Testing&amp;rdquo; from
2012 (12 citations).&lt;/p&gt;
&lt;p&gt;I was hoping to find data-based code mutant generation techniques. For example,
one could search for git commits which are bug fixes by examining the commit
message. If the fix is rather short, this is a kind of mutation one could test
for. Instead of generating all possible mutants, one could sample from the
mutants in a way to first take the most promising ones; the ones that are most
likely not perceived as a false-positive.&lt;/p&gt;
&lt;p&gt;Other work was more focused on making machine learning systems more robust (&lt;a href="https://arxiv.org/pdf/1805.05206.pdf"&gt;DeepMutation&lt;/a&gt;, &lt;a href="https://arxiv.org/pdf/1803.07519.pdf"&gt;DeepGauge&lt;/a&gt;, an &lt;a href="https://www.pre-crime.eu/techreps/TR-Precrime-2019-03.pdf"&gt;Evaluation&lt;/a&gt;). I don&amp;rsquo;t know this stream of work well enough to write about it. But it sounds similar to techniques I know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To overcome scarcity in training data, various &lt;strong&gt;data&lt;/strong&gt; &lt;strong&gt;augmentation
  techniques &lt;/strong&gt;such as rotations, flips, or color adjustments are applied. You
  can actually see those as mutations.&lt;/li&gt;
&lt;li&gt;Also, in the &lt;strong&gt;GAN&lt;/strong&gt; setting where you have a generator and a discriminator,
  you could argue that the generator produces mutants and the discriminator
  should tell them apart.&lt;/li&gt;
&lt;li&gt;In order to force the network to &lt;strong&gt;learn more robust features&lt;/strong&gt;, a technique
  called dropout
  (&lt;a href="https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dropout"&gt;Tensorflow&lt;/a&gt;,
  &lt;a href="https://lasagne.readthedocs.io/en/latest/modules/layers/noise.html"&gt;Lasagne&lt;/a&gt;) is
  commonly used. You could say that a part of the input or the internal
  representation is randomly mutated by setting it to zero&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="want-to-know-more-about-unit-testing"&gt;Want to know more about unit testing?&lt;/h2&gt;
&lt;p&gt;In this series, we already had:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;The basics of Unit Testing in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;Patching, Mocks and Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c"&gt;How to test Flask applications&lt;/a&gt; with Databases, Templates and Protected Pages&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729"&gt;tox and nox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923"&gt;Structuring Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38"&gt;CI-Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119"&gt;Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 8: &lt;a href="https://medium.com/analytics-vidhya/unit-testing-in-python-mutation-testing-7a70143180d8"&gt;Mutation Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In future articles, I will present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static Code Analysis: Linters, Type Checking, and Code Complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you&amp;rsquo;re interested in other topics around testing with Python.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="pytest"></category></entry><entry><title>Property-based Testing</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119/" rel="alternate"></link><published>2020-08-02T20:00:00+02:00</published><updated>2020-08-02T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-08-02:/https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119/</id><summary type="html">&lt;p&gt;When you write unit tests, it&amp;rsquo;s hard to find the right test cases. You want to
be certain that you covered all the interesting cases, but you could simply not
know or forget one of them. For example, if you unit test a function which
receives an integer, you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you write unit tests, it&amp;rsquo;s hard to find the right test cases. You want to
be certain that you covered all the interesting cases, but you could simply not
know or forget one of them. For example, if you unit test a function which
receives an integer, you might think about testing 0, 1, and 2. But did you
think about negative numbers? What about big numbers?&lt;/p&gt;
&lt;p&gt;We were just thinking about a testing strategy for integers. A strategy is a
generator of data. The property testing framework hypothesis offers &lt;a href="https://hypothesis.readthedocs.io/en/latest/data.html"&gt;a lot of
strategies&lt;/a&gt; for many
types. You can install it with pip install hypothesis .&lt;/p&gt;
&lt;p&gt;One thing we can do with those inputs &amp;mdash; those tests strategies &amp;mdash; is to check if
the runtime is acceptable and if the tested function/method does not crash.&lt;/p&gt;
&lt;p&gt;It would be better if we compare the output of our function against something.
A check for equality is likely not possible, so we need to know a property of
our function. An invariant which we always expect to hold. We need to base our
test on an inherent property of the function.&lt;/p&gt;
&lt;p&gt;To whet your appetite for property-based testing even more:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/AfaNEebCDos" width="560"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="example-integer-factorization"&gt;Example: Integer factorization&lt;/h2&gt;
&lt;p&gt;We have a function factorize(n : int) -&amp;gt; List[int] which takes an integer and
returns the prime factors:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An integer n is called a prime number if it is positive and divisible by
exactly two numbers: 1 and n.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We want that the product of returned integers is the number itself. So this is
how we design the functions behavior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;factorize(0) = [0] &amp;mdash; an exception would have been reasonable as well&lt;/li&gt;
&lt;li&gt;factorize(1) = [1] &amp;mdash; strictly speaking, 1 is not a prime.&lt;/li&gt;
&lt;li&gt;factorize(-1) = [-1] &amp;mdash; &amp;hellip; and neither is -1&lt;/li&gt;
&lt;li&gt;factorize(-n) = [-1] + factorize(n) for n &amp;gt; 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An implementation might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;math&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# Treat the factor 2 on its own&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;

    &lt;span class="c1"&gt;# Now we only need to check uneven numbers&lt;/span&gt;
    &lt;span class="c1"&gt;# up to the square root of the number&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might feel a bit uneasy about the condition in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so you write a test to check for the important cases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;factorize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"n,expected"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# 0&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# 1&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# -1&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# A prime, but negative&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# Just one prime&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# A different prime&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# Different primes&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;  &lt;span class="c1"&gt;# Multiple times the same prime&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the test parametrization is unfamiliar, you might want to
&lt;a href="https://towardsdatascience.com/unit-testing-in-python-structure-57acd51da923"&gt;read up on pytest.mark.parametrize&lt;/a&gt;.
It&amp;rsquo;s awesome and those few lines run 8 tests:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-parametrize.png"&gt;&lt;img alt="Running pytest" src="../images/2020/08/pytest-parametrize.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Running pytest&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;How would a property-based test look like for factorize?&lt;/p&gt;
&lt;p&gt;First, we need to think about the property we want to test. For factorize as we
designed it, we know that the product of the returned numbers is equal to the
number itself. We can put in any integer, but if the integers become too big,
the runtime will be too long. So let&amp;rsquo;s constrain them in a reasonable range of
+/- one million:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;s&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;

&lt;span class="c1"&gt;# First party&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;factorize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;max_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_factorize_multiplication_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""The product of the integers returned by factorize(n) needs to be n."""&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"factorize(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) returned &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we run the tests with &lt;code&gt;pytest&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/pytest-factorize-hypothesis.png"&gt;&lt;img alt="Hypothesis found an issue!" src="../images/2020/08/pytest-factorize-hypothesis.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Hypothesis found an issue!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see in the example above, hypothesis discovered that factorize(5)
returned an empty list which does not multiply to 5. We can then quickly see
that we actually made a mistake for all primes &amp;mdash; we need to add the prime
number. After adding the following line, the tests run just fine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A curious thing to notice in the failed example is that it is the smallest positive integer where it fails. This is no coincidence. The property-testing framework tries to find a simple example which makes the test fail. This process is called &lt;a href="https://hypothesis.readthedocs.io/en/latest/data.html#shrinking"&gt;shrinking&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-did-hypothesis-generate"&gt;What did hypothesis generate?&lt;/h2&gt;
&lt;p&gt;You can have a look at examples like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;

&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="where-can-i-apply-property-based-testing"&gt;Where can I apply property-based testing?&lt;/h2&gt;
&lt;p&gt;This kind of pattern works for quite a couple of algorithms where verification
is cheap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arg_max"&gt;Arg max&lt;/a&gt;: Iterate over the list and ensure that no other element is larger.&lt;/li&gt;
&lt;li&gt;Solving a set of equations: Verify that the solution is actually a solution.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction"&gt;Constraint satisfaction&lt;/a&gt;: Verify that the solution satisfies all constraints.&lt;/li&gt;
&lt;li&gt;All &lt;a href="https://en.wikipedia.org/wiki/NP-completeness"&gt;NP complete problems&lt;/a&gt;: This is a set of decision problems where it is hard to find an answer, but easy to verify a found answer. An example is the traveling salesman. Given a set of cities which the salesman has to visit, is there a tour he can take which has a length of at most L? Given such a tour, it is easy to verify. Computing such a tour can be hard, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Weaker, but still helpful are checks which verify if the returned value is in the set of candidates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Greatest_common_divisor"&gt;Greatest common divisor&lt;/a&gt;: Ensure that it actually &lt;strong&gt;is a&lt;/strong&gt; divisor.&lt;/li&gt;
&lt;li&gt;Shortest path: Ensure it &lt;strong&gt;is a&lt;/strong&gt; path.&lt;/li&gt;
&lt;li&gt;Sorting and ranking: Ensure exactly the same elements are in the list as
  before. Maybe you can also test for the sorting/ranking criterion?&lt;/li&gt;
&lt;li&gt;Filtering: Assert that the relevant data is still there / that the other data
  was removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-generate-to-test-pattern"&gt;The Generate to Test Pattern&lt;/h2&gt;
&lt;p&gt;Sometimes it is easy to generate a sample to test the function you&amp;rsquo;re
interested in. For the factorization example above, you might have a list of
known primes and you multiply random subsets of them. If you write a function
that checks if a string is a palindrome, you can easily generate a palindrome
first. If you want to check if a text contains a given string, you can add
random text around that string and then check.&lt;/p&gt;
&lt;h2 id="example-testing-data-structures"&gt;Example: Testing Data Structures&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve implemented an interval data structure which has a method &lt;code&gt;issubset&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mpu.datastructures&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_interval_issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integer_list&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_interval_issubset_not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integer_list&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="string-verification"&gt;String Verification&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hypothesis&lt;/code&gt; can generate some special strings, for example email addresses and
IP addresses. This means you can easily check the positive cases for functions
which decide if something is an IP address or an email address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;s&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mpu.string&lt;/span&gt;  &lt;span class="c1"&gt;# Martins Python Utilities&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_is_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"is_email(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) returned False"&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_addresses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_is_ipv4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ipv4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"is_ipv4(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) returned False"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="invertible-functions"&gt;Invertible functions&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/inverse-function.svg"&gt;&lt;img alt="A function and its inverse function" src="../images/2020/08/inverse-function.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A function and its inverse function&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you have a function and its inverse function, such as encrypt / decrypt or a
serialize / deserialize function, you can test them together. The testing
strategy should then just give values within the domain.&lt;/p&gt;
&lt;p&gt;For example, if we wanted to test b64encode / b64decode , the test would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;base64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b64decode&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_base64_encode_decode_together&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test now also documents that those two functions belong together and are
meant to be used in this order.&lt;/p&gt;
&lt;h2 id="oracles"&gt;Oracles&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/08/oracles.jpg"&gt;&lt;img alt="Photo by Jen Theodore" src="../images/2020/08/oracles.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Photo by &lt;a href="https://unsplash.com/@jentheodore"&gt;Jen Theodore&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In complexity theory, an oracle is a black box which offers a solution to a
problem in instant time. In this context, it is just a second implementation
which we trust to be correct. If you have a complex algorithmic problem, you
might first want to implement a brute-force solution and then test your faster
algorithm against that easier to understand solution. The brute-force algorithm
is the oracle.&lt;/p&gt;
&lt;h2 id="use-type-annotations"&gt;Use Type Annotations!&lt;/h2&gt;
&lt;p&gt;I love type annotations 💓 I&amp;rsquo;ve you&amp;rsquo;re not using them, I highly recommend to
read about &lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations&lt;/a&gt;
and gradual typing.&lt;/p&gt;
&lt;p&gt;Type annotations are relevant for property-based testing as an annotated class
can be used to generate random objects of that class. As a data scientist
working on Machine Learning topics, I usually want this in my preprocessing /
postprocessing steps, where the objects of interest might be rather
complicated. Here is how hypothesis can support and generate those:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dataclasses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;


&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PdfInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;is_errornous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="n"&gt;is_encrypted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="n"&gt;nb_pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;nb_toc_top_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;nb_characters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;user_attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;


&lt;span class="c1"&gt;# Usage in test to generate one PdfInfo:&lt;/span&gt;
&lt;span class="c1"&gt;# @given(st.builds(PdfInfo))&lt;/span&gt;

&lt;span class="c1"&gt;# Now show some samples:&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PdfInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;##########&lt;/span&gt;
&lt;span class="c1"&gt;# Output #&lt;/span&gt;
&lt;span class="c1"&gt;##########&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=False, is_encrypted=True,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=False, is_encrypted=True,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=-6679854645310868666, nb_toc_top_level=20135,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_characters=-32,&lt;/span&gt;
&lt;span class="c1"&gt;#         user_attributes={'\x02\x15\U0001189c&amp;curren;\U000e7fde^&amp;sup1;': None})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=False, is_encrypted=False,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=True, is_encrypted=True,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=True, is_encrypted=False,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='&amp;not;&amp;acute;&amp;agrave;', is_errornous=True, is_encrypted=False,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=-17389, nb_toc_top_level=15767, nb_characters=124,&lt;/span&gt;
&lt;span class="c1"&gt;#         user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=True, is_encrypted=False,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=False, is_encrypted=False,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=False, is_encrypted=True,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;span class="c1"&gt;# PdfInfo(path='', is_errornous=False, is_encrypted=False,&lt;/span&gt;
&lt;span class="c1"&gt;#         nb_pages=0, nb_toc_top_level=0, nb_characters=0, user_attributes={})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you develop web applications with complex business logic it should also be
helpful.&lt;/p&gt;
&lt;h2 id="the-name-of-the-game"&gt;The Name of the Game&lt;/h2&gt;
&lt;p&gt;I have seen the same concept being called &lt;em&gt;generative testing&lt;/em&gt; and also
&lt;em&gt;data-driven testing&lt;/em&gt;. The first one is fine; we do generate sample data for
our tests.&lt;/p&gt;
&lt;p&gt;However, I would not call it &lt;em&gt;data-driven testing&lt;/em&gt;. We didn&amp;rsquo;t get real-world
data to generate our test cases.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also interesting to think about it the other way around: If we are now testing properties, what did we test before? &lt;a href="https://www.youtube.com/watch?v=p84DMv8TQuo"&gt;Andrea Leopardi&lt;/a&gt; calls it example-based or table-based testing.&lt;/p&gt;
&lt;p&gt;Example-based testing is good to cover known corner-cases, wheres property-based testing is good to discover unknown corner-cases.&lt;/p&gt;
&lt;p&gt;Property-based testing is almost the same as fuzzing. Nelson Elhage also makes
this point in &lt;a href="https://blog.nelhage.com/post/property-testing-is-fuzzing/"&gt;Property-testing is fuzzing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Property-based testing does not replace example-based testing, but complements
example-based testing. It sometimes documents properties in a very concise form
and helps to find unknown edge cases. It takes more time to execute
property-based tests than to execute example-based tests. hypothesis is a good
Python framework to write property-based tests.&lt;/p&gt;
&lt;h2 id="want-to-know-more-about-unit-testing"&gt;Want to know more about unit testing?&lt;/h2&gt;
&lt;p&gt;In this series, we already had:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;The basics of Unit Testing in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;Patching, Mocks and Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c"&gt;How to test Flask applications&lt;/a&gt; with Databases, Templates and Protected Pages&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729"&gt;tox and nox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923"&gt;Structuring Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6: &lt;a href="https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38"&gt;CI-Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 7: &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119"&gt;Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In future articles, I will present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutation Testing&lt;/li&gt;
&lt;li&gt;Static Code Analysis: Linters, Type Checking, and Code Complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you&amp;rsquo;re interested in other topics around testing with Python.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Testing"></category><category term="Unit Testing"></category><category term="fuzzing"></category><category term="hypothesis"></category></entry><entry><title>CI Pipelines</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38" rel="alternate"></link><published>2020-07-30T20:00:00+02:00</published><updated>2020-07-30T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-07-30:/https://levelup.gitconnected.com/ci-pipelines-for-python-projects-9ac2830d2e38</id><summary type="html">&lt;p&gt;Continuous Integration is the practice of integrating code regularly with the main development branch. You can see the need for this when you look at huge projects like SciPy with currently &lt;a href="https://github.com/scipy/scipy/pulls"&gt;274 open pull requests&lt;/a&gt; (PRs). This means 274 different new features, bug fixes or other improvements want to be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuous Integration is the practice of integrating code regularly with the main development branch. You can see the need for this when you look at huge projects like SciPy with currently &lt;a href="https://github.com/scipy/scipy/pulls"&gt;274 open pull requests&lt;/a&gt; (PRs). This means 274 different new features, bug fixes or other improvements want to be added. The maintainers likely don&amp;rsquo;t know the contributors in person. While there is no way around looking at the contributed change, there is a good solution to make sure things are not horribly wrong: Unit Tests.&lt;/p&gt;
&lt;p&gt;Running the test suite for all of those pull requests costs quite a bit of time. The quicker the maintainers can see if the PR has issues and what the issues are, the better.&lt;/p&gt;
&lt;p&gt;The solution is a Continuous Integration Pipeline. The CI Pipeline is code which is automatically executed. Usually, there are several steps in the pipeline, like (1) unit testing with pytest (2) linting with tools like flake8 or pylint (3) type checking with mypy (4) manual review. There is an automatically generated comment which lets the maintainers and the contributor know about the status of the pipeline steps.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/ci-feedback-github.png"&gt;&lt;img alt="Automatic feedback given by Github Actions, Travis, Azure Pipelines and Circle CI. Some of the steps fail, some succeed. The steps have links so that the maintainers can look at the details." src="../images/2020/07/ci-feedback-github.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Automatic feedback given by Github Actions, Travis, Azure Pipelines and Circle CI. Some of the steps fail, some succeed. The steps have links so that the maintainers can look at the details.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the following article, I will show you how to run unit tests automatically with various different CI Services such as Github Actions, Azure Pipelines, TravisCI and CircleCI.&lt;/p&gt;
&lt;h2 id="travis-ci"&gt;Travis CI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; was founded in 2011 and is the first CI service I&amp;rsquo;ve used. It is configured via a .travis.yml file&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve almost always used it with the following script with minor variations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.6&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.7&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.8&lt;/span&gt;
&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install coveralls tox-travis&lt;/span&gt;
&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox&lt;/span&gt;
&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;coveralls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="https://github.com/tox-dev/tox-travis"&gt;tox-travis&lt;/a&gt; package is awesome. I just made sure tox is working and then Travis worked as well. If you want a refresher about tox, have a look at &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729"&gt;the previous article&lt;/a&gt; in this series.&lt;/p&gt;
&lt;p&gt;The configuration file looks for sure less scary than the one of Github Actions. The interface of Travis is also pretty and clean:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/travis-overview.png"&gt;&lt;img alt="Web interface of Travis" src="../images/2020/07/travis-overview.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Web interface of Travis&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="github-actions"&gt;Github Actions&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;Github Actions&lt;/a&gt; is the CI/CD solution integrated into Github. It was released in November 2019 and thus is the most recently released service. The main advantage it has over the others is the integration into Github. You can create a new action by clicking on the offered tabs:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/github-action-create.png"&gt;&lt;img alt="Start to create a Github Action" src="../images/2020/07/github-action-create.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Start to create a Github Action&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The defaults are ok, but you might want to adjust a few things in the file. For example, I don&amp;rsquo;t support any Python version older than 3.6 in my private projects. I also want to install the dependencies from my requirements.txt . If you want to adjust the file name, you can do it. Commit when it looks fine.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/github-action-create-2.png"&gt;&lt;img alt="The next steps to create a Github Action via the Web Interface" src="../images/2020/07/github-action-create-2.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;The next steps to create a Github Action via the Web Interface&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, you can see the nice green check mark indicating that the run was successful.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/github-action-checkmark.png"&gt;&lt;img alt="See that the run was successful in Github Actions" src="../images/2020/07/github-action-checkmark.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;See that the run was successful in Github Actions&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can also click on the Actions tab and inspect the last run:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/github-action-inspect.png"&gt;&lt;img alt="Inspect the last run" src="../images/2020/07/github-action-inspect.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Inspect the last run&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="circleci"&gt;CircleCI&lt;/h2&gt;
&lt;p&gt;CircleCI is another possibility for a CI pipeline. They have a concept they call &lt;a href="https://circleci.com/orbs/"&gt;Orbs&lt;/a&gt; which is a re-usable set of configuration. It reminds me a bit of how you can have a Docker base image.&lt;/p&gt;
&lt;p&gt;The Python orb is on Github at &lt;a href="https://github.com/circleci-public/python-orb"&gt;CircleCI-Public/python-orb&lt;/a&gt;. The interesting parts are in src/commands . CircleCI has an &lt;a href="https://circleci.com/orbs/registry/orb/circleci/python"&gt;example page&lt;/a&gt; for the Python orb and a &lt;a href="https://circleci.com/docs/2.0/language-python/"&gt;Python language overview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The configuration I use for &lt;a href="https://github.com/MartinThoma/mpu"&gt;mpu&lt;/a&gt; only uses the checkout step. The rest is manually defined. The following is in .circleci/config.yml :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.1&lt;/span&gt;

&lt;span class="nt"&gt;orbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/python@0.2.1&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build-and-test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python/default&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements-dev.txt&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install Test requirements-dev&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -e .[all]&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install Pacakge&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Test&lt;/span&gt;

&lt;span class="nt"&gt;workflows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build-and-test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The CircleCI web interface looks nice and clean:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/circleci-overview.png"&gt;&lt;img alt="CircleCI Web Interface" src="../images/2020/07/circleci-overview.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;CircleCI Web Interface&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I&amp;rsquo;ve added CircleCI check to mpu and, of course, the badge should not be missing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[&lt;span class="nt"&gt;![MartinThoma&lt;/span&gt;](&lt;span class="na"&gt;[https://circleci.com/gh/MartinThoma/mpu.svg?style=shield&lt;/span&gt;)](https://app.circleci.com/pipelines/github/MartinThoma/mpu)](https://circleci.com/gh/MartinThoma/mpu.svg?style=shield)](https://app.circleci.com/pipelines/github/MartinThoma/mpu))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="gitlab-ci"&gt;Gitlab CI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.gitlab.com/ee/ci/yaml/README.html"&gt;Gitlab CI&lt;/a&gt; is similar to Github Actions in the sense that it is also integrated into the platform. You use a .gitlab-ci.yml file to configure it. However, I like Gitlab CI way more as it just seems so much cleaner.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take the linter &lt;a href="https://gitlab.com/pycqa/flake8"&gt;Flake8&lt;/a&gt; as an example. Their &lt;a href="https://gitlab.com/pycqa/flake8/-/blob/master/.gitlab-ci.yml"&gt;.gitlab-ci.yml&lt;/a&gt; is a bit lengthy, so I&amp;rsquo;ve shortened it to only the test stage. They have a build and a release stage as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;

&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;

&lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install pip --upgrade&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r dev-requirements.txt&lt;/span&gt;

&lt;span class="nt"&gt;after_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install codecov&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;codecov --token=7d117e6b-aab6-4283-ab19-166dafc38cf5&lt;/span&gt;

&lt;span class="nt"&gt;python36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python:3.6&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox -e py36&lt;/span&gt;

&lt;span class="nt"&gt;python37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python:3.7&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox -e py37&lt;/span&gt;

&lt;span class="nt"&gt;python38&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python:3.8&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox -e py38&lt;/span&gt;

&lt;span class="nt"&gt;linters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python:3.7&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox -e linters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the web interface, it looks like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/gitlab-pipelines.png"&gt;&lt;img alt="Web interface of gitlab" src="../images/2020/07/gitlab-pipelines.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Web interface of gitlab&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can also tick a checkbox in the &amp;ldquo;Settings&amp;rdquo; section of your repository to prevent merges if the pipelines fail. You should do it.&lt;/p&gt;
&lt;h2 id="azure-pipelines"&gt;Azure Pipelines&lt;/h2&gt;
&lt;p&gt;Azure is Microsoft's Cloud Platform, similar to AWS from Amazon or GCP from Google. As with all of those big cloud platforms, things are overly complicated. It&amp;rsquo;s no comparison to the ease of Travis.&lt;/p&gt;
&lt;p&gt;There are many things I don&amp;rsquo;t like about Azure Pipelines, especially that it requires the permission to make code changes. This is mainly done as a convenience feature so that it can create the configuration file azure-pipelines.yml . I hate that, because the CI solution should not touch my code. It should just read it. But as Github was bought by Microsoft and Azure Pipelines is also owned by Microsoft, I guess there is not too much harm in giving it access 🤷&lt;/p&gt;
&lt;p&gt;Azure Pipelines have one killer feature: You can execute stuff on Windows machines. Let&amp;rsquo;s dive into the shortest path to get there:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="http://azure.microsoft.com/services/devops/pipelines/"&gt;azure.microsoft.com/services/devops/pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a project&lt;/li&gt;
&lt;li&gt;Click on Pipelines -&amp;gt; Create Pipeline -&amp;gt; Github YAML -&amp;gt; Pyton Package&lt;/li&gt;
&lt;li&gt;Use vmImage: 'VS2017-Win2016'&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will create a azure-pipelines.yml in the project root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# [https://docs.microsoft.com/azure/devops/pipelines/languages/python](https://docs.microsoft.com/azure/devops/pipelines/languages/python)&lt;/span&gt;

&lt;span class="nt"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;

&lt;span class="nt"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'VS2017-Win2016'&lt;/span&gt;
&lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Python36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;python.version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'3.6'&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Python37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;python.version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'3.7'&lt;/span&gt;

&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;UsePythonVersion@0&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'$(python.version)'&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Use&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Python&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;$(python.version)'&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;python -m pip install --upgrade pip&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;pip install -r requirements-dev.txt&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;dependencies'&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;pip install .[all]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;package'&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;pip install pytest pytest-azurepipelines&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;pytest -vv&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'pytest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing I did after the pipeline itself worked was to add a project badge:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[&lt;span class="nt"&gt;![Build Status&lt;/span&gt;](&lt;span class="na"&gt;[https://dev.azure.com/martinthoma/mpu/_apis/build/status/MartinThoma.mpu?branchName=master&lt;/span&gt;)](https://dev.azure.com/martinthoma/mpu/_build/latest?definitionId=1&amp;amp;branchName=master)](https://dev.azure.com/martinthoma/mpu/_apis/build/status/MartinThoma.mpu?branchName=master)](https://dev.azure.com/martinthoma/mpu/_build/latest?definitionId=1&amp;amp;branchName=master))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main reason for adding the badge was that Azure tries to create new accounts for me. I have a super hard time coming back to the main overview page 😢&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/azure-overview.png"&gt;&lt;img alt="Azure project overview page" src="../images/2020/07/azure-overview.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Azure project overview page&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you click on one of the failing jobs, you can see this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/azure-failing-pytest.png"&gt;&lt;img alt="A failing pytest run" src="../images/2020/07/azure-failing-pytest.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A failing pytest run&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="ci-service-comparison"&gt;CI Service Comparison&lt;/h2&gt;
&lt;p&gt;The unique selling point of Azure is the possibility to run code on a Windows machine. The killer argument for Github Actions / Gitlab CI is the integration into github.com / Gitlab.&lt;/p&gt;
&lt;p&gt;Looking only at the &lt;strong&gt;Web Interface&lt;/strong&gt;, I like CircleCI, Travis and Gitlab very much. Github Actions is a bit overloaded and I hate Azure pipelines because I cannot find an easy way to go to my account.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;configuration file format&lt;/strong&gt; is YAML for all of them. I like that most of the services have a leading dot for the file / folder, so that the CI config is hidden on Linux. Only Azure Pipelines wants to be visible. Looking at the configuration itself, Travis and Gitlab look cleanest to me. CircleCI offers the unique &amp;ldquo;orb&amp;rdquo; concept which I&amp;rsquo;m not used to &amp;mdash; that might make things way simpler on the long run.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;execution speed&lt;/strong&gt; of the steps felt pretty fast for CircleCI, but I didn&amp;rsquo;t thoroughly test that one.&lt;/p&gt;
&lt;p&gt;All of the presented CI Services send an email when you broke the pipeline and when it&amp;rsquo;s fixed again. I&amp;rsquo;m uncertain how easy it is to set up other &lt;strong&gt;notifications&lt;/strong&gt; like Slack messages. I have seen &lt;a href="https://medium.com/better-programming/5-jenkins-plugins-you-should-use-867e39fbf532"&gt;Slack notifications for Jenkins&lt;/a&gt; and for Gitlab.&lt;/p&gt;
&lt;p&gt;A point which I didn&amp;rsquo;t bring up so far is &lt;strong&gt;continuous delivery (CD)&lt;/strong&gt;. All of the presented services can also be used for CD. Would you like to read an article specifically about CD?&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/geek-and-poke-automated-tests.jpg"&gt;&lt;img alt="Geek and Poke: CI" src="../images/2020/07/geek-and-poke-automated-tests.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Geek and Poke: &lt;a href="http://geek-and-poke.com/geekandpoke/2010/10/26/geekpokes-list-of-best-practices-today-continuous-integratio.html"&gt;CI&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="want-to-know-more-about-unit-testing"&gt;Want to know more about unit testing?&lt;/h2&gt;
&lt;p&gt;In this series, we already had:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;The basics of Unit Testing in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;Patching, Mocks and Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c"&gt;How to test Flask applications&lt;/a&gt; with Databases, Templates and Protected Pages&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729"&gt;tox and nox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://towardsdatascience.com/unit-testing-in-python-structure-57acd51da923"&gt;Structuring Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6: CI-Pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In future articles, I will present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Property-based Testing&lt;/li&gt;
&lt;li&gt;Mutation Testing&lt;/li&gt;
&lt;li&gt;Static Code Analysis: Linters, Type Checking, and Code Complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you&amp;rsquo;re interested in other topics around testing with Python.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Joaqu&amp;iacute;n Menchaca: &lt;a href="https://medium.com/@Joachim8675309/jenkins-ci-pipeline-with-python-8bf1a0234ec3"&gt;Jenkins CI Pipeline with Python&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/@andronovhopf"&gt;Elle O&amp;rsquo;Brien&lt;/a&gt;: &lt;a href="https://towardsdatascience.com/what-data-scientists-need-to-know-about-devops-2f8bc6660284"&gt;What data scientists need to know about DevOps&lt;/a&gt;, 2020.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="DevOps"></category></entry><entry><title>Structuring Unit Tests</title><link href="https://martin-thoma.com/https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923" rel="alternate"></link><published>2020-07-25T20:00:00+02:00</published><updated>2020-07-25T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-07-25:/https://medium.com/python-in-plain-english/unit-testing-in-python-structure-57acd51da923</id><summary type="html">&lt;p&gt;Testing code is often pretty ugly: A lot of copy &amp;amp; paste, the code is all over
the place and hard to understand. In this article you will learn how to
structure unit testing code in Python.&lt;/p&gt;
&lt;h2 id="directory-layout"&gt;Directory Layout&lt;/h2&gt;
&lt;p&gt;I put the tests next to the package. So the tests are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Testing code is often pretty ugly: A lot of copy &amp;amp; paste, the code is all over
the place and hard to understand. In this article you will learn how to
structure unit testing code in Python.&lt;/p&gt;
&lt;h2 id="directory-layout"&gt;Directory Layout&lt;/h2&gt;
&lt;p&gt;I put the tests next to the package. So the tests are not part of the package, only of the repository. The reason is simply to keep the package small.&lt;/p&gt;
&lt;p&gt;A part of my package &lt;a href="https://github.com/MartinThoma/mpu"&gt;mpu&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mpu &amp;lt;-- Root of the git repository
&amp;boxvr;&amp;boxh;&amp;boxh; mpu &amp;lt;-- Root of the package
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; datastructures/
&amp;boxv;   &amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;   &amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; trie
&amp;boxv;   &amp;boxv;       &amp;boxvr;&amp;boxh;&amp;boxh; char_trie.py
&amp;boxv;   &amp;boxv;       &amp;boxur;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; geometry.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; image.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; io.py
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; _version.py
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; requirements-dev.in
&amp;boxvr;&amp;boxh;&amp;boxh; requirements-dev.txt
&amp;boxvr;&amp;boxh;&amp;boxh; tests/
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; files/
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; test_char_trie.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; test_datastructures.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; test_geometry.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; test_image.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; test_io.py
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; test_main.py
&amp;boxur;&amp;boxh;&amp;boxh; tox.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should notice the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The tests/ are side-by-side to the mpu/ directory which contains the code. The two alternatives are (1) to have a tests/ directory within the mpu/ package so that the tests get shipped with the code or (2) to put the test of a module next to the module. I would discourage (2) as I have never seen it for Python, but (1) is also &lt;a href="https://github.com/pandas-dev/pandas/tree/master/pandas"&gt;commonly&lt;/a&gt; &lt;a href="https://github.com/scipy/scipy/tree/master/scipy/sparse"&gt;done&lt;/a&gt; and &lt;a href="https://docs.pytest.org/en/latest/goodpractices.html#tests-as-part-of-application-code"&gt;mentioned by pytest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every test file starts with test_ . That makes it easy to recognize which files contain the tests. It&amp;rsquo;s the default of pytest and I don&amp;rsquo;t see a reason to change it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="names-of-test-functions"&gt;Names of Test Functions&lt;/h2&gt;
&lt;p&gt;When you have a fibonacci(n: int) -&amp;gt; int function, you will likely have a test_fibonacci function. And when test suites grow, there might appear a test_fibonacci2 or something similar. Don&amp;rsquo;t do that. I know, naming things is hard.&lt;/p&gt;
&lt;p&gt;You will see the name of this function when the test fails. Which name will help you to quickly understand what was tested?&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/geek-and-poke-tdd.jpg"&gt;&lt;img alt="Comic by Oliver Widder on geek-and-poke.com" src="../images/2020/07/geek-and-poke-tdd.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Comic by Oliver Widder on &lt;a href="http://geek-and-poke.com/geekandpoke/2013/7/28/tdd"&gt;geek-and-poke.com&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="docstrings-of-test-functions"&gt;Docstrings of test functions&lt;/h2&gt;
&lt;p&gt;Docstrings can be super helpful. Especially if the thing you need to test is complex. You can add details on why this test exists and how the expected values were calculated.&lt;/p&gt;
&lt;p&gt;On module level, you can add a docstring to tell the reader what should be within this test module. Do you test a specific module of the code base? Is it some common types of test you want to apply for different modules? Are there common issues that should be tested?&lt;/p&gt;
&lt;p&gt;Test level docstrings are used in a good way in parts of
&lt;a href="https://github.com/sympy/sympy/blob/master/sympy/solvers/tests/test_recurr.py#L78"&gt;sympy&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;recurrence_term&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Compute RHS of recurrence in f(n) with coefficients in c."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are tons of negative examples like this from Flask, where the docstring
adds no value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_jsonify_basic_types&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Test jsonify with basic types."""&lt;/span&gt;


&lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_scriptinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;monkeypatch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Test of ScriptInfo."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve also checked my own code and I&amp;rsquo;ve mainly seen neutral or negative uses of test level docstrings 😱&lt;/p&gt;
&lt;h2 id="pytest-markers"&gt;Pytest markers&lt;/h2&gt;
&lt;p&gt;Pytest gives you the option to decorate your code with &lt;code&gt;@pytest.mark.foo&lt;/code&gt;,
where &lt;code&gt;foo&lt;/code&gt; can be any arbitrary string you like. I use &lt;code&gt;@pytest.mark.slow&lt;/code&gt; quite
often. Then you can execute all tests which are not slow like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not slow"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve seen the marks high_memory and db in Pandas as well.&lt;/p&gt;
&lt;h2 id="shared-test-helpers"&gt;Shared test helpers&lt;/h2&gt;
&lt;p&gt;Once in a while you need helper functions for your tests which appear in
multiple tests. Now there are multiple ways how to deal with that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Duplicate the code&lt;/li&gt;
&lt;li&gt;Import the helper function from a test/foo.py file&lt;/li&gt;
&lt;li&gt;Import the helper function from the main package, e.g. within a test_helpers / tests directory.&lt;/li&gt;
&lt;li&gt;Import the helper function from one test_foo.py file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would not go for option (4) as it seems pretty arbitrary to put code there.
Besides that, I see no clear best option:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is nice, because it keeps the test code easy to understand. You have to look
   at most at two 3 files: The &lt;code&gt;foo.py&lt;/code&gt;, the test_foo.py and the conftest.py
   (see later). If you like &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY
   code&lt;/a&gt;, this is not
   for you.&lt;/li&gt;
&lt;li&gt;You keep things DRY and you keep tests out of the production code. The
   disadvantage is that it feels like building a separate, potentially
   untested, code base.&lt;/li&gt;
&lt;li&gt;This way it&amp;rsquo;s clear that you should test the test helpers. You expose them
   to others who might need them as well. The disadvantage is that you extend
   the production code you ship.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pytest-configuration"&gt;Pytest configuration&lt;/h2&gt;
&lt;p&gt;I usually put everything that configures pytest in thesetup.cfgand the fixtures
in a &lt;a href="https://docs.pytest.org/en/2.7.3/plugins.html"&gt;conftest.py&lt;/a&gt; within
&lt;code&gt;tests/&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="fixtures"&gt;fixtures&lt;/h2&gt;
&lt;p&gt;The Python style of writing tests is by creating a function which contains the
test. This might seem weird to you if you come from a Java / JUnit-influenced
testing world. There you have a class with a setUp and tearDown method and
various methods for the single tests.&lt;/p&gt;
&lt;p&gt;For a long time, I&amp;rsquo;ve used the old and uglyunittest.TestCase if I had a lot of
tests which needed some common preparation &amp;mdash; I thought there was no way around
setUp and tearDown . I&amp;rsquo;ve been wrong.&lt;/p&gt;
&lt;p&gt;Pytest fixtures can do exactly that. Their structure looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# setUp()&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# whatever you want to pass&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
    &lt;span class="c1"&gt;# tearDown()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_awesomeness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the argument to test_awesomeness is called just like the fixture. That is no coincidence. It has to be the same name so that pytest passes the fixture.&lt;/p&gt;
&lt;p&gt;I usually define the fixtures in tests/conftest.py . Pytest will register them and supply them to your test automatically. No need to import the conftest.py anywhere.&lt;/p&gt;
&lt;p&gt;Here is an example to demonstrate that the tests are isolated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;show_isolation&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_isolation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;show_isolation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_isolation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;show_isolation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want real examples, have a look at my tutorial &lt;a href="https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c"&gt;how to test Flask Applications&lt;/a&gt;. There I show how to use fixtures to mock the database.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/geek-and-poke-good-coders.jpg"&gt;&lt;img alt="Comic by Oliver Widder from geek-and-poke.com" src="../images/2020/07/geek-and-poke-good-coders.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Comic by Oliver Widder from &lt;a href="http://geek-and-poke.com/geekandpoke/2011/7/24/good-coders.html"&gt;geek-and-poke.com&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="parametrizing-test-functions"&gt;Parametrizing test functions&lt;/h2&gt;
&lt;p&gt;Have a look at the Fibonacci function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Testing the first seven Fibonacci numbers seems like a good idea. You could create one test for each of them in &lt;code&gt;test_fib_many.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fibonacci&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_0&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_4&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_5&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_6&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you could test them all in &lt;code&gt;test_fib_one.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fibonacci&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_first_seven&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;n2expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n2expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;test_fib_one.py&lt;/code&gt; will fail at the first example that fails. Assume you&amp;rsquo;re
asking students to hand in an implementation of Fibonacci as homework and one
of them just hard-codes the first three cases. Another student gets it almost
right, but starts with &lt;code&gt;1,1,2,3,5,8&lt;/code&gt; instead of &lt;code&gt;0,1,1,2,3,5,8&lt;/code&gt;. For both
students, you would see only one failing test. You would see one example which
didn&amp;rsquo;t pass and why, but you wouldn&amp;rsquo;t have a clue in which way the other
examples were wrong.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;test_fib_many.py&lt;/code&gt; will show you all mistakes. However, it is super
verbose.&lt;/p&gt;
&lt;p&gt;There is a better way to test to combine both advantages: &lt;a href="https://docs.pytest.org/en/stable/parametrize.html"&gt;Parametrizing test
functions&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fibonacci&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"n,expected"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_route_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parametrization example looks similar to the &lt;code&gt;test_fib_one.py&lt;/code&gt;, but it will
fail for every single parameter which is wrong. As an example, I manipulated
the Fibonacci function to return &lt;code&gt;42&lt;/code&gt; for &lt;code&gt;n=2&lt;/code&gt; and &lt;code&gt;n=3&lt;/code&gt;. Here is how the
error looks like with pytests parametrization:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot taken by Martin Thoma" src="https://cdn-images-1.medium.com/max/2000/1*U7bFojobikHFYkvmF0RK_g.png"/&gt;&lt;em&gt;Screenshot taken by Martin Thoma&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Both, the test and the test output in case of failure are now more readable! I
love this so much 😍&lt;/p&gt;
&lt;h2 id="dependencies-between-tests"&gt;Dependencies between tests&lt;/h2&gt;
&lt;p&gt;In some cases, you know that a test will fail if another one has failed
already. You could model that with
&lt;a href="https://pypi.org/project/pytest-dependency/"&gt;pytest-dependency&lt;/a&gt;. However, I
encourage you to think carefully about this. Maybe you can &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;patch dependencies
away&lt;/a&gt;
to make sure you&amp;rsquo;re only testing one thing in one unit test? Maybe the function
you want to test can be split into multiple functions if it has too many
dependencies?&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Brian K Okken: &lt;a href="https://www.youtube.com/watch?v=2R1HELARjUk"&gt;Multiply your Testing Effectiveness with Parameterized Testing&lt;/a&gt;, PyCon 2020. On YouTube.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="pytest"></category></entry><entry><title>Unit Testing in Python — tox and nox</title><link href="https://martin-thoma.com/https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729" rel="alternate"></link><published>2020-07-23T20:00:00+02:00</published><updated>2020-07-23T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-07-23:/https://medium.com/python-in-plain-english/unit-testing-in-python-tox-and-nox-833e4bbce729</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/alice-full- Andrea-Caprotti.png"&gt;&lt;img alt="Image derived by Martin Thoma from Andrea Caprotti (nox project)" src="../images/2020/07/alice-full- Andrea-Caprotti.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Image derived by Martin Thoma from &lt;a href="https://github.com/theacodes/nox/blob/master/docs/_static/alice-full.png"&gt;Andrea Caprotti&lt;/a&gt; (nox project)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When I started developing Python packages, there was one mistake I did quite often: I forgot to add all dependencies. Additionally, I only tested on my machine for a single Python version.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know how …&lt;/p&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/alice-full- Andrea-Caprotti.png"&gt;&lt;img alt="Image derived by Martin Thoma from Andrea Caprotti (nox project)" src="../images/2020/07/alice-full- Andrea-Caprotti.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Image derived by Martin Thoma from &lt;a href="https://github.com/theacodes/nox/blob/master/docs/_static/alice-full.png"&gt;Andrea Caprotti&lt;/a&gt; (nox project)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When I started developing Python packages, there was one mistake I did quite often: I forgot to add all dependencies. Additionally, I only tested on my machine for a single Python version.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know how to locally and automatically test multiple Python versions in isolated environments. This is a preparation for Continuous Integration tools like Travis. I assume you already know &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;the basics of unit testing in Python&lt;/a&gt; and &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;how to package your code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="pyenv"&gt;pyenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; is a tool which lets you easily install and switch Python environments on your system. Take a look at &lt;a href="https://github.com/pyenv/pyenv#installation"&gt;the official installation instructions&lt;/a&gt;; it&amp;rsquo;s not a Python package but hooks directly into your shell.&lt;/p&gt;
&lt;p&gt;Once it is installed, you can get a list of all available Python environments. In July 2020, there were 427 different versions! I&amp;rsquo;ve shortened them here to show you the ones I think are interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list
Available&lt;span class="w"&gt; &lt;/span&gt;versions:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.18
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.11
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.7.8
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.4
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.0b4
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9-dev
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10-dev
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pypy-c-jit-latest
&lt;span class="w"&gt;  &lt;/span&gt;pypy-dev
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pypy-5.7.1
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;pypy3.6-7.3.1
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install a Python version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.4
Downloading&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.4.tar.xz...
-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;https://www.python.org/ftp/python/3.8.4/Python-3.8.4.tar.xz&lt;span class="o"&gt;](&lt;/span&gt;https://www.python.org/ftp/python/3.8.4/Python-3.8.4.tar.xz&lt;span class="o"&gt;)&lt;/span&gt;
Installing&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.4...
Installed&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.4&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.4

$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;--version
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.4

$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--version
pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;.1.1&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.4/lib/python3.8/site-packages/pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="virtual-environment-basics"&gt;Virtual environment basics&lt;/h2&gt;
&lt;p&gt;A virtual environment encapsulates the installed packages. Different virtual environments still share the same operating system, the same installed c libraries and executables. The only difference is which packages are available.&lt;/p&gt;
&lt;p&gt;You can create a new virtual environment called venv-tutorial like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;venv-tutorial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It creates a folder which contains all installed packages and few other things. To use it, you need to activate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;venv-tutorial/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will add the prefix (venv-tutorial) in front of your prompt. It will make sure that later calls to python and pip use this environment. If you want to stop it again, type deactivate in the shell. If you delete this folder, the virtual environment is gone.&lt;/p&gt;
&lt;h2 id="testing-multiple-python-versions-without-tox"&gt;Testing multiple Python versions without tox&lt;/h2&gt;
&lt;p&gt;When you claim that your project supports Python 2.7 and 3.5 to 3.8, then you better test those versions. In order to make sure that you install the packages properly, you should create a virtual environment. You might end up with creating a shell script which creates those virtual environments, starts the tests and deletes the virtual environments again.&lt;/p&gt;
&lt;h2 id="how-to-use-tox"&gt;How to use tox&lt;/h2&gt;
&lt;p&gt;tox uses a tox.ini file which is in the package root directory. So your project structure might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;your-awesome-project/            # The git repository
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; setup.py                     # Dependencies / Package Meta data
&amp;boxvr;&amp;boxh;&amp;boxh; your_awesome_package/        # Code of the package
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; a_module.py
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; another_module.py
&amp;boxvr;&amp;boxh;&amp;boxh; tests/                       # Unit tests
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; test_a_module.py
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; test_another_module.py
&amp;boxur;&amp;boxh;&amp;boxh; tox.ini                      # Why you're reading this article
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;tox.ini&lt;/code&gt; file to run the tests in an isolated Python environment for
Python 3.6, Python 3.7 and Python 3.8 looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;py36,py37,py38&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;-r requirements-dev.txt&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pip install -e .[all]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pytest .&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pydocstyle&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you need to have the different Python versions already installed. You
can do this with pyenv and make them available with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.4&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.7.8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run tox within the root folder &amp;mdash; the same folder that contains your tox.ini file.&lt;/p&gt;
&lt;p&gt;The next thing you might want to do is to break a couple of things out of the pytest run. For example, it&amp;rsquo;s not necessary to run the linter flake8 and blackin every single environment. Instead, you can define a linter environment which is run once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;linter,py36,py37,py38&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;-r requirements-dev.txt&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pip install -e .[all]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pytest .&lt;/span&gt;

&lt;span class="k"&gt;[testenv:linter]&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8-bugbear&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8-builtins&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8-comprehensions&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8-string-format&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;black&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pydocstyle&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;flake8&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;black --check .&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pydocstyle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, you want to run the different environments in parallel for speed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tox&lt;span class="w"&gt; &lt;/span&gt;-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If one of them fails, you get this type of output:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/tox-parallel-run.png"&gt;&lt;img alt="Run tox in parallel, showing a linter issue. This output is way cleaner than
if you had run flake8 and black via pytest. It might be a tiny bit faster, but
that difference is not relevant." src="../images/2020/07/tox-parallel-run.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Run tox in parallel, showing a linter issue. This output is way cleaner than
if you had run flake8 and black via pytest. It might be a tiny bit faster, but
that difference is not relevant.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you want to run just the linter, tox -e linter is your friend 🙂&lt;/p&gt;
&lt;p&gt;You can also create a matrix of different combinations of Python environments and dependencies you install. Thea Flowers showed this at PyCon 2019 (&lt;a href="https://youtu.be/-BHverY7IwU?t=678"&gt;video&lt;/a&gt;), but I never had the need to go down that rabbit hole.&lt;/p&gt;
&lt;h2 id="now-what-is-nox"&gt;Now&amp;hellip; what is nox?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt; is a spin-off of tox. Instead of using a tox.ini configuration file, it uses a noxfile.py Python file. It&amp;rsquo;s pretty similar to tox, but more flexible as it uses Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;nox&lt;/span&gt;


&lt;span class="nd"&gt;@nox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"3.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"3.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"3.8"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".[all]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-r"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"requirements-dev.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pytest"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@nox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"3.8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-r"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"requirements-lint.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"flake8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--check"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can run a single session of nox with &lt;code&gt;nox -s lint&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/nox-single-session.png"&gt;&lt;img alt="A single nox session" src="../images/2020/07/nox-single-session.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A single nox session&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Overall, not a huge difference. The output of nox is way nicer and for people who get started, I think the Python code written with nox is a bit simpler to read and understand than the tox.ini configuration file.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;Awesome, you now know how to automate testing multiple environments on your machine. Next, I will show you how to set up various Continuous Integration pipelines. CI is a huge helper for open source as you don&amp;rsquo;t need to run the tests yourself anymore &amp;mdash; a bot will do it for you and leave a comment if the PR looks fine.&lt;/p&gt;
&lt;p&gt;Going in another direction, you might want to learn how to structure your tests.&lt;/p&gt;
&lt;p&gt;Is there anything else you&amp;rsquo;re interested in?
Let me know: info@martin-thoma.de&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="pytest"></category><category term="tox"></category><category term="nox"></category><category term="unit testing"></category></entry><entry><title>How to Test Flask Applications</title><link href="https://martin-thoma.com/https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c" rel="alternate"></link><published>2020-07-19T20:00:00+02:00</published><updated>2020-07-19T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-07-19:/https://medium.com/analytics-vidhya/how-to-test-flask-applications-aef12ae5181c</id><summary type="html">&lt;p&gt;As a data scientist, I need to make my models accessible. I usually &lt;a href="https://medium.com/analytics-vidhya/deploying-a-machine-learning-model-on-web-using-flask-and-python-54b86c44e14a"&gt;deploy models with Flask&lt;/a&gt;. As a software engineer, I want to make sure things work as expected by unit testing them.&lt;/p&gt;
&lt;p&gt;Unit Testing websites or web services is hard for multiple reasons: You have Code-within-Code like HTML …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a data scientist, I need to make my models accessible. I usually &lt;a href="https://medium.com/analytics-vidhya/deploying-a-machine-learning-model-on-web-using-flask-and-python-54b86c44e14a"&gt;deploy models with Flask&lt;/a&gt;. As a software engineer, I want to make sure things work as expected by unit testing them.&lt;/p&gt;
&lt;p&gt;Unit Testing websites or web services is hard for multiple reasons: You have Code-within-Code like HTML template engines and SQL. Additionally, you have Databases as dependencies which are pretty hard to mock. In this article you will learn how to deal with those challenges in the case of the Flask web framework. I assume you have used Flask before and that you &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;know the basics of unit testing in Python&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="my-tiny-flask-app"&gt;My Tiny Flask App&lt;/h2&gt;
&lt;p&gt;In order to make ensure correctness of the following parts, I&amp;rsquo;ve created a tiny Flask app. You can copy &lt;a href="https://github.com/MartinThoma/algorithms/tree/master/medium/flask-testing/example-app"&gt;all files from GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The general structure is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;example-app
&amp;boxvr;&amp;boxh;&amp;boxh; mini_app
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py  # make the folder a package
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; app.py       # contains the Flask app object
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; config.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; models.py    # SQLAlchemy models
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; templates    # HTML / Jinja2 templates
&amp;boxur;&amp;boxh;&amp;boxh; tests
    &amp;boxvr;&amp;boxh;&amp;boxh; conftest.py  # General Test configuration
    &amp;boxur;&amp;boxh;&amp;boxh; test_app.py  # The actual unit tests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only file you don&amp;rsquo;t find in there is .envrc which is used with direnv to set environment variables. Its content looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DB_DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;books
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;you_wish_i_forgot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="how-to-test-routes"&gt;How to test Routes&lt;/h2&gt;
&lt;p&gt;Routes typically look like this in Flask:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/square"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation of Flask contains &lt;a href="https://flask.palletsprojects.com/en/1.1.x/testing/"&gt;Testing Flask Applications&lt;/a&gt; which covers this topic. It especially contains an example how to create a pytest fixture. Imagine a fixture like a way to set things up before your tests and to clean up after the test run. In this simple example, we assume that your application is a proper Python package and called flaskr . You can download an example from Github &lt;a href="https://github.com/pallets/flask/tree/1.1.2/examples/tutorial/flaskr"&gt;flask/examples/tutorial/flaskr&lt;/a&gt; . The fixture in this simple case looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Prepare before your test&lt;/span&gt;
    &lt;span class="n"&gt;flaskr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TESTING"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;flaskr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Give control to your test&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="c1"&gt;# Cleanup after the test run.&lt;/span&gt;
    &lt;span class="c1"&gt;# ... nothing here, for this simple example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pytest fixtures are a bit magical. You can give them as a parameter to the test, but you don&amp;rsquo;t have to execute it. The fixture just has to be discoverable by pytest.&lt;/p&gt;
&lt;p&gt;The complete test then looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TESTING"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/square?number=8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;"64"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of putting the fixture in the test directly, you can put them in &lt;code&gt;tests/conftest.py&lt;/code&gt;. pytest will find them there and use in all tests. No need to import.&lt;/p&gt;
&lt;h2 id="how-to-deal-with-the-database"&gt;How to deal with the Database&lt;/h2&gt;
&lt;p&gt;Most web applications have a database. When running tests, you want to be certain that the tests don&amp;rsquo;t hit the production database. At the same time, you want something like a database to be there.&lt;/p&gt;
&lt;p&gt;I assume that you are using
&lt;a href="https://github.com/pallets/flask-sqlalchemy"&gt;flask-sqlalchemy&lt;/a&gt;. It is part of
the pallets project and thus an official part of the Flask ecosystem. With that
plugin, you configure your database connection via
&lt;code&gt;app.config["SQLALCHEMY_DATABASE_URI"]&lt;/code&gt;. If you override that configuration
string with &lt;code&gt;sqlite://&lt;/code&gt;, flask-sqlalchemy will create an in-memory SQLite
database and use that instead of the real database. This is super fast to
create and interact with (see
&lt;a href="https://martin-thoma.com/key-value-stores/#benchmark_1"&gt;benchmark&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You can adjust the client fixture like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mini_app.app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mini_app.models&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TESTING"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# This creates an in-memory sqlite db&lt;/span&gt;
    &lt;span class="c1"&gt;# See https://martin-thoma.com/sql-connection-strings/&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"SQLALCHEMY_DATABASE_URI"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlite://"&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;author1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can easily run your tests against the fake database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/author/1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"first_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"last_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this will become harder the more complex your data becomes and the more data you need to properly test your views.&lt;/p&gt;
&lt;h3 id="wait-what-about-testing-the-sql-queries"&gt;Wait &amp;hellip; what about testing the SQL Queries?&lt;/h3&gt;
&lt;p&gt;You might wonder now how to test the SQL queries. Testing that they work at all should not be necessary if you use SQLAlchemy. And I really recommend to use SQLAlchemy when you use Flask with a relational database. If your queries are too complex for that, you can have a look at Query Builders. Avoid using raw SQL. In most cases it should not be necessary.&lt;/p&gt;
&lt;h2 id="protected-routes_1"&gt;Protected Routes&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s pretty common that you have routes which are either protected by &lt;a href="https://en.wikipedia.org/wiki/Basic_access_authentication"&gt;Basic Auth&lt;/a&gt; or need a form of login. You can essentially also set up a test account in the client fixture and login manually. This requires some work and depends on what exactly you&amp;rsquo;re doing for authentication.&lt;/p&gt;
&lt;h3 id="basic-access-authentication"&gt;Basic Access Authentication&lt;/h3&gt;
&lt;p&gt;You can provide the necessary credentials in the header within the test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;base64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;b64encode&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_protected_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;"user:password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"protected/route"&lt;/span&gt;
    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Basic "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="flask-login"&gt;Flask Login&lt;/h3&gt;
&lt;p&gt;Flask-login is a pretty widespread plugin to handle user session management.
They have a &lt;a href="https://flask-login.readthedocs.io/en/latest/#protecting-views"&gt;section about unit
testing&lt;/a&gt; in
which they suggest do set the configuration variable &lt;code&gt;LOGIN_DISABLED&lt;/code&gt; to
&lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="test-jinja2-templates_1"&gt;Test Jinja2 Templates&lt;/h2&gt;
&lt;p&gt;Before we dive into testing Jinja2 Templates, let&amp;rsquo;s first recap a couple of
things that can go wrong.&lt;/p&gt;
&lt;h3 id="problem-1-empty-double-braces"&gt;Problem 1: Empty Double Braces&lt;/h3&gt;
&lt;p&gt;You wanted to write something, got interrupted and now your template has &lt;code&gt;{{}}&lt;/code&gt;
in it. When Jinja tries to render this, you will get&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;jinja2.exceptions.TemplateSyntaxError: Expected an expression, got 'end of print statement'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="problem-2-data-structure-confusion"&gt;Problem 2: Data Structure confusion&lt;/h3&gt;
&lt;p&gt;You assume &lt;code&gt;number&lt;/code&gt; is a string, but it actually is an integer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% for digit in number %}
    {{ digit }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will get a &lt;code&gt;TypeError: 'int' object is not iterable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="problem-31-typo-in-variable"&gt;Problem 3.1: Typo in Variable&lt;/h3&gt;
&lt;p&gt;Instead of &lt;code&gt;{{ numbers }}&lt;/code&gt; you write &lt;code&gt;{{ number }}&lt;/code&gt;. This is pretty bad as it
actually does nothing. It is as if the variable number existed and was the
empty string.&lt;/p&gt;
&lt;h3 id="problem-32-forgetting-to-pass-variable"&gt;Problem 3.2: Forgetting to pass Variable&lt;/h3&gt;
&lt;p&gt;You actually wanted to write &lt;code&gt;number&lt;/code&gt;, but you forgot to pass it to the
template. The effect is the same, but I think it&amp;rsquo;s an interesting different
cause. This is what happens most often to me.&lt;/p&gt;
&lt;h3 id="status-code-testing"&gt;Status Code Testing&lt;/h3&gt;
&lt;p&gt;By calling a view and making sure that the &lt;code&gt;assert rv.status_code == 200&lt;/code&gt; you
can already capture Problem 1 and 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_main_route_status_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;
    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this reason, make sure that you call each route at least once.&lt;/p&gt;
&lt;p&gt;Up to my knowledge, there is not a lot more you can do without getting creative. Let&amp;rsquo;s hope &lt;a href="https://stackoverflow.com/q/62970759/562769"&gt;StackOverflow knows more&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="testing-the-template-context"&gt;Testing the Template Context&lt;/h3&gt;
&lt;p&gt;This one needed a lot of trail and error, but I finally managed to get some pytest fixtures with which you have a better control over the variables passed to the templates. I love it 😍&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template_rendered&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mini_app.app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mini_app.models&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Create application for the tests."""&lt;/span&gt;
    &lt;span class="n"&gt;_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_request_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TESTING"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# This creates an in-memory sqlite db&lt;/span&gt;
    &lt;span class="c1"&gt;# See https://martin-thoma.com/sql-connection-strings/&lt;/span&gt;
    &lt;span class="n"&gt;_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"SQLALCHEMY_DATABASE_URI"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlite://"&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;author1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;_app&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;captured_templates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;recorded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;recorded&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;template_rendered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;recorded&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;template_rendered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is how you can use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_main_route_status_code_number3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;captured_templates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/?number=3"&lt;/span&gt;
    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Sanity checks - it would be a total surprise if this would not hold true&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;captured_templates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;captured_templates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"base.html"&lt;/span&gt;

    &lt;span class="c1"&gt;# Here I test the two values which are passed to the template:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"square"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pytest-recording_1"&gt;pytest-recording&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/kiwicom/pytest-recording"&gt;pytest-recording&lt;/a&gt; is a pytest plugin which integrates &lt;a href="https://pypi.org/project/vcrpy/"&gt;vcr.py&lt;/a&gt; into pytest. There is also &lt;a href="https://github.com/kiwicom/pytest-recording/issues/52"&gt;pytest-vcr&lt;/a&gt; and both plugins are not wide-spread. I think pytest-recording is better maintained as &lt;a href="https://github.com/kiwicom/pytest-recording/issues/52#issuecomment-660528322"&gt;the author answered within 2 hours&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="block-network-access"&gt;Block Network Access&lt;/h3&gt;
&lt;p&gt;This one is a potential live saver. Just decorate a test with
&lt;code&gt;@pytest.mark.block_network&lt;/code&gt; and you can be certain that everything runs
locally. If something tries to make a network access, it is blocked and you get&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RuntimeError: Network is disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use &lt;a href="https://github.com/miketheman/pytest-socket"&gt;pytest-socket&lt;/a&gt; to disable network access.&lt;/p&gt;
&lt;h3 id="record-network-interactions"&gt;Record Network Interactions&lt;/h3&gt;
&lt;p&gt;You can decorate a test with &lt;code&gt;@pytest.mark.vcr()&lt;/code&gt;. Run &lt;code&gt;pytest
--record-mode=rewrite&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="load-testing_1"&gt;Load Testing&lt;/h2&gt;
&lt;p&gt;Testing Flask apps is not only about testing the used functions and routes, but also about knowing your limits. You want to know what actually breaks and when it breaks when you get tons of users.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jmeter.apache.org/"&gt;Apache JMeter&lt;/a&gt; is maybe one of the most well-known
applications for load testing. Being a Python user, I prefer to stay in Python
and for this reason I&amp;rsquo;ll briefly present &lt;a href="https://locust.io/"&gt;Locust&lt;/a&gt;. You can
create a &lt;code&gt;locustfile.py&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;locust&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;MyWebsiteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpUser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;wait_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;load_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;locust
locust&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;locustfile.py&lt;span class="w"&gt; &lt;/span&gt;--host&lt;span class="o"&gt;=[&lt;/span&gt;https://your-website.com&lt;span class="o"&gt;](&lt;/span&gt;https://martin-thoma.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It then gives output like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/locust.png"&gt;&lt;img alt="I've chosen to simulate 100 users" src="../images/2020/07/locust.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;I've chosen to simulate 100 users&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There is a lot more to make this realistic than just calling a &amp;ldquo;static&amp;rdquo; endpoint. We want the users to interact in some way. So we can define a &lt;a href="https://docs.locust.io/en/stable/writing-a-locustfile.html#sequentialtaskset-class"&gt;SequentialTaskSet&lt;/a&gt;. At this point, I will leave it up to you to decide if you want to know more about load testing with Locust.&lt;/p&gt;
&lt;p&gt;Maybe it&amp;rsquo;s not necessary for you.&lt;/p&gt;
&lt;p&gt;If you have a web service live, you should have another service which regularly pings yours and checks if it is still alive. The latency of the answer can be measured and should be monitored. If you don&amp;rsquo;t expect a crazy amount of calls and if you have auto scaling enabled anyway, it&amp;rsquo;s perfectly reasonable not to run a load test. Just monitor your API behavior and act if you really need to.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;You already know &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;the basics of Unit Testing in Python&lt;/a&gt; and &lt;a href="https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed"&gt;how to patch and create mocks&lt;/a&gt;. In this parts you learned how to deal with the special challenges of Flask applications.&lt;/p&gt;
&lt;p&gt;In future articles, I will present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to structure Unit Tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tox and nox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI-Pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test Automation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Property-based Testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutation Testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Flask"></category><category term="Software Development"></category><category term="Unit Testing"></category><category term="Load Testing"></category><category term="Software Engineering"></category></entry><entry><title>Unit Testing in Python — Patching, Mocks and Dependency Injection</title><link href="https://martin-thoma.com/https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed" rel="alternate"></link><published>2020-07-09T17:00:00+02:00</published><updated>2020-07-09T17:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-07-09:/https://levelup.gitconnected.com/unit-testing-in-python-mocking-patching-and-dependency-injection-301280db2fed</id><summary type="html">&lt;p&gt;Unit Testing in general is trivial with Python and pytest, but a lot of
developers get frustrated when they have to patch dependencies away to make
code testable. In this article, you will learn how to patch and create mocks.
If you want to refresh basics about unit testing in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unit Testing in general is trivial with Python and pytest, but a lot of
developers get frustrated when they have to patch dependencies away to make
code testable. In this article, you will learn how to patch and create mocks.
If you want to refresh basics about unit testing in Python first, have a look
at the first part of this series: &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0#0e28"&gt;Unit Testing in Python &amp;mdash; The Basics&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-abstract-pattern-of-the-problem"&gt;The Abstract Pattern of the Problem&lt;/h2&gt;
&lt;p&gt;A dependency of the function we want to test can have an effect in three different ways: By side-effects, return values or exceptions.&lt;/p&gt;
&lt;p&gt;Problem 1: A dependencies side-effect&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;a_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested&lt;/span&gt;
    &lt;span class="n"&gt;a_dependency&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Problem 2: A dependencies return value&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;a_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_dependency&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested; it might use foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Problem 3: A dependency throws an Exception&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;a_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_dependency&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# this might depend on the type of Exception&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Application code to be tested&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="the-problem-simple-examples"&gt;The Problem &amp;mdash; Simple Examples&lt;/h2&gt;
&lt;p&gt;Most examples in the wild are way more complex and usually they also need some
refactoring to make the code easier to maintain. So I created three examples
which are a bit closer to real applications while still keeping the bloat of
real applications away.&lt;/p&gt;
&lt;p&gt;Example 1: We want to add a user to a database. You can see that db does not
return anything, but we change the state of our system. And we want to be sure
that we don&amp;rsquo;t actually change our production system when the unit tests are
running!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;bcrypt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;insert_user_into_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;password_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hashpw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gensalt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example 2: Generate a file name based on the current date. You can see that the dependency datetime returns a value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;generate_filename&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;%Y-%m-%d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, you could imagine a function which returns the weather in an English sentence and uses an API to get the actual weather (&lt;a href="https://gist.github.com/MartinThoma/5c7224ceae47e74645e0145d26dc03ec"&gt;example&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Example 3: In my project &lt;a href="https://github.com/MartinThoma/edapy"&gt;edapy&lt;/a&gt; I looked at metadata from PDF files. I use the dependency PdfFileReader and have the file itself as an dependency. As the PDF file could be broken, PyPDF2 might throw an exception. So you can imagine code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;PyPDF2.utils&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;PyPDF2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PdfFileReader&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_pdf_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pdf_toread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PdfFileReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PyPDF2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfReadError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"is_errornous"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;

    &lt;span class="c1"&gt;# a lot more&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you want to test such functions, you have the problem that the expected output is not only dependent on the function itself, but also on something external. In the cases above, the system time, an external service, and the file system.&lt;/p&gt;
&lt;h2 id="examples-for-external-dependencies"&gt;Examples for External Dependencies&lt;/h2&gt;
&lt;p&gt;There are lots of external dependencies your tests might have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date or time&lt;/li&gt;
&lt;li&gt;Internet: A web service you need to use&lt;/li&gt;
&lt;li&gt;File System: A file you need to create / read / edit / delete&lt;/li&gt;
&lt;li&gt;Database: Data you select / insert / update/ delete&lt;/li&gt;
&lt;li&gt;Randomness: Your code might make use of random or np.random&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just like the example above, they make isolated unit testing hard or even impossible.&lt;/p&gt;
&lt;h2 id="the-solution-patching"&gt;The solution: Patching!&lt;/h2&gt;
&lt;p&gt;The overall strategy to test this is always the same: Replace the external dependency that is causing headaches by something in your control. The act of replacing the dependency is called &lt;strong&gt;&lt;em&gt;patching&lt;/em&gt;&lt;/strong&gt;, the replacement is called a &lt;strong&gt;&lt;em&gt;mock&lt;/em&gt;&lt;/strong&gt;. Depending on what exactly the mock does, you might also hear this being called a Test Double, Test Stub, Test Spy or a Fake Object. In practice in Python, the distinction does not matter. If you&amp;rsquo;re interested, I recommend &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs#TheDifferenceBetweenMocksAndStubs"&gt;Martin Fowler: The Difference Between Mocks and Stubs&lt;/a&gt;. I will call all of them just mocks.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a tiny example how to use patch!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fraud_example.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;external_dependency&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dark_magic&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_credit_card_fraud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fraud_probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dark_magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fraud_probability&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.99&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;external_dependency.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;dark_magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No matter which transaction you would use, the function is_credit_card_fraud would throw a ValueError.&lt;/p&gt;
&lt;p&gt;This is how you patch that dependency away with a decorator &lt;code&gt;@patch&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_fraud_example.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;unittest.mock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;the_mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.999&lt;/span&gt;


&lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fraud_example.dark_magic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_mock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_is_credit_card_fraud&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fraud_example&lt;/span&gt;

    &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"amount_usd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"9999.99"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"overnight_shipping"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;is_fraud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fraud_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_credit_card_fraud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_fraud&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is how you patch the dependency fraud_example.dark_magic away with a context handler ( with ... ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_is_credit_card_fraud_context_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fraud_example&lt;/span&gt;

    &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"amount_usd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"9999.99"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"overnight_shipping"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fraud_example.dark_magic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_fraud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fraud_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_credit_card_fraud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_fraud&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you now execute pytest , the test will succeed. You will always get 0.999 as a return value of dark_magic 🎉&lt;/p&gt;
&lt;p&gt;A part that might be surprising in this example is the first parameter of the patch decorator: It&amp;rsquo;s "fraud_example.dark_magic" and NOT "external_dependency.dark_magic" ! The target of your replacement is always what was loaded within the file you want to test, not where it was loaded from. Lisa Roach has pointed this out elegantly in her talk &lt;a href="https://www.youtube.com/watch?v=ww1UsGZV8fQ"&gt;Demystifying the Patch Function&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="direct-replacement-dont-do-this"&gt;Direct replacement: Don&amp;rsquo;t do this!&lt;/h2&gt;
&lt;p&gt;The following is an example which does not use patch and seems to work, but it has a big flaw. If you directly replace datetime.datetime instead of patching it, it will be overwritten in all other contexts after that as well! ⚠️&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;unittest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mock_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generate_filename&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;NewDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_generate_filename&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewDate&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;generate_filename&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1990-04-28.png"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mock-and-magicmock"&gt;Mock and MagicMock&lt;/h2&gt;
&lt;p&gt;You now know how to replace a dependency, hence it is time to talk about what to replace it with. This is where unittest.mock.Mock and unittest.mock.MagicMock come into play.&lt;/p&gt;
&lt;p&gt;Everything you do with Mock will return a Mock. Call a function? Get a Mock as a return value. Access an attribute? Get a Mock as a value.&lt;/p&gt;
&lt;p&gt;Python has so called &amp;ldquo;magic&amp;rdquo; methods. I like the term &amp;ldquo;dunder&amp;rdquo; methods better &amp;mdash; it just means all methods which start and end with a &lt;strong&gt;d&lt;/strong&gt;ouble &lt;strong&gt;under&lt;/strong&gt;score. Examples are &lt;strong&gt;iter&lt;/strong&gt; or &lt;strong&gt;contains&lt;/strong&gt; . MagicMock has those defined, Mock doesn&amp;rsquo;t. I would use MagicMock everywhere, except if the mocked object doesn&amp;rsquo;t define any of the magic functions.&lt;/p&gt;
&lt;p&gt;A core feature of mock classes is that they allow you to not only remove a dependency which is hard to test, but also to assert on the way the mock was interacted with. Typical methods are &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called"&gt;assert_called&lt;/a&gt;(), &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with"&gt;assert_called_with&lt;/a&gt;(), &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_not_called"&gt;assert_not_called&lt;/a&gt;().&lt;/p&gt;
&lt;h2 id="spec-autospec-spec_set"&gt;spec, autospec &amp;amp; spec_set&lt;/h2&gt;
&lt;p&gt;A part that is really bad about MagicMock is that you can do anything with it &amp;mdash; including accessing non-existing attributes, calling non-existing methods or calling existing methods with the wrong count of parameters. The mock object is missing a &lt;strong&gt;spec&lt;/strong&gt;ification. If you don&amp;rsquo;t like that, use autospec=True when patching the object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autospec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can create a Mock like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;unittest.mock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Not Ok!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/moose/.pyenv/versions/3.8.1/lib/python3.8/unittest/mock.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;635&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="fm"&gt;__getattr__&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Mock object has no attribute &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;

&lt;span class="c1"&gt;# That is ok:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mock.datetime'&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'139883597784544'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next parameter of patchis autospec. Where spec looks at the mocked object, autospec also looks at the attributes of that object (and their attributes and those attributes, &amp;hellip;).&lt;/p&gt;
&lt;p&gt;Finally, there is spec_set . That one prevents you from setting attributes that don&amp;rsquo;t exist.&lt;/p&gt;
&lt;p&gt;Usually, I would use autospec=True and spec_set=True everywhere. Code which uses introspection might be an example where you don&amp;rsquo;t want that.&lt;/p&gt;
&lt;h2 id="pytests-monkeypatch"&gt;pytests monkeypatch&lt;/h2&gt;
&lt;p&gt;monkeypatch is a fixture from pytest. I will explain what a fixture is in the next article. For now, just accept it as a parameter you can give to your tests without specifying it and pytest will take care of it. You don&amp;rsquo;t even need to import anything.&lt;/p&gt;
&lt;p&gt;For the credit card fraud example, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_is_credit_card_fraud_monkeypatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monkeypatch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;monkeypatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fraud_example.dark_magic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_mock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;fraud_example&lt;/span&gt;

    &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"amount_usd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"9999.99"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"overnight_shipping"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;is_fraud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fraud_example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_credit_card_fraud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_fraud&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The question when you should use unittest.mock.patch and &amp;mdash; if necessary &amp;mdash; unittest.mock.Mock or pytests monkeypatch boils pretty much down to personal taste nowadays. The core Pythons patch / Mock only exist since Python 3.3 which, I guess, is a big part of the reason why monkeypatch exists in the first place.&lt;/p&gt;
&lt;h2 id="external-packages"&gt;External Packages&lt;/h2&gt;
&lt;p&gt;There are a couple of packages designed for simplifying the patching and giving better mocks for well-known dependencies.&lt;/p&gt;
&lt;p&gt;For example, you can use &lt;a href="https://pypi.org/project/freezegun/"&gt;freezegun&lt;/a&gt; for mocking the system time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;freezegun&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mock_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generate_filename&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_generate_filename&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;freeze_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"1990-04-28"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;generate_filename&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1990-04-28"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For boto3 / botocore (Cloud-stuff), there is &lt;a href="https://pypi.org/project/moto/"&gt;moto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;a href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt; , there is &lt;a href="https://pypi.org/project/responses/"&gt;responses&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;requests_example.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;requests&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_ip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://ip.jsontest.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_ip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;test_requests_example.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;requests_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_ip&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;responses&lt;/span&gt;


&lt;span class="nd"&gt;@responses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_get_ip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"http://ip.jsontest.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"ip"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"123.456.789.0"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;get_ip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"ip"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"123.456.789.0"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dependency-injection"&gt;Dependency Injection&lt;/h2&gt;
&lt;p&gt;If the above sounded complicated, there is a simpler alternative: Dependency Injection. Essentially adding the external state explicitly as a parameter which makes it easy to adjust in tests. For example, the code from above could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;generate_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;%Y-%m-%d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now testing is trivial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mock_example&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generate_filename&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_generate_filename&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;generate_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1990-04-28.png"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In some cases it feels very natural to apply such a pattern, in others it
doesn&amp;rsquo;t. Do this only when it feels natural. For example, it&amp;rsquo;s very unlikely
that I would ever pass a module as a parameter although it&amp;rsquo;s possible. That
would just feel very weird.&lt;/p&gt;
&lt;h2 id="temporary-files-are-mocks-a-code-smell"&gt;Temporary files: Are Mocks a Code Smell?&lt;/h2&gt;
&lt;p&gt;It depends very much on the details, but I like to mock as little as possible.
Simply for the reason that not mocking means that you test more of your system.
Strictly speaking you can&amp;rsquo;t call the test a &lt;em&gt;unit test&lt;/em&gt; anymore if you test
more than one unit. It would be an integration test then &amp;mdash; but that is also
essential, right? You wouldn&amp;rsquo;t be happy with BMW selling you a motor, some
seats and a steering wheel and claiming &amp;ldquo;all units work&amp;rdquo;. They need work
together. Extensive mocks might prevent you from testing how things work
together.&lt;/p&gt;
&lt;p&gt;In an ideal world, you would have both: Unit tests which are very controlled
and in case of failure make it easy to narrow down the source of the error. And
integration / end-to-end tests which show that the complete system works.&lt;/p&gt;
&lt;p&gt;There are also people who think that the need to mock is an indicator for a
need to refactor
(&lt;a href="https://github.com/pytest-dev/pytest/issues/4576#issuecomment-449865322"&gt;discussion&lt;/a&gt;).
Harry Percival gave the talk &lt;a href="https://www.youtube.com/watch?v=rk-f3B-eMkI"&gt;Stop Using Mocks (for a
while)&lt;/a&gt; at PyCon 2020 and pointed
out that testing code which is using mocks tends to be brittle as it is tightly
coupled to implementation details.&lt;/p&gt;
&lt;p&gt;A good example where I usually don&amp;rsquo;t mock anything are file system
interactions. If possible, I write the file just like it would be in the real
application. When the test is finished, the test needs to clean up as well. I
use the &lt;a href="https://docs.python.org/3/library/tempfile.html"&gt;tempfile&lt;/a&gt; module for
that.&lt;/p&gt;
&lt;h2 id="dependency-injection-randomness"&gt;Dependency Injection: Randomness&lt;/h2&gt;
&lt;p&gt;Just like adding a time parameter for functions which use by default the current time might make your code way easier to test, adding a random_state parameter or a seed parameter to functions which use randomness helps.&lt;/p&gt;
&lt;p&gt;Here are some ways to seed random number generators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;0.8444218515250481&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;0.5488135039273248&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;0.5488135039273248&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setting a random state / seed is also very helpful for debugging. If you
haven&amp;rsquo;t heard of the Heisenbug or the Higgs-Bugson, you missed some
&lt;a href="https://blog.codinghorror.com/new-programming-jargon/"&gt;programming jargon&lt;/a&gt;.
And if your interested in research, reproducibility matters.&lt;/p&gt;
&lt;h2 id="terminology"&gt;Terminology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Patching vs Mocking&lt;/strong&gt;: Patching a function is adjusting it&amp;rsquo;s functionality. In the context of unit testing we patch a dependency away; so we replace the dependency. Mocking is imitating. Usually we patch a function to use a mock we control instead of a dependency we don&amp;rsquo;t control.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monkey patching vs Mocking&lt;/strong&gt;: Within a development context, mocking is pretty clearly about unit testing (&lt;a href="https://stackoverflow.com/a/2666006/562769"&gt;example&lt;/a&gt;). However, monkey patching has several applications besides unit testing. For example, you can patch third party code during runtime if there is a small functionality missing or a part of the code is broken. You just extend the code. Monkey patching is used in the PyCharm debugger (&lt;a href="https://youtu.be/ZpJxwpyJpq4?t=367"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monkey patching vs pytest.monkeypatch&lt;/strong&gt;: The first one is a general concept, the second one is a concrete function within pytest which applies monkey patching for unit tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unittest.mock.patch vs pytest.monkeypatch&lt;/strong&gt;: This is personal preference. I prefer to stick with built-ins whenever the third-party option does not have big advantages. In this case, I even think that the core Python unittest.mock.patch is cleaner. For this reason I didn&amp;rsquo;t explain pytest.monkeypatch so far. If you like to see the differences, there is a nice &lt;a href="https://krzysztofzuraw.com/blog/2016/mocks-monkeypatching-in-python.html"&gt;blog post&lt;/a&gt; about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-note-about-architecture"&gt;A note about Architecture&lt;/h2&gt;
&lt;p&gt;To keep your code clean, it is often a good idea to wrap third party
dependencies. For example, you could have one module with deals with I/O. Or a
module which deals with API requests. Then you have a couple of modules which
might require a lot of mocking or where unit tests are pointless because the
interesting part is the integration with the third party. The rest of your code
stays easy to test, keeps the language you defined and cares about the objects
you know. This is called the &lt;a href="https://en.wikipedia.org/wiki/Adapter_pattern"&gt;Adapter
pattern&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-else-is-there"&gt;What else is there?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Other types of Mocks, such as &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.PropertyMock"&gt;PropertyMock&lt;/a&gt; or&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-mock/"&gt;pytest-mock&lt;/a&gt; which provides the mocker fixture; I&amp;rsquo;m not really sure though if this is mainly a left-over from the time before Python 3.3 or if it actually makes things easier.&lt;/li&gt;
&lt;li&gt;The 3rd party package &lt;a href="https://pypi.org/project/mock/"&gt;mock&lt;/a&gt;, which should not be installed with Python 3.3+ as it was put in the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to learn more about the default mocks, have a look at the awesome
article by Yeray Diaz: &lt;a href="https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832"&gt;What the mock? &amp;mdash; A cheatsheet for mocking in Python&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;In part 1, you learned &lt;a href="https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"&gt;the basics of Unit Testing in Python&lt;/a&gt;. In this parts you learned how to patch dependencies to make code testable and what the standard mocks are.&lt;/p&gt;
&lt;p&gt;In future articles, I will present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to test Flask applications with Databases&lt;/li&gt;
&lt;li&gt;How to structure Unit Tests&lt;/li&gt;
&lt;li&gt;tox and nox&lt;/li&gt;
&lt;li&gt;CI-Pipelines&lt;/li&gt;
&lt;li&gt;Test Automation&lt;/li&gt;
&lt;li&gt;Property-based Testing&lt;/li&gt;
&lt;li&gt;Mutation Testing&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Unit Testing"></category><category term="pytest"></category><category term="patching"></category><category term="Mock"></category><category term="dependency-injection"></category></entry><entry><title>Unit Testing in Python — The Basics</title><link href="https://martin-thoma.com/https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0" rel="alternate"></link><published>2020-06-29T20:00:00+02:00</published><updated>2020-06-29T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-06-29:/https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0</id><summary type="html">&lt;p&gt;Unit testing is the number one skill which separates people who just finished their degrees from people with practical experience. Especially for Python, that&amp;rsquo;s a shame as it is trivial to learn this skill.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to write and run unit tests in Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unit testing is the number one skill which separates people who just finished their degrees from people with practical experience. Especially for Python, that&amp;rsquo;s a shame as it is trivial to learn this skill.&lt;/p&gt;
&lt;p&gt;In this article, you will learn how to write and run unit tests in Python as well as some interesting pytest plugins I usually use. Let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h2 id="the-most-basic-unit-test"&gt;The most basic Unit Test&lt;/h2&gt;
&lt;p&gt;A unit test is atomic- it just tests one unit of code. Typically one function or one method of a class. As an example, let&amp;rsquo;s say we want to test math_functions.py which contains the Fibonacci function and a function for the &lt;a href="https://en.wikipedia.org/wiki/Collatz_conjecture"&gt;Collatz sequence&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;next_collatz_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to test this function. I will explain the reasons for testing and what testing means later. For now, let&amp;rsquo;s just say we want to avoid programming errors.&lt;/p&gt;
&lt;p&gt;First, create a file test_math_functions.py :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;math_functions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_collatz_element&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_basic_initial&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_fib_3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_collatz_1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;next_collatz_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_collatz_2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;next_collatz_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you have to install pytest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pytest&lt;/span&gt;
&lt;span class="o"&gt;============&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;session&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;starts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===================================&lt;/span&gt;
platform&lt;span class="w"&gt; &lt;/span&gt;linux&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.1,&lt;span class="w"&gt; &lt;/span&gt;pytest-5.4.3,&lt;span class="w"&gt; &lt;/span&gt;py-1.9.0,&lt;span class="w"&gt; &lt;/span&gt;pluggy-0.13.1
rootdir:&lt;span class="w"&gt; &lt;/span&gt;/home/moose/GitHub/MartinThoma/algorithms/medium/unit-testing
collected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;items

test_math_functions.py&lt;span class="w"&gt; &lt;/span&gt;.....&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;============&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.03s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=====================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Awesome! You can see that it took 0.03 seconds to execute. There are 5 dots after the test_math_functions.py . Those indicate that 5 tests were executed and successful.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break one test, e.g. test_fib_3 by setting assert fib(3) == 1337 . Then you see this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;============&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;session&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;starts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=================================&lt;/span&gt;
platform&lt;span class="w"&gt; &lt;/span&gt;linux&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.1,&lt;span class="w"&gt; &lt;/span&gt;pytest-5.4.3,&lt;span class="w"&gt; &lt;/span&gt;py-1.9.0,&lt;span class="w"&gt; &lt;/span&gt;pluggy-0.13.1
rootdir:&lt;span class="w"&gt; &lt;/span&gt;/home/moose/GitHub/MartinThoma/algorithms/medium/unit-testing
collected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;items

test_math_functions.py&lt;span class="w"&gt; &lt;/span&gt;..F..&lt;span class="w"&gt;                                                    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;==================&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;FAILURES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=======================================&lt;/span&gt;
_________________&lt;span class="w"&gt; &lt;/span&gt;test_fib_3&lt;span class="w"&gt; &lt;/span&gt;______________________________________

def&lt;span class="w"&gt; &lt;/span&gt;test_fib_3&lt;span class="o"&gt;()&lt;/span&gt;:
&amp;gt;&lt;span class="w"&gt;       &lt;/span&gt;assert&lt;span class="w"&gt; &lt;/span&gt;fib&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
E&lt;span class="w"&gt;       &lt;/span&gt;assert&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
E&lt;span class="w"&gt;        &lt;/span&gt;+&lt;span class="w"&gt;  &lt;/span&gt;where&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fib&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

test_math_functions.py:14:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;============&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;short&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;summary&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===============================&lt;/span&gt;
FAILED&lt;span class="w"&gt; &lt;/span&gt;test_math_functions.py::test_fib_3&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;assert&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;============&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;failed,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.03s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===========================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great. Now you know how to write a unit test.&lt;/p&gt;
&lt;h2 id="vocabulary"&gt;Vocabulary&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;units&lt;/em&gt; we are testing in the section above are functions &amp;mdash; fib and next_collatz_element .&lt;/p&gt;
&lt;p&gt;We have 5 &lt;em&gt;unit tests&lt;/em&gt;; all of them in&lt;em&gt; &lt;/em&gt;test_math_functions.py: The test_* functions.&lt;/p&gt;
&lt;p&gt;The pytest command-line executable is called a &lt;em&gt;test runner&lt;/em&gt;. It executes (runs) the tests.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;test suite&lt;/em&gt; is an arbitrary collection of tests. Usually, you mean all tests.&lt;/p&gt;
&lt;h2 id="why-do-we-test-at-all"&gt;Why do we test at all?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;: You checked at least some cases if they work. So others can have more trust in the quality of your work and you can also put more trust in it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Changes&lt;/strong&gt;: For a bigger project, it is sometimes hard to have every part in mind. By writing tests, you make it easier to change something and see if / where things break. This does not only help you but also team members. Including once that are not there yet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Style&lt;/strong&gt;: When you know that you have to write tests, you write some things slightly differently. Those slight differences usually improve the coding style. Sometimes, they are crucial. For example, if you have to thoroughly test your code you will make smaller chunks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: Some test cases show a little bit of how the code is intended to be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test-coverage"&gt;Test Coverage&lt;/h2&gt;
&lt;p&gt;I hope at this point we agree that having tests is a good idea. But how many tests do you need? When did you test everything?&lt;/p&gt;
&lt;p&gt;A group of measures for this is the &lt;em&gt;test coverage&lt;/em&gt;. There are two relevant types of test coverage: Line coverage and branch coverage.&lt;/p&gt;
&lt;p&gt;If you look at the Collatz function from above, there are 4 lines to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;next_collatz_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I execute next_collatz_element(4) , then it will execute lines 1&amp;ndash;3. Line 4 and 5 will not be hit. This means a unit test like that could not detect an issue on line 4 or 5. It only covers 3 of 5 lines. One says that it has 60% line coverage.&lt;/p&gt;
&lt;p&gt;But sometimes 100% line coverage is not enough. Take a look at this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fist_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you test greet("Angela", "Merkel") you will have 100% line coverage. But you miss that if the last name is not given, the return value is None . In the given test, the if-statement in line 2 always evaluates to &amp;ldquo;True&amp;rdquo;. You don&amp;rsquo;t cover a branch in the execution graph. So you have only 50% branch coverage.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/pytest-cov/"&gt;pytest-cov&lt;/a&gt; is a pytest plugin to measure branch coverage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install it with pip install pytest-cover&lt;/li&gt;
&lt;li&gt;Use it by adding --cov=path/to/file or --cov=packagename to the pytest execution&lt;/li&gt;
&lt;li&gt;Get output to terminal by adding to pytest --cov-report term&lt;/li&gt;
&lt;li&gt;Get HTML output by adding --cov-report html:tests/reports/coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a href="https://pytest-cov.readthedocs.io/en/latest/reporting.html"&gt;more reporting capabilities&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="good-tests"&gt;Good Tests&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s pretty hard to write good tests and when you measure your test coverage it is tempting to quickly write a couple of bad tests.&lt;/p&gt;
&lt;p&gt;Worst is no testing at all.&lt;/p&gt;
&lt;p&gt;A little bit better is a test that just executes a function but does not check if the return value/the side effects are what you expect. So you simply run it to check if the code crashes.&lt;/p&gt;
&lt;p&gt;Happy-Tests where you check the output of the tested function and a typical input is even better. I call them &lt;em&gt;happy&lt;/em&gt; because they test what you expect to get.&lt;/p&gt;
&lt;p&gt;In contrast, an &lt;em&gt;unhappy&lt;/em&gt; execution path is dealing with unwanted inputs. This is also called &lt;a href="https://en.wikipedia.org/wiki/Negative_testing"&gt;negative testing&lt;/a&gt;. You check if you actually throw an error. Not throwing an error and silently failing is bad as it hides bugs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Property testing&lt;/em&gt; is pretty cool. There you don&amp;rsquo;t test for single values, but you check if a property is still held. For example, the output of a factorization function can be multiplied and should equal the input.&lt;/p&gt;
&lt;h2 id="type-checking"&gt;Type Checking&lt;/h2&gt;
&lt;p&gt;If you use &lt;a href="https://medium.com/@MartinThoma/type-annotations-in-python-3-8-3b401384403d"&gt;type annotations&lt;/a&gt; (which you totally should!), then you can install &lt;a href="https://pypi.org/project/pytest-mypy/"&gt;pytest-mpy&lt;/a&gt; . You can then automatically run mypy over your code by adding --mypy to your pytest command.&lt;/p&gt;
&lt;h2 id="linting"&gt;Linting&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;Code linting&lt;/a&gt; is the act of finding bugs, stylistic errors, and suspicious constructs from static code analysis.&lt;/p&gt;
&lt;p&gt;There are two linters I can recommend: &lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; and &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;. You can run them with pytest by installing &lt;a href="https://pypi.org/project/pytest-black/"&gt;pytest-black&lt;/a&gt; and &lt;a href="https://pypi.org/project/pytest-flake8/"&gt;pytest-flake8&lt;/a&gt;. Again, if you want to execute it just add the flag --black or --flake8 to pytest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--flake8&lt;span class="w"&gt; &lt;/span&gt;--black
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also &lt;a href="https://pypi.org/project/pytest-mccabe/"&gt;pytest-mccabe&lt;/a&gt; which tries to find sections in the cod which are to complex. This makes it easier for coworkers / your future self to understand the code. An alternative to pytest-mccabe outside of pytest is &lt;a href="https://pypi.org/project/radon/"&gt;radon&lt;/a&gt;. However, a lot of people don&amp;rsquo;t like this type of test.&lt;/p&gt;
&lt;h2 id="doctests"&gt;Doctests&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;Doctests&lt;/a&gt; are a weird but pretty awesome part of Python. Python has Docstrings &amp;mdash; the first string within a function/class which comes directly after the signature and which is not assigned. This is not just a comment, it has meaning and can be read through the execution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    The fibonacci function.&lt;/span&gt;
&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(6)&lt;/span&gt;
&lt;span class="sd"&gt;    8&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;doctest&lt;/span&gt;

    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you execute this directly, the lines 19&amp;ndash;21 will run the doctest. The doctest looks for &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; within the docstrings and executes whatever follows as if it was entered in the interactive console. The next line is then the output which is compared to the output of the program.&lt;/p&gt;
&lt;p&gt;This is pretty awesome because it makes documentation testable!&lt;/p&gt;
&lt;p&gt;And, of course, you can also &lt;a href="https://docs.pytest.org/en/stable/doctest.html"&gt;execute doctests with pytest&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--doctest-modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="test-execution-speed"&gt;Test Execution Speed&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s important to keep the execution time of the tests low so that it doesn&amp;rsquo;t feel bad to execute the test suite. I like to print the time of the 3 slowest tests which were performed. To &lt;a href="https://docs.pytest.org/en/stable/usage.html#profiling-test-execution-duration"&gt;profile the tests&lt;/a&gt; continuously, I simply add the durations flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--durations&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="alternatives-unittest-and-nose"&gt;Alternatives: unittest and nose&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/unittest.html#module-unittest"&gt;unittest&lt;/a&gt; is a core Python module and as such, I would prefer to use it. unittest feels pretty similar to &lt;a href="https://en.wikipedia.org/wiki/JUnit"&gt;JUnit&lt;/a&gt; which I would say is a disadvantage. Python is a different language with different patterns and expectations. One weirdness is that you have to put your tests in a class, even if you don&amp;rsquo;t need to &lt;a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp"&gt;setUp()&lt;/a&gt; or &lt;a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown"&gt;tearDown()&lt;/a&gt; anything. It uses camelCase for the method names which is against the Python conventions. You cannot simply assert Expression , but instead, have to use self.assertEqual , self.assertTrue , &amp;hellip; (see the &lt;a href="https://docs.python.org/3/library/unittest.html#assert-methods"&gt;complete list of assert methods&lt;/a&gt;). And the error messages are not as expressive as the ones you get from Pytest.&lt;/p&gt;
&lt;p&gt;TL;DR: unittest and nose are no alternatives. pytest is the way to go.&lt;/p&gt;
&lt;h2 id="more-testing-topics"&gt;More Testing Topics&lt;/h2&gt;
&lt;p&gt;There are many more topics in testing which this article doesn&amp;rsquo;t cover. The testing pyramid (integration testing, end-to-end testing), testing web applications that have a database, GUI testing, testing machine learning models, and many more.&lt;/p&gt;
&lt;p&gt;The following topics will be covered by me in the next few weeks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mocking, Patching and Dependency Injection&lt;/li&gt;
&lt;li&gt;tox and nox&lt;/li&gt;
&lt;li&gt;CI-Pipelines&lt;/li&gt;
&lt;li&gt;Test Automation&lt;/li&gt;
&lt;li&gt;Property-based Testing&lt;/li&gt;
&lt;li&gt;Mutation Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you&amp;rsquo;re interested in other topics around testing with Python.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Unit Testing"></category><category term="pytest"></category></entry><entry><title>Type Annotations in Python 3.8</title><link href="https://martin-thoma.com/https://medium.com/@MartinThoma/type-annotations-in-python-3-8-3b401384403d" rel="alternate"></link><published>2020-06-22T20:00:00+02:00</published><updated>2020-06-22T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-06-22:/https://medium.com/@MartinThoma/type-annotations-in-python-3-8-3b401384403d</id><summary type="html">&lt;p&gt;One reason why Python is so easy to get started with is that it has dynamic types. You don&amp;rsquo;t have to specify the type of a variable, you just use variables as labels for containers of data. But in bigger projects, having types is helpful. If you have an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One reason why Python is so easy to get started with is that it has dynamic types. You don&amp;rsquo;t have to specify the type of a variable, you just use variables as labels for containers of data. But in bigger projects, having types is helpful. If you have an undocumented function without types and maybe crappy variable naming, new developers will have a hard time. Luckily, variable annotations were added in Python 3.6 with &lt;a href="https://www.python.org/dev/peps/pep-0526"&gt;PEP 526&lt;/a&gt; 🎉&lt;/p&gt;
&lt;p&gt;This article is written in such a way that you can easily stop after the &amp;ldquo;mypy&amp;rdquo; section and take only a look at individual section then.&lt;/p&gt;
&lt;h2 id="hello-typed-annotated-world"&gt;Hello, Typed Annotated World!&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="c1"&gt;# Print the first 10 Fibonacci numbers&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"fib(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you can simply use the pattern&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return_type_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# whatever the function does&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having type annotations is nice, but you need to check them! The Python runtimes do not do that, no matter if you use cPython, pypy or something more exotic.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/06/mypy.svg"&gt;&lt;img alt="mypy logo" src="../images/2020/06/mypy.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;mypy logo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="type-checking-with-mypy"&gt;Type Checking with mypy&lt;/h2&gt;
&lt;p&gt;Install mypy via pip install mypy and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mypy&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--ignore-missing-imports
Success:&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-ignore-missing-imports"&gt;--ignore-missing-imports&lt;/a&gt; flag is necessary, because otherwise you will get a lot of messages like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Skipping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;analyzing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'setuptools'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;but&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stubs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make it more convenient, I usually add a setup.cfg file in which I specify that I always want this flag to be applied:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[mypy]&lt;/span&gt;
&lt;span class="na"&gt;ignore_missing_imports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can pip install pytest-mypy and make sure mypy is always executed when you run pytest by adding this section to your setup.cfg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool:pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;--mypy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is important to note that the Python community and also mypy assumes that you come from a non-type annotated code base. They want to make it easy to you to switch to an annotated code and thus support &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual typing&lt;/a&gt;. However, this means that you might miss errors if you don&amp;rsquo;t annotate your code! Mypy has a lot of flags to help you to make the move. You don&amp;rsquo;t need to annotate everything.&lt;/p&gt;
&lt;h2 id="typing-list-dict-tuple-any"&gt;typing: List, Dict, Tuple, Any&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/typing.html"&gt;typing&lt;/a&gt; module adds support for type hints. It contains some of the types you will use most often: List, Dict, and Tuple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib_numbers&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"fib_list(10) = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fib_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, you can annotate that a dictionary maps strings to integers by Dict[str, int] . So List, Dict and Tuple are generics. Any is just a way to specify that you could have arbitrary data in those containers. It is reasonable to use Any in the beginning when you start to add type annotations to a bigger code base.&lt;/p&gt;
&lt;h2 id="stop-type-checking"&gt;Stop Type Checking&lt;/h2&gt;
&lt;p&gt;As mentioned before, mypy and Python support gradual typing. And sometimes you need to silence the type checker to be able to continue (and hopefully fix it later 🤞). There are a couple of ways to do this with typing :&lt;/p&gt;
&lt;p&gt;typing.Any : Every type is of type Any.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/typing.html#typing.cast"&gt;typing.cast&lt;/a&gt;(SomeClass, variable) : Sometimes mypy is not smart enough, so you can tell it which type you have. I did that a couple of times before I knew about typing.overload . Alternatively, you can also add assert &lt;a href="https://docs.python.org/3/library/functions.html#isinstance"&gt;isinstance&lt;/a&gt;(variable, Someclass)&lt;/p&gt;
&lt;h1 id="type-ingore-explicitly-tell-the-typechecker-to-ignore-that-line"&gt;type: ingore : Explicitly tell the typechecker to ignore that line&lt;/h1&gt;
&lt;h2 id="typing-union-and-optional"&gt;typing: Union and Optional&lt;/h2&gt;
&lt;p&gt;Pretty often, you want to accept multiple types. Then you use Union:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mh"&gt;0x61&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7A&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"need str or bytes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it happens pretty often that you need to accept some type and None , there is also typing.Optional . Optional[SomeType] is the same as Union[SomeType, None] .&lt;/p&gt;
&lt;h2 id="typing-list-vs-sequence"&gt;typing: List vs Sequence&lt;/h2&gt;
&lt;p&gt;The type typing.List actually represents list . A typing.Sequence is &amp;ldquo;an iterable with random access&amp;rdquo; as &lt;a href="https://stackoverflow.com/a/2921465/562769"&gt;Jochen Ritzel&lt;/a&gt; put it so nicely. For example, a string is a Sequence[Any] , but not a List[Any] .&lt;/p&gt;
&lt;h2 id="typing-dict-vs-mapping"&gt;typing: Dict vs Mapping&lt;/h2&gt;
&lt;p&gt;Similarly to the example List vs Sequence, the typing.Dict is meant mainly to represent a dict whereas typing.Mapping is more general. &lt;a href="https://stackoverflow.com/a/52487800/562769"&gt;Stacksonstacks&lt;/a&gt; gives a good answer.&lt;/p&gt;
&lt;h2 id="many-more-types"&gt;Many more Types&lt;/h2&gt;
&lt;h2 id="custom-types-not-all-strings-are-created-equal"&gt;Custom Types: Not all Strings are Created Equal&lt;/h2&gt;
&lt;p&gt;Not all strings contain the same type of content. They can represent anuser_id , a user_name , a password_hash , &amp;hellip;&lt;/p&gt;
&lt;p&gt;Especially for IDs I have seen this to become messy. I think it&amp;rsquo;s pretty ridiculous to create an own class for those different string types as creating a class is usually development and maintenance overhead. So, what do you do?&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry, &lt;a href="https://docs.python.org/3/library/typing.html#newtype"&gt;typing.NewType&lt;/a&gt; got you covered!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;

&lt;span class="n"&gt;UserId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="typingoverload"&gt;typing.overload&lt;/h2&gt;
&lt;p&gt;typing.Union is actually an anti-pattern sometimes, because you can also &lt;a href="https://docs.python.org/3/library/typing.html#typing.overload"&gt;overload&lt;/a&gt; a function as &lt;a href="https://github.com/python/mypy/issues/1693#issuecomment-618404849"&gt;Josh Reed&lt;/a&gt; shows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;overload&lt;/span&gt;


&lt;span class="nd"&gt;@overload&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="nd"&gt;@overload&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mh"&gt;0x61&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7A&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"need str or bytes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="type-checking-only-imports"&gt;Type checking only&amp;nbsp;imports&lt;/h2&gt;
&lt;p&gt;I've recently seen myself in the position that I made a pretty heavy import on
module level, just because of type checking. This felt wrong, so I asked for
help. The solution was simple:
&lt;a href="https://mypy.readthedocs.io/en/stable/common_issues.html#import-cycles"&gt;&lt;code&gt;typing.TYPE_CHECKING&lt;/code&gt;&lt;/a&gt;.
This is &lt;code&gt;True&lt;/code&gt; when running a type checker, but &lt;code&gt;False&lt;/code&gt; during normal runs ❤️&lt;/p&gt;
&lt;h2 id="protocols"&gt;Protocols&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0544/"&gt;PEP 544&lt;/a&gt; introduced structural subtyping and was introduced in Python 3.8. It feels like Interfaces in Java and works like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Protocol&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;SupportsClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;finish_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SupportsClose&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;finish_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that there is no function body. After that definition, you can then use SupportsClose like any type.&lt;/p&gt;
&lt;p&gt;The cool part is that the class Foo has no explicit relationship to SupportsClose ! It is only related by its structure!&lt;/p&gt;
&lt;h2 id="type-comments"&gt;Type comments&lt;/h2&gt;
&lt;p&gt;Type hints which are given as comments like this are outdated since Python 3.6:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# type: (int) -&amp;gt; Sequence[str]&lt;/span&gt;
    &lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"adf"&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"fib_list(10) = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fib_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, you might want to disable type checking for single lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="stub-files"&gt;Stub files&lt;/h2&gt;
&lt;p&gt;Stub files end in .pyi . If mypy finds a .py file and a .pyi file, it only loads the .pyi file. They are like header files in C++, but for Python. Instead of a function body, you use an Ellipsis ... :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pyright-pyre-pytype"&gt;pyright, pyre, pytype&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/pyright"&gt;pyright&lt;/a&gt; is a Python static type checker written by Microsoft, &lt;a href="https://pyre-check.org/"&gt;pyre&lt;/a&gt; is one by Facebook, and pytype is one by Google. All of them claim to be faster than mypy, all of them have lower adoption than mypy. I haven&amp;rsquo;t used them so far.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/06/pyre.png"&gt;&lt;img alt="pyre logo" src="../images/2020/06/pyre.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;pyre logo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Install them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyre-check&lt;span class="w"&gt; &lt;/span&gt;pytype

&lt;span class="c1"&gt;# Yes, pyright is written in TypeScript...&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;pyright
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyright&lt;span class="w"&gt; &lt;/span&gt;.
$&lt;span class="w"&gt; &lt;/span&gt;pytype&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pyright was complaining a lot about stuff that is actually correct.&lt;/p&gt;
&lt;h2 id="pydantic"&gt;pydantic&lt;/h2&gt;
&lt;p&gt;Variable annotations can also be used to remove a lot of boilerplate code. For example, &lt;a href="https://pydantic-docs.helpmanual.io/"&gt;pydantic&lt;/a&gt; can help you with serialization / deserialization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic.json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pydantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_obj_as&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;


&lt;span class="c1"&gt;# Deserialize a JSON string&lt;/span&gt;
&lt;span class="n"&gt;users_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[{"name": "user1", "age": 15}, {"name": "user2", "age": 28}]'&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_obj_as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Proof it!&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Serialize&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[User(name='user1', age=15), User(name='user2', age=28)]&lt;/span&gt;
&lt;span class="k"&gt;[{"name": "user1", "age": 15}, {"name": "user2", "age": 28}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://fastapi.tiangolo.com/features/#pydantic-features"&gt;FastAPI&lt;/a&gt; uses pydantic directly.&lt;/p&gt;
&lt;p&gt;A cool thing about pydantic are the &lt;a href="https://pydantic-docs.helpmanual.io/usage/types/#constrained-types"&gt;constrained types&lt;/a&gt;: PositiveFloat, NegativeInt, constr, &amp;hellip;&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Dustin Ingram: &lt;a href="https://www.youtube.com/watch?v=2gBP1qN5T7I"&gt;Static Typing in Python&lt;/a&gt; at PyGotham, 2019. On YouTube.&lt;/li&gt;
&lt;li&gt;Andreas Dewes: &lt;a href="https://www.youtube.com/watch?v=vM2Zoy4Sxhk"&gt;Type Annotations in Python 3: Whats, whys &amp;amp; wows!&lt;/a&gt; at EuroPython Conference, 2017. On YouTube.&lt;/li&gt;
&lt;li&gt;Carl Meyer: &lt;a href="https://www.youtube.com/watch?v=pMgmKJyWKn8"&gt;Type-checked Python in the real world&lt;/a&gt; at PyCon, 2018. On YouTube.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Code"></category><category term="Python"></category><category term="mypy"></category></entry><entry><title>Pythons super() function</title><link href="https://martin-thoma.com/pythons-super/" rel="alternate"></link><published>2020-06-11T20:00:00+02:00</published><updated>2020-06-11T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-06-11:/pythons-super/</id><summary type="html">&lt;p&gt;Python has a built-in function called &lt;a href="https://docs.python.org/3/library/functions.html#super"&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;.
It might behave different from what you thought.&lt;/p&gt;
&lt;h2 id="single-inheritance"&gt;Single Inheritance&lt;/h2&gt;
&lt;p&gt;As a first simple example, consider this script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Python has a built-in function called &lt;a href="https://docs.python.org/3/library/functions.html#super"&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;.
It might behave different from what you thought.&lt;/p&gt;
&lt;h2 id="single-inheritance"&gt;Single Inheritance&lt;/h2&gt;
&lt;p&gt;As a first simple example, consider this script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This prints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C
B
A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is simple, because every class inherits from exactly one other class
and the inheritance tree looks like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/06/inheritance-a-b-c.svg"&gt;&lt;img alt="Inheritance tree where A is the parent of B and B is the parent of C." src="../images/2020/06/inheritance-a-b-c.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Inheritance tree where A is the parent of B and B is the parent of C.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="multiple-inheritance"&gt;Multiple Inheritance&lt;/h2&gt;
&lt;p&gt;Python supports &lt;a href="https://docs.python.org/3/tutorial/classes.html#multiple-inheritance"&gt;multiple inheritance&lt;/a&gt;.
This means classes can inherit from arbitrary many classes.&lt;/p&gt;
&lt;p&gt;Let's start with a simple example how super works here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The inheritance tree looks like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/06/inheritance-a-b1-b2-c.svg"&gt;&lt;img alt="Inharitance Tree where A is the parent of B1 and B2. They are the parents of C." src="../images/2020/06/inheritance-a-b1-b2-c.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Inharitance Tree where A is the parent of B1 and B2. They are the parents of C.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The output of this script is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C
B1
B2
A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Still expected, right? Basically going deeper and left to right.&lt;/p&gt;
&lt;h2 id="multiple-inheritance-linearization"&gt;Multiple Inheritance: Linearization&lt;/h2&gt;
&lt;p&gt;Where the mental model might break is with the following example. The
inheritance tree is still the same. However, within B1 I don't call super
anymore. Which output would you expect?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;B2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The received output is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C
B1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, why does it not print &lt;code&gt;B2&lt;/code&gt; and not &lt;code&gt;A&lt;/code&gt;? After all, C still inherits from
&lt;code&gt;B2&lt;/code&gt; and &lt;code&gt;B2&lt;/code&gt; still calls &lt;code&gt;super&lt;/code&gt; which would point to &lt;code&gt;A&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;The reason is that the method resolution order is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(C.__mro__)
(&amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.B1'&amp;gt;, &amp;lt;class '__main__.B2'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that super searches first in B1, then B2, then A and then object for
the &lt;code&gt;__init__&lt;/code&gt; function. If it is found in one of them, it just executes that
one. It does not continue searching.&lt;/p&gt;
&lt;p&gt;Super is a call-next-method. It calls the next method in the method resolution
order. And it is cooperative: If one in the line does not call super, then the
line ends.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;StackOverflow:&lt;ul&gt;
&lt;li&gt;Callisto: &lt;a href="https://stackoverflow.com/q/3277367/562769"&gt;How does Python's super() work with multiple inheritance?&lt;/a&gt;, 2010.&lt;/li&gt;
&lt;li&gt;Mizipzor: &lt;a href="https://stackoverflow.com/q/576169/562769"&gt;Understanding Python super() with &lt;strong&gt;init&lt;/strong&gt;() methods&lt;/a&gt;, 2009.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Raymond Hettinger: &lt;a href="https://www.youtube.com/watch?v=EiOglTERPEo"&gt;Super considered super!&lt;/a&gt; at PyCon on YouTube, 2015.&lt;/li&gt;
&lt;li&gt;Raymond Hettinger: &lt;a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/"&gt;Python&amp;rsquo;s super() considered super!&lt;/a&gt;, 2011.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Inheritance"></category></entry><entry><title>Sorting Big Data</title><link href="https://martin-thoma.com/sorting-big-data/" rel="alternate"></link><published>2020-05-29T20:00:00+02:00</published><updated>2020-05-29T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-29:/sorting-big-data/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_data"&gt;Big Data&lt;/a&gt; was a common buzzword in
industry in 2012 until 2017. It is still common, but hopefully less of a
buzzword. Now other buzzwords are more common:&lt;/p&gt;
&lt;script src="https://ssl.gstatic.com/trends_nrtr/2152_RC03/embed_loader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt; trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"/m/0bs2j8q","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/01hyh_","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/0138n0j1 …&lt;/script&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_data"&gt;Big Data&lt;/a&gt; was a common buzzword in
industry in 2012 until 2017. It is still common, but hopefully less of a
buzzword. Now other buzzwords are more common:&lt;/p&gt;
&lt;script src="https://ssl.gstatic.com/trends_nrtr/2152_RC03/embed_loader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt; trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"/m/0bs2j8q","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/01hyh_","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/0138n0j1","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/0wkcjgj","geo":"","time":"2008-01-01 2020-03-24"},{"keyword":"/m/02_7vm","geo":"","time":"2008-01-01 2020-03-24"}],"category":0,"property":""}, {"exploreQuery":"date=2008-01-01%202020-03-24&amp;q=%2Fm%2F0bs2j8q,%2Fm%2F01hyh_,%2Fm%2F0138n0j1,%2Fm%2F0wkcjgj,%2Fm%2F02_7vm","guestPath":"https://trends.google.de:443/trends/embed/"}); &lt;/script&gt;
&lt;p&gt;By the way, I didn't include "artificial intelligence" because it dominates all
of the others.&lt;/p&gt;
&lt;p&gt;For me, a big-data solution means that I can't fit the critical part into
memory. This means that it is a question of time and money what problems
actually require a big data solution. Amazons &lt;code&gt;u-24tb1.metal&lt;/code&gt; instance has 24
TB of memory. Yes, that is not a typo on my side. TB, not GB.
(&lt;a href="https://aws.amazon.com/de/ec2/instance-types/high-memory/"&gt;source&lt;/a&gt;). They
don't even publicly say how expensive those beasts are.&lt;/p&gt;
&lt;p&gt;When it comes to big data, people think of
&lt;a href="https://en.wikipedia.org/wiki/Apache_Hadoop"&gt;Hadoop&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Apache_Spark"&gt;Spark&lt;/a&gt;. I'm not sure if I want to
go into that rabbit hole for this article. I want to show how to sort huge
amounts of data on a single machine: My Thinkpad T460p with 8GB of memory.&lt;/p&gt;
&lt;p&gt;Please note that an &lt;code&gt;x1e.32xlarge&lt;/code&gt; EC2 instance with about 4 TB of RAM costs
about 27 USD per hour
(&lt;a href="https://aws.amazon.com/de/ec2/pricing/on-demand/"&gt;source&lt;/a&gt;). This means you
might not need such a solution for quite a while.&lt;/p&gt;
&lt;h2 id="data-generation"&gt;Data Generation&lt;/h2&gt;
&lt;p&gt;I want to generate a bit of data and make it at least a tiny bit realistic. So
lets generate about 20GB of data in a CSV file.&lt;/p&gt;
&lt;h3 id="disk-space"&gt;Disk Space&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;df -h&lt;/code&gt; I realized that I only have 5 GB left of my 500GB HDD 😢&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.marzocca.net/linux/baobab/"&gt;Disk Usage Analyzer&lt;/a&gt; showed the
following disk space hogs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;404 GB: My Home Directory:&lt;ul&gt;
&lt;li&gt;152 GB: Various git repsitories&lt;ul&gt;
&lt;li&gt;103 GB: My "algorithms" repository&lt;ul&gt;
&lt;li&gt;99 GB for PyPI (see &lt;a href="https://martin-thoma.com/pypi-2020/"&gt;PyPI Analysis 2020&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;4 GB for a &lt;a href="https://github.com/MartinThoma/algorithms/tree/master/Python/databases/benchmark"&gt;database benchmark&lt;/a&gt;. I never really finished this; I moved on to other topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;28 GB for &lt;a href="https://github.com/A3M4/YouTube-Report"&gt;YouTube-Report&lt;/a&gt;. Or rather the Takeout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;97 GB: Downloads&lt;ul&gt;
&lt;li&gt;1.5 GB: Photos of a hiking trip&lt;/li&gt;
&lt;li&gt;800 MB: &lt;a href="https://arxiv.org/pdf/1701.08380.pdf"&gt;HASYv2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;many smaller things ... that would take a while. Maybe I should just delete everything&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;44 GB: Pictures&lt;/li&gt;
&lt;li&gt;22 GB: Dropbox&lt;/li&gt;
&lt;li&gt;20 GB: .local&lt;/li&gt;
&lt;li&gt;10 GB: .cache (mostly pip and pipenv)&lt;/li&gt;
&lt;li&gt;9 GB: Anaconda&lt;/li&gt;
&lt;li&gt;many smaller things&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;26 GB &lt;code&gt;/usr&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;7 GB TexLive&lt;/li&gt;
&lt;li&gt;6 GB CUDA in different versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7 GB &lt;code&gt;/var&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;5 GB journal logs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;some smaller things&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm astonished not to see Docker here 🤔&lt;/p&gt;
&lt;p&gt;After this short cleanup, I have &lt;code&gt;128G&lt;/code&gt; available 🎉&lt;/p&gt;
&lt;h3 id="generate-it"&gt;Generate it!&lt;/h3&gt;
&lt;p&gt;I don't want to spend too much time dealing with the actual element-by-element
comparison, so I want to use integers or strings to compare. I also don't want
to fiddle around with data organization, so I don't add a payload. We only
generate data which is sorted.&lt;/p&gt;
&lt;p&gt;I can imagine two ways to generate data to sort: Random numbers and UUIDs.
Let's see which is faster (&lt;a href="https://github.com/MartinThoma/algorithms/blob/master/sorting/timing.py"&gt;code on GitHub&lt;/a&gt;):&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/03/number-generation-speed.png"&gt;&lt;img alt="Time for generating 10k random elements" src="../images/2020/03/number-generation-speed.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Time for generating 10k random elements&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, numpy is the fastest and UUIDv4 generation is by far the
slowest. But numpy cannot generate random integers which are that big and the
time difference is not that huge. Everything as expected.&lt;/p&gt;
&lt;p&gt;So, let's say we generate those 36-character random numbers. Each of them needs
37 Byte - don't forget the newline. We want 20&amp;thinsp;GB, we need 540&amp;thinsp;540&amp;thinsp;541 elements.
Lets say 550 million numbers. My machine needed about 0.05s to generate 10k, so
I expect it to take &lt;code&gt;540540541 / 10_000  * 0.05 / 60 = 45 min&lt;/code&gt;. A good time to
get some food 🙂&lt;/p&gt;
&lt;p&gt;Done after 32&amp;nbsp;minutes. The file size is 20.4&amp;thinsp;GB.&lt;/p&gt;
&lt;h2 id="bash-sorting_1"&gt;Bash Sorting&lt;/h2&gt;
&lt;p&gt;Sorting with standard unix tools - namely &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; - is the simplest
solution that popped to my mind which should also be pretty fast. I will
wrap all commands in &lt;code&gt;time (the actual command)&lt;/code&gt; so that you can see how
fast they are.&lt;/p&gt;
&lt;p&gt;Chunk the data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;split&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;numbers-large.txt&lt;span class="w"&gt; &lt;/span&gt;chunk-&lt;span class="o"&gt;)&lt;/span&gt;

real&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt;,00s
user&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;,16s
sys&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;,29s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sort the chunks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;X&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;chunk-*&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;sorted-&lt;span class="nv"&gt;$X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

real&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;625&lt;/span&gt;,44s
user&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;2768&lt;/span&gt;,27s
sys&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;85&lt;/span&gt;,40s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Merge:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;sorted-chunk*&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;sorted.txt&lt;span class="o"&gt;)&lt;/span&gt;

real&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;531&lt;/span&gt;,50s
user&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;470&lt;/span&gt;,09s
sys&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt;,20s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In total, this approach needed &lt;strong&gt;20 min and 46 seconds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I will check other solutions for correctnes by the following command. It takes
91s just to check if the two files are identical!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cmp&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;shell-sort/sorted.txt&lt;span class="w"&gt; &lt;/span&gt;other-solution.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Let's see how quick I can do it with Python!&lt;/p&gt;
&lt;h3 id="merge-sort"&gt;Merge Sort&lt;/h3&gt;
&lt;p&gt;You can see the code &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/sorting/mergesort.py"&gt;on GitHub&lt;/a&gt;.
The idea is to (1) split the file into chunks that fit into memory (2) sort the
chunks (3) merge the chunks pair-wise. With this approach, you only have to
keep two chunks at a time in memory.&lt;/p&gt;
&lt;p&gt;This takes many hours to execute.&lt;/p&gt;
&lt;p&gt;There are a couple of things that come in handy when you have long-running
processes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Progressbars: You want to have an indicator how much time is remaining. Or if
  something crashed.&lt;/li&gt;
&lt;li&gt;Resumability: You want to be able to interrupt and resume later. An
  additional benefit is that the program becomes more robust against crashes.
  You achieve this by storing intermediate results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="heap-sort"&gt;Heap Sort&lt;/h3&gt;
&lt;p&gt;Basically the same idea as with merge sort, but using heapq:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;heapq&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;merge_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outpath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Using heapq to merge two files.&lt;/span&gt;

&lt;span class="sd"&gt;    See https://docs.python.org/2/library/heapq.html#heapq.merge&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;fout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This takes 10420s (2h 53min 40s) to execute.&lt;/p&gt;
&lt;h3 id="trivial-radix-sort"&gt;Trivial Radix Sort&lt;/h3&gt;
&lt;p&gt;Again, same idea as with the mergesort and the heapsort approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Chunking&lt;/strong&gt;: Generate 90 chunks for all of the 2-letter prefixes (10, 11,
   12, ... 97, 98, 99). Each chunk is now small enough to fit into memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chunk sorting&lt;/strong&gt;: Sort each chunk individually.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Combining&lt;/strong&gt;: Combine all of the chunks. As they were created by prefixes,
   this is just simply pasting the files together in the order of the prefixes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The difference in this case is the chunking. That part already does a great
deal of the sorting which makes the combining step trivial.&lt;/p&gt;
&lt;p&gt;Timing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chunking: 290.4s&lt;/li&gt;
&lt;li&gt;Chunk Sorting: 779.5s&lt;/li&gt;
&lt;li&gt;Combining: 208.4s&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In total, the Python Radix-Sort is at &lt;strong&gt;21 min and 30 seconds&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="multi-process-radix-sort"&gt;Multi-process Radix Sort&lt;/h3&gt;
&lt;p&gt;Most of the time is spent on sorting. However, I only used one core. So we can
improve the wall-clock execution time by running on multiple cores!&lt;/p&gt;
&lt;p&gt;To do so, we make a minor adjustment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sort_chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;multiprocessing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;

    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"chunks_to_sort"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Timing:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;2.7.18&lt;/th&gt;
&lt;th&gt;3.6.10&lt;/th&gt;
&lt;th&gt;3.7.7&lt;/th&gt;
&lt;th&gt;3.8.3&lt;/th&gt;
&lt;th&gt;3.9.0a&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;Chunking&lt;/td&gt;
&lt;td&gt;192.2s&lt;/td&gt;
&lt;td&gt;302.5s&lt;/td&gt;
&lt;td&gt;308.5s&lt;/td&gt;
&lt;td&gt;279.8s&lt;/td&gt;
&lt;td&gt;292.6s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chunk Sorting&lt;/td&gt;
&lt;td&gt;262.4s&lt;/td&gt;
&lt;td&gt;301.0s&lt;/td&gt;
&lt;td&gt;253.3s&lt;/td&gt;
&lt;td&gt;248.6s&lt;/td&gt;
&lt;td&gt;252.0s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Combining Chunks&lt;/td&gt;
&lt;td&gt;137.3s&lt;/td&gt;
&lt;td&gt;212.1s&lt;/td&gt;
&lt;td&gt;221.5s&lt;/td&gt;
&lt;td&gt;187.2s&lt;/td&gt;
&lt;td&gt;195.5s&lt;/td&gt;
&lt;/tr&gt;
&lt;tfoot&gt;
&lt;tr&gt;
&lt;th&gt;Total&lt;/th&gt;
&lt;th&gt;592.1s&lt;/th&gt;
&lt;th&gt;815.8s&lt;/th&gt;
&lt;th&gt;783.6s&lt;/th&gt;
&lt;th&gt;715.7s&lt;/th&gt;
&lt;th&gt;740.2s&lt;/th&gt;
&lt;/tr&gt;
&lt;/tfoot&gt;
&lt;/table&gt;
&lt;p&gt;In total, the Python parallel Radix-Sort is at &lt;strong&gt;12 min and 45 seconds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The speed-up is 3.1x.&lt;/p&gt;
&lt;p&gt;It's quite weird that Python 2.7 is way faster than Python 3.6+. I've asked
on StackOverflow &lt;a href="https://stackoverflow.com/q/62079732/562769"&gt;Did I/O or dictionaries become slower since Python 2.7?&lt;/a&gt;,
but didn't receive an answer so far.&lt;/p&gt;
&lt;h3 id="dask"&gt;Dask&lt;/h3&gt;
&lt;p&gt;I wanted to give &lt;a href="https://dask.org/"&gt;Dask&lt;/a&gt; a try and got some help from. However, I interrupted the
execution of the following solution after 5 hours:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dask.dataframe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dd&lt;/span&gt;

&lt;span class="n"&gt;input_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"numbers-large.txt"&lt;/span&gt;
&lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"numbers-large-sorted-dask.txt"&lt;/span&gt;
&lt;span class="n"&gt;blocksize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_000_000&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Create ddf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ddf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;blocksize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sort"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ddf_sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ddf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Write"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ddf_sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;single_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Stop"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sqlite"&gt;SQLite&lt;/h3&gt;
&lt;p&gt;Databases should be able to deal with large amounts of data, right? So let's
create a database with a single table and a single column, insert the data
and use SQL to sort:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""Sort a huge amount of data by inserting it into SQLite."""&lt;/span&gt;

&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"numbers-large.sqlite"&lt;/span&gt;
    &lt;span class="n"&gt;output_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlite-sorted-numbers.txt"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;create_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"create_db finished in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;read_sort_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"sorting and writing with sqlite finished in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the table&lt;/span&gt;
    &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CREATE TABLE numbers(i)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;batch_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executemany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"INSERT INTO numbers(i) VALUES (?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="n"&gt;batch_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Finished batch &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;batch_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executemany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"insert into numbers(i) values (?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Make index"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CREATE INDEX fooindex ON numbers(i)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Finished making index."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Finished creation of SQLiteDB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;read_sort_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_filepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT i FROM numbers ORDER BY i ASC"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"numbers-large.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Timing it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create_db: 850s&lt;/li&gt;
&lt;li&gt;sorting and writing with sqlite: 1184s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In total, it needed 2033s (33min 53s).&lt;/p&gt;
&lt;p&gt;If you make that single column an index after inserting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create_db: 1980s (index-making added 1130s)&lt;/li&gt;
&lt;li&gt;sorting and writing with sqlite: 432s (index made it faster by 752s)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="c_1"&gt;C++&lt;/h2&gt;
&lt;h3 id="single-core-radix-sort"&gt;Single-Core Radix-Sort&lt;/h3&gt;
&lt;p&gt;For implementing it, the following was important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File Flushing: If you use &lt;code&gt;endl&lt;/code&gt; for the newline, then the chunking step alone
  takes 1814s. That one takes 290s with Python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-O3&lt;/code&gt;: Just compile it with &lt;code&gt;g++ -O3 radixsort.cpp&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunk_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;big_filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefix2file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mkdir cpp-radix"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;prefix2file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cpp-radix/"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cpp-radix/"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Read and split the file&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ifstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"start chunking"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prefix2file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"chunking done"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Close files&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;prefix2file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;prefix2file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Read&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ifstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Sort&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// write&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"filepath"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ostream_iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_iterator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cpp-sorted.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ostream_iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// iterate over the vector&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Sort "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Read file&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ifstream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunk_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"numbers-large.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Sort "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sort_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;it_chunk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Merge"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunks_to_sort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"done"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In total, it took 18min 50s.&lt;/p&gt;
&lt;h3 id="multi-core-radix-sort"&gt;Multi-Core Radix-Sort&lt;/h3&gt;
&lt;p&gt;Add &lt;code&gt;#pragma omp parallel for&lt;/code&gt;, compile with the following flags and off it goes!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;g++&lt;span class="w"&gt; &lt;/span&gt;radixsort.cpp&lt;span class="w"&gt; &lt;/span&gt;-O3&lt;span class="w"&gt; &lt;/span&gt;-std&lt;span class="o"&gt;=&lt;/span&gt;c++11&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-pedantic&lt;span class="w"&gt; &lt;/span&gt;-fopenmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In total, 715s (11min 55s)&lt;/p&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;p&gt;StackExchange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/34090744/562769"&gt;How can I sort a 10GB file?&lt;/a&gt;, 2015.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/ubersicht-uber-sortieralgorithmen/"&gt;&amp;Uuml;bersicht &amp;uuml;ber Sortieralgorithmen&lt;/a&gt; (German)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Big Data"></category><category term="Python"></category><category term="Bash"></category><category term="sorting"></category></entry><entry><title>Python EEL</title><link href="https://martin-thoma.com/eel/" rel="alternate"></link><published>2020-05-23T20:00:00+02:00</published><updated>2020-05-23T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-23:/eel/</id><summary type="html">&lt;p&gt;&lt;a href="https://pypi.org/project/Eel/"&gt;Eel&lt;/a&gt; is a little Python library for making
simple Electron-like offline HTML/JS GUI apps, with full access to Python
capabilities and libraries.&lt;/p&gt;
&lt;h2 id="hello-world"&gt;Hello World&lt;/h2&gt;
&lt;p&gt;As a hello world example, I decided to create an offline version of &lt;a href="http://write-math.com/"&gt;write-math.com&lt;/a&gt;.
&lt;a href="https://github.com/MartinThoma/write-math-eel"&gt;Write-math in eel&lt;/a&gt; is on GitHub.&lt;/p&gt;
&lt;p&gt;The directory structure of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://pypi.org/project/Eel/"&gt;Eel&lt;/a&gt; is a little Python library for making
simple Electron-like offline HTML/JS GUI apps, with full access to Python
capabilities and libraries.&lt;/p&gt;
&lt;h2 id="hello-world"&gt;Hello World&lt;/h2&gt;
&lt;p&gt;As a hello world example, I decided to create an offline version of &lt;a href="http://write-math.com/"&gt;write-math.com&lt;/a&gt;.
&lt;a href="https://github.com/MartinThoma/write-math-eel"&gt;Write-math in eel&lt;/a&gt; is on GitHub.&lt;/p&gt;
&lt;p&gt;The directory structure of the minimal example is simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
&amp;boxvr;&amp;boxh;&amp;boxh; main.py
&amp;boxvr;&amp;boxh;&amp;boxh; Makefile
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; requirements.in
&amp;boxvr;&amp;boxh;&amp;boxh; requirements.txt
&amp;boxur;&amp;boxh;&amp;boxh; web
    &amp;boxur;&amp;boxh;&amp;boxh; canvas.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="standard-stuff"&gt;Standard Stuff&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;README.md&lt;/code&gt; contains some general information and the &lt;code&gt;Makefile&lt;/code&gt; some
commands which are useful when developing this package.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;requirements.in&lt;/code&gt; contains the abstract requirements, the
&lt;code&gt;requirements.txt&lt;/code&gt; contains the requirements pinned with &lt;code&gt;pip-compile&lt;/code&gt;. You
can install them via &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="mainpy"&gt;main.py&lt;/h3&gt;
&lt;p&gt;There are three interesting parts to notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@eel.expose&lt;/code&gt;: Make a Python function available to JavaScript&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eel.init("web")&lt;/code&gt;: &lt;code&gt;web&lt;/code&gt; is the web directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eel.start("canvas.html", jinja_templates="templates")&lt;/code&gt;: Start the GUI with
  the &lt;code&gt;canvas.html&lt;/code&gt; found in the web directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple, isn't it?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""Start a GUI to classify symbols."""&lt;/span&gt;

&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;eel&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hwrt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hwrt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;classify&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_json_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Return the top `n` results as a JSON list.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; results = [{'probability': 0.65,&lt;/span&gt;
&lt;span class="sd"&gt;    ...             'whatever': 'bar'},&lt;/span&gt;
&lt;span class="sd"&gt;    ...            {'probability': 0.21,&lt;/span&gt;
&lt;span class="sd"&gt;    ...             'whatever': 'bar'},&lt;/span&gt;
&lt;span class="sd"&gt;    ...            {'probability': 0.05,&lt;/span&gt;
&lt;span class="sd"&gt;    ...             'whatever': 'bar'},]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; get_json_result(results, n=10)&lt;/span&gt;
&lt;span class="sd"&gt;    [{'\\alpha': 0.65}, {'\\propto': 0.25}, {'\\varpropto': 0.0512}]&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"probability"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"probability"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"probability"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"probability"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@eel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expose&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strokelist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Classify the drawn symbol."""&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;classify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classify_segmented_recording&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strokelist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_json_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"web"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"canvas.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jinja_templates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"templates"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="canvashtml"&gt;canvas.html&lt;/h3&gt;
&lt;p&gt;That one is a bit to long to paste here completely; mainly due to logic of write-math.
The eel parts are simple.&lt;/p&gt;
&lt;p&gt;Include &lt;code&gt;eel.js&lt;/code&gt;. Please note that you don't have to put the file anywhere in
your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/eel.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the Python function. Note that &lt;code&gt;lines&lt;/code&gt; is a global variable I have declared
before. &lt;code&gt;showResults&lt;/code&gt; is one of my JavaScript functions. The &lt;code&gt;eel.worker&lt;/code&gt;
refers to the Python function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;async function run() {
    let results = await eel.worker(lines)();
    showResults(results);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;results&lt;/code&gt; is a string, so I needed to apply &lt;code&gt;JSON.parse&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="shipping_1"&gt;Shipping&lt;/h2&gt;
&lt;p&gt;Probably the most important part. I was not able to create something shippable
directly following the tutorial, so I &lt;a href="https://github.com/samuelhwilliams/Eel/issues/298"&gt;added an issue&lt;/a&gt;.
Might be a problem on my side, though.&lt;/p&gt;
&lt;p&gt;You can still create a Python package and then convert it to a Debian/Ubuntu
package. That should be easy. I have no idea how/if that works for Windows /
Mac.&lt;/p&gt;
&lt;h2 id="verdict"&gt;Verdict&lt;/h2&gt;
&lt;p&gt;Eel is a nice package to quickly create GUI prototypes with Python. All the
GUI parts are standard web stuff (HTML, CSS, JavaScript) and hence it is super
easy.&lt;/p&gt;
&lt;p&gt;Shipping might be a deal breaker if you want to create applications for
non-developers.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/topics/eel"&gt;Github Topic 'eel'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/eel?tab=Votes"&gt;StackOverflow 'eel'&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="GUI"></category><category term="electron"></category></entry><entry><title>Python is interpreted</title><link href="https://martin-thoma.com/python-is-interpreted/" rel="alternate"></link><published>2020-05-20T20:00:00+02:00</published><updated>2020-05-20T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-20:/python-is-interpreted/</id><summary type="html">&lt;p&gt;Python is interpreted. Python is a scripting language. I hear those two
statements pretty often when people want to say that Python is slow or that
Python is not suited for large systems. In this article I want to dispel those
myths.&lt;/p&gt;
&lt;h2 id="interpreted-language"&gt;Interpreted Language&lt;/h2&gt;
&lt;p&gt;What does it mean to say …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is interpreted. Python is a scripting language. I hear those two
statements pretty often when people want to say that Python is slow or that
Python is not suited for large systems. In this article I want to dispel those
myths.&lt;/p&gt;
&lt;h2 id="interpreted-language"&gt;Interpreted Language&lt;/h2&gt;
&lt;p&gt;What does it mean to say Python "is" an interpreted language? If you mean that
Python is usually interpreted, that statement is correct. If you mean that
Python is always interpreted, you are wrong&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Usually, this comes with the connotation that Python is slow.&lt;/p&gt;
&lt;h2 id="scripting-language"&gt;Scripting Language&lt;/h2&gt;
&lt;p&gt;Next, what does it mean to say Python "is" a scripting language. According to
Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A scripting or script language is a programming language for a special
run-time environment that automates the execution of tasks&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That sound a lot like "interpreted language" to me. However, later in the
article you can read&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;with the term "script" often used for small programs (up to a few thousand
lines of code)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which leads to the myth that you can't build complex systems with Python.&lt;/p&gt;
&lt;h2 id="myth-python-is-slow"&gt;Myth: Python is Slow&lt;/h2&gt;
&lt;p&gt;What people usually mean with that statement is that raw execution speed is low.&lt;/p&gt;
&lt;h3 id="speed-is-not-everything"&gt;Speed is not Everything&lt;/h3&gt;
&lt;p&gt;However, they tend to forget other important properties like development speed,
ease to find developers, flexibility of the built systems to adjust for future
changes.&lt;/p&gt;
&lt;p&gt;A case in point is this claim about the speed of YouTube developers (&lt;a href="https://news.ycombinator.com/item?id=16674628"&gt;ycombinator referencing "Python Interviews" by Mike Driscoll&lt;/a&gt;).
The fact that Python is well-suited for rapid prototyping is also appreciated
at CERN&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;. Same for Quora&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="raw-number-crunching"&gt;Raw Number-Crunching&lt;/h3&gt;
&lt;p&gt;Python has a lot of awesome libraries. Three of them help you with raw number
crunching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numpy and Scipy&lt;/strong&gt;: Two battle-proven libaries which build on
  &lt;a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms"&gt;BLAS libraries&lt;/a&gt;.
  So the computationally heavy stuff is executed in highly optimized libraries
  which are written in Fortran.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tensorflow / PyTorch&lt;/strong&gt;: Both libraries heavily rely on
  &lt;a href="https://en.wikipedia.org/wiki/CUDA"&gt;CUDA&lt;/a&gt; and CuDNN, meaning the code which
  does the number cruniching is executed on the GPU. No Python involved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="myth-python-can-use-multiple-cores_1"&gt;Myth: Python can use multiple cores&lt;/h2&gt;
&lt;p&gt;... because of the &lt;a href="https://en.wikipedia.org/wiki/Global_interpreter_lock"&gt;GIL&lt;/a&gt;.
That is just plain wrong. Have a look at my
&lt;a href="https://martin-thoma.com/asyncio/"&gt;asyncio article&lt;/a&gt; to get an overview over
concurrency in Python.&lt;/p&gt;
&lt;h2 id="myth-python-cannot-be-used-in-big-systems"&gt;Myth: Python cannot be used in big systems&lt;/h2&gt;
&lt;p&gt;Large systems might not need single heavy number crunching like BLAS libraries
do. They might (a) have just "organizational complexity", meaning a lot of
business logic or (b) a lot of single small requests comming into a web
service.&lt;/p&gt;
&lt;p&gt;There are a lot of
&lt;a href="https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites"&gt;pages&lt;/a&gt;
which say "Python is used at website XY". However, it's pretty hard to tell
where and how exactly Python is used. It is a pretty awesome language for
writing "glue code", meaning code which helps to keep things together. It's
also nice for ad-hoc stuff which could mean that it is only used for that. But,
and that is the point of this paragraph, you can also build big systems with
Python. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt; uses Django (sources:
  &lt;a href="https://instagram-engineering.com/what-powers-instagram-hundreds-of-instances-dozens-of-technologies-adf2e22da2ad"&gt;2011&lt;/a&gt;,
  &lt;a href="https://instagram-engineering.com/web-service-efficiency-at-instagram-with-python-4976d078e366"&gt;2016&lt;/a&gt;,
  &lt;a href="https://instagram-engineering.com/copy-on-write-friendly-python-garbage-collection-ad6ed5233ddf"&gt;2017&lt;/a&gt;):
  Instagram is at place 29 of the gloally most popular websites (&lt;a href="https://web.archive.org/web/20200416015659/https://www.alexa.com/topsites"&gt;Alexa, April
  2020&lt;/a&gt;).
  The fact that Instagram uses Django for their website shows two things: You
  can build complex systems using Python and you can build systems that scale.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pinterest&lt;/strong&gt; uses Flask and Django (&lt;a href="https://www.quora.com/What-challenges-has-Pinterest-encountered-with-Flask/answer/Steve-Cohen?srid=hXZd&amp;amp;share=1"&gt;Quora
  2015&lt;/a&gt;
  by &lt;a href="https://www.linkedin.com/in/icecreamcohen/"&gt;Steve Cohen&lt;/a&gt;): Pinterest is
  also one of the 500 most-visited websites on earth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;
  (&lt;a href="https://engineering.fb.com/production-engineering/python-in-production-engineering/"&gt;2016&lt;/a&gt;):
  A lot of places, but all seem not super huge. Facebook has released the
  &lt;a href="https://en.wikipedia.org/wiki/Tornado_(web_server)"&gt;Tornado Webserver&lt;/a&gt; which
  they seemed to have used for their real-time updates&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dropbox&lt;/strong&gt; makes heavy use of Python. They had Guido van Rossum working for
  them for quite a while and in 2019 they put a lot of effort in 2019 to update
  their code: &lt;a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python"&gt;Our journey to type checking 4 million lines of
  Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Netflix&lt;/strong&gt; also uses Python in &lt;a href="https://netflixtechblog.com/python-at-netflix-bba45dae649e"&gt;many
  places&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other big players where I have seen claims, but no reliable source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yahoo Maps, Yahoo Groups &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Google&lt;sup id="fnref2:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;: I see this menioned all the time and you can find job
  postings for this, but no details what Google uses Python for.&lt;/li&gt;
&lt;li&gt;YouTube: &lt;sup id="fnref3:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id="fnref2:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-make-python-fast"&gt;How to make Python Fast&lt;/h2&gt;
&lt;p&gt;I will likely write way more about this, but here are some core ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Analyze&lt;/strong&gt;: Where do you spend most of your execution time. Is it mainly
   waiting for I/O? Then look at my &lt;a href="https://martin-thoma.com/asyncio/"&gt;asyncio
   article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use libraries&lt;/strong&gt;: Python has a lot of awesome libraries which are
   well-maintaned. It takes a while to figure out which ones exist, but
   &lt;a href="https://numpy.org/"&gt;Numpy&lt;/a&gt;, &lt;a href="https://www.scipy.org/"&gt;Scipy&lt;/a&gt;,
   &lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;, &lt;a href="https://dask.org/"&gt;Dask&lt;/a&gt;,
   &lt;a href="https://www.tensorflow.org/"&gt;Tensorflow&lt;/a&gt;, &lt;a href="https://pytorch.org/"&gt;PyTorch&lt;/a&gt;,
   &lt;a href="https://flask.palletsprojects.com/"&gt;Flask&lt;/a&gt;,
   &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, &lt;a href="https://www.nltk.org/"&gt;nltk&lt;/a&gt;,
   &lt;a href="https://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt;, and
   &lt;a href="https://spacy.io/"&gt;spacy&lt;/a&gt; are certainly some of them. And learn how to use
   them correctly. I had a 96x speedup just for using numpy for matrix
   multiplication. I had a 46x speedup by using numpy and a vectorized
   solution. Still pure Python in both cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpreters&lt;/strong&gt;: You don't need to use the standard interpreter.
   &lt;a href="https://www.pypy.org/"&gt;PyPy&lt;/a&gt; might be way faster due to JIT compilation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C-Bindings&lt;/strong&gt;: If Python is to slow for a specific task, you don't need to
   abandon Python. Cython, ctypes, cffi, c extension and pybind11 are some of
   the options you have.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-to-build-big-systems-with-python"&gt;How to build big Systems with Python&lt;/h2&gt;
&lt;p&gt;A lot of the answer is not Python specific and would require way more than just
this small part of the article. Some tiny hints which help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coding Standards: &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;,
  &lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;,
  &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/typing.html"&gt;Type hints&lt;/a&gt; and
  &lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt; for type checking&lt;/li&gt;
&lt;li&gt;Testing: &lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Python.org wiki: &lt;a href="https://wiki.python.org/moin/OrganizationsUsingPython"&gt;Organizations using Python&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;David Recordon: &lt;a href="https://developers.facebook.com/blog/post/301"&gt;Tornado: Facebook's Real-Time Web Framework for Python&lt;/a&gt;, 2018.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://www.python.org/about/quotes/"&gt;Python Quotes&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:3" title="Jump back to footnote 3 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="http://cdsweb.cern.ch/journal/CERNBulletin/2006/31/News%20Articles/974627?ln=en"&gt;Python : The Holy Grail of Programming&lt;/a&gt;, 2006.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Adam_D%27Angelo"&gt;Adam D'Angelo&lt;/a&gt;: &lt;a href="https://www.quora.com/Why-did-Quora-choose-Python-for-its-development-What-technological-challenges-did-the-founders-face-before-they-decided-to-go-with-Python-rather-than-PHP"&gt;Why did Quora choose Python for its development?&lt;/a&gt;, 2014.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Ramchandra Apte: &lt;a href="https://stackoverflow.com/a/11415005/562769"&gt;Is it feasible to compile Python to machine code?&lt;/a&gt;, 2012.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:6" title="Jump back to footnote 6 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Anders Hovm&amp;ouml;ller: &lt;a href="https://kodare.net/2020/05/19/python-is-slow-does-not-have-to-be.html"&gt;Python is slow - it doesn't have to be&lt;/a&gt;, 2020.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:7" title="Jump back to footnote 7 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Raw SQL vs Query Builder vs ORM</title><link href="https://martin-thoma.com/https://towardsdatascience.com/raw-sql-vs-query-builder-vs-orm-eee72dbdd275#cbe8-27a45e3740e8" rel="alternate"></link><published>2020-05-17T20:00:00+02:00</published><updated>2020-05-17T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-17:/https://towardsdatascience.com/raw-sql-vs-query-builder-vs-orm-eee72dbdd275/cbe8-27a45e3740e8</id><summary type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/relational-database.png"&gt;&lt;img alt="Screenshot of phpmyadmin" src="../images/2020/07/relational-database.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Screenshot of phpmyadmin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Databases are the core of storing state for almost all web applications. For
that reason taking care of the interactions with the database is crucial to
make sure the application keeps running. The way to interact with most
relational databases is SQL &amp;mdash; the &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;*tructured &lt;/strong&gt;Q&lt;strong&gt;uery …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/relational-database.png"&gt;&lt;img alt="Screenshot of phpmyadmin" src="../images/2020/07/relational-database.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Screenshot of phpmyadmin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Databases are the core of storing state for almost all web applications. For
that reason taking care of the interactions with the database is crucial to
make sure the application keeps running. The way to interact with most
relational databases is SQL &amp;mdash; the &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;*tructured &lt;/strong&gt;Q&lt;strong&gt;uery &lt;/strong&gt;L&lt;strong&gt;anguage&lt;em&gt;. SQL
makes it incredibly simple to switch the actual database system or the client
using that database. It&amp;rsquo;s just SQL everywhere. You need a &lt;/em&gt;database driver* and
then you can do the typical CRUD interactions: &lt;/strong&gt;C&lt;strong&gt;reate, &lt;/strong&gt;R&lt;strong&gt;ead, &lt;/strong&gt;U&lt;strong&gt;pdate
and &lt;/strong&gt;D**elete data.&lt;/p&gt;
&lt;p&gt;After reading this article, you will know when to use raw SQL, a query builder
and an ORM. You will also know how to use each of them in Python.&lt;/p&gt;
&lt;p&gt;All of the code in this article is runnable. You just need to &lt;a href="https://gist.github.com/MartinThoma/95b603226f84f3be25f4eaf2393fba9e"&gt;initialize the database&lt;/a&gt; and add environment variables. I use &lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt; to set environment variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# direnv needed; alternatively: "source .envrc"&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;idontthinkso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="raw-sql"&gt;&lt;strong&gt;Raw SQL&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Raw SQL, &lt;/em&gt;sometimes also called &lt;em&gt;native SQL,&lt;/em&gt; is the most basic, most
low-level form of database interaction. You tell the database what to do in the
language of the database. Most developers should know basics of SQL. This means
how to CREATE tables and views, how to SELECT and JOIN data, how to UPDATE and
DELETE data. For more complex things like &lt;a href="https://en.wikipedia.org/wiki/Stored_procedure"&gt;stored
procedures&lt;/a&gt;, T-SQL, PL-SQL,
in-depth knowledge about indices and their effect you will have a significantly
harder time to find knowledgeable people. SQL is far more powerful than many
developers think. I wouldn&amp;rsquo;t know &lt;a href="http://wiki.postgresql.org/wiki/Mandelbrot_set"&gt;how to create the Mandelbrot set with
SQL&lt;/a&gt;, for example.&lt;/p&gt;
&lt;p&gt;In order to illustrate the problems of raw SQL statements, take the example of a book portal. The users can see data about books, for example their title, original language and the author:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/books-authors.png"&gt;&lt;img alt="Every book has exactly one author, but every author might have an arbitrary number of books." src="../images/2020/07/books-authors.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Every book has exactly one author, but every author might have an arbitrary number of books.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For an author page, we are given the &lt;code&gt;authors.id&lt;/code&gt; and want to see a list of
all &lt;code&gt;books.title&lt;/code&gt; written by that author:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="c1"&gt;# You need to install the driver pymysql via &amp;ldquo;pip install pymysql&amp;rdquo;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pymysql.cursors&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;db_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Supply the decorated function with a database connection.&lt;/span&gt;
&lt;span class="sd"&gt;    Commit/rollback and close the connection after the function call.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;with_connection_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DB_USER"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DB_PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"books"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;with_connection_&lt;/span&gt;


&lt;span class="nd"&gt;@db_connection&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictCursor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM books WHERE author_id = %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The decorator is utility code that the project might use a lot.&lt;/p&gt;
&lt;p&gt;On the positive side, it is pretty clear what happens with raw SQL. You only need knowledge of Python and SQL. No need to be deep in third party software.&lt;/p&gt;
&lt;p&gt;However, there are six negative aspects about using raw SQL to be aware of.&lt;/p&gt;
&lt;h3 id="problem-1-sql-injections"&gt;Problem 1: SQL Injections&lt;/h3&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/xkcd-327.png"&gt;&lt;img alt="xkcd 327" src="../images/2020/07/xkcd-327.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;&lt;a href="https://xkcd.com/327/"&gt;xkcd 327&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;An SQL injection is an attack on services which have a placeholder in an SQL query which the attacker can fill in an unexpected way. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SELECT user_id FROM users WHERE name='&lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;' AND pw='&lt;/span&gt;&lt;span class="si"&gt;{pw}&lt;/span&gt;&lt;span class="s2"&gt;';"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given such an approach, the attacker could fill in ' OR name='admin' AND '1'='1 for the pw and empty for the name. This would result in the query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will basically tell the application that the user signed in as admin.&lt;/p&gt;
&lt;p&gt;Of course, escaping the quotes and not directly pasting in user input is what you should do. But developers make mistakes. Raw SQL queries make it easy to make this mistake.&lt;/p&gt;
&lt;h3 id="problem-2-typos-in-sql-commands"&gt;Problem 2: Typos in SQL Commands&lt;/h3&gt;
&lt;p&gt;The first obvious problem of string-programming is that typos in the sub-language cannot be detected by the editor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM books;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="problem-3-missing-editor-support"&gt;Problem 3: Missing Editor Support&lt;/h3&gt;
&lt;p&gt;This problem is quite dumb, but still an open issue for many languages / editors: When developers write their SQL just in a string within their language, how should the editor know that this string needs to be parsed? How should the editor know that they want syntax highlighting and auto-completion?&lt;/p&gt;
&lt;p&gt;You can see already in the example above that syntax highlighting is missing, but let me give you screenshots of well-known editors:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/sublime-raw-sql.png"&gt;&lt;img alt="Sublime Text 3.2" src="../images/2020/07/sublime-raw-sql.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Sublime Text 3.2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/vs-code-1-47.png"&gt;&lt;img alt="VS Code 1.47" src="../images/2020/07/vs-code-1-47.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;VS Code 1.47&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/vim.png"&gt;&lt;img alt="vim 8.1" src="../images/2020/07/vim.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;vim 8.1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In contrast, here is the same query in an query.sql file:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/sublime-query.png"&gt;&lt;img alt="Sublime Text 3.2" src="../images/2020/07/sublime-query.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Sublime Text 3.2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/vs-code-query.png"&gt;&lt;img alt="VS Code 1.47" src="../images/2020/07/vs-code-query.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;VS Code 1.47&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/07/vim-query.png"&gt;&lt;img alt="vim 8.1" src="../images/2020/07/vim-query.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;vim 8.1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I&amp;rsquo;ve tried PyCharm as well. Besides having another color for strings, it looks
the same. It does not recognize that the string contains SQL.&lt;/p&gt;
&lt;p&gt;If you really need raw queries and if you still want syntax highlighting, you
can put each query in its own query.sql file. This way the editor knows to use
SQL syntax highlighting.&lt;/p&gt;
&lt;h3 id="problem-4-typos-in-table-or-column-names"&gt;Problem 4: Typos in Table or Column Names&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * from boks;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This group of errors is way harder to find. Now the checking code does not only
have to know how SQL works, it also has to know your data. The database schema
to be more precise.&lt;/p&gt;
&lt;h3 id="problem-5-change-management"&gt;Problem 5: Change management&lt;/h3&gt;
&lt;p&gt;Databases change over time. With raw SQL, you typically don&amp;rsquo;t get any support
for that. You have to migrate the schema and all queries yourself.&lt;/p&gt;
&lt;h3 id="problem-6-query-extension"&gt;Problem 6: Query Extension&lt;/h3&gt;
&lt;p&gt;If you have an analytical query, it is nice if you can apply slight
modifications to it. For example, imagine tracking data where you want to know
how many users clicked on a button. You might have a &amp;ldquo;base query&amp;rdquo; for that.
Depending on the use case you might want to filter for a certain time frame or
characteristics of the user. It&amp;rsquo;s possible to extend a query when you have raw
SQL, but it&amp;rsquo;s cumbersome. You need to touch the original query and add
placeholders.&lt;/p&gt;
&lt;h2 id="query-builder_1"&gt;&lt;strong&gt;Query Builder&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Libraries which are written in the programming language you use and use native
classes and functions to build SQL queries are called &lt;em&gt;query builders&lt;/em&gt;. Query
builders typically have a &lt;a href="https://en.wikipedia.org/wiki/Fluent_interface"&gt;fluent
interface&lt;/a&gt;. This means, that
the queries are built by an object-oriented interface which uses method
chaining:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;aid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are also graphical tools which are sometimes also called query builders,
but for this article I don&amp;rsquo;t mean them.&lt;/p&gt;
&lt;p&gt;JavaScript &lt;a href="http://knexjs.org/"&gt;Knex&lt;/a&gt;, PHP has
&lt;a href="https://www.doctrine-project.org/projects/doctrine-dbal/en/2.10/reference/query-builder.html#sql-query-builder"&gt;Doctrine&lt;/a&gt;,
Java has &lt;a href="http://www.querydsl.com/"&gt;QueryDSL&lt;/a&gt; and &lt;a href="http://www.jooq.org/"&gt;JOOQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kayak/pypika"&gt;Pypika&lt;/a&gt; is an example for a Query Builder in
Python. The example query from above can be built and executed like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pymysql.cursors&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pypika&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;raw_sql&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db_connection&lt;/span&gt;


&lt;span class="nd"&gt;@db_connection&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictCursor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote_char&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the resulting query is still the same as in the raw code. It was just built in another way. This means the database performance is still the same. And query building is not a complex task, so the application performance overall should stay the same.&lt;/p&gt;
&lt;p&gt;You can also see that the connection handling is still done as before. The
total lines of code increased by 3 lines compared to the raw SQL example.
However, the query is easier to extend and reuse. For example, you could
imagine that you have a set of complex joins and a lot of WHERE statements.
With a normal SQL query, you will start to add options there. With a query
builder, it is simpler to extend and reuse queries. To make it reusable you
would expose the query&amp;nbsp;&lt;code&gt;q&lt;/code&gt; somewhere.&lt;/p&gt;
&lt;p&gt;The query builder prevents typos in the offered parts &amp;mdash; &lt;code&gt;.select&lt;/code&gt;, &lt;code&gt;.from_&lt;/code&gt;,
&lt;code&gt;.where&lt;/code&gt; in the example above. It does not help with column names, as they are
still only strings. In other words: A query builder solves problem&amp;nbsp;1 and&amp;nbsp;2,
addresses problem&amp;nbsp;3, and still has problem&amp;nbsp;4 and&amp;nbsp;5.&lt;/p&gt;
&lt;h2 id="orm-object-relational-mapper"&gt;&lt;strong&gt;ORM: Object-Relational Mapper&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;ORMs create an object for each database table. This way, there is a language-native representation and thus all of the languages ecosystem features such as autocomplete and syntax-highlighting work.&lt;/p&gt;
&lt;p&gt;ORMs are extremely popular in many languages: Java has &lt;a href="http://hibernate.org/"&gt;Hibernate&lt;/a&gt;, PHP has &lt;a href="https://laravel.com/docs/5.0/eloquent"&gt;Eloquent&lt;/a&gt;, Ruby has &lt;a href="https://guides.rubyonrails.org/active_record_basics.html"&gt;activerecord&lt;/a&gt;, JavaScript has &lt;a href="https://sequelize.org/"&gt;Sequelize&lt;/a&gt; and &lt;a href="https://typeorm.io/"&gt;TypeORM&lt;/a&gt;, and Python has &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is how the book example looks with SQLAlchemy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;db_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Supply the decorated function with a database connection.&lt;/span&gt;
&lt;span class="sd"&gt;    Commit/rollback and close the connection after the function call.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;with_connection_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# https://martin-thoma.com/sql-connection-strings/&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DB_USER"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DB_PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"mysql+pymysql://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@localhost/books"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;with_connection_&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"books"&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@db_connection&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A cool point about ORMs is that they sometimes help with changes. In Python, there is &lt;a href="https://alembic.sqlalchemy.org/en/latest/"&gt;Alembic&lt;/a&gt; which can automatically detect when your models changed compared to the last known state of the database. Alembic can then create schema migration files for you. They look like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sa&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;alembic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy.dialects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;

&lt;span class="c1"&gt;# revision identifiers, used by Alembic.&lt;/span&gt;
&lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1cdeb9f52797"&lt;/span&gt;
&lt;span class="n"&gt;down_revision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"057fccb0279d"&lt;/span&gt;
&lt;span class="n"&gt;branch_labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;depends_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"confirmed_on"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"registered_on"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email_confirmation_missing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"userstatus"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"email_confirmation_missing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"email_confirmed_at"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;downgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email_confirmed_at"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DATETIME&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"registered_on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"confirmed_on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It requires initial effort to represent the database within the code so that there are objects which represent the tables of the database. After that initial effort you need to make sure that the database is in sync with the query builders code base. What you get from that effort is faster development when you just need to write new queries. As you can also get syntax highlighting and auto-formatting, it could also reduce maintenance by making the queries easier to read.&lt;/p&gt;
&lt;h3 id="over-fetching-problem"&gt;Over-fetching Problem&lt;/h3&gt;
&lt;p&gt;When you fire Queries with ORMs, you tend to get more than you need. For example, if you wanted to use the ORM directly for the book query from above, you would define the foreign key like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Core Library modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;orms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db_connection&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Book"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"books"&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"authors.id"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Author"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@db_connection&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_titles_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the database receives those two queries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors_first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors_last_name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_author_id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is inefficient for multiple reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I didn&amp;rsquo;t want author information at all.&lt;/li&gt;
&lt;li&gt;The database needs to execute two queries instead of one.&lt;/li&gt;
&lt;li&gt;I didn&amp;rsquo;t want the books ID or the authors ID. Of course, this is a tiny
   example where it doesn&amp;rsquo;t matter. But imagine your query would return several
   hundred rows and have also sever hundred columns. And maybe some would be
   filled with rather big content, e.g. a
   &lt;a href="https://mariadb.com/kb/en/longblob/"&gt;LONGBLOB&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, you can do something like that:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/799d89eead2c1d176e7343222a071c3b"&gt;&lt;/iframe&gt;
&lt;p&gt;which results in this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors_first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors_last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;books_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_1_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;books_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_1_title&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;LEFT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OUTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_1&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this is even worse. I first made this as a mistake, but I think this shows perfectly how you can get the right result but in a very complex way when using an ORM. The correct way, of course, would be:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/be65663477c66d9b44c0cfd8e329c327"&gt;&lt;/iframe&gt;
&lt;p&gt;Which results in this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;books_title&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The point of this example is not that ORMs make it hard to do the right thing.
The last example is certainly easy to understand. But they also make it easy to
create queries which are wrong in a subtle way. Imagine you received the
orms2.py or orms3.py example to review. They do the right thing, the unit tests
are not terrible slow either. Would you be certain to spot the unnecessary
complexity? Also when the desired query gets way more complex?&lt;/p&gt;
&lt;p&gt;For raw SQL and query builders, you have to go out of your way to come up with
similar complex queries. There it is hard to write a too complex query and it&amp;rsquo;s
easy to spot them.&lt;/p&gt;
&lt;h3 id="the-n1-problem-initial-under-fetching"&gt;The N+1 Problem: Initial Under-Fetching&lt;/h3&gt;
&lt;p&gt;Imagine you want to print a list of all books with the author names. In raw
SQL, you would execute this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;LEFT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With an ORM, you might be tempted to do this:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/b7b584fc3628ded28094f054aa6d5da4"&gt;&lt;/iframe&gt;
&lt;p&gt;It looks fine because you don&amp;rsquo;t see a session.query in the for-loop, but for
every element in there it fires one query. So if you have received n books in
the first query, you will execute n queries you&amp;rsquo;re potentially not aware of.
You have n+1 queries instead of 1 .&lt;/p&gt;
&lt;h3 id="the-leaky-abstraction-problem"&gt;The Leaky Abstraction Problem&lt;/h3&gt;
&lt;p&gt;Abstraction is a two-sided coin: On the one hand, it simplifies things. The
developer does not have to deal with the details of the database interaction
and query building. On the other hand, developers are not aware of what they
actually query from the database or how many queries they send. For this
reason, some interactions are more inefficient than they need to be
(&lt;a href="https://www.youtube.com/watch?v=3TJfR1Ta4GU"&gt;example&lt;/a&gt;). The ORM might not
know that just in the next line of code a very similar query is fired which
could be combined with the first one. For example, imagine that you have a book
portal where people can give a list of authors and you return them the list of
all books written by those. You might be tempted to do something like this:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/ab03bbf6e4c362fa609cd34e424c2bbf"&gt;&lt;/iframe&gt;
&lt;p&gt;Now you send a query once for each author. Of course, you can do that in a
single query. And you should, because although the loop above does not seem to
bad, you have a network connection in between. This is how you do it with a
single query:&lt;/p&gt;
&lt;iframe frameborder="0" src="https://medium.com/media/3cd1bcc951866f18156a587f43f5bac4"&gt;&lt;/iframe&gt;
&lt;h2 id="bonus-linq_1"&gt;Bonus: LINQ&lt;/h2&gt;
&lt;p&gt;Language Integrated Queries (short: LINQ) are available in C# and might be a built-in solution for the problems query builders try to solve. Here is an &lt;a href="https://en.wikipedia.org/wiki/Language_Integrated_Query#Language_extensions"&gt;example from Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SomeCollection&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SomeProperty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SomeProperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OtherProperty&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s extremely neat, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id="query-types-and-gradual-changes"&gt;Query Types and Gradual Changes&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve used a very simple example query. Of course, queries can become way more
complicated. I have written myself queries which have several hundred lines.
There are two groups of workloads which are typically distinguished:
&lt;a href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;OLTP&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;OLAP&lt;/a&gt;. OLTP
workloads have a big amount of small inserts / updates / deletes, whereas OLAP
workloads run a small amount of complex select queries for analysis.&lt;/p&gt;
&lt;p&gt;Of course, if you are in a scenario where most of your queries are rather
simple, it is easy to switch to a query builder or an ORM. But if you have
complex queries the switch to an ORM might even be impossible.&lt;/p&gt;
&lt;p&gt;This is where gradual changes come into play. Similar as
&lt;a href="https://medium.com/analytics-vidhya/type-annotations-in-python-3-8-3b401384403d"&gt;Python supports gradual typing&lt;/a&gt;,
some ORMs / Query Builders allow you to use raw SQL. And some query builders
allow you to first use strings for the table and column names and transition as
you like to objects. If you can just take the amount of abstraction that feels
natural, your development speed is not hindered. If you have a complex query
which you first want to get right, just write it raw. Changing it to an
expression by a query builder later is still possible.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Raw SQL is for sure the most powerful way to interact with your database as it
is the databases native language. The drawback is that you might use features
which are specific to that database, which makes a future database switch
harder. Another drawback is that core editor features like syntax highlighting
and autocompletion are missing. Extending queries is cumbersome and the risk of
SQL injections is higher.&lt;/p&gt;
&lt;p&gt;Query Builders add little development overhead and no relevant runtime overhead
compared to raw SQL and prevent typos in the SQL keywords. They make extending
queries easier and make SQL injections harder.&lt;/p&gt;
&lt;p&gt;ORMs provide the highest form of abstraction and prevent typos not only in SQL
keywords, but also in the table and column names. They take longer to get
started than query builders &amp;mdash; both, from a learning curve perspective and from
the perspective of initial development overhead. As they abstract away a lot,
there is a higher risk to execute expensive queries or too many queries.&lt;/p&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;A huge thank you to &lt;a href="https://www.linkedin.com/in/marcel-kost/"&gt;Marcel Kost&lt;/a&gt; and
&lt;a href="https://www.linkedin.com/in/adrian-vogelsgesang-95485a7a/?originalSubdomain=de"&gt;Adrian
Vogelsgesang&lt;/a&gt;
who pointed out many interesting aspects for this article. They build the Hyper
Database that is used inside Tableau, so they are the experts when it comes to
complicated queries and how the database systems deal with those. Thank you 🤗&lt;/p&gt;</content><category term="Code"></category><category term="SQL"></category><category term="ORM"></category><category term="SQLAlchemy"></category><category term="pypika"></category><category term="Query Builder"></category></entry><entry><title>Python Requirements</title><link href="https://martin-thoma.com/python-requirements/" rel="alternate"></link><published>2020-05-16T20:00:00+02:00</published><updated>2020-05-16T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-16:/python-requirements/</id><summary type="html">&lt;p&gt;Pythons package management is a constant source of confusion. One part of the
confusion is in which format dependencies should get denoted. It gets worse, because there are &lt;a href="https://stackoverflow.com/q/25337706/562769"&gt;too many tools&lt;/a&gt;. &lt;a href="https://xkcd.com/1987/"&gt;xkcd&lt;/a&gt; shows this pretty well:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://xkcd.com/1987/"&gt;&lt;img alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages." src="https://imgs.xkcd.com/comics/python_environment.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;xkcd The Python environmental protection agency wants to seal it in a cement chamber …&lt;/figcaption&gt;&lt;/figure&gt;</summary><content type="html">&lt;p&gt;Pythons package management is a constant source of confusion. One part of the
confusion is in which format dependencies should get denoted. It gets worse, because there are &lt;a href="https://stackoverflow.com/q/25337706/562769"&gt;too many tools&lt;/a&gt;. &lt;a href="https://xkcd.com/1987/"&gt;xkcd&lt;/a&gt; shows this pretty well:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://xkcd.com/1987/"&gt;&lt;img alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages." src="https://imgs.xkcd.com/comics/python_environment.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;xkcd The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages. (&lt;a href="https://www.explainxkcd.com/wiki/index.php/1987:_Python_Environment"&gt;explanation&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After reading this post, you will know the difference between abstract and concrete requirements, the relationship between setup.py, setup.cfg, requirements.txt, Pipfile, Pipfile.lock, and pyproject.toml.&lt;/p&gt;
&lt;p&gt;I will not cover at all anything related to Anaconda and it will not go into detail how to use various tools.&lt;/p&gt;
&lt;h2 id="how-code-is-shared"&gt;How Code is Shared&lt;/h2&gt;
&lt;p&gt;Back in the old days, code was shared as actual boxes which you borrowed from the library - the building, not some other software. I'm talking about &lt;a href="https://en.wikipedia.org/wiki/Punched_card"&gt;punch cards&lt;/a&gt;. Then people moved to sharing code on the internet as simple snippets / functions. Things became bigger and more organized. From simple archives (e.g. zip files) to archives with structure. The archive file contained code in pre-defined places, contained some meta data such as the author and especially the required dependencies. This special kind of archive file was then called a package.&lt;/p&gt;
&lt;p&gt;Packages need to be built. They can then be shared. Finally, they can be installed, used and removed.&lt;/p&gt;
&lt;p&gt;Packages exist on the Python ecosystem level where you have the installer &lt;code&gt;pip&lt;/code&gt; and the package repository PyPI, on the Anaconda level with the installer &lt;code&gt;conda&lt;/code&gt; and the repository Anaconda Cloud and on the operating system level where you have tools like &lt;code&gt;apt&lt;/code&gt; and the Ubuntu repositories. Of course, there are many more.&lt;/p&gt;
&lt;p&gt;Also, you have self-extracting archives and specialized installers. They are super common on Windows.&lt;/p&gt;
&lt;h2 id="sharable-code-types"&gt;Sharable Code Types&lt;/h2&gt;
&lt;p&gt;There are two very different types of sharable code to write: &lt;strong&gt;Applications&lt;/strong&gt; and &lt;strong&gt;libraries&lt;/strong&gt;. An application can have a command line interface (CLI), a graphical interface (GUI), be running as a web service or a system service, or it can just run regularly when events happen.&lt;/p&gt;
&lt;p&gt;For libraries, the code never runs on its own. It is included in other code.&lt;/p&gt;
&lt;p&gt;Please note that for this post, I consider a &lt;strong&gt;framework&lt;/strong&gt; to be a special kind of library.&lt;/p&gt;
&lt;h2 id="abstract-dependencies"&gt;Abstract Dependencies&lt;/h2&gt;
&lt;p&gt;The simplest way to share dependencies is by stating the names of the packages your code expects to be present. Not where one can get the dependency from, no version.&lt;/p&gt;
&lt;p&gt;This is nice, because it allows the user of your code to have just any version of the dependency installed. The user might even be able to have an alternative implementation of the package installed, such as &lt;code&gt;Pillow&lt;/code&gt; instead of &lt;code&gt;PIL&lt;/code&gt; or &lt;code&gt;propy3&lt;/code&gt; instead of &lt;code&gt;propy&lt;/code&gt;. Just something that keeps the interfaces intact and you exposes the same names as imports.&lt;/p&gt;
&lt;h2 id="concrete-dependencies"&gt;Concrete Dependencies&lt;/h2&gt;
&lt;p&gt;Abstract dependencies are nice, but sometimes the version is important. Sometimes interfaces break. Then you might want to point out which version range is acceptable. Or you might want to set an exact version.&lt;/p&gt;
&lt;h2 id="abstract-or-concrete-when-to-use-which"&gt;Abstract or Concrete: When to use which?&lt;/h2&gt;
&lt;p&gt;For library/framework code, you want to have maximum flexibility. Your
library is likely not the only one your users use. If you give concrete
dependencies, you might make it impossible for your users to have one set of
packages installed which fulfills all requirements:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/05/dependency-graph-pinning-conflict.svg"&gt;&lt;img alt="A package version conflict if two packages pinned different versions of urllib" src="../images/2020/05/dependency-graph-pinning-conflict.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A package version conflict if two packages pinned different versions of urllib&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, &lt;strong&gt;for library/framework code, you keep dependencies abstract&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For application code on the other hand, the user just wants to run the
application. You want to be as sure as possible that nothing fails. So you
specify concrete dependencies. You say for everything your application needs
where it comes from and in which version it is used. But this might not be
enough.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/05/dependency-graph.png"&gt;&lt;img alt="Dependency graph where wasabi could make things fail if only the version of spacy is pinned" src="../images/2020/05/dependency-graph.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Dependency graph where wasabi could make things fail if only the version of spacy is pinned&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, &lt;strong&gt;for application code, you specify concrete dependencies and you apply
version pinning&lt;/strong&gt;. That means you specify the exact version you need for all of
your direct &lt;strong&gt;and&lt;/strong&gt; indirect dependencies.&lt;/p&gt;
&lt;div class="alert alert-warning"&gt;The reason why this whole topic is so confusing, is the fact that the two concepts (application vs library) are not strictly seperated and that the file formats and tools have grown over time.&lt;/div&gt;
&lt;p&gt;Practically, I suggest to keep dependencies in &lt;code&gt;setup.py&lt;/code&gt; as loose as possible and add a &lt;code&gt;requirements.txt&lt;/code&gt; which has pinned dependencies. This way one can install the package via pip and reasonably expect other things not to break while one can still use the &lt;code&gt;requirements.txt&lt;/code&gt; and an virtual environment to isolate the application from the rest of the system.&lt;/p&gt;
&lt;p&gt;You might think this is a shortcomming of the Python community not to allow packages to distinguish those two concepts and install "application packages" automatically in an isolated virtual environment with all their pinned dependencies. It's not. It's a design decision. The positive side of this is that it can save resources. You don't need to have dozens of duplicates of the same package on your disk. Also, when you load two libraries A and B which both depend on C, you only have C once in memory. The downside of it is that if you update that shared version, you can break things in unexpected ways.&lt;/p&gt;
&lt;p&gt;Essentially you let the user decide what they want: Do they (a) want a small disk footprint or (b) isolation. If they want (a), they neey can install everything in the same environment. If they want (b), they need to use &lt;code&gt;venv&lt;/code&gt; in some way, e.g. directly, via &lt;code&gt;virtualenv&lt;/code&gt; or via &lt;code&gt;pipenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sadly, within one running environment it is not so easy to have multiple versions of the same package (&lt;a href="https://stackoverflow.com/q/60084441/562769"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="distribution-formats"&gt;Distribution formats&lt;/h2&gt;
&lt;p&gt;Python packages are distributed in two relevant flavours: &lt;strong&gt;Source distributions&lt;/strong&gt; (sdist) and &lt;strong&gt;built distributions&lt;/strong&gt; (bdist, a special case is the "binary distribution").&lt;/p&gt;
&lt;h3 id="built-distributions"&gt;Built Distributions&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;built distribution&lt;/strong&gt; can either be in the &lt;a href="https://setuptools.readthedocs.io/en/latest/formats.html"&gt;egg format&lt;/a&gt; (deprecated) or in the &lt;a href="https://www.python.org/dev/peps/pep-0427/"&gt;wheels format&lt;/a&gt;. There is no reason to use/build eggs anymore; use and build just wheels. The wheels format is newer and learned from shortcommings of the egg format. Wheels is specified in &lt;a href="https://www.python.org/dev/peps/pep-0427/"&gt;PEP 427&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="source-distributions"&gt;Source Distributions&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;source distribution&lt;/strong&gt; is just sharing the source. It doesn't build anything. The advantage of this is that it is the same for all platforms (Windows, Linux, Mac) and machines (32 Bit / 64 Bit). The disadvantage is that users have to build the package themselves. This might include building Fortran / C code (e.g. for numpy and scipy). This also includes to get the dependencies.&lt;/p&gt;
&lt;p&gt;Source distributions are typically created to use &lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html"&gt;setuptools&lt;/a&gt; is it is around for a long time and installed on essentially every machine which has Python. &lt;strong&gt;If you want to install a source distribution using setuptools, you need a &lt;code&gt;setup.py&lt;/code&gt; file&lt;/strong&gt;. You can see the structure of such a file below.&lt;/p&gt;
&lt;p&gt;Similar as egg was created to solve an issue and later replaced by a specified version (wheels), the setuptools build solution is getting superseeded by &lt;code&gt;pyproject.toml&lt;/code&gt;. This file allows you to specify the build system you want. This includes &lt;code&gt;setuptools&lt;/code&gt; (with &lt;code&gt;setup.py&lt;/code&gt;), but is not limited to it.&lt;/p&gt;
&lt;h2 id="version-pinning_1"&gt;Version pinning&lt;/h2&gt;
&lt;p&gt;Version pinning is the act of specifying the exact version of your
dependencies. Not only the direct dependencies, but also the indirect ones.&lt;/p&gt;
&lt;h3 id="pip-compile"&gt;pip-compile&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;requirements.in&lt;/code&gt; and run &lt;code&gt;pip-compile&lt;/code&gt; from &lt;a href="https://pypi.org/project/pip-tools/"&gt;&lt;code&gt;pip-tools&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip-compile&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;requirements.in
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the solution I would recommend.&lt;/p&gt;
&lt;h3 id="virtualenv-pip-freeze"&gt;virtualenv + pip freeze&lt;/h3&gt;
&lt;p&gt;An alternative option is to create a virtual environment, install the package, make sure everything works and write the installed dependencies versions in a &lt;code&gt;requirements.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;virtualenv&lt;span class="w"&gt; &lt;/span&gt;venv
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;venv/bin/activate

&lt;span class="c1"&gt;# Add additional targets, if wanted!&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;.

$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;freeze&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pipreqs"&gt;pipreqs&lt;/h3&gt;
&lt;p&gt;If you think your setup.py might miss something, try &lt;a href="https://pypi.org/project/pipreqs/"&gt;&lt;code&gt;pipreqs&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pipreqs
$&lt;span class="w"&gt; &lt;/span&gt;pipreqs&lt;span class="w"&gt; &lt;/span&gt;/project/path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A similar tool is &lt;a href="https://pypi.org/project/pipdeptree/"&gt;&lt;code&gt;pipdeptree&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dependency-formats_1"&gt;Dependency Formats&lt;/h2&gt;
&lt;p&gt;There are two common formats to denote dependencies: Within the &lt;code&gt;setup.py&lt;/code&gt; and
&lt;code&gt;requirements.txt&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt; is used to install packages, whereas &lt;code&gt;requirements.txt&lt;/code&gt; files are
used to prepare a development environment.&lt;/p&gt;
&lt;p&gt;As an alternative to &lt;code&gt;requirements.txt&lt;/code&gt;, you can use &lt;code&gt;Pipfile&lt;/code&gt; + &lt;code&gt;Pipfile.lock&lt;/code&gt;.
However, the &lt;code&gt;requirements.txt&lt;/code&gt; is still the de facto standard.&lt;/p&gt;
&lt;h3 id="requirementstxt"&gt;requirements.txt&lt;/h3&gt;
&lt;p&gt;The structure of a &lt;code&gt;requirements.txt&lt;/code&gt; file is super simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;--index-url https://pypi.python.org/simple/
-e https://github.com/foo/bar.git#egg=bar
virtualenv==15.1.0
visitor==0.1.3
vtk==8.1.1
wadllib==1.3.2
watchdog==0.8.3
wcwidth==0.1.7
webencodings==0.5.1
websocket-client==0.54.0
Werkzeug==0.15.2
widgetsnbextension==3.3.0
wily==1.12.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One line of the format &lt;code&gt;[package]==[version]&lt;/code&gt;per requirement.&lt;/p&gt;
&lt;p&gt;It can be installed via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are nice tools like &lt;code&gt;piprot&lt;/code&gt; which tells you how outdated the
requirements are. I would not create a &lt;code&gt;requirements.txt&lt;/code&gt; manually, but instead
a &lt;code&gt;setup.py&lt;/code&gt; or a &lt;code&gt;requirements.in&lt;/code&gt; and let &lt;code&gt;pip-compile&lt;/code&gt; create the
&lt;code&gt;requirements.txt&lt;/code&gt; with all the transitive dependencies. You can then also use
&lt;code&gt;pip-compile -U&lt;/code&gt; to upgrade the dependencies.&lt;/p&gt;
&lt;h3 id="setuppy"&gt;setup.py&lt;/h3&gt;
&lt;p&gt;I usually end up using something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="sd"&gt;"""mpu: Martins Python Utilities."""&lt;/span&gt;

&lt;span class="c1"&gt;# Core Library&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# Third party&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Read a text file and return the content as a string."""&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;requires_datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"pytz"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;requires_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Pillow"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;requires_io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"pytz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"tzlocal"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;requires_aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"boto3"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;requires_tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"pytest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"pytest-cov"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"pytest-mccabe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"pytest-flake8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"simplejson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;requires_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"pandas"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"python-magic"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requires_datetime&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requires_image&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requires_io&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requires_aws&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;requires_tests&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mpu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.21.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# keep in sync with mpu/_version.py&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Martin Thoma"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"info@martin-thoma.de"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Martin Thoma"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;maintainer_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"info@martin-thoma.de"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"mpu"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"units/currencies.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"data/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"package/templates/*"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="n"&gt;extras_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requires_all&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"aws"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requires_aws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"datetime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requires_datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requires_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"io"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requires_io&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"tests"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requires_tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;platforms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Linux"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/MartinThoma/mpu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Martins Python Utilities"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"README.md"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text/markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"utility"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;download_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/MartinThoma/mpu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"Development Status :: 3 - Alpha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Environment :: Console"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Intended Audience :: Developers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Intended Audience :: Information Technology"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"License :: OSI Approved :: MIT License"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Natural Language :: English"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Programming Language :: Python :: 3.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Topic :: Software Development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Topic :: Utilities"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="setupcfg"&gt;setup.cfg&lt;/h3&gt;
&lt;p&gt;Instead of filling the &lt;code&gt;setup.py&lt;/code&gt; that much, I like to move stuff to the &lt;code&gt;setup.cfg&lt;/code&gt;. The reason for that is that I prefer to have configuration files instead of code, if it's possible.&lt;/p&gt;
&lt;p&gt;Instead of the &lt;code&gt;setup.py&lt;/code&gt; from above you can have this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this &lt;code&gt;setup.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[metadata]&lt;/span&gt;
&lt;span class="c1"&gt;# https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;mpu&lt;/span&gt;

&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Martin Thoma&lt;/span&gt;
&lt;span class="na"&gt;author_email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;info@martin-thoma.de&lt;/span&gt;
&lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Martin Thoma&lt;/span&gt;
&lt;span class="na"&gt;maintainer_email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;info@martin-thoma.de&lt;/span&gt;

&lt;span class="c1"&gt;# keep in sync with mpu/_version.py&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;0.21.0&lt;/span&gt;

&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Martins Python Utilities&lt;/span&gt;
&lt;span class="na"&gt;long_description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;file: README.md&lt;/span&gt;
&lt;span class="na"&gt;long_description_content_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;text/markdown&lt;/span&gt;
&lt;span class="na"&gt;keywords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;utility,&lt;/span&gt;

&lt;span class="na"&gt;platforms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Linux&lt;/span&gt;

&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://github.com/MartinThoma/mpu&lt;/span&gt;
&lt;span class="na"&gt;download_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://github.com/MartinThoma/mpu&lt;/span&gt;

&lt;span class="na"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;MIT&lt;/span&gt;
&lt;span class="na"&gt;classifiers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Development Status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: 3 - Alpha&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Console&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Intended Audience&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Developers&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Intended Audience&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Information Technology&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;License&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: OSI Approved :: MIT License&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Natural Language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: English&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Programming Language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Python :: 3 :: Only&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Programming Language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Python :: 3.6&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Programming Language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Python :: 3.7&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Programming Language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Python :: 3.8&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Topic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Software Development&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;Topic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Utilities&lt;/span&gt;

&lt;span class="k"&gt;[options]&lt;/span&gt;
&lt;span class="na"&gt;zip_safe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;find:&lt;/span&gt;
&lt;span class="na"&gt;python_requires&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;gt;= 3.0&lt;/span&gt;

&lt;span class="k"&gt;[options.extras_require]&lt;/span&gt;
&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pandas&lt;/span&gt;&lt;span class="c1"&gt;; python-magic; boto3; pytz; Pillow; tzlocal; pytest; pytest-cov; pytest-mccabe; pytest-flake8; simplejson&lt;/span&gt;
&lt;span class="na"&gt;aws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;boto3&lt;/span&gt;
&lt;span class="na"&gt;datetime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pytz&lt;/span&gt;
&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pillow&lt;/span&gt;
&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pytz&lt;/span&gt;&lt;span class="c1"&gt;; tzlocal&lt;/span&gt;
&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;pytest&lt;/span&gt;&lt;span class="c1"&gt;; pytest-cov; pytest-mccabe; pytest-flake8; simplejson&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You also see a reason here why you might want to mix-and-match between a pure &lt;code&gt;setup.py&lt;/code&gt; and a pure &lt;code&gt;setup.cfg&lt;/code&gt; solution: The &lt;code&gt;all&lt;/code&gt; extra can be specified way better in code than in the configuration.&lt;/p&gt;
&lt;h3 id="pyprojecttoml"&gt;pyproject.toml&lt;/h3&gt;
&lt;p&gt;The pyproject.toml deserves its &lt;a href="https://martin-thoma.com/pyproject-toml/"&gt;own blog post&lt;/a&gt;, but there are a few things to point out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only the build system aspect is specified in &lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org/docs/pyproject/"&gt;poetry defines&lt;/a&gt; name, version, license, maintainers, readme, keywords, classifiers, dependencies and dependencies-dev, ...&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flit.readthedocs.io/en/latest/"&gt;flit defines&lt;/a&gt; module, author, author-email, home-page, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool-overview_1"&gt;Tool Overview&lt;/h2&gt;
&lt;p&gt;Core Tools used by everybody:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pip/"&gt;pip&lt;/a&gt;: Install and remove Python packages. Installing includes dependency resolution.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/twine/"&gt;twine&lt;/a&gt;: Upload Python packages ("distributions")&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt;: An application in the standard library that allows you to create virtual environments. I don't use this. Instead, I like to use &lt;a href="https://pypi.org/project/tox/"&gt;&lt;code&gt;tox&lt;/code&gt;&lt;/a&gt; to isolate my unit tests. Or just have them run in a CI pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Third Party tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MartinThoma/cookiecutter-python-package"&gt;cookiecutter&lt;/a&gt;: Create a package sceleton. I can recomend cookicutter, although it is just a tiny tool. I use it with &lt;a href="https://github.com/MartinThoma/cookiecutter-python-package"&gt;my own template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;: Manage different Python versions. I highly recommend to use it! Before, switching the Python version was a massive pain for me. After that, it just takes a minute to install a new version.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipenv"&gt;pipenv&lt;/a&gt;: Manage virtual environments for us&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="comparison-with-other-languages"&gt;Comparison with other Languages&lt;/h2&gt;
&lt;p&gt;The concept of abstract and concrete dependencies is not unique to Python and thus other programming languages have similar concepts. They look sometimes way less confusiong, e.g. because the language is new and could learn from existing patterns (e.g. Rust).&lt;/p&gt;
&lt;p&gt;There are multiple ways to achieve the same thing in Python. For example, instead of using&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Package Metadata&lt;/th&gt;
&lt;th&gt;Abstract dependencies&lt;/th&gt;
&lt;th&gt;Locked dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;setup.py&lt;br/&gt;setup.cfg&lt;/td&gt;
&lt;td&gt;&lt;span style="color: green;"&gt;setup.py&lt;/span&gt;&lt;br/&gt;&lt;span style="color: green;"&gt;Pipfile&lt;/span&gt;&lt;br/&gt;&lt;span style="color: red;"&gt;requirements.txt&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color: green;"&gt;requirements.txt&lt;/span&gt;&lt;br/&gt;&lt;span style="color: green;"&gt;Pipfile.lock&lt;/span&gt;&lt;br/&gt;&lt;span style="color: red;"&gt;setup.py&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;.gemspec&lt;/td&gt;
&lt;td&gt;Gemfile&lt;/td&gt;
&lt;td&gt;Gemfile.lock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td&gt;Cargo.toml&lt;/td&gt;
&lt;td&gt;Cargo.toml&lt;/td&gt;
&lt;td&gt;Cargo.lock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="glossary"&gt;Glossary&lt;/h2&gt;
&lt;p&gt;The following is mostly taken from Wikipedia and &lt;a href="https://docs.python.org/3/glossary.html"&gt;the Python glossary&lt;/a&gt;:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Namespace"&gt;&lt;dfn&gt;Namespace&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The place where a variable is stored. A namespace ensures that all the identifiers within it have unique names so that they can be easily identified&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://docs.python.org/3/tutorial/modules.html"&gt;&lt;dfn&gt;Module&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process of importing. A module is a &lt;code&gt;.py&lt;/code&gt; file containing Python definitions and statements. The file name is the module name with the suffix .py appended. Within a module, the module&amp;rsquo;s name (as a string) is available as the value of the global variable __name__&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://docs.python.org/3/tutorial/modules.html#packages"&gt;&lt;dfn&gt;Package&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A package is a folder with an &lt;code&gt;__init__.py&lt;/code&gt; file. A package is a Python module with an &lt;code&gt;__path__&lt;/code&gt; attribute.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;Subpackage&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;If package B is contained in package A, then B is called a &lt;dfn&gt;subpackage&lt;/dfn&gt; of A.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/25337706/562769"&gt;setuptools vs. distutils: why is distutils still a thing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@joel.barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56"&gt;How to upload your python package to PyPi&lt;/a&gt;, 07.05.2018.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/46330327/562769"&gt;How are Pipfile and Pipfile.lock used?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/#dependency-management-with-requirementstxt"&gt;Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipfile/issues/27#issuecomment-262264222"&gt;Comparison with Rust and Ruby&lt;/a&gt;, 22.11.2016.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jazzband/pip-tools/issues/679#issuecomment-418251444"&gt;Why to keep requirements.txt + pip-compile and not go to pipenv + Pipfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies"&gt;Managing Application Dependencies&lt;/a&gt;: poetry, hatch, pip-tools&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.godatadriven.com/setup-py"&gt;A Practical Guide to Using Setup.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/discussions/wheel-vs-egg/"&gt;Wheel vs Egg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sedimental.org/the_packaging_gradient.html"&gt;The Many Layers of Packaging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="setup.py"></category><category term="requirements.txt"></category><category term="Software Engineering"></category></entry><entry><title>Naming Styles</title><link href="https://martin-thoma.com/naming-styles/" rel="alternate"></link><published>2020-05-14T20:00:00+02:00</published><updated>2020-05-14T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-14:/naming-styles/</id><summary type="html">&lt;p&gt;Naming styles are one of the trivial things in a style guide. Here are some of
then names you might hear.&lt;/p&gt;
&lt;h2 id="the-styles"&gt;The Styles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snake_case&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;camelCase&lt;/code&gt;: Also lowerCamelCase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PascalCase&lt;/code&gt;: Also UpperCamelCase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONSTANT_CASE&lt;/code&gt;: This is used in many languages for constants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cebab-case&lt;/code&gt;: I have only seen this within strings. This is likely …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Naming styles are one of the trivial things in a style guide. Here are some of
then names you might hear.&lt;/p&gt;
&lt;h2 id="the-styles"&gt;The Styles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snake_case&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;camelCase&lt;/code&gt;: Also lowerCamelCase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PascalCase&lt;/code&gt;: Also UpperCamelCase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONSTANT_CASE&lt;/code&gt;: This is used in many languages for constants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cebab-case&lt;/code&gt;: I have only seen this within strings. This is likely as the &lt;code&gt;-&lt;/code&gt;
  is usually used for substraction. It's also used for file names. It's mentioned &lt;a href="https://medium.com/better-programming/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841"&gt;here&lt;/a&gt; and on &lt;a href="https://www.robinwieruch.de/javascript-naming-conventions"&gt;robinwieruch.de&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="application"&gt;Application&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Variables&lt;/th&gt;
&lt;th&gt;Functions / Methods&lt;/th&gt;
&lt;th&gt;Classes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;snake_case&lt;/td&gt;
&lt;td&gt;snake_case&lt;/td&gt;
&lt;td&gt;PascalCase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td&gt;camelCase&lt;/td&gt;
&lt;td&gt;camelCase&lt;/td&gt;
&lt;td&gt;PascalCase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;snake_case&lt;/td&gt;
&lt;td&gt;PascalCase&lt;/td&gt;
&lt;td&gt;PascalCase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;camelCase&lt;/td&gt;
&lt;td&gt;camelCase&lt;/td&gt;
&lt;td&gt;PascalCase&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;p&gt;Wikipedia:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Snake_case"&gt;Snake case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Camel_case"&gt;Camel case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Style Guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/cppguide.html"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/javaguide.html"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/jsguide.html"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Code"></category><category term="Style Guide"></category></entry><entry><title>XOR</title><link href="https://martin-thoma.com/xor/" rel="alternate"></link><published>2020-05-12T20:00:00+02:00</published><updated>2020-05-12T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-12:/xor/</id><summary type="html">&lt;p&gt;XOR is a simple bit-wise defined function:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{XOR}:&amp;amp; {0, 1} \times {0, 1} \rightarrow {0, 1}\
    \text{XOR}(a, b) :&amp;amp;= \begin{cases}0 &amp;amp;\text{if } a= b\1&amp;amp;\text{otherwise}\end{cases}
\end{align}&lt;/p&gt;
&lt;p&gt;To make it more convenient, we define $a \oplus b := \text{XOR}(a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;XOR is a simple bit-wise defined function:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{XOR}:&amp;amp; {0, 1} \times {0, 1} \rightarrow {0, 1}\
    \text{XOR}(a, b) :&amp;amp;= \begin{cases}0 &amp;amp;\text{if } a= b\1&amp;amp;\text{otherwise}\end{cases}
\end{align}&lt;/p&gt;
&lt;p&gt;To make it more convenient, we define $a \oplus b := \text{XOR}(a, b)$.&lt;/p&gt;
&lt;p&gt;If $a$ and $b$ have multiple bits, just align the bits to the same number and
and apply it point-wise on every index.&lt;/p&gt;
&lt;p&gt;This simple function is applicable in many contexts. In Python, you make a
bit-wise XOR(a, b) with &lt;code&gt;a ^ b&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="multi-bit-example"&gt;Multi-Bit Example&lt;/h2&gt;
&lt;p&gt;Just look at each column:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        a = 0011
        b = 0110
XOR(a, b) = 0101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="simple-tasks"&gt;Simple Tasks&lt;/h2&gt;
&lt;p&gt;There are some simple coding competition tasks where you can apply this trick.&lt;/p&gt;
&lt;h3 id="leetcode-136"&gt;Leetcode 136&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a non-empty array of integers, every element appears twice except for
one. Find that single one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://leetcode.com/problems/single-number/"&gt;Leetcode.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a straight-forward solution to that problem using no additonal space
and running in $\mathcal{O}(n)$:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_outlier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
        &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty cool, isn't it?&lt;/p&gt;
&lt;h3 id="missing-number"&gt;Missing Number&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given is an array of (n-1) numbers. Each number is in  1, ..., n and unique.
This means you have all numbers from 1 to n, but one is missing and the
array is not necessarily sorted.
Find the missing number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is also a &lt;a href="https://leetcode.com/problems/missing-number"&gt;leetcode problem&lt;/a&gt;.
&lt;a href="https://leetcode.com/problems/find-the-duplicate-number/"&gt;Leetcode-287&lt;/a&gt;
is not exactly the same, but super close. Solvable by the same trick. However,
the problem descriptions is wrong 😕&lt;/p&gt;
&lt;p&gt;A bit harder, but &lt;a href="https://leetcode.com/problems/set-mismatch/"&gt;Leetcode-645&lt;/a&gt; also uses the XOR-trick.&lt;/p&gt;
&lt;p&gt;The straight-forward solution with the XOR-trick is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Prepare&lt;/span&gt;
    &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="c1"&gt;# Run&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This already has the optimal space complexity of $\mathcal{O}(1)$ and
the optimal time complexity of $\mathcal{O}(n)$. However, I don't like that
the prepare-block is in $\mathcal{O}(n)$.&lt;/p&gt;
&lt;p&gt;Let's call the XOR of the numbers 1 to n, ALL_XOR(n):&lt;/p&gt;
&lt;p&gt;$$\text{ALL_XOR}(n) := \begin{cases}0 &amp;amp;\text{if } n =0\\text{XOR}(n , \text{ALL_XOR(n-1)}) &amp;amp;\text{otherwise}\end{cases}$$&lt;/p&gt;
&lt;p&gt;The XOR of 1 to n for some numbers can be seen here:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;$\text{ALL_XOR}(n)$&lt;/th&gt;
&lt;th&gt;n % 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="hypothesis-1-if-n-4-0-then-textall_xorn-n"&gt;Hypothesis 1: If n % 4 == 0, then $\text{ALL_XOR}(n) = n$&lt;/h4&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Mathematical_induction"&gt;proof by induction&lt;/a&gt; follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base Case&lt;/strong&gt; (BC): For $n = 0$ we have $n$ % 4 == 0 and $\text{ALL_XOR}(n) = n = 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Induction step&lt;/strong&gt;: For $n + 4$, we have:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{ALL_XOR}(n + 4) &amp;amp;= \text{ALL_XOR}(n) \oplus (n+1) \oplus (n+2) \oplus (n+3) \oplus (n+4)\
    &amp;amp;\stackrel{(BC)}{=} n \oplus (n+1) \oplus (n+2) \oplus (n+3) \oplus (n+4)\
&amp;amp;\stackrel{(R)}{=} n \oplus (n \oplus 1) \oplus (n \oplus 2)  \oplus (n \oplus 3) \oplus (n + 4)\
&amp;amp;\stackrel{(A + K)}{=} (n \oplus n) \oplus 1 \oplus 2 (n \oplus n) \oplus 3 \oplus (n + 4)\
&amp;amp;= 3 \oplus 3 \oplus (n + 4)\
&amp;amp;= n + 4
\end{align}&lt;/p&gt;
&lt;p&gt;A few steps to explain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R: If you look at $n$ in binary, the last two digits are zero as n % 4 == 0. This means that $n+1 = n \oplus 1$.&lt;/li&gt;
&lt;li&gt;BC: The base case&lt;/li&gt;
&lt;li&gt;A + K: Associativity and Kommutativity; I didn't prove it but it is pretty
  clear from the defintion&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="hypothesis-2-if-n-4-1-then-textall_xorn-1"&gt;Hypothesis 2: If n % 4 == 1, then $\text{ALL_XOR}(n) = 1$&lt;/h4&gt;
&lt;p&gt;And another proof by induction!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base Case&lt;/strong&gt; (BC): For $n = 1$ we have $n$ % 4 == 1 and $\text{ALL_XOR}(n) = 0 \oplus 1 = 1$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Induction step&lt;/strong&gt;: For $n + 4$, we have:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{ALL_XOR}(n + 4) &amp;amp;= \text{ALL_XOR}(n) \oplus (n+1) \oplus (n+2) \oplus (n+3) \oplus (n+4)\
    &amp;amp;\stackrel{(BC)}{=} 1 \oplus (n + 1) \oplus (n + 2) \oplus (n + 3) \oplus (n+4)\
&amp;amp;\stackrel{(R)}{=} 1 \oplus (n \oplus 3) \oplus (n \oplus 2) \oplus (n + 3) \oplus (n+4)\
&amp;amp;= (n+3) \oplus (n + 4)
&amp;amp;= 1
\end{align}&lt;/p&gt;
&lt;h4 id="hypothesis-3-if-n-4-2-then-textall_xorn-n1"&gt;Hypothesis 3: If n % 4 == 2, then $\text{ALL_XOR}(n) = n+1$&lt;/h4&gt;
&lt;p&gt;All good things come in threes!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base Case&lt;/strong&gt; (BC): For $n = 2$ we have $n$ % 4 == 2 and $\text{ALL_XOR}(n) = 0 \oplus 1 \oplus 2 = 3$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Induction step&lt;/strong&gt;: For $n + 4$, we have:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{ALL_XOR}(n + 4) &amp;amp;= \text{ALL_XOR}(n) \oplus (n+1) \oplus (n+2) \oplus (n+3) \oplus (n+4)\
    &amp;amp;\stackrel{(BC)}{=} (n+1) \oplus (n + 1) \oplus (n + 2) \oplus (n + 3) \oplus (n+4)\
&amp;amp;= (n + 2) \oplus (n + 3) \oplus (n+4)\
&amp;amp;\stackrel{(R)}{=} (n + 3) \oplus 2\
&amp;amp;= n + 1
\end{align}&lt;/p&gt;
&lt;h4 id="hypothesis-4-if-n-4-3-then-textall_xorn-0"&gt;Hypothesis 4: If n % 4 == 3, then $\text{ALL_XOR}(n) = 0$&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Base Case&lt;/strong&gt; (BC): For $n = 3$ we have $n$ % 4 == 3 and $\text{ALL_XOR}(n) = 0 \oplus 1 \oplus 2 \oplus 3 = 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Induction step&lt;/strong&gt;: For $n + 4$, we have:&lt;/p&gt;
&lt;p&gt;\begin{align}
    \text{ALL_XOR}(n + 4) &amp;amp;= \text{ALL_XOR}(n) \oplus (n+1) \oplus (n+2) \oplus (n+3) \oplus (n+4)\
    &amp;amp;\stackrel{(BC)}{=} (n + 1) \oplus (n + 2) \oplus (n + 3) \oplus (n+4)\
&amp;amp;\stackrel{(R)}{=} 1 \oplus (n+3) \oplus(n+4)\
&amp;amp;\stackrel{(R)}{=} (n+4)\oplus(n+4)\
&amp;amp;= 0
\end{align}&lt;/p&gt;
&lt;p&gt;This means there is a faster solution!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Prepare&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# n % 4 == 3&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Run&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fault-tolerance_1"&gt;Fault Tolerance&lt;/h2&gt;
&lt;p&gt;In order to be fault-tolerant, one can calculate the XOR. Please note that this
is the same idea as in both toy questions from above. The &lt;a href="https://en.wikipedia.org/wiki/Parity_drive"&gt;parity drive&lt;/a&gt;
in RAID 3 uses this.&lt;/p&gt;
&lt;h2 id="xor-problem"&gt;XOR Problem&lt;/h2&gt;
&lt;p&gt;In the context of Machine Learning there is something called the "XOR Problem".
The XOR-Problem is a classification problem, where you only have four data
points with two features. The training set and the test set are exactly the
same in this problem. So the interesting question is only if the model is able
to find a decision boundary which classifies all four points correctly:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2016/07/xor-problem.png"&gt;&lt;img alt="The XOR classification problem. 4 datapoints and two classes. All datapoints have 2 features." src="../images/2016/07/xor-problem.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;The XOR classification problem. 4 datapoints and two classes. All datapoints have 2 features.&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="Code"></category><category term="Python"></category><category term="Competitive Programming"></category><category term="Mathematical induction"></category></entry><entry><title>MongoDB</title><link href="https://martin-thoma.com/mongodb/" rel="alternate"></link><published>2020-05-11T20:00:00+02:00</published><updated>2020-05-11T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-11:/mongodb/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/MongoDB"&gt;MongoDB&lt;/a&gt; is a document-oriented
database system. It is used to store JSON objects.&lt;/p&gt;
&lt;p&gt;The problem it solves is working with heterogenous data which does not fit into
a schema or where creating a schema would be overly complicated. If it fits into
a schema, use a SQL database like MySQL …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/MongoDB"&gt;MongoDB&lt;/a&gt; is a document-oriented
database system. It is used to store JSON objects.&lt;/p&gt;
&lt;p&gt;The problem it solves is working with heterogenous data which does not fit into
a schema or where creating a schema would be overly complicated. If it fits into
a schema, use a SQL database like MySQL/MariaDB or Posgres. If you just need to
store key/value pairs, use a &lt;a href="https://martin-thoma.com/key-value-stores/"&gt;Key-Value Store&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="concepts"&gt;Concepts&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn&gt;Document&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;The basic unit of MongoDB, similar to a row in SQL databases. Documents are analogous to JSON objects but exist in the database in a more type-rich format known as BSON.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;Collection&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A grouping of MongoDB documents. A collection is the equivalent of an RDBMS table. A collection exists within a single database. Collections do not enforce a schema. Documents within a collection can have different fields. Typically, all documents in a collection have a similar or related purpose.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;Database&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;A physical container for collections. Each database gets its own set of files on the file system. A single MongoDB server typically has multiple databases.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="db-installation"&gt;DB Installation&lt;/h2&gt;
&lt;p&gt;On Ubuntu, you can simply run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="db-cli-tools"&gt;DB CLI Tools&lt;/h2&gt;
&lt;p&gt;Start the mongo shell and show help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mongo
MongoDB&lt;span class="w"&gt; &lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;version&lt;span class="w"&gt; &lt;/span&gt;v3.6.3
connecting&lt;span class="w"&gt; &lt;/span&gt;to:&lt;span class="w"&gt; &lt;/span&gt;mongodb://127.0.0.1:27017
MongoDB&lt;span class="w"&gt; &lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;version:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.3
Welcome&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;MongoDB&lt;span class="w"&gt; &lt;/span&gt;shell.
For&lt;span class="w"&gt; &lt;/span&gt;interactive&lt;span class="w"&gt; &lt;/span&gt;help,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"help"&lt;/span&gt;.
For&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="w"&gt; &lt;/span&gt;comprehensive&lt;span class="w"&gt; &lt;/span&gt;documentation,&lt;span class="w"&gt; &lt;/span&gt;see
&lt;span class="w"&gt;    &lt;/span&gt;http://docs.mongodb.org/
Questions?&lt;span class="w"&gt; &lt;/span&gt;Try&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;support&lt;span class="w"&gt; &lt;/span&gt;group
&lt;span class="w"&gt;    &lt;/span&gt;http://groups.google.com/group/mongodb-user
Server&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;startup&lt;span class="w"&gt; &lt;/span&gt;warnings:
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:11.938+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;STORAGE&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:11.938+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;STORAGE&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;**&lt;span class="w"&gt; &lt;/span&gt;WARNING:&lt;span class="w"&gt; &lt;/span&gt;Using&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;XFS&lt;span class="w"&gt; &lt;/span&gt;filesystem&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;strongly&lt;span class="w"&gt; &lt;/span&gt;recommended&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;WiredTiger&lt;span class="w"&gt; &lt;/span&gt;storage&lt;span class="w"&gt; &lt;/span&gt;engine
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:11.938+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;STORAGE&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;**&lt;span class="w"&gt;          &lt;/span&gt;See&lt;span class="w"&gt; &lt;/span&gt;http://dochub.mongodb.org/core/prodnotes-filesystem
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:12.720+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;CONTROL&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:12.720+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;CONTROL&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;**&lt;span class="w"&gt; &lt;/span&gt;WARNING:&lt;span class="w"&gt; &lt;/span&gt;Access&lt;span class="w"&gt; &lt;/span&gt;control&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;enabled&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;database.
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:12.720+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;CONTROL&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;**&lt;span class="w"&gt;          &lt;/span&gt;Read&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;write&lt;span class="w"&gt; &lt;/span&gt;access&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;configuration&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;unrestricted.
&lt;span class="m"&gt;2020&lt;/span&gt;-05-11T10:36:12.720+0200&lt;span class="w"&gt; &lt;/span&gt;I&lt;span class="w"&gt; &lt;/span&gt;CONTROL&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;db.help&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;db&lt;span class="w"&gt; &lt;/span&gt;methods
&lt;span class="w"&gt;    &lt;/span&gt;db.mycoll.help&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;collection&lt;span class="w"&gt; &lt;/span&gt;methods
&lt;span class="w"&gt;    &lt;/span&gt;sh.help&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;sharding&lt;span class="w"&gt; &lt;/span&gt;helpers
&lt;span class="w"&gt;    &lt;/span&gt;rs.help&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;replica&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;helpers
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;admin&lt;span class="w"&gt;                   &lt;/span&gt;administrative&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;connect&lt;span class="w"&gt;                 &lt;/span&gt;connecting&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;db&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;keys&lt;span class="w"&gt;                    &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;shortcuts
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;misc&lt;span class="w"&gt;                    &lt;/span&gt;misc&lt;span class="w"&gt; &lt;/span&gt;things&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;know
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mr&lt;span class="w"&gt;                      &lt;/span&gt;mapreduce

&lt;span class="w"&gt;    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;dbs&lt;span class="w"&gt;                     &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;names
&lt;span class="w"&gt;    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;collections&lt;span class="w"&gt;             &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;collections&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;current&lt;span class="w"&gt; &lt;/span&gt;database
&lt;span class="w"&gt;    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;users&lt;span class="w"&gt;                   &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;users&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;current&lt;span class="w"&gt; &lt;/span&gt;database
&lt;span class="w"&gt;    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;profile&lt;span class="w"&gt;                 &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;recent&lt;span class="w"&gt; &lt;/span&gt;system.profile&lt;span class="w"&gt; &lt;/span&gt;entries&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;1ms
&lt;span class="w"&gt;    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;logs&lt;span class="w"&gt;                    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;accessible&lt;span class="w"&gt; &lt;/span&gt;logger&lt;span class="w"&gt; &lt;/span&gt;names
&lt;span class="w"&gt;    &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;prints&lt;span class="w"&gt; &lt;/span&gt;out&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="w"&gt; &lt;/span&gt;segment&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;memory,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'global'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;default
&lt;span class="w"&gt;    &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;db_name&amp;gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;current&lt;span class="w"&gt; &lt;/span&gt;database
&lt;span class="w"&gt;    &lt;/span&gt;db.foo.find&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;objects&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;collection&lt;span class="w"&gt; &lt;/span&gt;foo
&lt;span class="w"&gt;    &lt;/span&gt;db.foo.find&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;objects&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;foo&lt;span class="w"&gt; &lt;/span&gt;where&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;it&lt;span class="w"&gt;                           &lt;/span&gt;result&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;evaluated&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;further&lt;span class="w"&gt; &lt;/span&gt;iterate
&lt;span class="w"&gt;    &lt;/span&gt;DBQuery.shellBatchSize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;x&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;items&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;display&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;quit&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;mongo&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;List all databases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;dbs
admin&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.000GB
&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.000GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use a db:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;admin
switched&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;db&lt;span class="w"&gt; &lt;/span&gt;admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.createCollection&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"examplecollection"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ok"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show collections:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;collections
examplecollection
system.version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Insert document into a collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.examplecollection.insertOne&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'moose'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="o"&gt;]})&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"acknowledged"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"insertedId"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5eb9146abea1517a1e9e8245"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.examplecollection.insertOne&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"acknowledged"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"insertedId"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5eb914a6bea1517a1e9e8246"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show existing documents of a collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.examplecollection.find&lt;span class="o"&gt;({})&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"_id"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5eb9146abea1517a1e9e8245"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"moose"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"status"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"_id"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5eb914a6bea1517a1e9e8246"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"status"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Find document with exact matches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.examplecollection.find&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'moose'&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"_id"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5eb9146abea1517a1e9e8245"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"moose"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"status"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fuzzy regex search:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.examplecollection.find&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;/oose$/&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"_id"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5eb9146abea1517a1e9e8245"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"moose"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"status"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we continue, we need to create a user&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;db.createUser&lt;span class="o"&gt;({&lt;/span&gt;user:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"testuser"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;pwd:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"abc123"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;roles:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;role:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"userAdminAnyDatabase"&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;db:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="o"&gt;}]})&lt;/span&gt;
Successfully&lt;span class="w"&gt; &lt;/span&gt;added&lt;span class="w"&gt; &lt;/span&gt;user:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"testuser"&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"roles"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;"role"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"userAdminAnyDatabase"&lt;/span&gt;,
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;"db"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Install the database driver &lt;a href="https://pypi.org/project/pymongo/"&gt;&lt;code&gt;pymongo&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pymongo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://localhost:27017/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;

    &lt;span class="c1"&gt;# Get all&lt;/span&gt;
    &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;examplecollection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;documents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Delete the test user&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;examplecollection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_many&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is of course a lot more to write about MongoDB, but those are the very basics.&lt;/p&gt;
&lt;h2 id="professional-setup"&gt;Professional Setup&lt;/h2&gt;
&lt;p&gt;You might want to run MongoDB at a trusted provider like &lt;a href="https://aws.amazon.com/de/quickstart/architecture/mongodb/"&gt;AWS&lt;/a&gt;,
&lt;a href="https://cloud.google.com/mongodb"&gt;Google Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The key things to think about are &lt;a href="https://en.wikipedia.org/wiki/Replication_(computing)#Database_replication"&gt;database replications&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)"&gt;sharding&lt;/a&gt;. Those topics are essentially about
speed, load balancing, scalability, data loss / inconsistencies.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/"&gt;Official Website&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/manual/"&gt;Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stack Exchange:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/mongodb"&gt;Stackoverflow Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/tagged/mongodb"&gt;Serverfault Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.stackexchange.com/questions/tagged/mongodb"&gt;Security Tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;MongoDB Glossary: &lt;a href="https://docs.mongodb.com/manual/reference/glossary/#term-document"&gt;document&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;MongoDB Glossary: &lt;a href="https://docs.mongodb.com/manual/reference/glossary/#term-collection"&gt;collection&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;MongoDB Glossary: &lt;a href="https://docs.mongodb.com/manual/reference/glossary/#term-database"&gt;database&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Database"></category><category term="Python"></category><category term="CRUD"></category></entry><entry><title>File Encryption</title><link href="https://martin-thoma.com/file-encryption/" rel="alternate"></link><published>2020-05-10T20:00:00+02:00</published><updated>2020-05-10T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-10:/file-encryption/</id><summary type="html">&lt;p&gt;I recently wondered how difficult it is to encrypt a file. In this article I
will show you two ways to do it. I use a text file &lt;code&gt;content.txt&lt;/code&gt; with the
content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;This is a top secret message!
Don't show it to others!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard"&gt;GNU Privacy Guard&lt;/a&gt; (GnuPG
or …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I recently wondered how difficult it is to encrypt a file. In this article I
will show you two ways to do it. I use a text file &lt;code&gt;content.txt&lt;/code&gt; with the
content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;This is a top secret message!
Don't show it to others!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard"&gt;GNU Privacy Guard&lt;/a&gt; (GnuPG
or GPG) is a free-software replacement for Symantec's PGP cryptographic
software suite, and is compliant with RFC 4880, the IETF standards-track
specification of OpenPGP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check with &lt;code&gt;gpg --list-secret-keys&lt;/code&gt; if you already have keys. If not, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;&amp;ndash;-gen-key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Encrypt file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;info@martin-thoma.de&lt;span class="w"&gt; &lt;/span&gt;content.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decrypt file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;out.decrypted.txt&lt;span class="w"&gt; &lt;/span&gt;content.txt.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;In order to generate an encrypted file with Python, I use the &lt;a href="https://cryptography.io/en/latest/fernet/"&gt;fernet&lt;/a&gt; module of &lt;a href="https://pypi.org/project/cryptography/"&gt;cryptography&lt;/a&gt;.
It's not part of the standard library (&lt;a href="https://docs.python.org/3/library/crypto.html"&gt;source&lt;/a&gt;), but
it is super wide spread.&lt;/p&gt;
&lt;p&gt;It uses AES in CBC mode with a 128-bit key for encryption; using PKCS7 padding. Initialization vectors are generated using os.urandom().&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;cryptography.fernet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Fernet&lt;/span&gt;

&lt;span class="c1"&gt;# Generate a key&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fernet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"keyfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Get bytes to encrypt&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"This is secret!"&lt;/span&gt;
&lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Encrypt the bytes&lt;/span&gt;
&lt;span class="n"&gt;fernet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fernet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;encrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fernet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Write encrypted file&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"encrypted-file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Decrypt the bytes&lt;/span&gt;
&lt;span class="n"&gt;fernet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fernet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;decrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fernet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decrypted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also generate the key from a password like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;cryptography.hazmat.backends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;default_backend&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;cryptography.hazmat.primitives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hashes&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;cryptography.hazmat.primitives.kdf.pbkdf2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PBKDF2HMAC&lt;/span&gt;

&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"something I can remember"&lt;/span&gt;

&lt;span class="c1"&gt;# Set this in the application as a constant&lt;/span&gt;
&lt;span class="c1"&gt;# Generate one for yourself with&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; import os; os.urandom(16)&lt;/span&gt;
&lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\xd8\x85\xd3&lt;/span&gt;&lt;span class="s2"&gt;`|&lt;/span&gt;&lt;span class="se"&gt;\xa2\x82&lt;/span&gt;&lt;span class="s2"&gt;w&lt;/span&gt;&lt;span class="se"&gt;\x11&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="se"&gt;\xcc\x8d\xa4\x8a&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\xb4&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="n"&gt;kdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PBKDF2HMAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100_000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default_backend&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;derive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="attack-scenarios"&gt;Attack Scenarios&lt;/h2&gt;
&lt;p&gt;For many attack scenarios there are better solutions than file encryption. But
file encryption might provide additional security in case there is a breach
elsewhere.&lt;/p&gt;
&lt;h3 id="lost-device"&gt;Lost Device&lt;/h3&gt;
&lt;p&gt;Alice was sitting in a taxi, using her laptop and her phone at the same time.
She just quickly put her laptop next to her and had a look at her phone.
Thinking about the flight she needed to catch, she forgot the laptop. The
taxidriver sold the laptop on ebay and Bob bought it. He wants to see if there
is valuable information on it and tries to get access.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assessment&lt;/strong&gt;: To protect agains this, Alice should use full disk encryption
(FDE). If Alice doesn't have FDE, encrypting a single file might help for that
single file. But as it only protects one file, it's certainly worse than FDE.&lt;/p&gt;
&lt;h3 id="root-access"&gt;Root Access&lt;/h3&gt;
&lt;p&gt;Alice catched a virus! No, not COVID-19, but one on her computer. Bob now has
remote access to her machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assessment&lt;/strong&gt;: In this case, I would say all hope is lost. The attacker can
install a keylogger and will get the result he wants. Or a crypto trojan which
prevents Alice from using her computer. Encrypting a single file might help if
Alice doesn't access that file while the attacker has control. FDE would not
help here at all.&lt;/p&gt;
&lt;h3 id="user-access"&gt;User Access&lt;/h3&gt;
&lt;p&gt;Bob has access to the computer of Alice, but just normal user permissions. He
cannot install new software. He can just run installed software under the
account of Alice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assessment&lt;/strong&gt;: Encrypting a single file helps as long as Alice doesn't access
the file.&lt;/p&gt;
&lt;h3 id="man-in-the-middle-e-mail"&gt;Man in the Middle: E-Mail&lt;/h3&gt;
&lt;p&gt;Alice sends data to Charlie via e-mail. Bob catches the message while it's
transmitted.&lt;/p&gt;
&lt;p&gt;Bob is here the &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;Man in the Middle&lt;/a&gt;
and makes a Man in the Middle (MitM) attack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assessment&lt;/strong&gt;: The encryption of the e-mail would have helped. Using TLS would
be preferable, though.&lt;/p&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyTutorials: &lt;a href="https://www.youtube.com/watch?v=H8t4DJ3Tdrg"&gt;How to Encrypt Strings and Files in Python&lt;/a&gt;, 2018.&lt;/li&gt;
&lt;li&gt;Isuru Perera: &lt;a href="https://medium.com/@chrishantha/encrypting-disks-on-ubuntu-19-04-b50bfc65182a"&gt;Encrypting disks on Ubuntu 19.04&lt;/a&gt; on Medium, 2019.&lt;/li&gt;
&lt;li&gt;Wikipedia:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_cryptographic_file_systems"&gt;List of cryptographic file systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StackExchange:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://security.stackexchange.com/q/44268/3286"&gt;Defence Against Keyboard Keylogger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.stackexchange.com/q/197131/3286"&gt;Full disk encryption vs targetted partition encryption for security experts?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.stackexchange.com/q/231408/3286"&gt;What is the attack scenario against which encrypted files provide protection?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Security"></category><category term="file-encryption"></category></entry><entry><title>asyncio</title><link href="https://martin-thoma.com/asyncio/" rel="alternate"></link><published>2020-05-04T20:00:00+02:00</published><updated>2020-05-04T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-04:/asyncio/</id><summary type="html">&lt;p&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt; is a
library to write concurrent code using the async/await syntax.&lt;/p&gt;
&lt;h2 id="concurrency-basics"&gt;Concurrency Basics&lt;/h2&gt;
&lt;h3 id="parallel-vs-interleaved"&gt;Parallel vs Interleaved&lt;/h3&gt;
&lt;p&gt;Running things concurrently means to run them at the same time. There are two
ways to run stuff concurrently: In parallel or interleaved.&lt;/p&gt;
&lt;p&gt;The following images show the difference for compute-bound two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html#module-asyncio"&gt;asyncio&lt;/a&gt; is a
library to write concurrent code using the async/await syntax.&lt;/p&gt;
&lt;h2 id="concurrency-basics"&gt;Concurrency Basics&lt;/h2&gt;
&lt;h3 id="parallel-vs-interleaved"&gt;Parallel vs Interleaved&lt;/h3&gt;
&lt;p&gt;Running things concurrently means to run them at the same time. There are two
ways to run stuff concurrently: In parallel or interleaved.&lt;/p&gt;
&lt;p&gt;The following images show the difference for compute-bound two tasks:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/05/parallel-execution.svg"&gt;&lt;img alt="Parallel Execution" src="../images/2020/05/parallel-execution.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Parallel Execution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/05/interleaved-execution.svg"&gt;&lt;img alt="Interleaved Execution" src="../images/2020/05/interleaved-execution.svg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Interleaved Execution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now you might wonder why on hell would you ever run things interleaved as it
takes more time in total, right?&lt;/p&gt;
&lt;h3 id="cpu-bound-vs-io-bound"&gt;CPU-bound vs I/O-bound&lt;/h3&gt;
&lt;p&gt;Where does your program spend most of its time? In some cases, it's just
computationally heavy. For example, when you train a neural network you spend a
lot of time doing matrix multiplications. In other applications, you spend a
lot of time waiting for I/O: Downloading data from the internet, waiting for a
database to return the selected rows. Or simply reading files from disk.&lt;/p&gt;
&lt;p&gt;Let's take a file explorer application as an example. You open a folder and you
want to see thumbnails of the images. They might be high-resolution images.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/05/file-explorer.png"&gt;&lt;img alt="A file explorer" src="../images/2020/05/file-explorer.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A file explorer&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Printing the names of the files and the file size is fast. But computing the
thumbnail takes a lot of time. So you can do the thumbnail-calculation in
parallel. My laptop has 4 CPUs and hence my laptop can calculate the thumbnails
of 4 images in parallel. The next bottleneck is reading the full-size images
for the thumbnail-calculation into memory. More time than calculating the
thumbnails. Hence the execution time is no longer bound by the speed of the
CPU, but by the speed of reading from disk. Here interleaved execution helps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start reading a file into memory&lt;/li&gt;
&lt;li&gt;While the disk is spinning to the right point, continue computing a thumbnail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means if interleaved tasks speed up the total running time of the
application, they have to compute stuff while I/O is running.&lt;/p&gt;
&lt;h3 id="comparison"&gt;Comparison&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Processes&lt;/th&gt;
&lt;th&gt;Threads&lt;/th&gt;
&lt;th&gt;Coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Speed-up IO-bound tasks&lt;/td&gt;
&lt;td style="color: green;"&gt;✔&lt;/td&gt;
&lt;td style="color: green;"&gt;✔&lt;/td&gt;
&lt;td style="color: green;"&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speed-up CPU-bound tasks&lt;/td&gt;
&lt;td style="color: green;"&gt;✔&lt;/td&gt;
&lt;td style="color: red;"&gt;&amp;cross;&lt;/td&gt;
&lt;td style="color: red;"&gt;&amp;cross;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use multiple CPU cores&lt;/td&gt;
&lt;td style="color: green;"&gt;✔&lt;/td&gt;
&lt;td style="color: red;"&gt;&amp;cross;&lt;/td&gt;
&lt;td style="color: red;"&gt;&amp;cross;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scheduling&lt;/td&gt;
&lt;td&gt;preemptive&lt;/td&gt;
&lt;td&gt;cooperative&lt;/td&gt;
&lt;td&gt;cooperative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scalability&lt;/td&gt;
&lt;td&gt;~number of CPU cores&lt;/td&gt;
&lt;td&gt;~number of CPU cores x number of threads per core&lt;/td&gt;
&lt;td&gt;thousands&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="concurrency-in-python_1"&gt;Concurrency in Python&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Processes&lt;/th&gt;
&lt;th&gt;Threads&lt;/th&gt;
&lt;th&gt;Coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Packages&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.python.org/3/library/multiprocessing.html"&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://joblib.readthedocs.io/en/latest/parallel.html"&gt;&lt;code&gt;joblib&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.python.org/3/library/threading.html"&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://greenlet.readthedocs.io/en/latest/"&gt;&lt;code&gt;greenlet&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There is also the &lt;a href="https://docs.python.org/3.8/library/concurrent.futures.html#module-concurrent.futures"&gt;&lt;code&gt;concurrent.futures&lt;/code&gt;&lt;/a&gt;
package.&lt;/p&gt;
&lt;h3 id="multiprocessing-example"&gt;Multiprocessing Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""'Hello Word' example for multiprocessing in Python."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;dispatch_jobs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nb_jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Chunk the data&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chunk_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;nb_jobs&lt;/span&gt;
    &lt;span class="n"&gt;chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the jobs&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Created &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; jobs."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Start execution&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;split_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_slice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_slice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"job &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_jobs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A more exciting example would be matrix multiplication.&lt;/p&gt;
&lt;h3 id="threading-example"&gt;Threading Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""'Hello Word' example for multithreading in Python."""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;dispatch_jobs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nb_jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Chunk the data&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chunk_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;nb_jobs&lt;/span&gt;
    &lt;span class="n"&gt;chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the jobs&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Created &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; jobs."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Start execution&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;split_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_slice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_slice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"job &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_jobs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A more exiting example would be downloading of many files (e.g. imagenet)
or a link-checker.&lt;/p&gt;
&lt;h3 id="asyncio-coroutines"&gt;Asyncio Coroutines&lt;/h3&gt;
&lt;p&gt;One style of coroutines in Python makes use of &lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt;.
You need an event loop which executes the functions. The &lt;a href="https://www.python.org/dev/peps/pep-0492/#await-expression"&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt;
statement the execution until the expression after the keyword returns. This
enables other coroutines to execute in between.&lt;/p&gt;
&lt;p&gt;The async/await syntax was introduced in Python 3.5 with &lt;a href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP 492&lt;/a&gt;
and looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"... World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Python 3.7+&lt;/span&gt;
&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that with &lt;code&gt;await asyncio.sleep(0)&lt;/code&gt; you can let other coroutines run.
This might make sense if you have a compute-heavy coroutine.&lt;/p&gt;
&lt;p&gt;A more exiting example would be downloading of many files (e.g. imagenet)
or a link-checker.&lt;/p&gt;
&lt;h3 id="greenlet-coroutines"&gt;Greenlet Coroutines&lt;/h3&gt;
&lt;p&gt;Greenlet provides another style of coroutines. In contrast to asyncio, where
you explicitly define functions as asynchronous and define when you want to
let others run with await, greenlets do it implicitly by monkey-patching
functions such as &lt;code&gt;sleep&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="web-frameworks_1"&gt;Web Frameworks&lt;/h2&gt;
&lt;p&gt;A lot of times (&lt;a href="https://medium.com/@mihaigeorge.c/web-rest-api-benchmark-on-a-real-life-application-ebb743a5d7a3"&gt;1&lt;/a&gt;, &lt;a href="https://www.freecodecamp.org/news/million-requests-per-second-with-python-95c137af319/"&gt;2&lt;/a&gt;, &lt;a href="https://www.techempower.com/benchmarks/#section=data-r18&amp;amp;hw=ph&amp;amp;test=query&amp;amp;b=4&amp;amp;l=yyg41p-6&amp;amp;w=zii097-z2bon3-6&amp;amp;d=8&amp;amp;o=8"&gt;3&lt;/a&gt;) you might see benchmarks which show the number of requests per
second you can do with Flask / Django and the way higher number of requests/second you
can do with Node/Express.js or another web application framework.
I sometimes see mistakes like using the development server of Flask which is
not intended for production for those benchmarks (I think &lt;a href="https://medium.com/@BijanRahnema/express-vs-flask-vs-go-acc0879c2122#d993"&gt;here&lt;/a&gt;). Instead, gunicorn should be used.&lt;/p&gt;
&lt;p&gt;Anyway, those miss an important point: The web application framework is likely
not the bottleneck. The application logic itself, SSL, the database queries.
They likely dominate the execution time. I don't have those numbers at hand, but
&lt;a href="https://www.youtube.com/watch?v=gJ7CnUX_7YQ"&gt;Miguel Grinberg&lt;/a&gt; makes this
point as well. You might get a feeling for it by looking at my &lt;a href="https://martin-thoma.com/simple-operations/#latency"&gt;article about basic operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instead of this sole focus on efficiency, other factors need to be considered:
The stability of the framework. The size of the community. The number of
developers you can find to work on your application.&lt;/p&gt;
&lt;h3 id="flask"&gt;Flask&lt;/h3&gt;
&lt;p&gt;Gunicorn has multiple &lt;a href="https://docs.gunicorn.org/en/stable/design.html#async-workers"&gt;async workers&lt;/a&gt;.
gevent and eventlet both use Greenlets. This way, you make a Flask app use
Greenlets by letting gevent / eventlet monkey-patch.&lt;/p&gt;
&lt;p&gt;As Flask is based on WSGI, it cannot use asyncio. See &lt;a href="https://github.com/pallets/flask/issues/3339"&gt;issue #3339&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="quart"&gt;Quart&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pgjones.gitlab.io/quart/"&gt;Quart&lt;/a&gt; is similar to Flask, but uses the
async/await syntax (see &lt;a href="https://pgjones.gitlab.io/quart/how_to_guides/flask_migration.html"&gt;migration guide&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Recommended by Miguel Grinberg as an alternative to Flask.&lt;/p&gt;
&lt;h3 id="sanic"&gt;Sanic&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sanic.readthedocs.io/en/latest/"&gt;Sanic&lt;/a&gt; is a Python 3.6+ web server
and web framework which allows the usage of the async/await.&lt;/p&gt;
&lt;p&gt;Recommended by Miguel Grinberg as an alternative to Flask.&lt;/p&gt;
&lt;h3 id="starlette"&gt;Starlette&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.starlette.io/"&gt;Starlette&lt;/a&gt; is an &lt;a href="https://asgi.readthedocs.io/en/latest/"&gt;ASGI&lt;/a&gt; framework, for building asyncio services.&lt;/p&gt;
&lt;p&gt;It should be used with an ASGI server, such as &lt;a href="http://www.uvicorn.org/"&gt;uvicorn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;p&gt;There is also &lt;a href="https://docs.aiohttp.org/en/stable/"&gt;aiohttp&lt;/a&gt; and &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;.
I haven't used either of them and I don't know of any big player using them.
FastAPI has a couple of nice features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentation looks good&lt;/li&gt;
&lt;li&gt;Generates Swagger&lt;/li&gt;
&lt;li&gt;Uses pydantic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Negative about FastAPI is the fact that it is only driven by Sebasti&amp;aacute;n Ram&amp;iacute;rez.
The repository is in his private account and I don't see a project governance
document like e.g. &lt;a href="https://docs.scipy.org/doc/scipy/reference/dev/governance/governance.html"&gt;SciPy has&lt;/a&gt;.
&lt;a href="https://palletsprojects.com/governance/"&gt;Flasks Governance document&lt;/a&gt; misses
some crucial parts, e.g. who is currently in charge and which organizations
decide that.&lt;/p&gt;
&lt;p&gt;Being a one-person project means if that person gets hit by a bus, maintenance
might suddenly stop. If I use this for my web services, I have to start
maintaining this framework.&lt;/p&gt;
&lt;p&gt;There is also &lt;a href="https://en.wikipedia.org/wiki/Twisted_(software)"&gt;Twisted&lt;/a&gt; since 2002. I haven't used it,
I don't know anybody who used it and I don't know what it is doing.&lt;/p&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-concurrency/#how-to-speed-up-an-io-bound-program"&gt;Speed Up Your Python Program With Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackExchange:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/4828296/562769"&gt;How many threads can I run concurrently?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/q/668538/10425"&gt;Cores vs Threads: How many threads should I run on this machine?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/13606867/562769"&gt;What is the difference between multiprocessing and subprocess?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/46363945/562769"&gt;What does async/await do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/29902908/562769"&gt;What is the difference between concurrent.futures and asyncio.futures?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/20776189/562769"&gt;Concurrent.futures vs Multiprocessing in Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miguel Grinberg: &lt;a href="https://www.youtube.com/watch?v=gJ7CnUX_7YQ"&gt;Asynchronous Web Development with Flask&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;li&gt;Miguel Grinberg: &lt;a href="https://www.youtube.com/watch?v=iG6fr81xHKA"&gt;Asynchronous Python for the Complete Beginner&lt;/a&gt; in PyCon 2017&lt;/li&gt;
&lt;li&gt;Timo Furrer: &lt;a href="https://github.com/timofurrer/awesome-asyncio"&gt;Awesome asyncio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FastAPI:&lt;ul&gt;
&lt;li&gt;Tivadar Danka: &lt;a href="https://towardsdatascience.com/you-should-start-using-fastapi-now-7efb280fec02"&gt;You Should Start Using FastAPI Now&lt;/a&gt;, 2020-05-30.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Futures_and_promises"&gt;Futures and promises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="multithreading"></category><category term="multiprocessing"></category><category term="async"></category></entry><entry><title>Maximum Contiguous Subarray Sum</title><link href="https://martin-thoma.com/maximum-subarray-sum/" rel="alternate"></link><published>2020-05-03T20:00:00+02:00</published><updated>2020-05-03T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-05-03:/maximum-subarray-sum/</id><summary type="html">&lt;p&gt;The maximum contiguous subarray sum problem is one of the classics. Given an
1D array of numbers $a_1, \dots, a_n$ with $a_i \in \mathbb{R}$, find $s$ such that:&lt;/p&gt;
&lt;p&gt;$$\exists l, r \in [1, \dots, n]: \forall p, q \in [1, \dots, n]: \sum_{i=p}^q \leq \sum_{i …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The maximum contiguous subarray sum problem is one of the classics. Given an
1D array of numbers $a_1, \dots, a_n$ with $a_i \in \mathbb{R}$, find $s$ such that:&lt;/p&gt;
&lt;p&gt;$$\exists l, r \in [1, \dots, n]: \forall p, q \in [1, \dots, n]: \sum_{i=p}^q \leq \sum_{i=l}^r a_i = s$$&lt;/p&gt;
&lt;p&gt;In other words: Find the sum of the biggest continguous subarray.&lt;/p&gt;
&lt;h2 id="edge-cases"&gt;Edge Cases&lt;/h2&gt;
&lt;p&gt;To make the rest a bit simpler, I will only use integers. It is also guaranteed
that there is at least one element in the list.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;For any array without negative numbers, the sum of the whole array would be the
solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; max_contiguous_subarray_sum([11, -5, -5, -2, 1, 2, 3, 4, 5, 0, 1])
15

&amp;gt;&amp;gt;&amp;gt; max_contiguous_subarray_sum([9, -5, -5, -2, 1, 2, -1, 4, 5, 0, 1])
11

&amp;gt;&amp;gt;&amp;gt; max_contiguous_subarray_sum([-1, -2, -3, -4, -5])
-1

&amp;gt;&amp;gt;&amp;gt; max_contiguous_subarray_sum([-2])
-2

&amp;gt;&amp;gt;&amp;gt; max_contiguous_subarray_sum([3])
3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="brute-force"&gt;Brute-Force&lt;/h2&gt;
&lt;p&gt;I like simple brute force solutions to make sure that more complex solutions
are correct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;accumulate&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_contiguous_subarray_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;max_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;sum_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;max_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Complexity analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Complexity: $\mathcal{O}(n^3)$&lt;/li&gt;
&lt;li&gt;Space Complexity: $\mathcal{O}(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might wonder why this has a time complexity of $\mathcal{O}(n^3)$, although
there are only two loops. The answer is simply the &lt;code&gt;sum&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;You might also wonder if the fact that the inner loop does not do $n$
operations but only $\text{right}$ operations makes any difference. In this
case let's calculate the exact number of tumes we calculate &lt;code&gt;sum_&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;right=0: 0x sum_ calculations&lt;/li&gt;
&lt;li&gt;right=1: 1x sum_ calculations&lt;/li&gt;
&lt;li&gt;right=2: 2x sum_ calculations&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;right=n-1: (n-1)x sum_ calculations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence we calculate &lt;code&gt;sum_&lt;/code&gt; exactly
$$\sum_{1}^{n-1} = \frac{(n-1)^2 + (n-1)}{2} = \frac{n^2 - n}{2}$$
times.&lt;/p&gt;
&lt;p&gt;The amount of elements should also be considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;right=0: 0x sum_ calculations, sum-elements: up to 0&lt;/li&gt;
&lt;li&gt;right=1: 1x sum_ calculations, sum-elements: up to 1&lt;/li&gt;
&lt;li&gt;right=2: 2x sum_ calculations, sum-elements: up to 2&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;right=n-1: (n-1)x sum_ calculations, sum-elements: up to (n-1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence the &lt;code&gt;sum()&lt;/code&gt; function needs to do&lt;/p&gt;
&lt;p&gt;\begin{align}
\sum_{i=1}^n (\sum_{j=1}^i j) &amp;amp;= \sum_{i=1}^n \frac{i^2 + i}{2}\
&amp;amp;= \frac{1}{2} \cdot \sum_{i=1}^n (i^2 + i) \
&amp;amp;= \frac{1}{2} \cdot (\sum_{i=1}^n i + \sum_{i=1}^n i^2)) \
&amp;amp;= \frac{1}{2} \frac{n^2 + n}{2} + \frac{1}{2} \cdot \frac{n \cdot (n + 1) \cdot (2n + 1)}{6}\
\end{align}&lt;/p&gt;
&lt;p&gt;Which means it's a time complexity of $\mathcal{O}(n^3)$.&lt;/p&gt;
&lt;h2 id="cummulative-sum-brute-force"&gt;Cummulative Sum Brute-Force&lt;/h2&gt;
&lt;p&gt;There is a pretty neat trick using the cummulative sum to prevent one of those
loops&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;accumulate&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_contiguous_subarray_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;max_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;cumsum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accumulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;sum_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;max_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Complexity analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Complexity: $\mathcal{O}(n^2)$&lt;/li&gt;
&lt;li&gt;Space Complexity: $\mathcal{O}(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kadanes-algorithm"&gt;Kadane's Algorithm&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_contiguous_subarray_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;max_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-inf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;current_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;max_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Complexity analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Complexity: $\mathcal{O}(n)$&lt;/li&gt;
&lt;li&gt;Space Complexity: $\mathcal{O}(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There cannot be any asymptotically better solution. For space complexity, it
is obvious. For time complexity one can see that one needs to look at least
at each element.&lt;/p&gt;
&lt;h2 id="things-to-learn"&gt;Things to Learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hsm.stackexchange.com/q/384"&gt;Gauss Summation formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Prefix_sum"&gt;Prefix-sum&lt;/a&gt; technique&lt;/li&gt;
&lt;li&gt;Sliding Window technique (&lt;a href="https://martin-thoma.com/dynamic-programming/"&gt;Dynamic Programming&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Maximum_subarray_problem"&gt;Maximum subarray problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geeks For Geeks: &lt;a href="https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/"&gt;Largest Sum Contiguous Subarray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/maximum-subarray/"&gt;Leetcode 53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Similar Problems:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/maximum-fixed-length-contiguous-subarray/"&gt;Maximum Fixed-Length Contiguous Subarray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Competitive Programming"></category><category term="Brute-Force"></category><category term="Dynamic Programming"></category></entry><entry><title>How to build reliable Software</title><link href="https://martin-thoma.com/reliable-software/" rel="alternate"></link><published>2020-04-30T20:00:00+02:00</published><updated>2020-04-30T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-04-30:/reliable-software/</id><summary type="html">&lt;p&gt;Reliability in software development is an ambiguous term. Without thinking much
about it, most people would call a system reliable if &lt;em&gt;it just works&lt;/em&gt;. When
reading specifications, you might read some of the following terms:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn&gt;Availability&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;For (web) services, availability is the probability that at a random
        time the service …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;Reliability in software development is an ambiguous term. Without thinking much
about it, most people would call a system reliable if &lt;em&gt;it just works&lt;/em&gt;. When
reading specifications, you might read some of the following terms:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;dfn&gt;Availability&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;For (web) services, availability is the probability that at a random
        time the service is working. It is usually calculated over a year as
        availability = uptime / (uptime + downtime). If a web service has an
        availability of 99.9% over a year, it means there were 57 minutes in
        total in which the service was not usable.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Robustness_(computer_science)"&gt;&lt;dfn&gt;Robustness&lt;/dfn&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;How much diversion from the specification can you take before things
        start to break? I connect this with validation of user input,
        used services not responding, parts of the hardware failing.&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;Stability&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;How long can you operate without failures? The connected measure is
        &lt;a href="https://en.wikipedia.org/wiki/Mean_time_between_failures"&gt;Mean Time Between Failures&lt;/a&gt;
        (&lt;abbr title="Mean Time Between Failures"&gt;MTBF&lt;/abbr&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;dfn&gt;Resilience&lt;/dfn&gt;&lt;/dt&gt;
&lt;dd&gt;How long does it take to recover? Resilience is the ability of software
        to handle unexpected situations without the user noticing or at least
        with graceful degradation. When working on it, the &lt;a href="https://en.wikipedia.org/wiki/Mean_time_to_recovery"&gt;Mean time to recovery&lt;/a&gt; (MTTR)
        is reduced.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;ANSI/IEEE 1991 defines reliability as "the probability of failure-free software
operation for a specified period of time in a specified environment". That sounds
pretty much like my definition of availability.&lt;/p&gt;
&lt;p&gt;There are also different words for bugs like failure, fault or error.
For this article, I don't distinguish them. I was curious if other people do
and got &lt;a href="https://twitter.com/themoosemind/status/1252992387338719239"&gt;mixed answers&lt;/a&gt;.
Definitions are given in &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In this article, I try to show some good practices which help to built software
people can rely on. I will not talk about anything security related. So
integrity agains an attacker and confidentiality will not be discussed.&lt;/p&gt;
&lt;h2 id="issue-types"&gt;Issue Types&lt;/h2&gt;
&lt;p&gt;Please note that reliability is not only about bugs. For example, think of the
e-commerce website Amazon. Even if it is bug-free, it could be that so many
people go on amazon.com on a black-friday sale that the servers (the hardware)
can't handle the load. Either all people get a super slow experience or some
just don't get an answer. This is not a bug, but it for sure is an issue.&lt;/p&gt;
&lt;p&gt;Having a clear understanding of what can go wrong helps to prevent the issue or
at least deal with it in a good way.&lt;/p&gt;
&lt;p&gt;Looking at the effect on the system, you can distinguish those:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Crash Failures&lt;/strong&gt;: The system is down&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ommision Failures&lt;/strong&gt;: (response, brittle)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timing Failures&lt;/strong&gt;: System responses, but too late&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response Failures&lt;/strong&gt;: System responses, but the response is wrong&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hardware-issues"&gt;Hardware Issues&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Disk failure&lt;/li&gt;
&lt;li&gt;Power outage&lt;/li&gt;
&lt;li&gt;Network&lt;ul&gt;
&lt;li&gt;Loss of network connection, e.g. cable was cut&lt;/li&gt;
&lt;li&gt;Package loss&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug within the Hardware, e.g. &lt;a href="https://en.wikipedia.org/wiki/Pentium_FDIV_bug"&gt;Pentium FDIV bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bugs"&gt;Bugs&lt;/h3&gt;
&lt;p&gt;A bug is a mistake made by the programmers. Besides some &lt;a href="https://en.wikipedia.org/wiki/List_of_software_bugs"&gt;well-documented single bugs&lt;/a&gt;
there are groups of issues which occur often. For some of them, it depends on
the programming language if they are possible at all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Typos&lt;/strong&gt;: Especially when entering strings, this can easily happen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Off-by-one_error"&gt;Off-by-one errors&lt;/a&gt;&lt;/strong&gt; (also: greater / smaller than, greater or greater-equal) are either just typos or a missunderstanding by the developers, because they didn't think thoroughly about it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partial Change&lt;/strong&gt;: You adjusted one part, but you needed to make the same change somewhere else. For example, this could happen when you define on which port your application should run. You change it in the application code, but not in the Dockerfile / docker-compose.yml&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicode&lt;/strong&gt;: &lt;a href="https://en.wikipedia.org/wiki/Bush_hid_the_facts"&gt;Bush hid the facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timezones&lt;/strong&gt;: Which timezone was used? What is the difference between a timezon and an offset? Can I use UTC everywere? Those questions are answered in &lt;a href="https://zenodo.org/record/1443533#.XqCJcvIzYdg"&gt;What every developer should know about time&lt;/a&gt;. As a very brief guideline: Usually it is fine to use UTC in ISO-8601 format for server-side events. For client-side events it is often desirable that you store the local time in ISO-8601 with the timezone as a string in two fields.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floating-point comparisons&lt;/strong&gt;: Don't use &lt;code&gt;if (a == b)&lt;/code&gt;, but &lt;code&gt;if (abs(a-b) &amp;lt; epsilon)&lt;/code&gt;. See &lt;a href="https://www.itu.dk/~sestoft/bachelor/IEEE754_article.pdf"&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type missmatches&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Null: You expect an object of class Foo, but got a NULL pointer.&lt;/li&gt;
&lt;li&gt;Sub-ranges: You expect a positive integer, but got zero.&lt;/li&gt;
&lt;li&gt;Stringly typed: You expected either the string "ADMIN" or "USER", but got "user". Use Enums.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Buffer Overflow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Inter-system communication and changing systems&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Resource_leak"&gt;&lt;strong&gt;Resource Leaks&lt;/strong&gt;&lt;/a&gt;: The program asks for a resource, but never gives it back.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Memory_leak"&gt;&lt;strong&gt;Memory Leak&lt;/strong&gt;&lt;/a&gt;: Memory which is no longer needed is never released.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Handle_leak"&gt;&lt;strong&gt;Handle Leak&lt;/strong&gt;&lt;/a&gt;: Files are opened, but never closed. This means even if they are marked for deletion, they are not deleted. &lt;a href="https://stackoverflow.com/questions/60852105/what-is-the-os-level-handle-of-tempfile-mkstemp-good-for"&gt;Happened to me&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Infinite_loop"&gt;Infinite Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Deadlock"&gt;Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dangling_pointer"&gt;Dangling pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Race_condition"&gt;Race condition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="scalability"&gt;Scalability&lt;/h3&gt;
&lt;p&gt;There is the famous &lt;a href="https://en.wikipedia.org/wiki/Slashdot_effect"&gt;hug of death&lt;/a&gt;,
when a famous website links to a small one. Or when a new service is mentioned
in big media. The issue is that humans don't have a feeling for big numbers.
A single request on a website is typically handled so fast that we tend to
think that we can handle arbitrary numbers of users. And for most websites
and most times this is practically true - there are simply not so many people
comming to the website. But once you get from a few dozend parallel users to
thousands or maybe even millions, things start to look different. You need to
think about the amount of resources you need.&lt;/p&gt;
&lt;p&gt;There are two aspects to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Big-O notation: How does the amount of resources grow with growing demand?
  In many cases, you want &lt;strong&gt;linear growth&lt;/strong&gt; or less.&lt;/li&gt;
&lt;li&gt;Infrastructure: Do you need bigger machines (vertical scaling) or can you
  just buy more machines (&lt;strong&gt;horizontal scaling&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You really want all things you do to be linear or sub-linear. This means in the
worst case when you have double as many users you just have double as much
needs for resources. And you really want horizontal scaling, because then
double as much resources just means double the price.&lt;/p&gt;
&lt;p&gt;As an example: Assume you have a DNA matching website. You tell your customers
that you will keep track of the latest research and tell them if that might
lead to new insights about you. Something like finding markers that indicate
risk for cancer. The resources you need are in $\mathcal{O}(n)$ where $n$ is
the number of users. Once you get new research, you need to check all $n$
users. If the users double, you need to do double the work. And you can do it
on different machines, hence you can scale horizontally.&lt;/p&gt;
&lt;p&gt;Now assume you would say that you apply the latest research for finding the
optimal partner. Once you get new insights in the DNA, you need to compare
every pair of DNA. This is in $\mathcal{O}(n^2)$, meaning if you double your
userbase you might have 4x the need of infrastrucutre!
Now assume you would do it all on the same machine and you had a fixed time
limit. Then you would need to buy faster machines. At some point, this is just
physically not possible anymore. Then you need to change the algorithm to
run on multiple machines. But with quadratic growth, you might hit limits there
as well.&lt;/p&gt;
&lt;h3 id="third-party-issues"&gt;Third-Party Issues&lt;/h3&gt;
&lt;p&gt;You might call another service to get parts you need. What could happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No answer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To slow answer&lt;/strong&gt;: Maybe the answer you got is not relevant anymore. Think
  of a portal where you can trade stocks. You want to know the current price.
  If the service needs 5 minutes to answer, the price will have changed. So
  even if you get the answer eventually, it is useless.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wrong parameters&lt;/strong&gt;: The function you called needs other parameters. Maybe it
  was a bug on your side, but maybe also the service just changed its behaviour.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wrong format&lt;/strong&gt;: You received an answer and it is correct, but the format of
  it is unexpected. For example, I once say floating points from a database
  having the German decimal separator (a comma instead of a point). And being
  stored as a string instead of a float / decimal is a story of its own.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wrong answer&lt;/strong&gt;: The data just being plain wrong. Again, using a database
  I've had a look at the birth dates and found somebody being born in the year
  zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="issue-prevention_1"&gt;Issue Prevention&lt;/h2&gt;
&lt;p&gt;It's nice if nothing goes wrong, right? So how can we avoid issues?&lt;/p&gt;
&lt;p&gt;There are so many things to write here, I guess I will move this to its own article.
Here are some points:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Issue&lt;/th&gt;
&lt;th&gt;Prevention / Mitigation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Type missmatches&lt;/td&gt;
&lt;td&gt;Use a typed language or type annotations and a type checker (mypy for Python, TypeScript for JavaScript)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Partial Change&lt;/td&gt;
&lt;td&gt;Use constants instead of &lt;a href="https://en.wikipedia.org/wiki/Magic_number_(programming)"&gt;magic values&lt;/a&gt; (typically numbers or strings)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Infinite Wait for Response&lt;/td&gt;
&lt;td&gt;Timeout: If a synchronous call does not get an answer, don't keep asking forever.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unnecessary repeats&lt;/td&gt;
&lt;td&gt;Circuit Breaker: Don't repeat stuff infinitely. [Hystrix](https://github.com/Netflix/Hystrix) would be a Java solution for that.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Infinite Loop&lt;/td&gt;
&lt;td&gt;Use foreach-loops over while / for loops&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Fault-prevention patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-reviews"&gt;Code reviews&lt;/h3&gt;
&lt;p&gt;Thorough code reviews can potentially prevent any bug. Of course, you
don't have any guaranteed. But two people might catch more than one
person.&lt;/p&gt;
&lt;h3 id="type-checking"&gt;Type Checking&lt;/h3&gt;
&lt;p&gt;Some languages require that you state the type for everything, for example Java.
Other languages, like Rust, support type inference (&lt;a href="https://doc.rust-lang.org/stable/rust-by-example/types/inference.html"&gt;example&lt;/a&gt;).
Then there are languages and language extensions like TypeScript and type annotations
for Python. There you don't need to annotate the types. If you do, you can
run a static type checker over your code. They support incremental changes,
meaning you can support some parts and the type checker tries to do its best.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type safe: Subtypes (integer sub-ranges, enums)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want compile-time type checking, you need to have a look at
&lt;a href="http://mypy-lang.org/"&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/a&gt;. mypy is a big project known by all relevant
members of Python. Less known is
&lt;a href="https://pydantic-docs.helpmanual.io/"&gt;&lt;code&gt;pydantic&lt;/code&gt;&lt;/a&gt;. pydantic can support with
run-time type checking. There are way more things to say about type checking
in Python. Maybe I'll do that in another article.&lt;/p&gt;
&lt;h3 id="input-checking"&gt;Input Checking&lt;/h3&gt;
&lt;p&gt;It sounds obvious, but check your input. Especially common are null values, e.g. when you
get data from a database. Files might not exist on all platforms or they can be corrupted.
APIs could change the format in which they return stuff.&lt;/p&gt;
&lt;p&gt;For APIs, schema validation is your friend. If that doesn't work, sanity checks and Regular Expressions (RegEx)
might get you close enough.&lt;/p&gt;
&lt;p&gt;However, most schema validations are not super rigid. One simple check I miss in most
cases is value ranges. For example, when I have a "day of birth" field for a current user, I can
easily say tht anything which is more than 150 years in the past is wrong. Also, days of birth
which are less than 12 years in the past might indicate an issue in most applications.&lt;/p&gt;
&lt;p&gt;Maybe I'll write an article about schema validation as well.&lt;/p&gt;
&lt;h3 id="finding-code-smells"&gt;Finding Code Smells&lt;/h3&gt;
&lt;p&gt;The more code you write, the more possibilities you have to make mistakes. The more complex the
code is, the more likely you mess something up.&lt;/p&gt;
&lt;p&gt;Just looking at the lines of code and the code complexity (e.g. cyclomatic complexity) might
point you to places where errors could be likely.&lt;/p&gt;
&lt;p&gt;Looking at line test coverage / branch test coverage are two ways to find places where you might
want to have a closer look.&lt;/p&gt;
&lt;p&gt;There are also linters like &lt;a href="https://pypi.org/project/pylint/"&gt;pylint&lt;/a&gt; and &lt;a href="https://pypi.org/project/flake8/"&gt;flake8&lt;/a&gt;.
They mostly capture minor stylistic things which can be automatically fixed by
code formatters like &lt;a href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;pylint, for example, can help you to detect duplicate code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pylint&lt;span class="w"&gt; &lt;/span&gt;--disable&lt;span class="o"&gt;=&lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;--enable&lt;span class="o"&gt;=&lt;/span&gt;duplicate-code,similarities
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;Dependencies can break in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Breaking changes in new versions&lt;/li&gt;
&lt;li&gt;Availability of Dependencies&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Version pinning solves the first issue, but not the second one. A notable case was &lt;a href="https://en.wikipedia.org/wiki/Npm_(software)#Notable_breakages"&gt;left-pad in npm&lt;/a&gt;. Removing a single dependency killed a lot of the ecosystem.&lt;/p&gt;
&lt;p&gt;You can avoid this by storing the depenencies, e.g. by having your own artifactory.&lt;/p&gt;
&lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
&lt;p&gt;There are lots of different things you can tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature Tests&lt;/li&gt;
&lt;li&gt;Load-Tests&lt;/li&gt;
&lt;li&gt;Regression Tests: check if things still work. TODO: difference to unit tests / feature or load tests?&lt;/li&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Integration Tests&lt;/li&gt;
&lt;li&gt;End-to-End Tests&lt;/li&gt;
&lt;li&gt;Acceptance tests: Preconditions, postconditions, and assertions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't get confused by that. Tools like &lt;code&gt;pytest&lt;/code&gt; can have exactly the same structure for an
unit test and an integration test.  They look the same. The difference is that an integration
tests doesn't only look at your code in isolation, but at the way your code works with an external
system.&lt;/p&gt;
&lt;p&gt;Testing is a huge topic. I covered a bit of it in &lt;a href="https://martin-thoma.com/testing-python-code/"&gt;Testing in Python&lt;/a&gt;,
but there is certainly way more to write.&lt;/p&gt;
&lt;h2 id="fault-tolerance_1"&gt;Fault Tolerance&lt;/h2&gt;
&lt;p&gt;There are some issues we cannot prevent, but we can design systems that can deal with them.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Fault&lt;/th&gt;
&lt;th&gt;Measure&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Harware outage&lt;/td&gt;
&lt;td&gt;Redundancy. In most cases, I would recommend to simply take a cloud provider so that you don't have to deal with those issues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disk Failure&lt;/td&gt;
&lt;td&gt;Replication (e.g. &lt;a href="https://en.wikipedia.org/wiki/RAID"&gt;RAID&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network Transmission Errors&lt;/td&gt;
&lt;td&gt;Error-correcting codes; checksums. Some protocols like &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;TCP&lt;/a&gt; do this automatically. Others, like &lt;a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol"&gt;UDP&lt;/a&gt;, don't do it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Too high usage&lt;/td&gt;
&lt;td&gt;Graceful Degradation: It might be that you get so many users, you have to shut things down. You might then, for example, just switch off the computationally expensive features. For example, if you have an interactive service you could instead serve a static version of it.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="fault-detection"&gt;Fault Detection&lt;/h2&gt;
&lt;p&gt;Some faults slip through your system and cause an issue which can be seen by the customer. You can't prevent or tolerate every fault.&lt;/p&gt;
&lt;p&gt;But at least you can make sure that you notice when things go wrong. You can add logging to your service / application.
When you use structured logging (JSON line log messages), you can easily create dashboards.&lt;/p&gt;
&lt;p&gt;Several services also make this visible to their customers in form of a status page (&lt;a href="https://status.azure.com/de-de/status"&gt;Azure&lt;/a&gt;, &lt;a href="https://status.aws.amazon.com/"&gt;AWS&lt;/a&gt;, &lt;a href="https://www.githubstatus.com/"&gt;GitHub&lt;/a&gt;, ...)&lt;/p&gt;
&lt;p&gt;For severe cases, you also want alerting: A slack notification, an e-mail or an SMS.&lt;/p&gt;
&lt;p&gt;By releasing the software first to a small group of beta-testers you can make sure that issues are less
severe. For web serivces, this is called a canary release / canary deployment.&lt;/p&gt;
&lt;h2 id="incidence-management"&gt;Incidence Management&lt;/h2&gt;
&lt;p&gt;Jeff Atwood has written &lt;a href="https://blog.codinghorror.com/not-all-bugs-are-worth-fixing/"&gt;Not All Bugs Are Worth
Fixing&lt;/a&gt; in which
he mentions the bug triage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eric lists four questions that need to be answered during triage to decide
whether a bug should be fixed or not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Severity&lt;/strong&gt;: When this bug happens, how bad is the impact?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: How often does this bug happen?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: How much effort would be required to fix this bug?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk&lt;/strong&gt;: What is the risk of fixing this bug?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;To estimate severity, risk and cost, you need to know something about the system.
For the severity, you have to be able to estimate the consequences.&lt;/p&gt;
&lt;p&gt;In order to estimate frequency, logs can help.&lt;/p&gt;
&lt;p&gt;Once you've answered those questions and decided that the incidence actually is
severe enough to take further action, you might want to escalate it. First, get
everybody who is important for that in your organization in one (chat) room to
discuss it. This might be developers of several teams, people from user support
who might get questions about that problem, maybe even external companies.&lt;/p&gt;
&lt;p&gt;Once the incident is resolved or at least all of the information is on the table,
you should write an &lt;a href="https://www.atlassian.com/incident-management/postmortem"&gt;incidence postmortem&lt;/a&gt;.
This is a document intendet to give transparency to everybody and to prevent
similar things from happening again. It is NOT about blaming people. You might
even want to publish them. Here are a couple of incident postmortems which
were made public:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft: &lt;a href="https://devblogs.microsoft.com/devopsservice/?p=16295"&gt;Performance Issues and failures in VSTS West Europe, 2018-02-07&lt;/a&gt; (&lt;a href="https://devblogs.microsoft.com/devopsservice/?cat=2"&gt;archive&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cloudflare: &lt;a href="https://blog.cloudflare.com/details-of-the-cloudflare-outage-on-july-2-2019/"&gt;Cloudflare outage, 2019-07-02&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://blog.thousandeyes.com/facebook-outage-deep-dive/"&gt;Configuration, 2015-01-29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google: &lt;a href="https://googleblog.blogspot.com/2014/01/todays-outage-for-several-google.html"&gt;Configuration, 2014-01-24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS: &lt;a href="https://aws.amazon.com/de/message/5467D2/"&gt;DynamoDB Service Disruption and Related Impacts the US-East&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danluu/post-mortems"&gt;many more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google: &lt;a href="https://landing.google.com/sre/sre-book/chapters/postmortem-culture/"&gt;Postmortem Culture: Learning from Failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Atlassian: &lt;a href="https://www.atlassian.com/incident-management/postmortem/templates"&gt;Incident Postmortem Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="maintenance"&gt;Maintenance&lt;/h2&gt;
&lt;p&gt;Every software system needs maintenance. For example, you might need
to update a timezone database. You might need to apply security patches of
third-party dependencies you use. Upgrading the dependencies regularly makes
it easier to upgrade. Look for deprecation warnings. Upgrading a single
dependency when you have a good test suite is no big deal. Upgrading
a lot of dependencies after years is not so fun.&lt;/p&gt;
&lt;p&gt;And you might have ticking bombs. This is part of the software that is expected
to fail. It's usually a decision which was made to simplify the work for the
moment, but is expected to be fixed in future. Many time-related things
like the &lt;a href="https://en.wikipedia.org/wiki/Year_2000_problem"&gt;Year 2000 problem&lt;/a&gt;
or the &lt;a href="https://en.wikipedia.org/wiki/Year_2038_problem"&gt;Year 2038 problem&lt;/a&gt;
are in this category.&lt;/p&gt;
&lt;h2 id="checklists"&gt;Checklists&lt;/h2&gt;
&lt;p&gt;Here are a few simple questions that might lead to more reliable software.&lt;/p&gt;
&lt;h3 id="software-development-process"&gt;Software Development Process&lt;/h3&gt;
&lt;p&gt;This checklist focuses on your software development process. It is pretty
general and is intendet to not depend on the specific software you're
developing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do you use Software Versioning (e.g git)?&lt;/li&gt;
&lt;li&gt;Do you have Pull Requests (Merge Requests) and Reviews?&lt;/li&gt;
&lt;li&gt;Testing&lt;ol&gt;
&lt;li&gt;Do you have (enough) unit tests? (Line coverage, branch coverage)&lt;/li&gt;
&lt;li&gt;Do you have (enough) integration tests?&lt;/li&gt;
&lt;li&gt;Did you run load tests?&lt;/li&gt;
&lt;li&gt;Did you let users run your software?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Do you have log messages so that you can figure out what happened in case of
   a failure?&lt;/li&gt;
&lt;li&gt;Do you have a blame-free incident management process with post-mortems for
   severe cases?&lt;/li&gt;
&lt;li&gt;Do you have a CI/CD system in place? (e.g. &lt;a href="https://docs.gitlab.com/ee/ci/pipelines/"&gt;Gitlab CI/CD&lt;/a&gt; and &lt;a href="https://github.com/marketplace/category/continuous-integration"&gt;many more&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="web-services"&gt;Web Services&lt;/h3&gt;
&lt;p&gt;A web service is anything that runs continuously in the web. It needs to be
available and deal with different changing load. It could be a website or
an API.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do you have a &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;stg&lt;/code&gt; and &lt;code&gt;prd&lt;/code&gt; environment?&lt;/li&gt;
&lt;li&gt;Do you specify your infrastructure as code? (see
   &lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code"&gt;IaC&lt;/a&gt;, e.g. &lt;a href="https://aws.amazon.com/de/cloudformation/"&gt;AWS
   CloudFormation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do you have a &lt;a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)"&gt;load balancer&lt;/a&gt;? (e.g.
   &lt;a href="https://en.wikipedia.org/wiki/Nginx"&gt;nginx&lt;/a&gt; or &lt;a href="https://aws.amazon.com/de/elasticloadbalancing/"&gt;AWS ELB&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Can you scale your infrastructure horizontally? (e.g. &lt;a href="https://aws.amazon.com/de/autoscaling/"&gt;AWS Auto Scaling&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do you have &lt;a href="https://en.wikipedia.org/wiki/Feature_toggle#Canary_release"&gt;canary releases&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Monitoring&lt;ol&gt;
&lt;li&gt;Do you have a health check in place which is independant of your current system?&lt;/li&gt;
&lt;li&gt;Do you show relevant system metrics (e.g. CPU and memory usage) in an easily accessible way (e.g. a Dashboard)?&lt;/li&gt;
&lt;li&gt;Do you show relevant business metrics (e.g. number of users) in an easily accessible way?&lt;/li&gt;
&lt;li&gt;Do you have a clear system who is on-call? Are those people able to fix issues? Did you train and try error cases?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Alerting: Do you have alerts for severe issues to trigger immediate attention?&lt;/li&gt;
&lt;li&gt;Backups:&lt;ol&gt;
&lt;li&gt;Do you create backups of critical data regularly?&lt;/li&gt;
&lt;li&gt;Do you always have at least two independent backups?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hardware:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do you have redundant network connections?&lt;/li&gt;
&lt;li&gt;Do you have redundant power supply?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If it is an API:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Did you add a specification? (e.g. &lt;a href="https://en.wikipedia.org/wiki/OpenAPI_Specification"&gt;OpenAPI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Did you version the API?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="applications"&gt;Applications&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Do you have an update mechanism in place?&lt;/li&gt;
&lt;li&gt;Did you run it on all platforms you want to support?&lt;/li&gt;
&lt;li&gt;Is it clear to the customer where and how they can get support / report issues?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sazzad Hissain Khan: &lt;a href="https://medium.com/@hissain.khan/distinguishing-system-robustness-resilience-stability-flexibility-and-performance-f509e87bcc49"&gt;Distinguishing System Robustness, Resilience, Stability, Flexibility and Performance&lt;/a&gt; on Medium, May 2019.&lt;/li&gt;
&lt;li&gt;Wikipedia:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Reliability,_availability_and_serviceability"&gt;Reliability, availability and serviceability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code"&gt;Infrastructure as code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fault_tolerance"&gt;Fault tolerance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stack Exchange:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/6323049/562769"&gt;Understanding what Fault, Error and Failure mean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algirdas Avizienis, Jean-Claude Laprie, Brian Randell, and Carl Landwehr: &lt;a href="https://www.nasa.gov/pdf/636745main_day_3-algirdas_avizienis.pdf"&gt;Basic Concepts and Taxonomy of Dependable and Secure Computing&lt;/a&gt; in IEEE Transactions on Dependable and Secure Computing, 2004.&lt;/li&gt;
&lt;li&gt;Igor Perikov: &lt;a href="https://itnext.io/5-patterns-to-make-your-microservice-fault-tolerant-f3a1c73547b3"&gt;5 patterns to make your microservice fault-tolerant&lt;/a&gt;, 2020-01-08.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Avizienis, Algirdas, Jean-Claude Laprie, and Brian Randell: &lt;a href="https://www.cs.rutgers.edu/~rmartin/teaching/spring03/cs553/readings/avizienis00.pdf"&gt;Fundamental Concepts of Dependability&lt;/a&gt;, 2001.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Software Engineering"></category></entry><entry><title>Solving Equations</title><link href="https://martin-thoma.com/solving-equations/" rel="alternate"></link><published>2020-04-21T20:00:00+02:00</published><updated>2020-04-21T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-04-21:/solving-equations/</id><summary type="html">&lt;p&gt;A friend recently asked me if I could help her to find the solution to a
system of non-linear equations. I remembered &lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;Sympy&lt;/a&gt;,
a Python library for symbolic computations.&lt;/p&gt;
&lt;p&gt;Installation is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;sympy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="solving-single-equation"&gt;Solving Single Equation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sympy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A friend recently asked me if I could help her to find the solution to a
system of non-linear equations. I remembered &lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;Sympy&lt;/a&gt;,
a Python library for symbolic computations.&lt;/p&gt;
&lt;p&gt;Installation is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;sympy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="solving-single-equation"&gt;Solving Single Equation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sympy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it returns &lt;code&gt;[-3, 3]&lt;/code&gt;! Awesome! So it found all solutions for that single,
simple equation!&lt;/p&gt;
&lt;h2 id="solving-system-of-equations"&gt;Solving System of Equations&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sympy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eq1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eq2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;eq1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eq2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This returns &lt;code&gt;[{x: 5, y: 7}, {x: 7, y: 5}]&lt;/code&gt; 🎉&lt;/p&gt;
&lt;h2 id="visualization"&gt;Visualization&lt;/h2&gt;
&lt;p&gt;Equations can get really complicated and typos happen easily. Rendering the
equations in a nice way helps a lot to find bugs. I do this by starting
a &lt;a href="https://jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;. Just install &lt;code&gt;jupyter&lt;/code&gt; and enter
&lt;code&gt;jupyter notebook&lt;/code&gt; in the console.&lt;/p&gt;
&lt;p&gt;Add this to a cell in the notebook and execute it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sympy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;init_printing&lt;/span&gt;

&lt;span class="n"&gt;init_printing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/04/jupyter-equation-solving.png"&gt;&lt;img alt="Sympy in Jupyter Notebook" src="../images/2020/04/jupyter-equation-solving.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Sympy in Jupyter Notebook&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="alternatives"&gt;Alternatives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Wolfram_Mathematica"&gt;Wolfram Mathematica&lt;/a&gt; (&lt;a href="https://github.com/sympy/sympy/wiki/SymPy-vs.-Mathematica"&gt;comparison&lt;/a&gt;): Pretty expensive, no Python binding&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Computer Algebra System"></category><category term="sympy"></category><category term="Python"></category></entry><entry><title>Dynamic Programming</title><link href="https://martin-thoma.com/dynamic-programming/" rel="alternate"></link><published>2020-03-31T20:00:00+02:00</published><updated>2020-03-31T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-03-31:/dynamic-programming/</id><summary type="html">&lt;p&gt;Dynamic Programming is a technique to find the solution to a problem by
computing the solution of one or more sub-problems. So the problem needs to
have &lt;a href="https://en.wikipedia.org/wiki/Optimal_substructure"&gt;optimal substructure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you compute the solution bottom-up, then it is Dynamic Programming. If you
compute it top-down, then you might use memoization …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dynamic Programming is a technique to find the solution to a problem by
computing the solution of one or more sub-problems. So the problem needs to
have &lt;a href="https://en.wikipedia.org/wiki/Optimal_substructure"&gt;optimal substructure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you compute the solution bottom-up, then it is Dynamic Programming. If you
compute it top-down, then you might use memoization.&lt;/p&gt;
&lt;h2 id="terminology"&gt;Terminology&lt;/h2&gt;
&lt;p&gt;I don't think the distinction here is important. It is important to understand
the concept: You can solve a big problem by solving smaller sub-problems and
combining the answers. This is not necessarily done by a recursive function
call, but could also happen by storing sub-problems in a dictionary and
iterating over a sequence of numbers.&lt;/p&gt;
&lt;h3 id="memoization"&gt;Memoization&lt;/h3&gt;
&lt;p&gt;It happens very often that you need to solve the same sub-problem multiple times.
Think of the Fibonacci sequence, where you might calculate&lt;/p&gt;
&lt;p&gt;\begin{align}
f(7) &amp;amp;= f(6) + f(5)\
&amp;amp;= f(5) + f(4) + f(5)\
&amp;amp;= f(4) + f(3) + f(4) + f(4) + f(3)\
&amp;amp;=\dots
\end{align}&lt;/p&gt;
&lt;p&gt;In order to prevent this, you can memoize it. That means you store the
parameters of a function call and its result. Once you see these parameters
again, you can directly return the result without recalculating the function.&lt;/p&gt;
&lt;p&gt;In Python, you can use the &lt;a href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;&lt;code&gt;functools.lru_cache&lt;/code&gt;&lt;/a&gt;
decorator for that. See the Fibonacci example below for a concrete example.&lt;/p&gt;
&lt;p&gt;TL;DR: Memoization is a technique to speed-up function calls by caching their
results.&lt;/p&gt;
&lt;h3 id="backtracking"&gt;Backtracking&lt;/h3&gt;
&lt;p&gt;Both, Backtracking and Dynamic Programming, are used to solve discrete
constraint problems. Dynamic Programming typically solves constraint
optimization problems (COPs) and backtracking constraint satisfaction problems
(CSPs).&lt;/p&gt;
&lt;p&gt;Usually &lt;em&gt;Dynamic Programming&lt;/em&gt; is bottom-up and &lt;em&gt;Backtracking&lt;/em&gt; uses top-down approaches.&lt;/p&gt;
&lt;h3 id="divide-and-conquer"&gt;Divide and Conquer&lt;/h3&gt;
&lt;p&gt;Divide and Conquer algorithms, such as &lt;a href="https://en.wikipedia.org/wiki/Merge_sort"&gt;merge sort&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Quicksort"&gt;quicksort&lt;/a&gt;,
Binary search,
and the &lt;a href="https://en.wikipedia.org/wiki/Euclidean_algorithm"&gt;Euclidean algorithm&lt;/a&gt;,
also divide the original problem into smaller sub-problems.&lt;/p&gt;
&lt;p&gt;The important point with divide and conquer is that the subproblems can be
solved independently.&lt;/p&gt;
&lt;p&gt;For Dynamic Programming, two subproblems A and B might share a sub-subproblem C.&lt;/p&gt;
&lt;h2 id="fibonacci-sequence_1"&gt;Fibonacci Sequence&lt;/h2&gt;
&lt;p&gt;The Fibonacci sequence is defined as:&lt;/p&gt;
&lt;p&gt;$$
f(n) := \begin{cases}
n               &amp;amp;\text{if } n \leq 1\
f(n-1) + f(n-2) &amp;amp;\text{otherwise}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;The inefficient, but straight-forward implementation is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The best solution to this is the following dynamic programming solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; f(0)&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; f(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; f(2)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; f(3)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; f(5)&lt;/span&gt;
&lt;span class="sd"&gt;    5&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Have a look at &lt;a href="https://martin-thoma.com/fibonacci-recursion-decorators/"&gt;Fibonacci, recursion and decorators&lt;/a&gt;
if you are interested in more details.&lt;/p&gt;
&lt;h2 id="longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/h2&gt;
&lt;p&gt;A sub-sequence of an sequence is any subset of a sequence in the same order.
Please note that a sub-sequence does not have to be contiguous.&lt;/p&gt;
&lt;p&gt;For this example, I want a strictly increasing subsequence.&lt;/p&gt;
&lt;p&gt;The brute-force solution is to generate all sub-sequences and check if they are
increasing. The generate-and-check pattern is in $\mathcal{O}(2^n)$. It is easy
to implement with Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;longest_increasing_subsequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;lis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subseq&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;subseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;subseq&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;powerset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_increasing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;powerset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_increasing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following Dynamic Programming approach takes $\mathcal{O}(n^2)$ in time
and additionally $\mathcal{O}(n)$ space.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;longest_increasing_subsequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; longest_increasing_subsequence([])&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; longest_increasing_subsequence([4321])&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; longest_increasing_subsequence([1,2,3,4,5])&lt;/span&gt;
&lt;span class="sd"&gt;    5&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; longest_increasing_subsequence([1,2,3,4,5,5])&lt;/span&gt;
&lt;span class="sd"&gt;    5&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; longest_increasing_subsequence([5,4,3,2,1])&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; longest_increasing_subsequence([1,7,2,3,4])&lt;/span&gt;
&lt;span class="sd"&gt;    4&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# For each index, calculate the longest subsequence which ends with that index&lt;/span&gt;
    &lt;span class="n"&gt;max_endswith&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# include the index&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;max_len_before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;max_len_before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_len_before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_endswith&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;max_endswith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_len_before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_endswith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;a href="https://en.wikipedia.org/wiki/Patience_sorting"&gt;Patience sorting&lt;/a&gt; is
a $\mathcal{O}(n \log(n))$ solution with additional $\mathcal{O}(n)$ space (&lt;a href="https://www.youtube.com/watch?v=22s1xxRvy28"&gt;video&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="edit-distance"&gt;Edit Distance&lt;/h2&gt;
&lt;p&gt;The edit distance, also known as &lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;,
calculates the number of operations two words are apart. Typically, one allows
removal of characters, adding characters or changing a character. And typically,
all of them have a count of 1.&lt;/p&gt;
&lt;p&gt;A real-world application of the edit distance is in automatic speech recognition (ASR).
There the edit distance is used to calcuate the word error rate (WER): &lt;a href="https://martin-thoma.com/word-error-rate-calculation/"&gt;Word Error Rate Calculation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\begin{align}
m &amp;amp;:= |w_1|\
n &amp;amp;:= |w_2|\
\end{align}&lt;/p&gt;
&lt;p&gt;We want to compute a distance matrix $d \in \mathbb{N}_0^{m \times n}$:&lt;/p&gt;
&lt;p&gt;\begin{align}
D_{0, 0} &amp;amp;= 0\
D_{i, 0} &amp;amp;= i, \text{ for } 1 \leq i \leq m\
D_{0, j} &amp;amp;= j, \text{ for } 1 \leq j \leq n
\end{align}&lt;/p&gt;
&lt;p&gt;$$
\text{For } 1 \leq i\leq m, 1\leq j \leq n\
D_{i, j} = \min \begin{cases}
D_{i - 1, j - 1}&amp;amp;+ 0 \ {\rm if}\ u_i = v_j\
D_{i - 1, j - 1}&amp;amp;+ 1 \ {\rm(Replacement)} \
D_{i, j - 1}&amp;amp;+ 1 \ {\rm(Insertion)} \
D_{i - 1, j}&amp;amp;+ 1 \ {\rm(Deletion)}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;Each cell $(i, j)$ of the matrix $D$ is a sub-problem of the original one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;edit_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The complete code looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;edit_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("foobar", "")&lt;/span&gt;
&lt;span class="sd"&gt;    6&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("", "")&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("foobar", "foobar")&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("fobar", "foobar")&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("foobar", "fobar")&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("stackoverflow", "stackingoverflow")&lt;/span&gt;
&lt;span class="sd"&gt;    3&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("overflow", "stack")&lt;/span&gt;
&lt;span class="sd"&gt;    8&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; edit_distance("stack", "overflow")&lt;/span&gt;
&lt;span class="sd"&gt;    8&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialize&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Compute&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A 16 minute video explanation is given by &lt;a href="https://www.youtube.com/watch?v=MiqoA-yF-0M"&gt;Back To Back SWE&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="change-making-problem"&gt;Change Making Problem&lt;/h2&gt;
&lt;p&gt;Imagine your are the cashier at a supermarket. You have to give change to the
customer and you want to give the least number of coins possible.&lt;/p&gt;
&lt;p&gt;There is a top-down and a bottom-up solution.&lt;/p&gt;
&lt;p&gt;A recursive top-down solution is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;functools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;


&lt;span class="nd"&gt;@lru_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;least_coins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins(frozenset({2,5,10,20,50,100}), 1)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins(frozenset({1,2,5,10,20,50,100}), 0)&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins(frozenset({1,2,5,10,20,50,100}), 3)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins(frozenset({1,2,5,10,20,50,100}), 4)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins(frozenset({1,2,5,10,20,50,100}), 8)&lt;/span&gt;
&lt;span class="sd"&gt;    3&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins(frozenset({1,2,5,10,20,50,100}), 18)&lt;/span&gt;
&lt;span class="sd"&gt;    4&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;possible_solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;least_coins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;possible_solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_solutions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that I used an LRU cache. This saves the 512 &lt;strong&gt;l&lt;/strong&gt;east &lt;strong&gt;r&lt;/strong&gt;ecently
&lt;strong&gt;u&lt;/strong&gt;sed function calls and its output. So we don't have to re-compute too
much. That decorator requires hashable parameters, hence we have to use
frozenset. Set is not hashable.&lt;/p&gt;
&lt;p&gt;Now the top-down iterative solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;least_coins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins({2,5,10,20,50,100}, 1)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins({1,2,5,10,20,50,100}, 0)&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins({1,2,5,10,20,50,100}, 3)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins({1,2,5,10,20,50,100}, 4)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins({1,2,5,10,20,50,100}, 8)&lt;/span&gt;
&lt;span class="sd"&gt;    3&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; least_coins({1,2,5,10,20,50,100}, 18)&lt;/span&gt;
&lt;span class="sd"&gt;    4&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# coins_used, remaining_amount&lt;/span&gt;
    &lt;span class="n"&gt;partial_solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;possible_solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;partial_solutions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;coins_used&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remaining_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial_solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remaining_amount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;possible_solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coins_used&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;remaining_amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;partial_solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coins_used&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remaining_amount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;partial_solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_solutions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I removed the LRU cache and used normal sets. I could have kept both, but
this makes the solution a bit shorter.&lt;/p&gt;
&lt;p&gt;The bottom-up solution would calculate all the possible sums. Although that
would be the dynamic programming solution, I'm currently to lazy to write it
(aka: I leave it as an exercise to the reader).&lt;/p&gt;
&lt;h2 id="01-knapsack"&gt;0/1 Knapsack&lt;/h2&gt;
&lt;p&gt;You have a list of items which have a weight and a value. You have a maximum
weight you can carry. What is the maximum value you can get?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;solve_knapsack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;max_weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    The items have (weight, value) as order&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; items = [(2, 2), (5, 7), (4, 3)]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; solve_knapsack(items, max_weight=10)&lt;/span&gt;
&lt;span class="sd"&gt;    10&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; solve_knapsack(items, max_weight=11)&lt;/span&gt;
&lt;span class="sd"&gt;    12&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# A non-positive weight is a no-brainer: we would always add it&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ... except if the value is negtive&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# c[i][j] is the optimal solution if you have&lt;/span&gt;
    &lt;span class="c1"&gt;# a maximum weight of j and only the items items[:(i+1)]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_weight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;remaining_weight&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_weight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# Can the item at item_index be added?&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;not_adding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;remaining_weight&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;remaining_weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# This works even for item_index = 0 as the matrix is&lt;/span&gt;
                &lt;span class="c1"&gt;# initialized with zeroes. Hence looking at the last element is&lt;/span&gt;
                &lt;span class="c1"&gt;# zero.&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item_index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;remaining_weight&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;not_adding&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Yes we can!&lt;/span&gt;
                &lt;span class="n"&gt;adding_it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item_index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;remaining_weight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item_index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;remaining_weight&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_adding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adding_it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;max_weight&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that the solution has a time complexity of $\mathcal{O}(n \cdot m)$
where $n$ is the number of items and $m$ is the maximum weight. It also has this
space complexity.&lt;/p&gt;
&lt;p&gt;You can also see that this solution would fail if &lt;code&gt;max_weight&lt;/code&gt; was
not an integer. While one could simply multiply everything with large enough
numbers, this might make&lt;/p&gt;
&lt;h3 id="climbing-stairs"&gt;Climbing Stairs&lt;/h3&gt;
&lt;p&gt;There are n stairs and you can take either one or two stairs. How many unique
ways exist to climb the stairs?&lt;/p&gt;
&lt;p&gt;First, a recursive solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;functools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;


&lt;span class="nd"&gt;@lru_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;stairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(2)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(3)&lt;/span&gt;
&lt;span class="sd"&gt;    3&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(4)&lt;/span&gt;
&lt;span class="sd"&gt;    5&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;stairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should directly notice that this looks VERY similar to the fibonacci sequence.
Only the starting numbers are different. Hence the solution is the same, except
for the starting numbers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;stairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(2)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(3)&lt;/span&gt;
&lt;span class="sd"&gt;    3&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; stairs(4)&lt;/span&gt;
&lt;span class="sd"&gt;    5&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="egg-drop_1"&gt;Egg Drop&lt;/h2&gt;
&lt;p&gt;Given $n$ eggs and $m$ floors, how often do you need to let an egg drop to know
for sure the highest floor at which the eggs still don't break?&lt;/p&gt;
&lt;p&gt;Some clarifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Floors start at zero.&lt;/li&gt;
&lt;li&gt;The eggs are guaranteed not to break at floor 0.&lt;/li&gt;
&lt;li&gt;The eggs are guaranteed to break from floor $m +1$.&lt;/li&gt;
&lt;li&gt;If an egg does not break at floor $i$, it will not break at floor $i-1$.&lt;/li&gt;
&lt;li&gt;If an egg breaks at floor $i$, it will also break at floor $i+1$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know this sounds very simple and a was about to just drop the problem. I
thought it was simply binary search, hence with applying the logarithm you
could solve it. I was wrong, though. Think about the situation where you have
20 floors and 2 eggs. If you use the first egg for the 10th floor, the worst case
is that the searched floor is the 9th one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st egg breaks at 10th floor&lt;/li&gt;
&lt;li&gt;2nd egg needs to be dropped from floor 1, 2, 3, 4, 5, 6, 7, 8, 9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence binary search needs 10 egg drops for 2 eggs and 20 floors&lt;/p&gt;
&lt;p&gt;Now consider this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st egg is dropped from 7th floor&lt;ul&gt;
&lt;li&gt;It breaks: 2nd egg needs to be dropped from floor 1,2,3,4,5,6 &amp;rArr; 7 egg drops&lt;/li&gt;
&lt;li&gt;It doesn't break: 1st egg is dropped from floor 14&lt;ul&gt;
&lt;li&gt;It breaks: 2nd egg needs to be dropped from floor 8, 9, 10, 11, 12, 13 &amp;rArr; 8 egg drops&lt;/li&gt;
&lt;li&gt;It doesn't break: Try floor 15, 16, 17, 18, 19 &amp;rArr; 7 egg drops&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, binary search is not the best solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;egg_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eggs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; egg_drop(42, 0)&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; egg_drop(42, 1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; egg_drop(1, 5)&lt;/span&gt;
&lt;span class="sd"&gt;    5&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; egg_drop(2, 100)&lt;/span&gt;
&lt;span class="sd"&gt;    14&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# s[remaining_floors][remaining_eggs]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;floors&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reduced_eggs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eggs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;reduced_eggs&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;reduced_eggs&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floors&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n_egg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eggs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# The number of eggs we need here at least, if we throw the egg&lt;/span&gt;
            &lt;span class="c1"&gt;# from the optimal floor. Throwing it in a conservative way&lt;/span&gt;
            &lt;span class="c1"&gt;# would mean we start in the lowest floor and go upwards. That is&lt;/span&gt;
            &lt;span class="c1"&gt;# always possible.&lt;/span&gt;
            &lt;span class="n"&gt;best_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floors&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chosen_floor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;chosen_floor&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n_egg&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;no_break&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;chosen_floor&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n_egg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;worst_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_break&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;worst_case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# This reads weird ... we just found a better choice where&lt;/span&gt;
                    &lt;span class="c1"&gt;# to throw eggs from&lt;/span&gt;
                    &lt;span class="n"&gt;best_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worst_case&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n_egg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;best_choice&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;floors&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;eggs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This algorithm has a time complexity of $\mathcal{O}(m^2 \cdot n)$ and need
$\mathcal{O}(n \cdot m)$ in additional space. You can improve the runtime by
looking at the sequence of worst_case. It should go down and then up again. If
you notice that it went down but starts to go up again, you can abort the
&lt;code&gt;chosen_floor&lt;/code&gt; loop. I don't think that changes the worst-case
asymptotical runtime, though.&lt;/p&gt;
&lt;p&gt;Now that we have a solution which is correct, we can look for patterns in the
pure numbers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 eggs, starting with 0 floors: 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, ...: &lt;a href="https://oeis.org/A123578"&gt;A123578&lt;/a&gt; - 1 times one, 2 times two, 3 times three, ...&lt;/li&gt;
&lt;li&gt;3 eggs, starting with 0 floors: 0, 1, 2x 2, 4x 3, 7x 4, 11x 5, 16x 6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another observation is that if we have enough eggs, we can perform binary
search and more eggs will not result in less egg drops.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia: Some example for Dynamic Programming algorithms&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra's algorithm&lt;/a&gt;: single-source shortest path (SSSP)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm"&gt;Bellman&amp;ndash;Ford algorithm&lt;/a&gt;: single-source shortest-path algorithm (SSSP), $\mathcal{O}(V^2 E)$&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm"&gt;Floyd&amp;ndash;Warshall algorithm&lt;/a&gt;: all-pairs shortest path algorithm, $\mathcal{O}(V^3)$&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Knapsack_problem#0-1_knapsack_problem"&gt;Knapsack problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Karpathy: &lt;a href="https://cs.stanford.edu/people/karpathy/reinforcejs/gridworld_dp.html"&gt;GridWorld: Dynamic Programming Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackOverflow:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/3592943/562769"&gt;Difference between back tracking and dynamic programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/16814830/562769"&gt;What is the difference between dynamic programming and branch and bound?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;🇩🇪 Martin Thoma: &lt;a href="https://martin-thoma.com/probabilistische-planung/#dynamic-programming"&gt;Probabilistische Planung&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Algorithms"></category><category term="Code"></category><category term="Fibonacci"></category><category term="Python"></category><category term="COP"></category><category term="CSP"></category></entry><entry><title>Backtracking</title><link href="https://martin-thoma.com/backtracking/" rel="alternate"></link><published>2020-03-30T20:00:00+02:00</published><updated>2020-03-30T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-03-30:/backtracking/</id><summary type="html">&lt;p&gt;Backtracking is a concept for solving discrete constraint satisfaction problems
(CSPs). Those problems don't have an optimal solution, but just solutions which
satisfy the constraints. The idea of backtracking is to try a solution. If it
doesn't work, go back and try something else.&lt;/p&gt;
&lt;p&gt;Backtracking is often implemented with recursion …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Backtracking is a concept for solving discrete constraint satisfaction problems
(CSPs). Those problems don't have an optimal solution, but just solutions which
satisfy the constraints. The idea of backtracking is to try a solution. If it
doesn't work, go back and try something else.&lt;/p&gt;
&lt;p&gt;Backtracking is often implemented with recursion, but does not need to use
recursion.&lt;/p&gt;
&lt;h2 id="the-structure"&gt;The Structure&lt;/h2&gt;
&lt;p&gt;Typically, when you apply backtracking, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;partial_solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initial_solution_draft&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# stack or queue&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;partial_solutions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;partial_solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial_solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_solution&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;partial_solution&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_solution&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;extended_solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_solution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extended_solution&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;partial_solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extended_solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# Constraints could not be satisfied&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it is essentially just a way to brute-force the problem.&lt;/p&gt;
&lt;p&gt;The rest of the article consists of examples. I checked the n-queens example
for correctness, but not the others.&lt;/p&gt;
&lt;h2 id="backtracking-vs-dfs"&gt;Backtracking vs DFS&lt;/h2&gt;
&lt;p&gt;When you apply Backtracking, you first define a solution space. This might
happen implicitly, e.g. by defining a data structure. For example, in the
n-queens problem the solution space is all permutations of the number from 0 to
(n-1). Everything else is guaranteed not to be a solution. And most of the
permutations are also no solutions.&lt;/p&gt;
&lt;p&gt;Depth First Search (DFS) is a graph traversal algorithm. It is one way to
search in the solution space for a solution that satisfies the constraints. It
is the typical choice to iterate the solution space. Other search algorithms
are Breadth First Search (BFS) and A*.&lt;/p&gt;
&lt;h2 id="backtracking-vs-bb"&gt;Backtracking vs B&amp;amp;B&lt;/h2&gt;
&lt;p&gt;Branch-and-Bound (B&amp;amp;B) is a concept to solve discrete constrained optimization
problems (COPs). They are similar to CSPs, but besides having the constraints
they have an optimization criterion. In contrast to backtracking, B&amp;amp;B uses
Breadth-First Search.&lt;/p&gt;
&lt;p&gt;B&amp;amp;B is a &lt;a href="https://martin-thoma.com/label-correction-algorithm/"&gt;label correction algorithm&lt;/a&gt;.
It is a search algorithm which uses a lower bound and an upper bound for the
search. Think of a shortest-path problem.&lt;/p&gt;
&lt;p&gt;One part of the name, the bound, refers to the way B&amp;amp;B prunes the space of possible solutions: It gets a heuristic which gets an upper bound. If this cannot be improved, a sup-tree can be discarded.&lt;/p&gt;
&lt;p&gt;With the lower bound, the minimum length of a given partial solution from
source to sink can be calculated. If that minimum length is longer than another
answer which was already found, then the calculation at that point can be
aborted.&lt;/p&gt;
&lt;p&gt;With the upper bound, one can extend the partial solutons. Essentially, one can
make the pruning described before more efficient. We don't have to find a
concrete solution anymore, but for partial solutions we already know the
distance they will take at most.&lt;/p&gt;
&lt;h2 id="runtime-complexity"&gt;Runtime Complexity&lt;/h2&gt;
&lt;p&gt;Assume that you have to go $n$ steps and at every step you have $a \geq 2$
choices. This means the runtime is exponential - $\mathcal{O}(\alpha^n)$.&lt;/p&gt;
&lt;p&gt;If you add more rules to &lt;code&gt;is_valid&lt;/code&gt; - excluding more solutions - you reduce
$\alpha$. This can mean a huge speedup.&lt;/p&gt;
&lt;h2 id="n-queens"&gt;n Queens&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;n Queens puzzle&lt;/a&gt; is
probably the most common example. You have a n&amp;times;n chess board and n queens. You
need to place the queens on the chess board in such a way that they don't
threaten each other.&lt;/p&gt;
&lt;p&gt;A queen threatens another queen if it is&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;hellip; in the same row&lt;/li&gt;
&lt;li&gt;&amp;hellip; in the same column&lt;/li&gt;
&lt;li&gt;&amp;hellip; in the same diagonal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you say that the first coordinate x is the row and the second one, y, is the
column, then you can easily determine if they threaten each other:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;all_n_queens_solutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Find all possible solutions to the n-queens problem.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    n : int&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    all_solutions : List[List[int]]&lt;/span&gt;
&lt;span class="sd"&gt;        Each inner list represents a single solution.&lt;/span&gt;
&lt;span class="sd"&gt;        The first digit of it is the column of the queen in the first row.&lt;/span&gt;
&lt;span class="sd"&gt;        The second digit is the column of the queen in the second row, ...&lt;/span&gt;

&lt;span class="sd"&gt;    Note&lt;/span&gt;
&lt;span class="sd"&gt;    ----&lt;/span&gt;
&lt;span class="sd"&gt;    Columns are 0-based.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; all_n_queens_solutions(1)&lt;/span&gt;
&lt;span class="sd"&gt;    [(0,)]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; all_n_queens_solutions(2)&lt;/span&gt;
&lt;span class="sd"&gt;    []&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; all_n_queens_solutions(3)&lt;/span&gt;
&lt;span class="sd"&gt;    []&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; all_n_queens_solutions(4)&lt;/span&gt;
&lt;span class="sd"&gt;    [(1, 3, 0, 2), (2, 0, 3, 1)]&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;solution_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[()]&lt;/span&gt;  &lt;span class="c1"&gt;# contains valid partial solutions&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;solution_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solution_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_new_threatening&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;new_solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
                    &lt;span class="n"&gt;solution_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# It's finished!&lt;/span&gt;
            &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_new_threatening&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x_old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_old&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_threatening&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_threatening&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Check if the positions are threatening each other.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_threatening(0, 1, 1, 0)&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;same_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;
    &lt;span class="n"&gt;same_col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;

    &lt;span class="n"&gt;delta1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;major_coords1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;delta1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;delta1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;delta2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;major_coords2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;delta2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;delta2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;same_diagonal_major&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;major_coords1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;major_coords2&lt;/span&gt;

    &lt;span class="n"&gt;delta1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;
    &lt;span class="n"&gt;delta2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;
    &lt;span class="n"&gt;minor_coords1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;delta1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;minor_coords2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;delta2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;same_diagonal_minor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minor_coords1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;minor_coords2&lt;/span&gt;
    &lt;span class="n"&gt;same_diagonal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;same_diagonal_major&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;same_diagonal_minor&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;same_row&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;same_col&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;same_diagonal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;solutions (&lt;a href="https://oeis.org/A000170"&gt;A000170&lt;/a&gt;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;724&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2680&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="maze-finding"&gt;Maze finding&lt;/h2&gt;
&lt;p&gt;In order to find a solution in a maze, one can apply depth first search (DFS).
DFS can be seen as a specific form of backtracking
(&lt;a href="https://stackoverflow.com/a/1294741/562769"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_way_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;maze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Implement possible_paths for your problem&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_step&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;possible_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;next_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="c1"&gt;# We just came from this position&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_way_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_pos&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt;
    &lt;span class="c1"&gt;# We didn't find a way out&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason why I used a tuple is to prevent modification. This way, I can be
sure that the recursive calls work on copies.&lt;/p&gt;
&lt;p&gt;Once Python hits a recurision depth of about 500, you will see a
&lt;a href="https://docs.python.org/3/library/exceptions.html#RecursionError"&gt;RecursionError&lt;/a&gt;.
So if we need to make more than 500 steps, this will not work anymore. Hence an
iterative soltuion is better. Please note that it is still backtracking and
that it is still DFS. It's just not recursive anymore:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_way_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;maze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;explore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;explore&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_step&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;possible_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;next_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_pos&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="c1"&gt;# We just came from this position&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;next_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_pos&lt;/span&gt;&lt;span class="p"&gt;,)))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="sudoku"&gt;Sudoku&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;SudokuBoard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]):&lt;/span&gt;
        &lt;span class="c1"&gt;# A board is a 9x9 matrix which has values in 1 to 9.&lt;/span&gt;
        &lt;span class="c1"&gt;# The value 0 denotes that the cell is empty&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"You can't set &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at (&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Check if the sudoku-rule is fulfilled."""&lt;/span&gt;
        &lt;span class="c1"&gt;# Check Rows and columns&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

        &lt;span class="c1"&gt;# Check blocks&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# (i, j) is the top-left element of the block&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_valid_sudoku_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="c1"&gt;# All fine :-)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;validate_row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_valid_sudoku_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;validate_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;column_index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_valid_sudoku_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;validate_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Make sure the given position doesn't break the board."""&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_valid_sudoku_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_solved&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_first_zero_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_valid_sudoku_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Value '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' found, but expected int in [0, 9]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;di&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dj&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;solve_sudoko&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SudokuBoard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SudokuBoard&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# we want a DFS&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_solved&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_first_zero_position&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;new_board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SudokuBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;new_board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Setting digit at that position would make the board invalid&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can solve Sudoku with &lt;a href="https://gist.github.com/ymakino/4605973"&gt;GLPK&lt;/a&gt;, the
GNU Linear Programming Kit, as well.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google OR-Tools: &lt;a href="https://developers.google.com/optimization/cp/queens"&gt;The N-queens Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cs.StackExchange: &lt;a href="https://cs.stackexchange.com/q/123382/2914"&gt;Backtracking vs Branch-and-Bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackOverflow: &lt;a href="https://stackoverflow.com/q/30025421/562769"&gt;Difference between 'backtracking' and 'branch and bound'&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.win.tue.nl/~kbuchin/"&gt;Kevin Buchin&lt;/a&gt;: &lt;a href="https://www.win.tue.nl/~kbuchin/teaching/2IL15/backtracking.pdf"&gt;Backtracking / Branch-and-Bound&lt;/a&gt;. In Algorithms (2IL15) &amp;ndash; 2014.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Algorithms"></category><category term="Constraint-satisfaction"></category><category term="COP"></category><category term="CSP"></category><category term="Operations Research"></category><category term="Backtracking"></category><category term="Branch-and-Bound"></category></entry><entry><title>Code Golf: Brackets Check</title><link href="https://martin-thoma.com/brackets-check/" rel="alternate"></link><published>2020-03-13T20:00:00+01:00</published><updated>2020-03-13T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-03-13:/brackets-check/</id><summary type="html">&lt;p&gt;Write a function &lt;code&gt;check_bracket_validity&lt;/code&gt; which takes a sequence of brackets as
input and determines if it is valid.&lt;/p&gt;
&lt;p&gt;A sequence is valid, iff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All opened brackets close&lt;/li&gt;
&lt;li&gt;Brackets come in pairs - only what was opened can be closed again&lt;/li&gt;
&lt;li&gt;The 3 styles which should be supported are:&lt;ul&gt;
&lt;li&gt;Round brackets: &lt;code&gt;(&lt;/code&gt; and …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Write a function &lt;code&gt;check_bracket_validity&lt;/code&gt; which takes a sequence of brackets as
input and determines if it is valid.&lt;/p&gt;
&lt;p&gt;A sequence is valid, iff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All opened brackets close&lt;/li&gt;
&lt;li&gt;Brackets come in pairs - only what was opened can be closed again&lt;/li&gt;
&lt;li&gt;The 3 styles which should be supported are:&lt;ul&gt;
&lt;li&gt;Round brackets: &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Square brackets: &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Curly brackets: &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brackets must be ordered: Either the opening and the closing brackets are
  within another pair of brackets or not. Something like this is invalid:
  &lt;code&gt;[(])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Restrictions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The formatter &lt;code&gt;black&lt;/code&gt; will be applied to any solution&lt;/li&gt;
&lt;li&gt;The signature, the docstring and the doctest is fixed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="solution-846-characters"&gt;Solution: 846 characters&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;check_bracket_validity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Check if a sequence of brackets is valid.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("()[]{}")&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([{([{}])}])")&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([{([{}])}]")&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([{([{}])}]))")&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([)]")&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;opening&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"([{"&lt;/span&gt;
    &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bracket&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bracket&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opening&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bracket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;popped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;popped&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;bracket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;doctest&lt;/span&gt;

    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="minified-solution-766-characters"&gt;Minified Solution: 766 characters&lt;/h2&gt;
&lt;p&gt;Just using one-letter variable names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;check_bracket_validity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Check if a sequence of brackets is valid.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("()[]{}")&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([{([{}])}])")&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([{([{}])}]")&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([{([{}])}]))")&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; check_bracket_validity("([)]")&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"([{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;doctest&lt;/span&gt;

    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codegolf.stackexchange.com/"&gt;Codegolf&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codegolf.stackexchange.com/q/65526/5240"&gt;Bracket balancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codegolf.stackexchange.com/q/77138/5240"&gt;Are the brackets fully matched?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Code"></category><category term="Python"></category><category term="Code Golf"></category></entry><entry><title>Software Architecture</title><link href="https://martin-thoma.com/software-architecture/" rel="alternate"></link><published>2020-03-11T20:00:00+01:00</published><updated>2020-03-11T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-03-11:/software-architecture/</id><summary type="html">&lt;p&gt;My mentee recently asked me what software architecture is. How do you draw
an architecture diagram? What is a bad one and how do I learn to draw good ones?&lt;/p&gt;
&lt;p&gt;The software architecture gives a very high-level overview of a software system.&lt;/p&gt;
&lt;h2 id="typical-components"&gt;Typical Components&lt;/h2&gt;
&lt;p&gt;A software architecture tries to solve …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My mentee recently asked me what software architecture is. How do you draw
an architecture diagram? What is a bad one and how do I learn to draw good ones?&lt;/p&gt;
&lt;p&gt;The software architecture gives a very high-level overview of a software system.&lt;/p&gt;
&lt;h2 id="typical-components"&gt;Typical Components&lt;/h2&gt;
&lt;p&gt;A software architecture tries to solve a problem. It tries to achieve
"high quality" in some of the properities mentioned in &lt;a href="https://iso25000.com/index.php/en/iso-25000-standards/iso-25010"&gt;ISO/IEC 25010&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One very typical property is &lt;strong&gt;modularity&lt;/strong&gt;. We want to have components which
are to a large degree independent so that different teams can work on it. It
also helps with Analysability, Modifiability and Testability.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database&lt;br/&gt;&lt;img alt="Database" src="../images/2020/03/db.png"/&gt;&lt;/td&gt;
&lt;td&gt;MySQL, PostgreSQL&lt;/td&gt;
&lt;td&gt;Databases are a typical way to store data and state. One distinguishes relational databases from NoSQL Databases. &lt;a href="https://en.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt; properties are important.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Queue / Kafka Topic&lt;br/&gt;&lt;img alt="Queue" src="../images/2020/03/queue.png"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A job queue can be used to distribute computationally intensive tasks. Think about encoding a video on YouTube.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object Storage&lt;br/&gt;&lt;img alt="AWS S3" src="../images/2020/03/s3.png"/&gt;&lt;/td&gt;
&lt;td&gt;AWS S3 / Google Cloud Storage&lt;/td&gt;
&lt;td&gt;Storing files is often useful for various parts of machine learning projects. In the YouTube example, storing an encoded file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Front Ends&lt;br/&gt;&lt;span style="font-size: xx-large;"&gt;FEs&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Android, IOS, Web&lt;/td&gt;
&lt;td&gt;The front-ends typically can be seperated pretty well in different teams. They need to access the same backend services.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache&lt;br/&gt;&lt;img alt="Cache" src="../images/2020/03/cache.png"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Memcached"&gt;Memcached&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Content_delivery_network"&gt;CDN&lt;/a&gt; for static files, Redis, Cassandra&lt;/td&gt;
&lt;td&gt;Caches are important to make things fast and reduce load. There are many different ways to cache.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load Balancer&lt;br/&gt;&lt;img alt="Load Balancer" src="../images/2020/03/load-balancer.png"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://aws.amazon.com/de/elasticloadbalancing/"&gt;AWS ELB&lt;/a&gt;, &lt;a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/"&gt;NGINX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;If you built your service in a way to be horizontally scalable, load balancing is crucial. Round-robin or hashing on the IP address are possible choices.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="interfaces"&gt;Interfaces&lt;/h2&gt;
&lt;p&gt;When reading that there are different Front Ends, you might wonder how you
define the interfaces between front ends and backend services.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/rest/"&gt;REST API&lt;/a&gt;: &lt;a href="https://en.wikipedia.org/wiki/OpenAPI_Specification"&gt;OpenAPI Specification&lt;/a&gt; e.g. with &lt;a href="https://flask-restx.readthedocs.io/en/latest/"&gt;Flask-RestX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aseigneurin.github.io/2018/08/02/kafka-tutorial-4-avro-and-schema-registry.html"&gt;Avro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flat file: Sometimes it is enough to make a file available, e.g. via FTP or even HTTP (Amazon S3). The strenght of a single file is batch-load. You can keep the files and thus track the past. It is not a good choice for streaming / real time applications where you have a lot of events.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="typical-patterns"&gt;Typical Patterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Layers: Presentation layer, application layer, business logic layer, data access layer&lt;/li&gt;
&lt;li&gt;Client / Server: Online applications&lt;/li&gt;
&lt;li&gt;Master / Slave: In database replication&lt;/li&gt;
&lt;li&gt;Broker pattern: Distributed Systems&lt;/li&gt;
&lt;li&gt;Peer-to-peer pattern: File sharing&lt;/li&gt;
&lt;li&gt;Event-bus: Android development&lt;/li&gt;
&lt;li&gt;Model-view-controller: Django applications and many more web applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vijini Mallawaarachchi: &lt;a href="https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013"&gt;10 Common Software Architectural Patterns in a nutshell&lt;/a&gt;, 2017.&lt;/li&gt;
&lt;li&gt;Eberhard Wolff: &lt;a href="https://www.youtube.com/watch?v=v_nhv6aY1Kg"&gt;How to Become a Great Software Architect&lt;/a&gt; at GOTO 2019&lt;/li&gt;
&lt;li&gt;Cl&amp;eacute;ment Mihailescu: &lt;a href="https://www.youtube.com/watch?v=q0KGYwNbf-0"&gt;Google Systems Design Interview With An Ex-Googler&lt;/a&gt;, 2020.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Software Engineering"></category></entry><entry><title>Maximum Fixed-Length Contiguous Subarray</title><link href="https://martin-thoma.com/maximum-fixed-length-contiguous-subarray/" rel="alternate"></link><published>2020-02-23T20:00:00+01:00</published><updated>2020-02-23T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-02-23:/maximum-fixed-length-contiguous-subarray/</id><summary type="html">&lt;p&gt;I recently taught a course about improving code for performance. An obvious
performance improvement is to not execute unnecessary operations. I lacked a
good example when I gave the course, but here is one: Find value of the largest
contiguous sub-array of fixed length in a huge array.&lt;/p&gt;
&lt;p&gt;This is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently taught a course about improving code for performance. An obvious
performance improvement is to not execute unnecessary operations. I lacked a
good example when I gave the course, but here is one: Find value of the largest
contiguous sub-array of fixed length in a huge array.&lt;/p&gt;
&lt;p&gt;This is a toy example, of course, but it shows the idea quite well.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/MartinThoma/algorithms/tree/master/Python/continuous-subarray"&gt;Code is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="small-example"&gt;Small Example&lt;/h2&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array: [7, 9, 2, 0, 5, 2, 0, 1, 1, 2]&lt;/li&gt;
&lt;li&gt;sub-array length m = 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Contiguous sub-arrays of the given length:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[7, 9, 2]&lt;/code&gt;, value = 18&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[9, 2, 0]&lt;/code&gt;, value = 11&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 0, 5]&lt;/code&gt;, value = 7&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0, 5, 2]&lt;/code&gt;, value = 7&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[5, 2, 0]&lt;/code&gt;, value = 7&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 0, 1]&lt;/code&gt;, value = 3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0, 1, 1]&lt;/code&gt;, value = 2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1, 1, 2]&lt;/code&gt;, value = 4&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Output: 18&lt;/p&gt;
&lt;h2 id="inefficient-solution"&gt;Inefficient Solution&lt;/h2&gt;
&lt;p&gt;The following solution makes use of the slicing notation. It is short,
easy to read and mostly pretty efficient:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_biggest_subarray_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except that it has one flaw: It makes too many additions and accesses list
elements way more often than necessary&lt;/p&gt;
&lt;h2 id="efficient-solution"&gt;Efficient Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;find_biggest_subarray_iterative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;largest_sub_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:]):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
        &lt;span class="n"&gt;largest_sub_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largest_sub_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;largest_sub_array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="comparison"&gt;Comparison&lt;/h2&gt;
&lt;p&gt;The inefficient solution is in $\mathcal{O}((n - m) \cdot m)$, the efficient
one is in $\mathcal{O}(n - m)$. So you will notice the difference clearly when
you compare the execution times with big $m$.&lt;/p&gt;
&lt;p&gt;The inefficient solution changes its execution time like as shown in the image
below for increasing m and contant n = 100,000:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/02/total-execution-time.png"&gt;&lt;img alt="Total execution time of find_biggest_subarray_slice" src="../images/2020/02/total-execution-time.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Total execution time of find_biggest_subarray_slice&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In contrast, the efficient solution looks like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/02/find_biggest_subarray_iterative.png"&gt;&lt;img alt="Total execution time of the efficient solution" src="../images/2020/02/find_biggest_subarray_iterative.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Total execution time of the efficient solution&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Two things to notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Worst-Case&lt;/strong&gt;: For the inefficient solution, it is $m = n/2$. For the
  efficient solution, it is $m = 1$.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level&lt;/strong&gt;: The efficient solution is always below 0.03s. The inefficient one
  is only for the best-case scenario ($n=m$) below that. And even then, the
  efficient solution is at 0.0008s whereas the inefficient one is at 0.001s.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed-ups&lt;/strong&gt;: If you look at $m = 60,000$, the more efficient solution gives
  a 1000&amp;times; speedup!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/maximum-subarray-sum/"&gt;Maximum Contiguous Subarray Sum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Performance"></category></entry><entry><title>Matrix Multiplication: 2020 Update</title><link href="https://martin-thoma.com/matrix-multiplication-2020/" rel="alternate"></link><published>2020-02-16T20:00:00+01:00</published><updated>2020-02-16T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-02-16:/matrix-multiplication-2020/</id><summary type="html">&lt;p&gt;In 2012 I wrote a series of articles about matrix
multiplication. Now I'm preparing a course about speeding up Python. For this
reason I need an example of code that is fairly simple to understand and can be
optimized. So let's update the results of my old articles 🙂&lt;/p&gt;
&lt;p&gt;The code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In 2012 I wrote a series of articles about matrix
multiplication. Now I'm preparing a course about speeding up Python. For this
reason I need an example of code that is fairly simple to understand and can be
optimized. So let's update the results of my old articles 🙂&lt;/p&gt;
&lt;p&gt;The code can be found in a git repository on GitHub (&lt;a href="https://github.com/MartinThoma/matrix-multiplication"&gt;github.com/MartinThoma/matrix-multiplication&lt;/a&gt;) and you can have a look at the &lt;a href="https://martin-thoma.com/matrix-multiplication-python-java-cpp/"&gt;old article&lt;/a&gt; as well, if you want.&lt;/p&gt;
&lt;p&gt;All scripts are tested on my new Thinkpad T460p. For comparision, I've also
added the laptop I had before when I wrote the 2012 matrix multiplication article:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr style="background-color:#cdcdcd"&gt;
&lt;th&gt;&amp;nbsp;&lt;/th&gt;
&lt;th&gt;Acer TravelMate 5735Z&lt;/th&gt;
&lt;th&gt;Thinkpad T460p&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;CPU (&lt;a href="https://ark.intel.com/content/www/de/de/ark/compare.html?productIds=42925,88967"&gt;comparison on ark.inten.com&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;2x Pentium(R) Dual-Core CPU T4500 @2.30GHz&lt;/td&gt;
&lt;td&gt;8x Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;RAM&lt;/td&gt;
&lt;td&gt;4 GB&lt;/td&gt;
&lt;td&gt;8 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;Video Card&lt;/td&gt;
&lt;td&gt;Intel GMA 4500MHD&lt;/td&gt;
&lt;td&gt;Nvidia GeForce 940MX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;System&lt;/td&gt;
&lt;td&gt;Ubuntu 10.10.04 LTS&lt;/td&gt;
&lt;td&gt;Ubuntu 18.04.3 LTS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;In the following table you can see the execution times for the different
algorithms and different Python versions. As input, I took the
&lt;code&gt;2000.in&lt;/code&gt; test set. To switch Python versions, I used &lt;code&gt;pyenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For Python 2.7, you can see the speedup compared to my 2012 machine. A speedup
of 2.6x means that you could run the code on the new machine 2.6x in the time
the old machine needed.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Algorithm&lt;/th&gt;
&lt;th&gt;Python 2.7.16&lt;/th&gt;
&lt;th&gt;Python 3.8.1&lt;/th&gt;
&lt;th&gt;pypy3.6-7.3.0&lt;/th&gt;
&lt;th&gt;pypy-c-jit-latest&lt;/th&gt;
&lt;th&gt;Python 3.8.1 + cython&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;ijk&lt;/th&gt;
&lt;td&gt;1253 (&lt;span style="color: green;"&gt;2.6x&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;158&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;td&gt;1088&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj&lt;/th&gt;
&lt;td&gt;901s (&lt;span style="color: green;"&gt;2.9x&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;1072&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;441&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/NumPy"&gt;NumPy&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;20 (&lt;span style="color: green;"&gt;~6x&lt;/span&gt;)&lt;br/&gt;version: 1.14.4&lt;/td&gt;
&lt;td&gt;20&lt;br/&gt;version: 1.18.1&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/SciPy"&gt;SciPy&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;45 (&lt;span style="color: green;"&gt;2.6x&lt;/span&gt;)&lt;br/&gt;version: 1.1.0&lt;/td&gt;
&lt;td&gt;20&lt;br/&gt;version: 1.4.1&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;a href="https://stackoverflow.com/q/60248443/562769"&gt;Installation problems&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://martin-thoma.com/strassen-algorithm-in-python-java-cpp/"&gt;Strassen (LEAF_SIZE=8)&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;1709 (&lt;span style="color: green;"&gt;1.7x&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;1780&lt;/td&gt;
&lt;td&gt;190&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://martin-thoma.com/strassen-algorithm-in-python-java-cpp/"&gt;Strassen (LEAF_SIZE=64)&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;855 (&lt;span style="color: green;"&gt;3.4x&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;1022&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;441&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj (2 threads)&lt;/th&gt;
&lt;td&gt;953&lt;/td&gt;
&lt;td&gt;1611&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj (4 threads)&lt;/th&gt;
&lt;td&gt;459&lt;/td&gt;
&lt;td&gt;762&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pypy is crazy fast compared to CPython - up to a speedup of 34x 😲 So JIT is
  worth a try. I actually wanted to try
  &lt;a href="https://github.com/dropbox/pyston"&gt;Pyston&lt;/a&gt;
  (&lt;a href="https://pybenchmarks.org/u64q/benchmark.php?test=all&amp;amp;lang=pypy&amp;amp;lang2=pyston&amp;amp;data=u64q"&gt;comparison&lt;/a&gt;)
  as well, but the built failed with pyenv.&lt;/li&gt;
&lt;li&gt;Python 2.7 is faster than 3.8 for this benchmark 😢&lt;/li&gt;
&lt;li&gt;Ways to improve; speedups are always compared to the naive ijk algorithm:&lt;ul&gt;
&lt;li&gt;Cache optimization: The ikj algorithm gave a 1.08x speedup&lt;/li&gt;
&lt;li&gt;Algorithmic: The Strassen algorithm gave a 1.84x speedup&lt;/li&gt;
&lt;li&gt;Parallelization: Using 4 threads instead of 1 with a super simple algorithm gave a 2.47x speedup&lt;/li&gt;
&lt;li&gt;Time:&lt;ul&gt;
&lt;li&gt;New Hardware which is 8 years newer gave a 2.6x speedup on the naive
  solution&lt;/li&gt;
&lt;li&gt;Running the old code with updated libraries on my new machine gave a
  6x speedup compared to running the older version of numpy on the old
  machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Libraries: Using numpy gave a &lt;strong&gt;94.2x speedup&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy and scipy are the way to go, just as expected 🤷&amp;zwj;&amp;male;️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was interested in the influence of the machine, so I ran the algorithms with
Python 3.8 on others as well:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr style="background-color:#cdcdcd"&gt;
&lt;th&gt;&amp;nbsp;&lt;/th&gt;
&lt;th&gt;Thinkpad T460p&lt;br/&gt;(Reference Machine)&lt;/th&gt;
&lt;th&gt;EliteBook-1040&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;CPU (&lt;a href="https://ark.intel.com/content/www/de/de/ark/compare.html?productIds=42925,88967"&gt;comparison on ark.inten.com&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;8x Intel(R) Core(TM) i7-6700HQ&lt;br/&gt;CPU @ 2.60GHz&lt;/td&gt;
&lt;td&gt;4x Intel(R) Core(TM) i5-6300U&lt;br/&gt;CPU @ 2.40GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;RAM&lt;/td&gt;
&lt;td&gt;8 GB&lt;/td&gt;
&lt;td&gt;16 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;Video Card&lt;/td&gt;
&lt;td&gt;Nvidia GeForce 940MX&lt;/td&gt;
&lt;td&gt;Intel HD Graphics 520&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#efefef"&gt;System&lt;/td&gt;
&lt;td&gt;Ubuntu 18.04.3 LTS&lt;/td&gt;
&lt;td&gt;Ubuntu 18.04.4 LTS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Algorithm&lt;/th&gt;
&lt;th&gt;Thinkpad T460p&lt;/th&gt;
&lt;th&gt;EliteBook-1040&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;ijk&lt;/th&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;1891&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj&lt;/th&gt;
&lt;td&gt;1072&lt;/td&gt;
&lt;td&gt;1455&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://en.wikipedia.org/wiki/NumPy"&gt;NumPy 1.18.1&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://martin-thoma.com/strassen-algorithm-in-python-java-cpp/"&gt;Strassen (LEAF_SIZE=8)&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;1780&lt;/td&gt;
&lt;td&gt;TODO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://martin-thoma.com/strassen-algorithm-in-python-java-cpp/"&gt;Strassen (LEAF_SIZE=64)&lt;/a&gt;&lt;/th&gt;
&lt;td&gt;1022&lt;/td&gt;
&lt;td&gt;TODO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj (2 threads)&lt;/th&gt;
&lt;td&gt;1611&lt;/td&gt;
&lt;td&gt;TODO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj (4 threads)&lt;/th&gt;
&lt;td&gt;762&lt;/td&gt;
&lt;td&gt;TODO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The interesting thing to note here is that the EliteBook is about the same
speed for the ikj-algorithm (even a tiny bit slower), but the EliteBook is way
slower for the ikj algorithm.&lt;/p&gt;
&lt;p&gt;You might also be interested in &lt;a href="https://pybenchmarks.org/"&gt;pybenchmarks.org&lt;/a&gt;
which seems to be similar to &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html"&gt;The Benchmarks Game&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="pypy"&gt;pypy&lt;/h3&gt;
&lt;p&gt;Quoting from the &lt;a href="https://opensource.googleblog.com/2010/04/pypy-12-released.html"&gt;PyPy 1.2 Release notes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PyPy is a reimplementation of Python in Python [...]. [PyPy] speed results
often beat CPython, ranging from being slightly slower, to speedups of up to
2x on real application code, to speedups of up to 10x on small benchmarks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another resource which states that PyPy is faster than CPython is &lt;a href="https://pybenchmarks.org/u64q/pypy.php"&gt;pybenchmarks.org&lt;/a&gt; (also &lt;a href="https://pybenchmarks.org/u64q/pypy3.php"&gt;PyPy 3&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;PyPy uses &lt;a href="https://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;Just-in-time compilation&lt;/a&gt; (JIT)
to get those speedups.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href="https://stackoverflow.com/q/2591879/562769"&gt;PyPy &amp;mdash; How can it possibly beat CPython?&lt;/a&gt;
for more information why PyPy is that fast.&lt;/p&gt;
&lt;h2 id="c_1"&gt;C++&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Algorithm&lt;/th&gt;
&lt;th&gt;g++-O0 -D _DEBUG -g&lt;/th&gt;
&lt;th&gt;-O3 -D NDEBUG -DBOOST_UBLAS_NDEBUG&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;ijk&lt;/th&gt;
&lt;td&gt;168.06&lt;/td&gt;
&lt;td&gt;45.05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;ikj&lt;/th&gt;
&lt;td&gt;89.67&lt;/td&gt;
&lt;td&gt;5.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;library-boost&lt;/th&gt;
&lt;td&gt;1002.36&lt;/td&gt;
&lt;td&gt;4.56&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debug flags / Optimization settings while compiling make a huge difference&lt;/li&gt;
&lt;li&gt;It's way faster than Python&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="using-c-from-python"&gt;Using C++ from Python&lt;/h2&gt;
&lt;p&gt;Obviously, C++ is way faster than pure Python. Astonishingly, C++ is also
faster than Numpy for this simple number crunching task. So the idea is to
combine both: Have the nice interface of Python with the raw computing power
of C++.&lt;/p&gt;
&lt;p&gt;However, there are many ways to combine the two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/subprocess.html"&gt;subprocess&lt;/a&gt; 🙄&lt;/li&gt;
&lt;li&gt;ctypes: &lt;a href="https://stackoverflow.com/a/5082294/562769"&gt;beginner tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.io/en/release-0.6/"&gt;cffi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cython&lt;/li&gt;
&lt;li&gt;c extensions: &lt;a href="https://github.com/jiffyclub/cext23"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybind11.readthedocs.io/en/stable/"&gt;pybind11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pyplusplus.readthedocs.io/en/latest/"&gt;Py++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://eev.ee/blog/2013/09/13/cython-versus-cffi/"&gt;Cython versus CFFI&lt;/a&gt;
helped me to wrap my head around this topic a bit.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bids.berkeley.edu/resources/videos/cffi-ctypes-cython-good-bad-and-ugly"&gt;Matti Picus&lt;/a&gt;: &lt;a href="https://www.youtube.com/watch?v=EABNkHRtMLo"&gt;CFFI, Ctypes, Cython: the Good, the Bad and the Ugly&lt;/a&gt; at EuroSciPy, 2018. (first presented at &lt;a href="https://pyvideo.org/pycon-israel-2017/cffi-ctypes-cython-the-good-the-bad-and-the-ugly.html"&gt;PyCon Israel 2017&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;2:10 Begins&lt;/li&gt;
&lt;li&gt;4:05 Matti Picus introduces himself&lt;/li&gt;
&lt;li&gt;5:02 He will use Mandelbrot as an example&lt;/li&gt;
&lt;li&gt;15:00 C implementation&lt;/li&gt;
&lt;li&gt;18:00 C done: 130ms (Python 3057ms)&lt;/li&gt;
&lt;li&gt;18:15 ctypes is writing python in c&lt;ul&gt;
&lt;li&gt;Take a shared object (*.so) or ddl&lt;/li&gt;
&lt;li&gt;20:48 ctypes.Structure&lt;/li&gt;
&lt;li&gt;24:00 Memory managment / free-ing memory&lt;/li&gt;
&lt;li&gt;36:00 Create *.so&lt;/li&gt;
&lt;li&gt;38:40 Load dll / *.so&lt;/li&gt;
&lt;li&gt;44:24 Timing - 1554ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;45:10 cffi - cffi came out as a replacement for ctypes. cffi is writing c in python. Use c as directly as possible.&lt;ul&gt;
&lt;li&gt;46:20 Load C header in Python; header needs to be in very specific format. IT CAN'T HANDLE MACROS!&lt;/li&gt;
&lt;li&gt;50:20 cffi memory management&lt;/li&gt;
&lt;li&gt;52:37 Call function&lt;/li&gt;
&lt;li&gt;53:33 Timing - 640ms&lt;/li&gt;
&lt;li&gt;53:50 Q/A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;55:36 Cython - can be used from jupyter notebook&lt;ul&gt;
&lt;li&gt;Cython has a own language; like a mix between C and Python&lt;/li&gt;
&lt;li&gt;56:58 Cython creates a shared object&lt;/li&gt;
&lt;li&gt;1:00:07 cpdef - a mixture between c and python&lt;/li&gt;
&lt;li&gt;1:02:12 Timing - 594ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1:02:49 &lt;a href="https://cppyy.readthedocs.io/en/latest/"&gt;cppyy&lt;/a&gt; - C++!&lt;ul&gt;
&lt;li&gt;1:03:30 LLVM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1:09 Final thoughts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Armin Rigo: &lt;a href="https://www.youtube.com/watch?v=ejUzVcvTLgI"&gt;CFFI: calling C from Python&lt;/a&gt; at EuroPython, 2016.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/36526708/562769"&gt;Comparing Python, Numpy, Numba and C++ for matrix multiplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Nuitka"&gt;Nuitka&lt;/a&gt; (&lt;a href="https://pybenchmarks.org/u64q/nuitka.php"&gt;Benchmark&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="C++"></category><category term="pypy"></category></entry><entry><title>Current Python Versions</title><link href="https://martin-thoma.com/current-python-versions/" rel="alternate"></link><published>2020-02-12T20:00:00+01:00</published><updated>2020-02-12T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-02-12:/current-python-versions/</id><summary type="html">&lt;p&gt;Which Python versions should my library support?&lt;/p&gt;
&lt;p&gt;For which version should I develop my web service / application?&lt;/p&gt;
&lt;p&gt;For the second question, I like to never take a x.y.0 version. Let them get
the patches out first.&lt;/p&gt;
&lt;h2 id="lifecycle-of-cpython"&gt;Lifecycle of cPython&lt;/h2&gt;
&lt;p&gt;I've asked which CPython versions get support right now …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Which Python versions should my library support?&lt;/p&gt;
&lt;p&gt;For which version should I develop my web service / application?&lt;/p&gt;
&lt;p&gt;For the second question, I like to never take a x.y.0 version. Let them get
the patches out first.&lt;/p&gt;
&lt;h2 id="lifecycle-of-cpython"&gt;Lifecycle of cPython&lt;/h2&gt;
&lt;p&gt;I've asked which CPython versions get support right now on SO, and &lt;a href="https://stackoverflow.com/q/60126561/562769"&gt;it got heavily downvoted&lt;/a&gt;.
But I got &lt;a href="https://devguide.python.org/#status-of-python-branches"&gt;the answer&lt;/a&gt;:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Python Version&lt;/th&gt;
&lt;th&gt;PEP&lt;/th&gt;
&lt;th&gt;First Release&lt;/th&gt;
&lt;th&gt;End-of-life&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.python.org/dev/peps/pep-0569/"&gt;PEP 569&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2019-10-14&lt;/td&gt;
&lt;td&gt;2024-10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.python.org/dev/peps/pep-0537/"&gt;PEP 537&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2018-06-27&lt;/td&gt;
&lt;td&gt;2023-06-27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.python.org/dev/peps/pep-0494/"&gt;PEP 494&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016-12-23&lt;/td&gt;
&lt;td&gt;2021-12-23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.python.org/dev/peps/pep-0478/"&gt;PEP 478&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015-09-13&lt;/td&gt;
&lt;td&gt;2020-09-13&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="python-interpreters"&gt;Python Interpreters&lt;/h2&gt;
&lt;p&gt;CPython is by far the most commonly used interpreter, but there are others.
PyPy for example. And currently only supports Python 3.6, although development
of Python 3.9 has already started (see &lt;a href="https://www.pypy.org/download.html"&gt;pypy.org&lt;/a&gt; for the latest state).&lt;/p&gt;
&lt;p&gt;So if you want to allow the usage of other interpreters, you might need to use
older Python versions.&lt;/p&gt;
&lt;h2 id="aws-lambda"&gt;AWS Lambda&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/python-programming-model.html"&gt;Documentation&lt;/a&gt; states:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Python Version&lt;/th&gt;
&lt;th&gt;boto3&lt;/th&gt;
&lt;th&gt;botocore&lt;/th&gt;
&lt;th&gt;Operating System&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python 3.8&lt;/td&gt;
&lt;td&gt;boto3-1.10.34&lt;/td&gt;
&lt;td&gt;botocore-1.13.34&lt;/td&gt;
&lt;td&gt;Amazon Linux 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python 3.8&lt;/td&gt;
&lt;td&gt;boto3-1.10.34&lt;/td&gt;
&lt;td&gt;botocore-1.13.34&lt;/td&gt;
&lt;td&gt;Amazon Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python 3.8&lt;/td&gt;
&lt;td&gt;boto3-1.10.34&lt;/td&gt;
&lt;td&gt;botocore-1.13.34&lt;/td&gt;
&lt;td&gt;Amazon Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python 2.7&lt;/td&gt;
&lt;td&gt;boto3-1.10.34&lt;/td&gt;
&lt;td&gt;botocore-1.13.34&lt;/td&gt;
&lt;td&gt;Amazon Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="distribution-defaults"&gt;Distribution Defaults&lt;/h2&gt;
&lt;p&gt;Linux distributions ship with Python. The default of those influences a lot
what is used. I've used the &lt;a href="https://packages.debian.org/search?suite=default&amp;sect;ion=all&amp;amp;arch=any&amp;amp;lang=de&amp;amp;searchon=names&amp;amp;keywords=python3"&gt;debian package search&lt;/a&gt; and the &lt;a href="https://packages.ubuntu.com/search?suite=disco&amp;amp;searchon=names&amp;amp;keywords=python"&gt;Ubuntu package search&lt;/a&gt; to get the numbers:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operating System&lt;/th&gt;
&lt;th&gt;Package "python"&lt;/th&gt;
&lt;th&gt;Package "python3"&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ubuntu 18.04 LTS&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.6.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ubuntu 19.04&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ubuntu 19.10&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debian (jessie)&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.4.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debian (stretch)&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.5.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debian (buster)&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debian (bullseye)&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debian (sid)&lt;/td&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;3.7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="python-download-statistics"&gt;Python Download Statistics&lt;/h2&gt;
&lt;p&gt;I'm &lt;a href="each x.y Python version"&gt;trying to get more recent data&lt;/a&gt;,
but here you see subtotals for some time before May 2019:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Python Version&lt;/th&gt;
&lt;th&gt;Sum of Hits&lt;/th&gt;
&lt;th&gt;% of Hits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3.7.x&lt;/td&gt;
&lt;td&gt;15,519,728&lt;/td&gt;
&lt;td&gt;58.36%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.6.x&lt;/td&gt;
&lt;td&gt;5,616,969&lt;/td&gt;
&lt;td&gt;21.12%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.7.x&lt;/td&gt;
&lt;td&gt;4,112,428&lt;/td&gt;
&lt;td&gt;15.46%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.5.x&lt;/td&gt;
&lt;td&gt;1,187,840&lt;/td&gt;
&lt;td&gt;4.47%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.8.x&lt;/td&gt;
&lt;td&gt;156,111&lt;/td&gt;
&lt;td&gt;0.59%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tfoot&gt;
&lt;tr&gt;
&lt;td&gt;Grand Total&lt;/td&gt;
&lt;td&gt;26,593,076&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tfoot&gt;
&lt;/table&gt;
&lt;h2 id="pipenv-download-statistics"&gt;pipenv download statistics&lt;/h2&gt;
&lt;p&gt;I'm still trying to get those.&lt;/p&gt;
&lt;h2 id="google-trends"&gt;Google Trends&lt;/h2&gt;
&lt;script src="https://ssl.gstatic.com/trends_nrtr/2051_RC11/embed_loader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt; trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"python 2.7","geo":"","time":"today 12-m"},{"keyword":"python 3.5","geo":"","time":"today 12-m"},{"keyword":"python 3.6","geo":"","time":"today 12-m"},{"keyword":"python 3.7","geo":"","time":"today 12-m"},{"keyword":"python 3.8","geo":"","time":"today 12-m"}],"category":0,"property":""}, {"exploreQuery":"q=python%202.7,python%203.5,python%203.6,python%203.7,python%203.8&amp;date=today 12-m,today 12-m,today 12-m,today 12-m,today 12-m","guestPath":"https://trends.google.de:443/trends/embed/"}); &lt;/script&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jetbrains: &lt;a href="https://www.jetbrains.com/de-de/lp/devecosystem-2019/python/"&gt;Python&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;li&gt;w3techs.com: &lt;a href="https://w3techs.com/technologies/details/pl-python/3"&gt;Usage statistics of Python Version 3 for websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackoverflow: &lt;a href="https://stackoverflow.com/q/38747864/562769"&gt;python runtime version statistics&lt;/a&gt;, 2016.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Python Packaging Course</title><link href="https://martin-thoma.com/python-packaging-course/" rel="alternate"></link><published>2020-02-08T20:00:00+01:00</published><updated>2020-02-08T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-02-08:/python-packaging-course/</id><summary type="html">&lt;p&gt;The Python Environment is old. Python development started before the internet.
Naturally, such a grown environment is messy:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://xkcd.com/1987/"&gt;&lt;img alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages." src="https://imgs.xkcd.com/comics/python_environment.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Python Environment&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In this course, you will learn the details about Python packaging and how all
of the tools related.&lt;/p&gt;
&lt;h2 id="application-types"&gt;Application Types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Library: Should be included in other code. It will never …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The Python Environment is old. Python development started before the internet.
Naturally, such a grown environment is messy:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="https://xkcd.com/1987/"&gt;&lt;img alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages." src="https://imgs.xkcd.com/comics/python_environment.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Python Environment&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In this course, you will learn the details about Python packaging and how all
of the tools related.&lt;/p&gt;
&lt;h2 id="application-types"&gt;Application Types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Library: Should be included in other code. It will never be executed
  directly. It does NOT have an entry point.&lt;/li&gt;
&lt;li&gt;CLI Application: Command line applications are supposed to be executed in
  their own environment. It receives input via the CLI, might access local
  storage or make web requests. It could read environment variables. It should
  be started, execute the tasks, and finish. It has an entry point.&lt;/li&gt;
&lt;li&gt;GUI Applications: Similar to command line applications, but with a GUI
  instead of a CLI.&lt;/li&gt;
&lt;li&gt;Service: Similar to a command line application, but it never finishes. It
  just runs in the background.&lt;/li&gt;
&lt;li&gt;Notebooks: Ad-hoc scripts which are primarily used for data analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="development-environment"&gt;Development Environment&lt;/h2&gt;
&lt;p&gt;I like the ZSH shell with the plugin &lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;Oh My ZSH&lt;/a&gt;
and &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; as an editor with many
different plugins; I've written down some of &lt;a href="https://martin-thoma.com/sublime-text/"&gt;my Sublime Text plugins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common alternatives to ZSH are &lt;a href="https://fishshell.com/"&gt;Fish&lt;/a&gt;. Common
alternatives to Sublime Text are &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; and &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;.
If you want more, &lt;a href="https://www.jetbrains.com/de-de/pycharm/"&gt;PyCharm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you have &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;git&lt;/a&gt;, &lt;a href="https://pypi.org/project/pipenv/"&gt;pipenv&lt;/a&gt;, &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.0/installation.html#install-cookiecutter"&gt;cookiecutter&lt;/a&gt; and &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; installed.&lt;/p&gt;
&lt;h2 id="starting-a-project"&gt;Starting a Project&lt;/h2&gt;
&lt;p&gt;Suppose you want to develop a new &lt;code&gt;awesome_project&lt;/code&gt;. Then you create a folder
and make it a git repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cookiecutter&lt;span class="w"&gt; &lt;/span&gt;https://github.com/MartinThoma/cookiecutter-python-package
full_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Martin&lt;span class="w"&gt; &lt;/span&gt;Thoma&lt;span class="o"&gt;]&lt;/span&gt;:
email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;info@martin-thoma.de&lt;span class="o"&gt;]&lt;/span&gt;:
github_username&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;MartinThoma&lt;span class="o"&gt;]&lt;/span&gt;:
project_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Awesome&lt;span class="w"&gt; &lt;/span&gt;Project&lt;span class="o"&gt;]&lt;/span&gt;:
project_slug&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;awesome_project&lt;span class="o"&gt;]&lt;/span&gt;:
project_short_description&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Awesome&lt;span class="w"&gt; &lt;/span&gt;Project&lt;span class="w"&gt; &lt;/span&gt;lets&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;feel&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;pure&lt;span class="w"&gt; &lt;/span&gt;awesomeness&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;awesome.&lt;span class="o"&gt;]&lt;/span&gt;:
version&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.0&lt;span class="o"&gt;]&lt;/span&gt;:
Select&lt;span class="w"&gt; &lt;/span&gt;open_source_license:
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;MIT&lt;span class="w"&gt; &lt;/span&gt;license
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;BSD&lt;span class="w"&gt; &lt;/span&gt;license
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Not&lt;span class="w"&gt; &lt;/span&gt;open&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;
Choose&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awesome_project
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure that a failing hard drive does cause only little loss of work and
to allow collaboration, we add a remote. &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;
and &lt;a href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt; are excellent choices. Once you created
an empty repository there, add it as a remote locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;git@github.com:MartinThoma/awesome_project.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before starting development, it's a good idea to make sure that you don't get
into trouble for having different versions of Python / packages.
&lt;a href="https://github.com/pypa/pipenv"&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt; is my tool of choice. At this point,
using Python 3.8 is a good idea (&lt;a href="https://devguide.python.org/#status-of-python-branches"&gt;current support status of Python versions&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Initialize the virtual environment&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8

&lt;span class="c1"&gt;# Import the requirements&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt

&lt;span class="c1"&gt;# Import the dev requirements&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--dev&lt;span class="w"&gt; &lt;/span&gt;--pre&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements-dev.txt

&lt;span class="c1"&gt;# Make sure the repository stays that nice&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="formatting"&gt;Formatting&lt;/h3&gt;
&lt;p&gt;By the mentioned cookiecutter template, formatting is to a big extend already
handled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt;: An opinionated formatter which respects PEP8 and implements a lot of &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;Flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt;: Sort imports&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only missing thing is a docstring style formatter. I like the
&lt;a href="https://numpydoc.readthedocs.io/en/latest/format.html"&gt;numpydoc docstring format&lt;/a&gt;
a lot.&lt;/p&gt;
&lt;p&gt;If you want to know more about formatting, I recommend to read my
&lt;a href="https://martin-thoma.com/python-style-guide/"&gt;Python style guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="unit-testing"&gt;Unit Testing&lt;/h3&gt;
&lt;p&gt;Before you start testing your application, you should decide which Python version
you want to support. An orientation should be which CPython versions currently
receive security updates (see &lt;a href="https://stackoverflow.com/q/60126561/562769"&gt;SO Question&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Python has multiple testing frameworks. Use &lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;.
It's extremely widespread, stable and super simple to use.&lt;/p&gt;
&lt;p&gt;The cookiecutter template installs a couple of useful plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-cov/"&gt;&lt;code&gt;pytest-cov&lt;/code&gt;&lt;/a&gt;: Generate a test
  coverage report. This helps you to identify sections where bugs cannot
  possibly be catched by a unittest.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-black/"&gt;&lt;code&gt;pytest-black&lt;/code&gt;&lt;/a&gt;: Check if black was
  applied.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-flake8/"&gt;&lt;code&gt;pytest-flake8&lt;/code&gt;&lt;/a&gt;: Another formatting test.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-mccabe/"&gt;&lt;code&gt;pytest-mccabe&lt;/code&gt;&lt;/a&gt;: Check if a
  section of your code might be too complicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might also want to give &lt;a href="https://pypi.org/project/mutmut/"&gt;&lt;code&gt;mutmut&lt;/code&gt;&lt;/a&gt; a try.
It could help you to discover which lines have been checked, but maybe not
thoroughly enough.&lt;/p&gt;
&lt;p&gt;To run all of your tests, execute &lt;code&gt;tox&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="documentation"&gt;Documentation&lt;/h3&gt;
&lt;p&gt;If you develop a library, you need documentation. For the other application
types not so much.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; as a documentation generator
and &lt;a href="https://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt; as a hosting platforms are the
tools of choice.&lt;/p&gt;
&lt;h3 id="security"&gt;Security&lt;/h3&gt;
&lt;p&gt;If you develop an application, you need to be sure to update your dependencies
if vulnerabilities occur. The package &lt;a href="https://pypi.org/project/bandit/"&gt;&lt;code&gt;bandit&lt;/code&gt;&lt;/a&gt;
and the services &lt;a href="https://snyk.io/"&gt;snyk.io&lt;/a&gt; / &lt;a href="https://pyup.io/"&gt;pyup.io&lt;/a&gt;
can help you to detect those cases.&lt;/p&gt;
&lt;h3 id="versions"&gt;Versions&lt;/h3&gt;
&lt;p&gt;It is good practice to make &lt;code&gt;[module].__version__&lt;/code&gt; available. Of course, it
should be the same as the version you see via &lt;code&gt;pip freeze&lt;/code&gt;. And then it would
be nice if the git commit whould have a &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging"&gt;git tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, you can all of that manually. If you want a tool, &lt;a href="https://pypi.org/project/bumpversion/"&gt;bumpversion&lt;/a&gt;
is pretty widespread. However, it is not maintained. So some people use &lt;a href="https://pypi.org/project/bump2version/"&gt;bump2version&lt;/a&gt;.
I'm not too sure if I would use that.&lt;/p&gt;
&lt;h3 id="project-structure"&gt;Project Structure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;awesome-project  # (git root)
&amp;boxvr;&amp;boxh;&amp;boxh; awesome_project  # This is the package
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; cli.py
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py  # Required until Python 3.3; I'd still add it
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; _version.py
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; requirements-dev.txt
&amp;boxvr;&amp;boxh;&amp;boxh; requirements.txt
&amp;boxvr;&amp;boxh;&amp;boxh; setup.cfg
&amp;boxvr;&amp;boxh;&amp;boxh; setup.py
&amp;boxvr;&amp;boxh;&amp;boxh; tests
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; test_awesome_project.py
&amp;boxur;&amp;boxh;&amp;boxh; tox.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="setuptools-files_1"&gt;Setuptools Files&lt;/h2&gt;
&lt;p&gt;If you have the described project structure, then packaging is not a big deal.&lt;/p&gt;
&lt;h3 id="setuppy"&gt;setup.py&lt;/h3&gt;
&lt;p&gt;Make sure it has at least&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="setupcfg"&gt;setup.cfg&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;setup.cfg&lt;/code&gt; is read by &lt;code&gt;setuptools.setup()&lt;/code&gt;. It can contain a lot of things,
but a minimal one would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[metadata]&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;awesome_project&lt;/span&gt;

&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Martin Thoma&lt;/span&gt;
&lt;span class="na"&gt;author_email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;info@martin-thoma.de&lt;/span&gt;

&lt;span class="c1"&gt;# keep in sync with awesome_project/_version.py&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;0.1.0&lt;/span&gt;

&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Awesome Project lets you feel the pure awesomeness of awesome.&lt;/span&gt;
&lt;span class="na"&gt;long_description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;file: README.md&lt;/span&gt;
&lt;span class="na"&gt;long_description_content_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;text/markdown&lt;/span&gt;

&lt;span class="na"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;MIT license&lt;/span&gt;

&lt;span class="k"&gt;[options]&lt;/span&gt;
&lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;find:&lt;/span&gt;
&lt;span class="na"&gt;python_requires&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;gt;= 3.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="creating-a-distribution_1"&gt;Creating a distribution&lt;/h2&gt;
&lt;p&gt;Create a source distribution file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;sdist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a wheel distribution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;bdist_wheel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="share-the-package"&gt;Share the Package&lt;/h2&gt;
&lt;p&gt;After creating it, upload it to PyPI with &lt;a href="https://pypi.org/project/twine/"&gt;twine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do so, first setup your &lt;code&gt;~/.pypirc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[distutils]&lt;/span&gt;
&lt;span class="na"&gt;index-servers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;pypi&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;pypitest&lt;/span&gt;

&lt;span class="k"&gt;[pypi]&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;YourUsername&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;plaintext whatever you had&lt;/span&gt;

&lt;span class="k"&gt;[pypitest]&lt;/span&gt;
&lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://test.pypi.org/legacy/&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;YourUsername&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;plaintext whatever you had&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can upload the distributions you've built before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;twine&lt;span class="w"&gt; &lt;/span&gt;upload&lt;span class="w"&gt; &lt;/span&gt;--repository&lt;span class="w"&gt; &lt;/span&gt;pypitest&lt;span class="w"&gt; &lt;/span&gt;dist/*

&lt;span class="c1"&gt;# Alternatively, if you want to sign it with GPG:&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;twine&lt;span class="w"&gt; &lt;/span&gt;upload&lt;span class="w"&gt; &lt;/span&gt;--repository&lt;span class="w"&gt; &lt;/span&gt;pypitest&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;dist/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="info"&gt;There is &lt;code&gt;python setup.py upload&lt;/code&gt; as well. It didn't use https for quite a while. While this changed, the de-facto standard is still twine. For &lt;a href="https://pypi.org/project/twine/"&gt;reasons&lt;/a&gt;.&lt;/div&gt;
&lt;h2 id="package-management-modules"&gt;Package Management Modules&lt;/h2&gt;
&lt;h3 id="distutils"&gt;distutils&lt;/h3&gt;
&lt;p&gt;Deprecated. Use setuptools.&lt;/p&gt;
&lt;h2 id="distribute_1"&gt;distribute&lt;/h2&gt;
&lt;p&gt;Was a fork of setuptools which got merged back. Use setuptools.&lt;/p&gt;
&lt;h3 id="setuptools"&gt;setuptools&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html"&gt;Setuptools&lt;/a&gt; is used in the &lt;code&gt;setup.py&lt;/code&gt; and gives you a lot of commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;--help-commands
Standard&lt;span class="w"&gt; &lt;/span&gt;commands:
&lt;span class="w"&gt;  &lt;/span&gt;build&lt;span class="w"&gt;             &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;everything&lt;span class="w"&gt; &lt;/span&gt;needed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;install
&lt;span class="w"&gt;  &lt;/span&gt;build_py&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pure&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;modules&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;copy&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;build_ext&lt;span class="w"&gt;         &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;C/C++&lt;span class="w"&gt; &lt;/span&gt;extensions&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;compile/link&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;build_clib&lt;span class="w"&gt;        &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;C/C++&lt;span class="w"&gt; &lt;/span&gt;libraries&lt;span class="w"&gt; &lt;/span&gt;used&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;extensions
&lt;span class="w"&gt;  &lt;/span&gt;build_scripts&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scripts&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;copy&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;fixup&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#! line)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;clean&lt;span class="w"&gt;             &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;temporary&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'build'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;install&lt;span class="w"&gt;           &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;everything&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;span class="w"&gt;  &lt;/span&gt;install_lib&lt;span class="w"&gt;       &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;modules&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;extensions&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;pure&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;install_headers&lt;span class="w"&gt;   &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;C/C++&lt;span class="w"&gt; &lt;/span&gt;header&lt;span class="w"&gt; &lt;/span&gt;files
&lt;span class="w"&gt;  &lt;/span&gt;install_scripts&lt;span class="w"&gt;   &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;scripts&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;otherwise&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;install_data&lt;span class="w"&gt;      &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;files
&lt;span class="w"&gt;  &lt;/span&gt;sdist&lt;span class="w"&gt;             &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;distribution&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;tarball,&lt;span class="w"&gt; &lt;/span&gt;zip&lt;span class="w"&gt; &lt;/span&gt;file,&lt;span class="w"&gt; &lt;/span&gt;etc.&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;register&lt;span class="w"&gt;          &lt;/span&gt;register&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;distribution&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;index
&lt;span class="w"&gt;  &lt;/span&gt;bdist&lt;span class="w"&gt;             &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;built&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;binary&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;distribution
&lt;span class="w"&gt;  &lt;/span&gt;bdist_dumb&lt;span class="w"&gt;        &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dumb"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;built&lt;span class="w"&gt; &lt;/span&gt;distribution
&lt;span class="w"&gt;  &lt;/span&gt;bdist_rpm&lt;span class="w"&gt;         &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;RPM&lt;span class="w"&gt; &lt;/span&gt;distribution
&lt;span class="w"&gt;  &lt;/span&gt;bdist_wininst&lt;span class="w"&gt;     &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;executable&lt;span class="w"&gt; &lt;/span&gt;installer&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;MS&lt;span class="w"&gt; &lt;/span&gt;Windows
&lt;span class="w"&gt;  &lt;/span&gt;check&lt;span class="w"&gt;             &lt;/span&gt;perform&lt;span class="w"&gt; &lt;/span&gt;some&lt;span class="w"&gt; &lt;/span&gt;checks&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;package
&lt;span class="w"&gt;  &lt;/span&gt;upload&lt;span class="w"&gt;            &lt;/span&gt;upload&lt;span class="w"&gt; &lt;/span&gt;binary&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;PyPI

Extra&lt;span class="w"&gt; &lt;/span&gt;commands:
&lt;span class="w"&gt;  &lt;/span&gt;bdist_wheel&lt;span class="w"&gt;       &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;wheel&lt;span class="w"&gt; &lt;/span&gt;distribution
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;shortcut&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="w"&gt; &lt;/span&gt;commands
&lt;span class="w"&gt;  &lt;/span&gt;bdist_egg&lt;span class="w"&gt;         &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"egg"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;distribution
&lt;span class="w"&gt;  &lt;/span&gt;develop&lt;span class="w"&gt;           &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'development mode'&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;dist_info&lt;span class="w"&gt;         &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;.dist-info&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;span class="w"&gt;  &lt;/span&gt;easy_install&lt;span class="w"&gt;      &lt;/span&gt;Find/get/install&lt;span class="w"&gt; &lt;/span&gt;Python&lt;span class="w"&gt; &lt;/span&gt;packages
&lt;span class="w"&gt;  &lt;/span&gt;egg_info&lt;span class="w"&gt;          &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;distribution&lt;span class="err"&gt;'&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;.egg-info&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;span class="w"&gt;  &lt;/span&gt;install_egg_info&lt;span class="w"&gt;  &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;.egg-info&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;package
&lt;span class="w"&gt;  &lt;/span&gt;rotate&lt;span class="w"&gt;            &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;older&lt;span class="w"&gt; &lt;/span&gt;distributions,&lt;span class="w"&gt; &lt;/span&gt;keeping&lt;span class="w"&gt; &lt;/span&gt;N&lt;span class="w"&gt; &lt;/span&gt;newest&lt;span class="w"&gt; &lt;/span&gt;files
&lt;span class="w"&gt;  &lt;/span&gt;saveopts&lt;span class="w"&gt;          &lt;/span&gt;save&lt;span class="w"&gt; &lt;/span&gt;supplied&lt;span class="w"&gt; &lt;/span&gt;options&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;setup.cfg&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;file
&lt;span class="w"&gt;  &lt;/span&gt;setopt&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;option&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;setup.cfg&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;another&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;file
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;unit&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;after&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;-place&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;deprecated&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;upload_docs&lt;span class="w"&gt;       &lt;/span&gt;Upload&lt;span class="w"&gt; &lt;/span&gt;documentation&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;PyPI
&lt;span class="w"&gt;  &lt;/span&gt;flake8&lt;span class="w"&gt;            &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;Flake8&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;modules&lt;span class="w"&gt; &lt;/span&gt;registered&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;setup.py

usage:&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;global_opts&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cmd1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cmd1_opts&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cmd2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cmd2_opts&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;or:&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cmd1&lt;span class="w"&gt; &lt;/span&gt;cmd2&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;or:&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;--help-commands
&lt;span class="w"&gt;   &lt;/span&gt;or:&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;cmd&lt;span class="w"&gt; &lt;/span&gt;--help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="package-distribution-formats_1"&gt;Package Distribution Formats&lt;/h2&gt;
&lt;p&gt;There are 3 common formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source distributions&lt;/li&gt;
&lt;li&gt;Egg&lt;/li&gt;
&lt;li&gt;Wheel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Egg is outdated and can be replaced by either source distributions or wheel (&lt;a href="https://packaging.python.org/discussions/wheel-vs-egg/"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id="package-manager"&gt;Package manager&lt;/h2&gt;
&lt;p&gt;PIP is short for 'PIP installs Python'. Use it. Don't use &lt;code&gt;easy_install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;PIP commands are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  install       Install packages.
  download      Download packages.
  uninstall     Uninstall packages.
  freeze        Output installed packages in requirements format.
  list          List installed packages.
  show          Show information about installed packages.
  check         Verify installed packages have compatible dependencies.
  config        Manage local and global configuration.
  search        Search PyPI for packages.
  wheel         Build wheels from your requirements.
  hash          Compute hashes of package archives.
  completion    A helper command used for command completion.
  debug         Show information useful for debugging.
  help          Show help for commands.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alexander VanTol: &lt;a href="https://realpython.com/pipenv-guide/"&gt;Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;packaging.python.org:&lt;ul&gt;
&lt;li&gt;Tutorial: &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;Packaging Python Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/glossary/"&gt;Glossary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knewton: &lt;a href="https://medium.com/knerd/the-nine-circles-of-python-dependency-hell-481d53e3e025"&gt;The Nine Circles of Python Dependency Hell&lt;/a&gt;, 2015&lt;/li&gt;
&lt;li&gt;Martin Thoma: &lt;a href="https://stackoverflow.com/q/60084441/562769"&gt;How does Python / pip handle conflicting transitive dependencies?&lt;/a&gt;, 2020&lt;/li&gt;
&lt;li&gt;&lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html"&gt;Building and Distributing Packages with Setuptools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tldrlegal.com/"&gt;Tl;DR Legal&lt;/a&gt;: Compare licenses&lt;/li&gt;
&lt;li&gt;Conda&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs.html"&gt;Building conda packages from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html#overview"&gt;Building conda packages with conda skeleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Martin Thoma: &lt;a href="https://stackoverflow.com/q/59040271/562769"&gt;Is there a point in creating a conda package from an PyPI package?&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other Packaging stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://logix4u.net/component/content/article/27-tutorials/44-how-to-create-windows-executable-exe-from-python-script"&gt;How to create Windows executable (.exe) from Python script&lt;/a&gt;: You need to work on a Windows system for this.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.py2exe.org/"&gt;py2exe&lt;/a&gt; - &lt;a href="http://www.py2exe.org/index.cgi/Tutorial"&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/113014/562769"&gt;py2exe - generate single executable file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/q/17709813/562769"&gt;compiling .py into windows AND mac executables on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://milkator.wordpress.com/2014/07/19/windows-executable-from-python-developing-in-ubuntu/"&gt;Windows .exe*cutable from Python developing in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/q/2950971/562769"&gt;Cross-compiling a Python script on Linux into a Windows executable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="git"></category><category term="black"></category><category term="isort"></category><category term="cookiecutter"></category></entry><entry><title>Virtual Environments</title><link href="https://martin-thoma.com/virtual-environments/" rel="alternate"></link><published>2020-02-08T20:00:00+01:00</published><updated>2020-02-08T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-02-08:/virtual-environments/</id><summary type="html">&lt;p&gt;A virtual environment is an isolated Python environments. It has it's own
installed &lt;code&gt;site-packages&lt;/code&gt; which can be different from the systems
&lt;code&gt;site-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR: &lt;code&gt;pipenv&lt;/code&gt; is your friend; it allows you to forget about the others.&lt;/p&gt;
&lt;h2 id="virtualenv"&gt;virtualenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; was created by Ian Bicking. The first version on PyPI is from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A virtual environment is an isolated Python environments. It has it's own
installed &lt;code&gt;site-packages&lt;/code&gt; which can be different from the systems
&lt;code&gt;site-packages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR: &lt;code&gt;pipenv&lt;/code&gt; is your friend; it allows you to forget about the others.&lt;/p&gt;
&lt;h2 id="virtualenv"&gt;virtualenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; was created by Ian Bicking. The first version on PyPI is from
2007.&lt;/p&gt;
&lt;h2 id="pyvenv"&gt;pyvenv&lt;/h2&gt;
&lt;p&gt;Was deprecated in favour of &lt;code&gt;python -m venv&lt;/code&gt;. It was removed with Python 3.8.&lt;/p&gt;
&lt;h2 id="venv"&gt;venv&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/venv.html"&gt;&lt;code&gt;venv&lt;/code&gt; module&lt;/a&gt; was
added in Python 3.3 with &lt;a href="https://www.python.org/dev/peps/pep-0405/"&gt;PEP 405&lt;/a&gt;
(2012).&lt;/p&gt;
&lt;h2 id="pyenv"&gt;pyenv&lt;/h2&gt;
&lt;p&gt;pyenv lets you switch between multiple versions of Python.&lt;/p&gt;
&lt;p&gt;Installation: See &lt;a href="https://github.com/pyenv/pyenv#installation"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list
Available&lt;span class="w"&gt; &lt;/span&gt;versions:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.3
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.1
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9-dev
&lt;span class="w"&gt;  &lt;/span&gt;activepython-2.7.14
&lt;span class="w"&gt;  &lt;/span&gt;activepython-3.5.4
&lt;span class="w"&gt;  &lt;/span&gt;activepython-3.6.0
&lt;span class="w"&gt;  &lt;/span&gt;anaconda-1.4.0
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;lot&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;including&lt;span class="w"&gt; &lt;/span&gt;anaconda,&lt;span class="w"&gt; &lt;/span&gt;miniconda,&lt;span class="w"&gt; &lt;/span&gt;activepython,&lt;span class="w"&gt; &lt;/span&gt;ironpython,&lt;span class="w"&gt; &lt;/span&gt;pypy,&lt;span class="w"&gt; &lt;/span&gt;stackless,&lt;span class="w"&gt; &lt;/span&gt;....&lt;span class="o"&gt;]&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.1
Downloading&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.1.tar.xz...
-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz
Installing&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.1...
Installed&lt;span class="w"&gt; &lt;/span&gt;Python-3.8.1&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.1

$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;versions
*&lt;span class="w"&gt; &lt;/span&gt;system&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.16
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.5.7
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.9
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.7.4
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8-dev

$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;--version
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.17
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--version
pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;.3.1&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/lib/python3.6/site-packages/pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6&lt;span class="o"&gt;)&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;pyenv-experiment&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3.8.1"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pyenv-experiment/.python-version"&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pyenv-experiment

$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;--version
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.1
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--version
pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;.2.3&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.1/lib/python3.8/site-packages/pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pipenv"&gt;pipenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pypa/pipenv"&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt; automatically creates and manages a
virtualenv for your projects, as well as adds/removes packages from your
Pipfile as you install/uninstall packages. It also generates the Pipfile.lock,
which is used to produce deterministic builds. It helps creating reproducible
environments.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; uses &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;pyenv&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;First, create a virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8
Creating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;virtualenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;project&amp;hellip;
Pipfile:&lt;span class="w"&gt; &lt;/span&gt;/home/moose/GitHub/clana/Pipfile
Using&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.1/bin/python3.8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;virtualenv&amp;hellip;
⠏&lt;span class="w"&gt; &lt;/span&gt;Creating&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment...Already&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;interpreter&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.1/bin/python3.8
Using&lt;span class="w"&gt; &lt;/span&gt;base&lt;span class="w"&gt; &lt;/span&gt;prefix&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/home/moose/.pyenv/versions/3.8.1'&lt;/span&gt;
New&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;executable&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/share/virtualenvs/clana-oPEDiD9W/bin/python3.8
Also&lt;span class="w"&gt; &lt;/span&gt;creating&lt;span class="w"&gt; &lt;/span&gt;executable&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/share/virtualenvs/clana-oPEDiD9W/bin/python
Installing&lt;span class="w"&gt; &lt;/span&gt;setuptools,&lt;span class="w"&gt; &lt;/span&gt;pip,&lt;span class="w"&gt; &lt;/span&gt;wheel...
&lt;span class="k"&gt;done&lt;/span&gt;.
Running&lt;span class="w"&gt; &lt;/span&gt;virtualenv&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;interpreter&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.pyenv/versions/3.8.1/bin/python3.8

✔&lt;span class="w"&gt; &lt;/span&gt;Successfully&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment!
Virtualenv&lt;span class="w"&gt; &lt;/span&gt;location:&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/share/virtualenvs/clana-oPEDiD9W
requirements.txt&lt;span class="w"&gt; &lt;/span&gt;found,&lt;span class="w"&gt; &lt;/span&gt;instead&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;Pipfile!&lt;span class="w"&gt; &lt;/span&gt;Converting&amp;hellip;
✔&lt;span class="w"&gt; &lt;/span&gt;Success!
Warning:&lt;span class="w"&gt; &lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;now&lt;span class="w"&gt; &lt;/span&gt;contains&lt;span class="w"&gt; &lt;/span&gt;pinned&lt;span class="w"&gt; &lt;/span&gt;versions,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;requirements.txt&lt;span class="w"&gt; &lt;/span&gt;did.
We&lt;span class="w"&gt; &lt;/span&gt;recommend&lt;span class="w"&gt; &lt;/span&gt;updating&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;specify&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;version,&lt;span class="w"&gt; &lt;/span&gt;instead.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Activate the environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;shell
Launching&lt;span class="w"&gt; &lt;/span&gt;subshell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment&amp;hellip;
&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/share/virtualenvs/clana-oPEDiD9W/bin/activate

$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;--version
pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;.0.2&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/share/virtualenvs/clana-oPEDiD9W/lib/python3.8/site-packages/pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set your &lt;code&gt;Pipfile.lock&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;lock
Locking&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;dev-packages&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dependencies&amp;hellip;
Locking&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;packages&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dependencies&amp;hellip;
✔&lt;span class="w"&gt; &lt;/span&gt;Success!
Updated&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;310e7d&lt;span class="o"&gt;)&lt;/span&gt;!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure your environment has exactly the stuff installed that you need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;sync
Installing&lt;span class="w"&gt; &lt;/span&gt;dependencies&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;310e7d&lt;span class="o"&gt;)&lt;/span&gt;&amp;hellip;
&lt;span class="w"&gt;  &lt;/span&gt;🐍&lt;span class="w"&gt;   &lt;/span&gt;▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/14&lt;span class="w"&gt; &lt;/span&gt;&amp;mdash;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:06
All&lt;span class="w"&gt; &lt;/span&gt;dependencies&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;now&lt;span class="w"&gt; &lt;/span&gt;up-to-date!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="docker_1"&gt;Docker&lt;/h2&gt;
&lt;p&gt;If you want more isolation, have a look at &lt;a href="https://martin-thoma.com/docker/"&gt;Docker&lt;/a&gt;.
I use the &lt;a href="https://hub.docker.com/_/python"&gt;&lt;code&gt;python:3.8-slim-buster&lt;/code&gt;&lt;/a&gt; (February 2020).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; can then look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;python:3.8-slim-buster&lt;/span&gt;

&lt;span class="c"&gt;# Update and install extra packages&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;build-essential

&lt;span class="c"&gt;# Install project dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt&lt;span class="w"&gt; &lt;/span&gt;/opt/app/requirements.txt
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/opt/app&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt

&lt;span class="c"&gt;# Install project&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;/opt/app
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--no-deps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/41573588/562769"&gt;What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipenv/issues/3493#issuecomment-511708312"&gt;Generate requirements.txt from Pipfile.lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/virtualenvwrapper/"&gt;&lt;code&gt;virtualenvwrapper&lt;/code&gt;&lt;/a&gt;: extensions to virtualenv&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="venv"></category><category term="virtualenv"></category></entry><entry><title>PyPI Analysis 2020</title><link href="https://martin-thoma.com/pypi-2020/" rel="alternate"></link><published>2020-01-09T20:00:00+01:00</published><updated>2020-01-09T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2020-01-09:/pypi-2020/</id><summary type="html">&lt;p&gt;I've created an &lt;a href="https://martin-thoma.com/analyzing-pypi-metadata/"&gt;introductory post&lt;/a&gt;
where I looked at the packages meta data in a very superficial way.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://martin-thoma.com/analyzing-pypi-metadata-2/"&gt;second post&lt;/a&gt; I
analyzed the relationships between packages by looking at a dependency graph.&lt;/p&gt;
&lt;p&gt;Now, in the beginning of 2020, I've updated the code and ran my analysis again.
Have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've created an &lt;a href="https://martin-thoma.com/analyzing-pypi-metadata/"&gt;introductory post&lt;/a&gt;
where I looked at the packages meta data in a very superficial way.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://martin-thoma.com/analyzing-pypi-metadata-2/"&gt;second post&lt;/a&gt; I
analyzed the relationships between packages by looking at a dependency graph.&lt;/p&gt;
&lt;p&gt;Now, in the beginning of 2020, I've updated the code and ran my analysis again.
Have fun 🙂&lt;/p&gt;
&lt;p&gt;Out of 208&amp;thinsp;492 packages, only 176&amp;thinsp;107 packages are used.&lt;/p&gt;
&lt;p&gt;There are 90,682 authors of Python packages. The ten
most active authors are:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Created packages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8948&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNKNOWN&lt;/td&gt;
&lt;td&gt;1399&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Guardians&lt;/td&gt;
&lt;td&gt;1140&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tecnativa, Odoo Community Association (OCA)&lt;/td&gt;
&lt;td&gt;554&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenStack&lt;/td&gt;
&lt;td&gt;466&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hfpython&lt;/td&gt;
&lt;td&gt;460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Paul Sokolovsky&lt;/td&gt;
&lt;td&gt;450&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft Corporation&lt;/td&gt;
&lt;td&gt;394&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Eficent, Odoo Community Association (OCA)&lt;/td&gt;
&lt;td&gt;329&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Akretion,Odoo Community Association (OCA)&lt;/td&gt;
&lt;td&gt;290&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="maximum-length"&gt;Maximum length&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;NULL values&lt;/th&gt;
&lt;th&gt;Maximum Length&lt;/th&gt;
&lt;th&gt;Entry&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;Aaaaaaaaaaaaaaaaaaa-aaaaaaaaa-aaaaaaasa-aaaaaaasa-aaaaasaa-aaaaaaasa-bbbbbbbbbbb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;560&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;&lt;a href="https://pypi.org/project/softwarefabrica.django.utils/"&gt;1.0dev-BZR-r115-panta-elasticworld.org-20100520155735-sf3yrsr0pvyvlm8m&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stable_version&lt;/td&gt;
&lt;td&gt;560&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;UNKNOWN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;release_url&lt;/td&gt;
&lt;td&gt;560&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;https://pypi.org/project/softwarefabrica.django.appserver/1.0dev-BZR-r10-panta-elasticworld.org-20091023132843-vitk6k7e5qlvhej5/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package_url&lt;/td&gt;
&lt;td&gt;560&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;td&gt;&lt;a href="https://pypi.org/project/Aaaaaaaaaaaaaaaaaaa-aaaaaaaaa-aaaaaaasa-aaaaaaasa-aaaaasaa-aaaaaaasa-bbbbbbbbbbb/"&gt;https://pypi.org/project/Aaaaaaaaaaaaaaaaaaa-aaaaaaaaa-aaaaaaasa-aaaaaaasa-aaaaasaa-aaaaaaasa-bbbbbbbbbbb/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bugtrack_url&lt;/td&gt;
&lt;td&gt;560&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;7717&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;td&gt;采集百度手机卫士 360手机卫士 搜狗号码通三个平台对手机号码的标注信息. 1.1.0: 加入搜狗API采集方式，但与从网页采集结果是一致的。 1.2.0：采用多线程，将不同源分开采集，避免互相影响。 1.3.1：加入命令行工具，加入对IP的处理工具。 1.3.3：可以使用--file xxx.csv 命令指定文件。 1.3.4：改用百度和360手机版本，减少下载量；尝试遇到反爬退出。 1.3.5：完善使用代理下载。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;home_page&lt;/td&gt;
&lt;td&gt;17927&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;&lt;a href="http://127.0.0.1:8888/USK@~osOPnNLdMLVrYVNTahLufdwOuMhhC4GkpIHulnSm04,bwAmjkK-BZZnj-bujBQehwgGqUM1AUFhzTW4hcDGXQ0,AQACAAE/infocalypse_and_pyFreenet/5/"&gt;http://127.0.0.1:8888 ...&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;author&lt;/td&gt;
&lt;td&gt;8948&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;['Diemer, Jens', 'Hall, Dave', 'van der Boor, Diederik', 'Chainz, Adam', 'Cornehl, Denis', 'Fahed, Sami', 'Hoppe, Johannes', 'Iakovlev, Maksim', 'Lagovas', 'Larin, Nikita', 'Lavin, Mark', 'Lis&amp;aacute;k, Peter', 'Marques de Ara&amp;uacute;jo, Rodrigo Pinheiro', 'Mihelac, Bo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;author_email&lt;/td&gt;
&lt;td&gt;16619&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;jan-gerd.tenberge@uni-muenster.de, cuihtlauac.alvarado@orange.com, juan@grigera.com.ar, lyj7694@gmail.com, pi8027@gmail.com, zhuyanzi@gmail.com, sree314@gmail.com, jochen.schroeder@chalmers.se, alex.fu27@gmail.com, hi@xiangji.me, hakon.j.d.johnsen@ntnu.no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;license&lt;/td&gt;
&lt;td&gt;44374&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;Copyright &amp;copy; 2012 Kenan Yildirim.[...]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keywords&lt;/td&gt;
&lt;td&gt;92634&lt;/td&gt;
&lt;td&gt;4033&lt;/td&gt;
&lt;td&gt;&lt;span title="algorithmic,algotrading,altcoin,altcoins,api,arbitrage,backtest,backtesting,bitcoin,bot,btc,cny,coin,coins,crypto,cryptocurrency,crypto currency,crypto market,currency,currencies,darkcoin,dash,digital currency,doge,dogecoin,e-commerce,etc,eth,ether,ethereum,exchange,exchanges,eur,framework,invest,investing,investor,library,light,litecoin,ltc,market,market data,markets,merchandise,merchant,minimal,ohlcv,order,orderbook,order book,price,price data,pricefeed,private,public,ripple,strategy,ticker,tickers,toolkit,trade,trader,trading,usd,volume,xbt,xrp,zec,zerocoin,1Broker,1BTCXE,ACX,acx.io,allcoin,allcoin.com,ANX,ANXPro,bibox,bibox.com,Binance,binance.com,bit2c.co.il,Bit2C,BitBay,BitBays,bitcoincoid,Bitcoin.co.id,Bitfinex,bitFLyer,bitflyer.jp,bithumb,bithumb.com,bitlish,BitMarket,BitMEX,Bitso,Bitstamp,Bittrex,BL3P,Bleutrade,bleutrade.com,BlinkTrade,braziliex,braziliex.com,BtcBox,btcbox.co.jp,BTCC,BTCChina,BTC-e,BTCe,BTCExchange,btcexchange.ph,BTC Markets,btcmarkets,btcmarkets.net,BTCTrader,btctrader.com,btc-trade.com.ua,BTC Trade UA,BTCTurk,btcturk.com,BTCX,btc-x,bter,Bter.com,BX.in.th,ccex,C-CEX,cex,CEX.IO,CHBTC,ChileBit,chilebit.net,coincheck,CoinExchange,coinexchange.io,coingi,coingi.com,CoinMarketCap,CoinMate,Coinsecure,CoinSpot,coinspot.com.au,Crypto Capital,cryptocapital.co,DSX,dsx.uk,EXMO,flowBTC,flowbtc.com,FoxBit,foxbit.exchange,FYB-SE,FYB-SG,Gatecoin,GDAX,Gemini,HitBTC,Huobi,HuobiPRO,huobi.pro,Independent Reserve,independentreserve.com,itBit,jubi.com,Kraken,Kucoin,Kuna,LakeBTC,lakebtc.com,LiveCoin,Liqui,liqui.io,luno,mercado,MercadoBitcoin,mercadobitcoin.br,mixcoins,mixcoins.com,nova,novaexchange,novaexchange.com,OKCoin,OKCoin.com,OKCoin.cn,OKEX,okex.com,Paymium,Poloniex,QuadrigaCX,Qryptos,QUOINEX,Southxchange,SurBitcoin,surbitcoin.com,Tidex,tidex.com,TheRockTrading,UrduBit,urdubit.com,Vaultoro,VBTC,vbtc.exchange,vbtc.vn,VirWoX,WEX,wex.nz,xBTCe,xbtce.com,YoBit,yobit.net,YUNBI,Zaif,ZB,1btcxe.com,Allcoin,anxpro.com,anybits.com,Anybits,bcex.top,BCEX,Bibox,big.one,BigONE,bitbank.cc,bitbank,bitbay.net,bitfinex.com,bitFlyer,bitforex.com,Bitforex,Bithumb,bitibu.com,Bitibu,bitkk.com,bitkk,bitlish.com,Bitlish,bitmarket.pl,bitmarket.net,bitmex.com,bitsane.com,Bitsane,bitso.com,bitstamp.net,bittrex.com,bit-z.com,Bit-Z,bl3p.eu,bitonic.nl,Braziliex,btc-alpha.com,BTC-Alpha,btcchina.com,btctrade.im,BtcTrade.im,buda.com,Buda,bx.in.th,c-cex.com,cex.io,trade.chbtc.com,cobinhood.com,COBINHOOD,coinbase.com,Coinbase,prime.coinbase.com,Coinbase Prime,pro.coinbase.com,Coinbase Pro,coincheck.com,coinegg.com,CoinEgg,coinex.com,CoinEx,coinfalcon.com,CoinFalcon,coinfloor.co.uk,coinfloor,Coingi,coinmarketcap.com,coinmate.io,coinnest.co.kr,coinnest,coinone.co.kr,CoinOne,cointiger.pro,CoinTiger,coolcoin.com,CoolCoin,coss.io,COSS,crex24.com,CREX24,cryptonbtc.com,Crypton,deribit.com,Deribit,ethfinex.com,Ethfinex,exmo.me,exx.com,EXX,fcoin.com,FCoin,trader.flowbtc.com,fybse.se,fybsg.com,gatecoin.com,gate.io,Gate.io,gdax.com,gemini.com,getbtc.org,GetBTC,hadax.com,HADAX,hitbtc.com,Huobi Pro,huobi.com.ru,Huobi Russia,ice3x.com,ice3x.co.za,ICE3X,indodax.com,INDODAX,itbit.com,kkex.com,KKEX,kraken.com,kucoin.com,KuCoin,kuna.io,lbank.info,LBank,liquid.com,Liquid,livecoin.net,luno.com,lykke.com,Lykke,mercadobitcoin.com.br,Mercado Bitcoin,MixCoins,negociecoins.com.br,NegocieCoins,Novaexchange,okcoin.cn,OKCoin CNY,okcoin.com,OKCoin USD,paymium.com,poloniex.com,quadrigacx.com,rightbtc.com,RightBTC,southxchange.com,SouthXchange,stronghold.co,Stronghold,theocean.trade,The Ocean,therocktrading.com,tidebit.com,TideBit,uex.com,UEX,upbit.com,Upbit,vaultoro.com,virwox.com,yunbi.com,zaif.jp,zb.com,fcoinjp.com,FCoinJP,binance.je,Binance Jersey,bequant.io,Bequant,mandalaex.com,Mandala,dx.exchange,DX.Exchange,oceanex.pro.com,OceanEx,flowbtc.com.br,foxbit.com.br,latoken.com,Latoken,bitmart.com,BitMart,digifinex.vip,DigiFinex,idex.market,IDEX,adara.io,Adara,binance.us,Binance US,whitebit.com,WhiteBit,bitmax.io,BitMax,bytetrade.com,ByteTrade,ftx.com,FTX,{hostname},bw.com,stex.com,STEX,BW,timex.io,TimeX,bitz.com"&gt;algorithmic,algotrading,altcoin,altcoins,api,arbitrage,backtest,backtesting,bitcoin,bot,...&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requires_python&lt;/td&gt;
&lt;td&gt;112090&lt;/td&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;&amp;gt;=2.7, &amp;gt;=2.7.1, !=3.0, !=3.0.*, !=3.1, !=3.1.*, !=3.2, !=3.2.*, !=3.3, !=3.3.*, !=3.4, !=3.4.*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maintainer&lt;/td&gt;
&lt;td&gt;140232&lt;/td&gt;
&lt;td&gt;145&lt;/td&gt;
&lt;td&gt;Brian Drawert, Kevin Sanft, Sean Matthew, George Hall, Dalton Nickerson, Samuel Hodges, Emma Weisgerber, Eliot Dixon, Ghilman Brock, W.R. Jackson&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maintainer_email&lt;/td&gt;
&lt;td&gt;140745&lt;/td&gt;
&lt;td&gt;137&lt;/td&gt;
&lt;td&gt;xgzhao0201@gmail.com,                  fuyuhaoy@gmail.com,                  guangrenna@gmail.com,                  shulinluo999@gmail.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;platform&lt;/td&gt;
&lt;td&gt;126048&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;&lt;span title="This is to inform you that we have receive your mail now regarding payment you are about to receirve what :$4,500.00 in next i hour like you said to us and assure you that once we confirm the fee your ATM CARD will get to you within 48 hours and that is m"&gt;[spam]&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;download_url&lt;/td&gt;
&lt;td&gt;129479&lt;/td&gt;
&lt;td&gt;183&lt;/td&gt;
&lt;td&gt;&lt;a href="http://pypi.python.org/packages/source/s/softwarefabrica.django.appserver/softwarefabrica.django.appserver-1.0dev-BZR-r10-panta-elasticworld.org-20091023132843-vitk6k7e5qlvhej5.tar.gz"&gt;softwarefabrica.django.appserver&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="platforms"&gt;Platforms&lt;/h2&gt;
&lt;p&gt;I recommend to use the &lt;a href="https://pypi.org/classifiers/"&gt;&lt;code&gt;Operating System ::&lt;/code&gt; and &lt;code&gt;Environment ::&lt;/code&gt; Trove Classifiers&lt;/a&gt;.
Goes in line with &lt;a href="https://www.python.org/dev/peps/pep-0345/#platform-multiple-use"&gt;PEP 345&lt;/a&gt;&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;126048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNKNOWN&lt;/td&gt;
&lt;td&gt;61530&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANY&lt;/td&gt;
&lt;td&gt;12163&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LINUX&lt;/td&gt;
&lt;td&gt;1644&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALL&lt;/td&gt;
&lt;td&gt;1146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OS Independent&lt;/td&gt;
&lt;td&gt;1018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;494&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;493&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSIX&lt;/td&gt;
&lt;td&gt;458&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Posix; MacOS X; Windows&lt;/td&gt;
&lt;td&gt;340&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNIX&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aix&lt;/td&gt;
&lt;td&gt;152&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Platform Independent&lt;/td&gt;
&lt;td&gt;130&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MacOS X&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSIX,Windows&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WIN32&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cross Platform&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GNU/Linux&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Independent&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Posix; MacOS X&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="licenses"&gt;Licenses&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;th&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MIT&lt;/td&gt;
&lt;td&gt;53876&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;44374&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNKNOWN&lt;/td&gt;
&lt;td&gt;17531&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BSD&lt;/td&gt;
&lt;td&gt;14056&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIT LICENSE&lt;/td&gt;
&lt;td&gt;8221&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPL&lt;/td&gt;
&lt;td&gt;5720&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AGPL-3&lt;/td&gt;
&lt;td&gt;5680&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPLV3&lt;/td&gt;
&lt;td&gt;3902&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;APACHE 2.0&lt;/td&gt;
&lt;td&gt;3340&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;APACHE LICENSE 2.0&lt;/td&gt;
&lt;td&gt;2587&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="size"&gt;Size&lt;/h2&gt;
&lt;p&gt;What is currently the biggest Python package?&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Release Number&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu90&lt;/td&gt;
&lt;td&gt;1.6.0b20200104&lt;/td&gt;
&lt;td&gt;600MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu92&lt;/td&gt;
&lt;td&gt;1.6.0b20200104&lt;/td&gt;
&lt;td&gt;598MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pypi.org/project/de422/"&gt;de422&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2009.1&lt;/td&gt;
&lt;td&gt;545MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu101mkl&lt;/td&gt;
&lt;td&gt;1.6.0b20191125&lt;/td&gt;
&lt;td&gt;531MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu101&lt;/td&gt;
&lt;td&gt;1.6.0b20191125&lt;/td&gt;
&lt;td&gt;496MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cntk-gpu&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;td&gt;493MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu100mkl&lt;/td&gt;
&lt;td&gt;1.6.0b20191125&lt;/td&gt;
&lt;td&gt;490MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu100&lt;/td&gt;
&lt;td&gt;1.6.0b20191125&lt;/td&gt;
&lt;td&gt;454MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu92mkl&lt;/td&gt;
&lt;td&gt;1.6.0b20191118&lt;/td&gt;
&lt;td&gt;452MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu90mkl&lt;/td&gt;
&lt;td&gt;1.6.0b20191115&lt;/td&gt;
&lt;td&gt;427MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu91mkl&lt;/td&gt;
&lt;td&gt;1.3.1b20180926&lt;/td&gt;
&lt;td&gt;389MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h2o4gpu&lt;/td&gt;
&lt;td&gt;0.3.2&lt;/td&gt;
&lt;td&gt;366MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tensorflow-gpu&lt;/td&gt;
&lt;td&gt;2.1.0rc2&lt;/td&gt;
&lt;td&gt;357MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tensorflow&lt;/td&gt;
&lt;td&gt;2.1.0rc2&lt;/td&gt;
&lt;td&gt;356MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mxnet-cu91&lt;/td&gt;
&lt;td&gt;1.3.1b20180926&lt;/td&gt;
&lt;td&gt;346MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It is strange, that the deep learning frameworks are way bigger than the rest.
I've tried to find a &lt;a href="https://stackoverflow.com/q/59721109/562769"&gt;Stackoverflow Question&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="package-type"&gt;Package type&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;th&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sdist&lt;/td&gt;
&lt;td&gt;180,307&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_wheel&lt;/td&gt;
&lt;td&gt;106,515&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_egg&lt;/td&gt;
&lt;td&gt;8,150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_wininst&lt;/td&gt;
&lt;td&gt;1201&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_dumb&lt;/td&gt;
&lt;td&gt;804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_rpm&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_msi&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdist_dmg&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Going through the downloaded files, I see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;157,395&amp;times; tar.gz&lt;/li&gt;
&lt;li&gt;28,653&amp;times; whl&lt;/li&gt;
&lt;li&gt;8,815&amp;times; zip&lt;/li&gt;
&lt;li&gt;3,925&amp;times; egg&lt;/li&gt;
&lt;li&gt;208&amp;times; tar.bz2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependencies"&gt;Dependencies&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/01/pypi-imported-packages.png"&gt;&lt;img alt="Weighted module imports by Python packages" src="../images/2020/01/pypi-imported-packages.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Weighted module imports by Python packages&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/01/pypi-imported-packages-count.png"&gt;&lt;img alt="Module imports of Python packages" src="../images/2020/01/pypi-imported-packages-count.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Module imports of Python packages&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/01/pypi-imported-packages-excluding-system.png"&gt;&lt;img alt="Module imports of Python packages, excluding system packages" src="../images/2020/01/pypi-imported-packages-excluding-system.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Module imports of Python packages, excluding system packages&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2020/01/pypi-imported-packages-excluding-system-count.png"&gt;&lt;img alt="Module imports of Python modules excluding system modules" src="../images/2020/01/pypi-imported-packages-excluding-system-count.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Module imports of Python modules excluding system modules&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="build-systems"&gt;Build Systems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Total Packages Analyzed: 198,996&lt;/li&gt;
&lt;li&gt;Packages which have a &lt;code&gt;setup.cfg&lt;/code&gt;: 148,222&lt;/li&gt;
&lt;li&gt;Packages which have a &lt;code&gt;pyproject.toml&lt;/code&gt;: 2,957&lt;/li&gt;
&lt;li&gt;Packages which have a &lt;code&gt;setup.cfg&lt;/code&gt; and a &lt;code&gt;pyproject.toml&lt;/code&gt;: 1027&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="setupcfg"&gt;setup.cfg&lt;/h3&gt;
&lt;p&gt;Out of the 148,222 packages, the following number of packages have the given sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;143,724&amp;times; egg_info&lt;/li&gt;
&lt;li&gt;24,972&amp;times; metadata&lt;/li&gt;
&lt;li&gt;15,693&amp;times; bdist_wheel&lt;/li&gt;
&lt;li&gt;9,613&amp;times; flake8&lt;/li&gt;
&lt;li&gt;6,722&amp;times; aliases&lt;/li&gt;
&lt;li&gt;5,727&amp;times; tool:pytest&lt;/li&gt;
&lt;li&gt;4,312&amp;times; wheel&lt;/li&gt;
&lt;li&gt;3,239&amp;times; bumpversion&lt;/li&gt;
&lt;li&gt;2,801&amp;times; bumpversion:file:setup.py&lt;/li&gt;
&lt;li&gt;2,520&amp;times; options&lt;/li&gt;
&lt;li&gt;2,511&amp;times; nosetests&lt;/li&gt;
&lt;li&gt;2,447&amp;times; build_sphinx&lt;/li&gt;
&lt;li&gt;2,176&amp;times; isort&lt;/li&gt;
&lt;li&gt;1,679&amp;times; files&lt;/li&gt;
&lt;li&gt;1,588&amp;times; coverage:run&lt;/li&gt;
&lt;li&gt;1,392&amp;times; versioneer&lt;/li&gt;
&lt;li&gt;1,140&amp;times; upload_sphinx&lt;/li&gt;
&lt;li&gt;1,038&amp;times; entry_points&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="egg_info"&gt;egg_info&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;143,701&amp;times; tag_build&lt;/li&gt;
&lt;li&gt;143,680&amp;times; tag_date&lt;/li&gt;
&lt;li&gt;51,925&amp;times; tag_svn_revision&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="metadata"&gt;metadata&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;18,844&amp;times; description-file&lt;/li&gt;
&lt;li&gt;4,237&amp;times; name&lt;/li&gt;
&lt;li&gt;3,963&amp;times; author&lt;/li&gt;
&lt;li&gt;3,452&amp;times; license_file&lt;/li&gt;
&lt;li&gt;2,809&amp;times; license&lt;/li&gt;
&lt;li&gt;2,596&amp;times; description&lt;/li&gt;
&lt;li&gt;2,481&amp;times; url&lt;/li&gt;
&lt;li&gt;2,471&amp;times; classifiers&lt;/li&gt;
&lt;li&gt;2,217&amp;times; long_description&lt;/li&gt;
&lt;li&gt;2,048&amp;times; version&lt;/li&gt;
&lt;li&gt;1,965&amp;times; author_email&lt;/li&gt;
&lt;li&gt;1,869&amp;times; keywords&lt;/li&gt;
&lt;li&gt;1,842&amp;times; author-email&lt;/li&gt;
&lt;li&gt;1,758&amp;times; summary&lt;/li&gt;
&lt;li&gt;1,589&amp;times; home-page&lt;/li&gt;
&lt;li&gt;1,574&amp;times; classifier&lt;/li&gt;
&lt;li&gt;1,195&amp;times; long_description_content_type&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bdist_wheel"&gt;bdist_wheel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;15,137&amp;times; universal&lt;/li&gt;
&lt;li&gt;369&amp;times; python-tag&lt;/li&gt;
&lt;li&gt;144&amp;times; azure-namespace-package&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="flake8"&gt;flake8&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;6,823&amp;times; exclude&lt;/li&gt;
&lt;li&gt;5,229&amp;times; max-line-length&lt;/li&gt;
&lt;li&gt;3,975&amp;times; ignore&lt;/li&gt;
&lt;li&gt;1,288&amp;times; max-complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="aliases"&gt;aliases&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;4,989&amp;times; test&lt;/li&gt;
&lt;li&gt;773&amp;times; release&lt;/li&gt;
&lt;li&gt;200&amp;times; docs&lt;/li&gt;
&lt;li&gt;174&amp;times; dev&lt;/li&gt;
&lt;li&gt;127&amp;times; dists&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="toolpytest"&gt;tool:pytest&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;3,395&amp;times; addopts&lt;/li&gt;
&lt;li&gt;1,611&amp;times; testpaths&lt;/li&gt;
&lt;li&gt;1,355&amp;times; norecursedirs&lt;/li&gt;
&lt;li&gt;1,002&amp;times; python_files&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="wheel"&gt;wheel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;4,234&amp;times; universal&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bumpversion"&gt;bumpversion&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;3,237&amp;times; current_version&lt;/li&gt;
&lt;li&gt;3,099&amp;times; commit&lt;/li&gt;
&lt;li&gt;3,083&amp;times; tag&lt;/li&gt;
&lt;li&gt;219&amp;times; tag_name&lt;/li&gt;
&lt;li&gt;163&amp;times; parse&lt;/li&gt;
&lt;li&gt;160&amp;times; serialize&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bumpversionfilesetuppy"&gt;bumpversion:file:setup.py&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2,129&amp;times; search&lt;/li&gt;
&lt;li&gt;2,120&amp;times; replace&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="options"&gt;options&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,985&amp;times; packages&lt;/li&gt;
&lt;li&gt;1,932&amp;times; install_requires&lt;/li&gt;
&lt;li&gt;1,106&amp;times; include_package_data&lt;/li&gt;
&lt;li&gt;1,029&amp;times; zip_safe&lt;/li&gt;
&lt;li&gt;995&amp;times; python_requires&lt;/li&gt;
&lt;li&gt;742&amp;times; setup_requires&lt;/li&gt;
&lt;li&gt;442&amp;times; package_dir&lt;/li&gt;
&lt;li&gt;293&amp;times; tests_require&lt;/li&gt;
&lt;li&gt;164&amp;times; scripts&lt;/li&gt;
&lt;li&gt;161&amp;times; py_modules&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="nosetests"&gt;nosetests&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,514&amp;times; cover-package&lt;/li&gt;
&lt;li&gt;1,167&amp;times; with-coverage&lt;/li&gt;
&lt;li&gt;1,072&amp;times; verbosity&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="build_sphinx"&gt;build_sphinx&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2,049&amp;times; source-dir&lt;/li&gt;
&lt;li&gt;2,013&amp;times; build-dir&lt;/li&gt;
&lt;li&gt;1,845&amp;times; all_files&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="isort"&gt;isort&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,659&amp;times; line_length&lt;/li&gt;
&lt;li&gt;1,302&amp;times; multi_line_output&lt;/li&gt;
&lt;li&gt;1,136&amp;times; known_first_party&lt;/li&gt;
&lt;li&gt;1,092&amp;times; not_skip&lt;/li&gt;
&lt;li&gt;865&amp;times; default_section&lt;/li&gt;
&lt;li&gt;849&amp;times; include_trailing_comma&lt;/li&gt;
&lt;li&gt;673&amp;times; skip&lt;/li&gt;
&lt;li&gt;603&amp;times; force_single_line&lt;/li&gt;
&lt;li&gt;553&amp;times; combine_as_imports&lt;/li&gt;
&lt;li&gt;508&amp;times; lines_after_imports&lt;/li&gt;
&lt;li&gt;424&amp;times; known_third_party&lt;/li&gt;
&lt;li&gt;377&amp;times; sections&lt;/li&gt;
&lt;li&gt;349&amp;times; force_grid_wrap&lt;/li&gt;
&lt;li&gt;339&amp;times; forced_separate&lt;/li&gt;
&lt;li&gt;298&amp;times; use_parentheses&lt;/li&gt;
&lt;li&gt;251&amp;times; force_alphabetical_sort&lt;/li&gt;
&lt;li&gt;203&amp;times; indent&lt;/li&gt;
&lt;li&gt;154&amp;times; atomic&lt;/li&gt;
&lt;li&gt;150&amp;times; known_standard_library&lt;/li&gt;
&lt;li&gt;150&amp;times; known_django&lt;/li&gt;
&lt;li&gt;126&amp;times; order_by_type&lt;/li&gt;
&lt;li&gt;108&amp;times; lines_between_types&lt;/li&gt;
&lt;li&gt;101&amp;times; skip_glob&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="files"&gt;files&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,565&amp;times; packages&lt;/li&gt;
&lt;li&gt;203&amp;times; data_files&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="coveragerun"&gt;coverage:run&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;846&amp;times; branch&lt;/li&gt;
&lt;li&gt;840&amp;times; omit&lt;/li&gt;
&lt;li&gt;830&amp;times; source&lt;/li&gt;
&lt;li&gt;162&amp;times; include&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="versioneer"&gt;versioneer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,388&amp;times; vcs&lt;/li&gt;
&lt;li&gt;1,386&amp;times; tag_prefix&lt;/li&gt;
&lt;li&gt;1,385&amp;times; versionfile_source&lt;/li&gt;
&lt;li&gt;1,345&amp;times; style&lt;/li&gt;
&lt;li&gt;1,325&amp;times; versionfile_build&lt;/li&gt;
&lt;li&gt;983&amp;times; parentdir_prefix&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="upload_sphinx"&gt;upload_sphinx&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,138&amp;times; upload-dir&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="entry_points"&gt;entry_points&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;707&amp;times; console_scripts&lt;/li&gt;
&lt;li&gt;143&amp;times; oslo.config.opts&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="optionsentry_points"&gt;options.entry_points&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;605&amp;times; console_scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="coveragereport"&gt;coverage:report&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;504&amp;times; exclude_lines&lt;/li&gt;
&lt;li&gt;468&amp;times; show_missing&lt;/li&gt;
&lt;li&gt;178&amp;times; omit&lt;/li&gt;
&lt;li&gt;156&amp;times; fail_under&lt;/li&gt;
&lt;li&gt;124&amp;times; precision&lt;/li&gt;
&lt;li&gt;108&amp;times; ignore_errors&lt;/li&gt;
&lt;li&gt;100&amp;times; skip_covered&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="optionsextras_require"&gt;options.extras_require&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;255&amp;times; testing&lt;/li&gt;
&lt;li&gt;243&amp;times; test&lt;/li&gt;
&lt;li&gt;229&amp;times; docs&lt;/li&gt;
&lt;li&gt;219&amp;times; dev&lt;/li&gt;
&lt;li&gt;137&amp;times; tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pytest"&gt;pytest&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;452&amp;times; addopts&lt;/li&gt;
&lt;li&gt;329&amp;times; norecursedirs&lt;/li&gt;
&lt;li&gt;230&amp;times; python_files&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pep8"&gt;pep8&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;507&amp;times; max-line-length&lt;/li&gt;
&lt;li&gt;316&amp;times; ignore&lt;/li&gt;
&lt;li&gt;221&amp;times; exclude&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="optionspackagesfind"&gt;options.packages.find&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;448&amp;times; where&lt;/li&gt;
&lt;li&gt;427&amp;times; exclude&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="extract_messages"&gt;extract_messages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;633&amp;times; output_file&lt;/li&gt;
&lt;li&gt;448&amp;times; keywords&lt;/li&gt;
&lt;li&gt;355&amp;times; mapping_file&lt;/li&gt;
&lt;li&gt;242&amp;times; width&lt;/li&gt;
&lt;li&gt;240&amp;times; add_comments&lt;/li&gt;
&lt;li&gt;105&amp;times; msgid_bugs_address&lt;/li&gt;
&lt;li&gt;101&amp;times; copyright_holder&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="sdist"&gt;sdist&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;621&amp;times; formats&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="compile_catalog"&gt;compile_catalog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;708&amp;times; directory&lt;/li&gt;
&lt;li&gt;626&amp;times; domain&lt;/li&gt;
&lt;li&gt;219&amp;times; statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="update_catalog"&gt;update_catalog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;604&amp;times; domain&lt;/li&gt;
&lt;li&gt;603&amp;times; input_file&lt;/li&gt;
&lt;li&gt;602&amp;times; output_dir&lt;/li&gt;
&lt;li&gt;215&amp;times; previous&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pycodestyle"&gt;pycodestyle&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;391&amp;times; max-line-length&lt;/li&gt;
&lt;li&gt;274&amp;times; ignore&lt;/li&gt;
&lt;li&gt;231&amp;times; exclude&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="check-manifest"&gt;check-manifest&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;644&amp;times; ignore&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="easy_install"&gt;easy_install&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;289&amp;times; zip_ok&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="mypy"&gt;mypy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;461&amp;times; ignore_missing_imports&lt;/li&gt;
&lt;li&gt;215&amp;times; check_untyped_defs&lt;/li&gt;
&lt;li&gt;201&amp;times; disallow_untyped_defs&lt;/li&gt;
&lt;li&gt;170&amp;times; warn_unused_ignores&lt;/li&gt;
&lt;li&gt;155&amp;times; strict_optional&lt;/li&gt;
&lt;li&gt;154&amp;times; python_version&lt;/li&gt;
&lt;li&gt;154&amp;times; warn_redundant_casts&lt;/li&gt;
&lt;li&gt;129&amp;times; warn_unused_configs&lt;/li&gt;
&lt;li&gt;121&amp;times; no_implicit_optional&lt;/li&gt;
&lt;li&gt;119&amp;times; disallow_untyped_calls&lt;/li&gt;
&lt;li&gt;116&amp;times; disallow_incomplete_defs&lt;/li&gt;
&lt;li&gt;112&amp;times; follow_imports&lt;/li&gt;
&lt;li&gt;108&amp;times; warn_return_any&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="zestreleaser"&gt;zest.releaser&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;324&amp;times; create-wheel&lt;/li&gt;
&lt;li&gt;120&amp;times; python-file-with-version&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="global"&gt;global&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;309&amp;times; setup-hooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="upload_docs"&gt;upload_docs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;394&amp;times; upload-dir&lt;/li&gt;
&lt;li&gt;142&amp;times; show-response&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="zopeskel"&gt;zopeskel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;440&amp;times; template&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bdist_rpm"&gt;bdist_rpm&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;216&amp;times; requires&lt;/li&gt;
&lt;li&gt;194&amp;times; doc_files&lt;/li&gt;
&lt;li&gt;155&amp;times; release&lt;/li&gt;
&lt;li&gt;124&amp;times; packager&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="init_catalog"&gt;init_catalog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;283&amp;times; domain&lt;/li&gt;
&lt;li&gt;283&amp;times; input_file&lt;/li&gt;
&lt;li&gt;281&amp;times; output_dir&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pbr"&gt;pbr&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;157&amp;times; warnerrors&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="pydocstyle"&gt;pydocstyle&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;125&amp;times; ignore&lt;/li&gt;
&lt;li&gt;105&amp;times; add_ignore&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="yapf"&gt;yapf&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;211&amp;times; based_on_style&lt;/li&gt;
&lt;li&gt;198&amp;times; column_limit&lt;/li&gt;
&lt;li&gt;107&amp;times; dedent_closing_brackets&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="optionspackage_data"&gt;options.package_data&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;121&amp;times; *&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="devpiupload"&gt;devpi:upload&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;248&amp;times; formats&lt;/li&gt;
&lt;li&gt;225&amp;times; no-vcs&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="test"&gt;test&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;120&amp;times; extras&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="install"&gt;install&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;117&amp;times; optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="coveragehtml"&gt;coverage:html&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;163&amp;times; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pyprojecttoml"&gt;pyproject.toml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2,524&amp;times; build-system&lt;/li&gt;
&lt;li&gt;2,409&amp;times; tool&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="build-system"&gt;build-system&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2,524&amp;times; requires&lt;/li&gt;
&lt;li&gt;2,173&amp;times; build-backend&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tool"&gt;tool&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1,511&amp;times; poetry&lt;/li&gt;
&lt;li&gt;590&amp;times; black&lt;/li&gt;
&lt;li&gt;444&amp;times; flit&lt;/li&gt;
&lt;li&gt;163&amp;times; towncrier&lt;/li&gt;
&lt;li&gt;159&amp;times; isort&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="filenames_1"&gt;Filenames&lt;/h2&gt;
&lt;p&gt;Which filenames appear in many packages?&lt;/p&gt;
&lt;p&gt;The following is a count of all filenames. If one package has a particular
filename often, it will bubble up higher in this list. I did remove some as
I think they are not relevant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;641,194&amp;times; &lt;strong&gt;init&lt;/strong&gt;: 608,289&amp;times; &lt;strong&gt;init&lt;/strong&gt;.py, 16,628&amp;times; &lt;strong&gt;init&lt;/strong&gt;.pyc, 4,238&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-36.pyc, 3,027&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-37.pyc, 1,897&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-35.pyc, 1,471&amp;times; &lt;strong&gt;init&lt;/strong&gt;.pyi, 1,278&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-38.pyc, 1,036&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-34.pyc, 665&amp;times; .&lt;strong&gt;&lt;em&gt;init&lt;/em&gt;_.py, 622&amp;times; &lt;/strong&gt;init__$py.class, 532&amp;times; &lt;strong&gt;init&lt;/strong&gt;.pypy3-510.pyc, 382&amp;times; &lt;strong&gt;init&lt;/strong&gt;.py_tmpl, 284&amp;times; &lt;strong&gt;init&lt;/strong&gt;.pxd, 266&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-33.pyc, 162&amp;times; &lt;strong&gt;init&lt;/strong&gt;.data.json, 162&amp;times; &lt;strong&gt;init&lt;/strong&gt;.meta.json, 128&amp;times; &lt;strong&gt;init&lt;/strong&gt;.cpython-32.pyc, 127&amp;times; &lt;strong&gt;init&lt;/strong&gt;.pyo&lt;/li&gt;
&lt;li&gt;510,292&amp;times; &lt;a href="https://setuptools.readthedocs.io/en/latest/formats.html"&gt;Package&lt;/a&gt;: 148,723&amp;times; SOURCES.txt, 148,622&amp;times; dependency_links.txt, 107,514&amp;times; requires.txt, 51,390&amp;times; entry_points.txt, 45,710&amp;times; not-zip-safe, 8,333&amp;times; zip-safe&lt;/li&gt;
&lt;li&gt;313,683&amp;times; &lt;a href="https://www.python.org/dev/peps/pep-0314/#including-metadata-in-packages"&gt;PKG-INFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;294,148&amp;times; Web: 19,434&amp;times; index.html, 12,759&amp;times; index.js, 8,220&amp;times; Main.js, 4,348&amp;times; base.html, 2,470&amp;times; editor_plugin.js, 2,403&amp;times; style.css, 2,400&amp;times; editor_plugin_src.js, 2,386&amp;times; jquery.js, 2,356&amp;times; MathMenu.js, 2,351&amp;times; FontWarnings.js, 2,344&amp;times; HelpDialog.js, 2,292&amp;times; MathML.js, 2,292&amp;times; HTML-CSS.js, 2,292&amp;times; TeX.js, 2,014&amp;times; bootstrap.min.css, ...&lt;/li&gt;
&lt;li&gt;250,185&amp;times; Translations: 35,953&amp;times; django.mo, 33,291&amp;times; django.po, 5,087&amp;times; es.po, 4,967&amp;times; fr.po, 4,669&amp;times; de.po, 4,087&amp;times; pt_BR.po, 4,079&amp;times; sl.po, 3,828&amp;times; it.po, 3,360&amp;times; zh_CN.po, 3,347&amp;times; nl.po, 3,343&amp;times; hr.po, 3,229&amp;times; ca.po, 3,219&amp;times; djangojs.po, 3,175&amp;times; fi.po, 3,159&amp;times; djangojs.mo, 3,147&amp;times; tr.po, 3,004&amp;times; pt.po, 2,656&amp;times; ru.po, 2,646&amp;times; ro.po, 2,500&amp;times; hu.po, 2,482&amp;times; ar.po, 2,464&amp;times; pl.po, 2,457&amp;times; gl.po, 2,395&amp;times; cs.po, 2,295&amp;times; bg.po, 2,271&amp;times; sv.po, 2,267&amp;times; lt.po, 2,187&amp;times; zh_TW.po, 2,106&amp;times; nb.po, 2,083&amp;times; ja.po, 2,083&amp;times; mk.po, 2,064&amp;times; et.po, 2,056&amp;times; sk.po, 2,055&amp;times; nl_NL.po, 2,038&amp;times; mn.po, 2,015&amp;times; es_CR.po, 2,009&amp;times; hr_HR.po, 2,007&amp;times; es_MX.po, ...&lt;/li&gt;
&lt;li&gt;248,156&amp;times; Images: 7,141&amp;times; icon.png, 2,360&amp;times; favicon.ico, 1,597&amp;times; 0020.png, 1,596&amp;times; 00A0.png, 1,579&amp;times; file.png, 1,516&amp;times; logo.png, 1,503&amp;times; plus.png, ...&lt;/li&gt;
&lt;li&gt;177,525&amp;times; top_level.txt&lt;/li&gt;
&lt;li&gt;169,056&amp;times; README: 77,667&amp;times; README.md, 59,883&amp;times; README.rst, 12,849&amp;times; README.txt, 10,912&amp;times; README, 2,861&amp;times; readme.rst, 2,419&amp;times; readme.md, 1,365&amp;times; readme.txt, 832&amp;times; Readme.md, 268&amp;times; Readme.txt&lt;/li&gt;
&lt;li&gt;168,289&amp;times; setup.py&lt;/li&gt;
&lt;li&gt;148,752&amp;times; setup.cfg&lt;/li&gt;
&lt;li&gt;71,267&amp;times; LICENSE: 46,717&amp;times; LICENSE, 15,570&amp;times; LICENSE.txt, 2,192&amp;times; LICENSE.GPL, 1,984&amp;times; LICENSE.md, 1,313&amp;times; LICENSE.rst, 1,254&amp;times; license, 839&amp;times; license.txt, 812&amp;times; license.rst, 298&amp;times; License.txt, 152&amp;times; LICENSE.TXT, 136&amp;times; license.md&lt;/li&gt;
&lt;li&gt;67,659&amp;times; MANIFEST.in&lt;/li&gt;
&lt;li&gt;59,266&amp;times; *.json: 14,198&amp;times; metadata.json, 12,301&amp;times; package.json, 4,395&amp;times; pbr.json, 3,890&amp;times; manifest.json, 2,144&amp;times; bower.json, 1,808&amp;times; service-2.json, 1,714&amp;times; paginators-1.json, 1,623&amp;times; data.json, ...&lt;/li&gt;
&lt;li&gt;32,294&amp;times; utils.py&lt;/li&gt;
&lt;li&gt;28,914&amp;times; METADATA&lt;/li&gt;
&lt;li&gt;28,883&amp;times; WHEEL&lt;/li&gt;
&lt;li&gt;28,872&amp;times; RECORD&lt;/li&gt;
&lt;li&gt;26,432&amp;times; YAML: 7,486&amp;times; main.yml, 6,285&amp;times; .travis.yml, 1,672&amp;times; main.yaml, 1,404&amp;times; index.yaml, 745&amp;times; appveyor.yml, 704&amp;times; command.yaml, 680&amp;times; services.yaml, 650&amp;times; .readthedocs.yml, 560&amp;times; config.yml, 446&amp;times; config.yaml, 446&amp;times; cli.yaml, 423&amp;times; docker-compose.yml, 394&amp;times; .pre-commit-config.yaml, 337&amp;times; .zuul.yaml, 298&amp;times; post.yaml, 279&amp;times; .gitlab-ci.yml, 254&amp;times; run.yaml, 245&amp;times; environment.yml, 217&amp;times; Chart.yaml, 205&amp;times; snapcraft.yaml, 200&amp;times; basic.yaml, ...&lt;/li&gt;
&lt;li&gt;25,421&amp;times; C / C++ Files: 591&amp;times; config.hpp, 564&amp;times; main.cpp, 504&amp;times; main.c, 494&amp;times; list.hpp, 467&amp;times; vector.hpp, 419&amp;times; set.hpp, 407&amp;times; map.hpp, 364&amp;times; bind.hpp, 354&amp;times; deque.hpp, 325&amp;times; less.hpp, 322&amp;times; less_equal.hpp, 320&amp;times; greater.hpp, 315&amp;times; greater_equal.hpp, 306&amp;times; and.hpp, 305&amp;times; equal_to.hpp, 295&amp;times; iterator.hpp, 293&amp;times; placeholders.hpp, 292&amp;times; apply.hpp, 291&amp;times; plus.hpp, 288&amp;times; size.hpp, 288&amp;times; or.hpp, 288&amp;times; not_equal_to.hpp, 283&amp;times; arg.hpp, 273&amp;times; minus.hpp, 268&amp;times; bitand.hpp, 267&amp;times; fold_impl.hpp, 263&amp;times; bitor.hpp, 261&amp;times; template_arity.hpp, 259&amp;times; bitxor.hpp, 259&amp;times; times.hpp, 254&amp;times; divides.hpp, 254&amp;times; apply_wrap.hpp, 254&amp;times; quote.hpp, 254&amp;times; bind_fwd.hpp, 254&amp;times; apply_fwd.hpp, 254&amp;times; full_lambda.hpp, 254&amp;times; lambda_no_ctps.hpp, 253&amp;times; iter_fold_impl.hpp, 253&amp;times; reverse_fold_impl.hpp, 253&amp;times; advance_forward.hpp, 253&amp;times; advance_backward.hpp, 253&amp;times; iter_fold_if_impl.hpp, 248&amp;times; inherit.hpp, 246&amp;times; modulus.hpp, 246&amp;times; reverse_iter_fold_impl.hpp, 245&amp;times; unpack_args.hpp, 244&amp;times; set_c.hpp, 244&amp;times; shift_left.hpp, 244&amp;times; vector_c.hpp, 244&amp;times; list_c.hpp, 244&amp;times; shift_right.hpp, 244&amp;times; basic_bind.hpp, 220&amp;times; tuple.hpp, 202&amp;times; empty.hpp, ...&lt;/li&gt;
&lt;li&gt;24,572&amp;times; models.py&lt;/li&gt;
&lt;li&gt;22,086&amp;times; requirements: 16,709&amp;times; requirements.txt, 1,448&amp;times; test-requirements.txt, 1,012&amp;times; requirements-dev.txt, 462&amp;times; dev-requirements.txt, 418&amp;times; requirements-test.txt, 357&amp;times; test_requirements.txt, 347&amp;times; requirements_dev.txt, 240&amp;times; requirements.py, 196&amp;times; requirements.yaml, 151&amp;times; requirements_test.txt, 144&amp;times; requirements.in, 129&amp;times; doc-requirements.txt, 120&amp;times; requirements-docs.txt, 120&amp;times; requirements-tests.txt, 117&amp;times; dev_requirements.txt, 116&amp;times; requirements-devel.txt&lt;/li&gt;
&lt;li&gt;21,782&amp;times; CHANGES: 3,961&amp;times; CHANGES.txt, 3,677&amp;times; CHANGES.rst, 3,255&amp;times; CHANGELOG.md, 2,277&amp;times; CHANGELOG.rst, 2,058&amp;times; ChangeLog, 1,603&amp;times; changelog.rst, 1,032&amp;times; CHANGELOG, 984&amp;times; CHANGES, 665&amp;times; CHANGES.md, 573&amp;times; CHANGELOG.txt, 514&amp;times; changes.rst, 408&amp;times; changelog, 199&amp;times; changelog.md, 183&amp;times; changelog.txt, 142&amp;times; changes.txt, 131&amp;times; Changelog, 120&amp;times; changelog.html&lt;/li&gt;
&lt;li&gt;19,618&amp;times; XML: 3,094&amp;times; metadata.xml, 1,336&amp;times; browserlayer.xml, 1,129&amp;times; cssregistry.xml, 1,112&amp;times; registry.xml, 1,089&amp;times; jsregistry.xml, 922&amp;times; types.xml, 871&amp;times; skins.xml, 778&amp;times; controlpanel.xml, 634&amp;times; portlets.xml, 619&amp;times; rolemap.xml, 527&amp;times; actions.xml, 517&amp;times; propertiestool.xml, 460&amp;times; import_steps.xml, 452&amp;times; viewlets.xml, 392&amp;times; rules.xml, 388&amp;times; factorytool.xml, 384&amp;times; catalog.xml, 373&amp;times; assets.xml, 317&amp;times; definition.xml, 304&amp;times; res_partner_view.xml, 299&amp;times; workflows.xml, ...&lt;/li&gt;
&lt;li&gt;18,133&amp;times; base.py&lt;/li&gt;
&lt;li&gt;16,606&amp;times; index.rst&lt;/li&gt;
&lt;li&gt;15,357&amp;times; DESCRIPTION.rst&lt;/li&gt;
&lt;li&gt;15,338&amp;times; views.py&lt;/li&gt;
&lt;li&gt;14,333&amp;times; exceptions.py&lt;/li&gt;
&lt;li&gt;14,182&amp;times; tests.py&lt;/li&gt;
&lt;li&gt;14,147&amp;times; Makefile&lt;/li&gt;
&lt;li&gt;13,933&amp;times; namespace_packages.txt&lt;/li&gt;
&lt;li&gt;13,850&amp;times; urls.py&lt;/li&gt;
&lt;li&gt;13,140&amp;times; &lt;strong&gt;main&lt;/strong&gt;.py&lt;/li&gt;
&lt;li&gt;13,025&amp;times; conf.py&lt;/li&gt;
&lt;li&gt;12,601&amp;times; authors: 4,541&amp;times; AUTHORS, 4,390&amp;times; AUTHORS.rst, 2,707&amp;times; authors.rst, 622&amp;times; AUTHORS.txt, 341&amp;times; AUTHORS.md&lt;/li&gt;
&lt;li&gt;12,452&amp;times; *.pyc: 856&amp;times; models.pyc, 812&amp;times; CallCase.pyc, 649&amp;times; utils.pyc, 647&amp;times; views.pyc, 619&amp;times; CallCase.cpython-38.pyc, 589&amp;times; tests.pyc, 577&amp;times; urls.pyc, ...&lt;/li&gt;
&lt;li&gt;12,348&amp;times; config.py&lt;/li&gt;
&lt;li&gt;11,488&amp;times; Font: 1,102&amp;times; glyphicons-halflings-regular.woff, 1,079&amp;times; glyphicons-halflings-regular.ttf, 1,050&amp;times; glyphicons-halflings-regular.eot, 1,013&amp;times; fontawesome-webfont.woff, 1,005&amp;times; fontawesome-webfont.ttf, 987&amp;times; fontawesome-webfont.eot, 677&amp;times; glyphicons-halflings-regular.woff2, 660&amp;times; FontAwesome.otf, 584&amp;times; fontawesome-webfont.woff2, ...&lt;/li&gt;
&lt;li&gt;10,360&amp;times; version.py&lt;/li&gt;
&lt;li&gt;10,115&amp;times; cli.py&lt;/li&gt;
&lt;li&gt;9,724&amp;times; .gitignore&lt;/li&gt;
&lt;li&gt;9,653&amp;times; admin.py&lt;/li&gt;
&lt;li&gt;9,414&amp;times; configure.zcml&lt;/li&gt;
&lt;li&gt;9,370&amp;times; util.py&lt;/li&gt;
&lt;li&gt;9,124&amp;times; client.py&lt;/li&gt;
&lt;li&gt;8,941&amp;times; main.py&lt;/li&gt;
&lt;li&gt;8,908&amp;times; settings.py&lt;/li&gt;
&lt;li&gt;8,291&amp;times; *.ini: 5,592&amp;times; tox.ini, 1,146&amp;times; pytest.ini, 348&amp;times; config.ini, 267&amp;times; alembic.ini, 193&amp;times; development.ini, 169&amp;times; settings.ini, 128&amp;times; info.ini, 117&amp;times; metadata.ini, 113&amp;times; job.ini, 111&amp;times; .mrbob.ini, 107&amp;times; mypy.ini&lt;/li&gt;
&lt;li&gt;8,089&amp;times; CMakeLists.txt&lt;/li&gt;
&lt;li&gt;7,991&amp;times; 0001_initial.py&lt;/li&gt;
&lt;li&gt;7,884&amp;times; C Header Files: 642&amp;times; MathFunctions.h, 541&amp;times; PacketMath.h, 475&amp;times; Complex.h, 474&amp;times; common.h, 289&amp;times; config.h, 274&amp;times; utils.h, 273&amp;times; internal.h, 268&amp;times; TypeCasting.h, 252&amp;times; util.h, 220&amp;times; platform.h, ...&lt;/li&gt;
&lt;li&gt;6,908&amp;times; api.py&lt;/li&gt;
&lt;li&gt;6,907&amp;times; forms.py&lt;/li&gt;
&lt;li&gt;6,851&amp;times; constants.py&lt;/li&gt;
&lt;li&gt;6,672&amp;times; apps.py&lt;/li&gt;
&lt;li&gt;6,627&amp;times; core.py&lt;/li&gt;
&lt;li&gt;5,851&amp;times; test.py&lt;/li&gt;
&lt;li&gt;5,314&amp;times; &lt;a href="https://docs.pytest.org/en/2.7.3/plugins.html?highlight=re#conftest-py-local-per-directory-plugins"&gt;conftest.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5,103&amp;times; *.bat&lt;/li&gt;
&lt;li&gt;4,914&amp;times; _version.py&lt;/li&gt;
&lt;li&gt;4,809&amp;times; common.py&lt;/li&gt;
&lt;li&gt;4,632&amp;times; errors.py&lt;/li&gt;
&lt;li&gt;4,588&amp;times; &lt;strong&gt;manifest&lt;/strong&gt;.py&lt;/li&gt;
&lt;li&gt;4,542&amp;times; interfaces.py&lt;/li&gt;
&lt;li&gt;4,532&amp;times; CONTRIBUTING.rst&lt;/li&gt;
&lt;li&gt;4,412&amp;times; helpers.py&lt;/li&gt;
&lt;li&gt;4,358&amp;times; .DS_Store&lt;/li&gt;
&lt;li&gt;4,299&amp;times; HISTORY.rst&lt;/li&gt;
&lt;li&gt;4,098&amp;times; test_utils.py&lt;/li&gt;
&lt;li&gt;3,781&amp;times; installation.rst&lt;/li&gt;
&lt;li&gt;3,676&amp;times; server.py&lt;/li&gt;
&lt;li&gt;3,644&amp;times; decorators.py&lt;/li&gt;
&lt;li&gt;3,596&amp;times; parser.py&lt;/li&gt;
&lt;li&gt;3,467&amp;times; model.py&lt;/li&gt;
&lt;li&gt;3,455&amp;times; fields.py&lt;/li&gt;
&lt;li&gt;3,408&amp;times; app.py&lt;/li&gt;
&lt;li&gt;3,322&amp;times; contributing.rst&lt;/li&gt;
&lt;li&gt;3,154&amp;times; usage.rst&lt;/li&gt;
&lt;li&gt;3,065&amp;times; compat.py&lt;/li&gt;
&lt;li&gt;3,009&amp;times; *.toml&lt;/li&gt;
&lt;li&gt;2,939&amp;times; log.py&lt;/li&gt;
&lt;li&gt;2,887&amp;times; middleware.py&lt;/li&gt;
&lt;li&gt;2,833&amp;times; *.sh: 345&amp;times; build.sh, 313&amp;times; run.sh, 293&amp;times; update.sh, 270&amp;times; test.sh, 266&amp;times; runme.sh, 195&amp;times; install.sh, 184&amp;times; run_tests.sh, 165&amp;times; rebuild_i18n.sh, 162&amp;times; run-tests.sh, 138&amp;times; plugin.sh, 133&amp;times; extend_start.sh, 126&amp;times; release.sh, 123&amp;times; i18n.sh, 120&amp;times; runtests.sh&lt;/li&gt;
&lt;li&gt;2,637&amp;times; CONTRIBUTORS.rst&lt;/li&gt;
&lt;li&gt;2,632&amp;times; *.csv: 2,010&amp;times; ir.model.access.csv, 622&amp;times; country.csv&lt;/li&gt;
&lt;li&gt;2,626&amp;times; COPYING&lt;/li&gt;
&lt;li&gt;2,598&amp;times; &lt;strong&gt;version&lt;/strong&gt;.py&lt;/li&gt;
&lt;li&gt;2,551&amp;times; auth.py&lt;/li&gt;
&lt;li&gt;2,545&amp;times; history.rst&lt;/li&gt;
&lt;li&gt;2,544&amp;times; .coveragerc&lt;/li&gt;
&lt;li&gt;2,539&amp;times; &lt;strong&gt;openerp&lt;/strong&gt;.py&lt;/li&gt;
&lt;li&gt;2,481&amp;times; logger.py&lt;/li&gt;
&lt;li&gt;2,458&amp;times; plugin.py&lt;/li&gt;
&lt;li&gt;2,430&amp;times; VERSION&lt;/li&gt;
&lt;li&gt;2,395&amp;times; bootstrap.py&lt;/li&gt;
&lt;li&gt;2,379&amp;times; signals.py&lt;/li&gt;
&lt;li&gt;2,378&amp;times; data.py&lt;/li&gt;
&lt;li&gt;2,317&amp;times; testing.py&lt;/li&gt;
&lt;li&gt;2,305&amp;times; HISTORY.txt&lt;/li&gt;
&lt;li&gt;2,270&amp;times; handlers.py&lt;/li&gt;
&lt;li&gt;2,248&amp;times; formats.py&lt;/li&gt;
&lt;li&gt;2,247&amp;times; random.py&lt;/li&gt;
&lt;li&gt;2,246&amp;times; tasks.py&lt;/li&gt;
&lt;li&gt;2,213&amp;times; types.py&lt;/li&gt;
&lt;li&gt;2,199&amp;times; aliases&lt;/li&gt;
&lt;li&gt;2,138&amp;times; cache.py&lt;/li&gt;
&lt;li&gt;2,107&amp;times; error.py&lt;/li&gt;
&lt;li&gt;2,101&amp;times; buildout.cfg&lt;/li&gt;
&lt;li&gt;2,098&amp;times; serializers.py&lt;/li&gt;
&lt;li&gt;2,093&amp;times; connection.py&lt;/li&gt;
&lt;li&gt;2,073&amp;times; wsgi.py&lt;/li&gt;
&lt;li&gt;2,066&amp;times; commands.py&lt;/li&gt;
&lt;li&gt;2,058&amp;times; widgets.py&lt;/li&gt;
&lt;li&gt;2,028&amp;times; service.py&lt;/li&gt;
&lt;li&gt;2,007&amp;times; user.py&lt;/li&gt;
&lt;li&gt;1,985&amp;times; tools.py&lt;/li&gt;
&lt;li&gt;1,946&amp;times; run.py&lt;/li&gt;
&lt;li&gt;1,937&amp;times; manage.py&lt;/li&gt;
&lt;li&gt;1,923&amp;times; CONTRIBUTING.md&lt;/li&gt;
&lt;li&gt;1,870&amp;times; manager.py&lt;/li&gt;
&lt;li&gt;1,853&amp;times; schema.py&lt;/li&gt;
&lt;li&gt;1,849&amp;times; context.py&lt;/li&gt;
&lt;li&gt;1,805&amp;times; misc.py&lt;/li&gt;
&lt;li&gt;1,771&amp;times; http.py&lt;/li&gt;
&lt;li&gt;1,767&amp;times; events.py&lt;/li&gt;
&lt;li&gt;1,766&amp;times; version.txt&lt;/li&gt;
&lt;li&gt;1,765&amp;times; api.rst&lt;/li&gt;
&lt;li&gt;1,725&amp;times; increment.py&lt;/li&gt;
&lt;li&gt;1,718&amp;times; decrement.py&lt;/li&gt;
&lt;li&gt;1,665&amp;times; filters.py&lt;/li&gt;
&lt;li&gt;1,648&amp;times; configuration.py&lt;/li&gt;
&lt;li&gt;1,629&amp;times; session.py&lt;/li&gt;
&lt;li&gt;1,622&amp;times; INSTALL.txt&lt;/li&gt;
&lt;li&gt;1,595&amp;times; query.py&lt;/li&gt;
&lt;li&gt;1,588&amp;times; USAGE.rst&lt;/li&gt;
&lt;li&gt;1,586&amp;times; index.txt&lt;/li&gt;
&lt;li&gt;1,568&amp;times; request.py&lt;/li&gt;
&lt;li&gt;1,554&amp;times; command.py&lt;/li&gt;
&lt;li&gt;1,544&amp;times; image.py&lt;/li&gt;
&lt;li&gt;1,542&amp;times; db.py&lt;/li&gt;
&lt;li&gt;1,538&amp;times; .npmignore&lt;/li&gt;
&lt;li&gt;1,531&amp;times; mixins.py&lt;/li&gt;
&lt;li&gt;1,506&amp;times; managers.py&lt;/li&gt;
&lt;li&gt;1,498&amp;times; validators.py&lt;/li&gt;
&lt;li&gt;1,495&amp;times; io.py&lt;/li&gt;
&lt;li&gt;1,491&amp;times; template.py&lt;/li&gt;
&lt;li&gt;1,473&amp;times; database.py&lt;/li&gt;
&lt;li&gt;1,473&amp;times; makefile&lt;/li&gt;
&lt;li&gt;1,462&amp;times; response.py&lt;/li&gt;
&lt;li&gt;1,460&amp;times; exception.py&lt;/li&gt;
&lt;li&gt;1,459&amp;times; text.py&lt;/li&gt;
&lt;li&gt;1,457&amp;times; .gitkeep&lt;/li&gt;
&lt;li&gt;1,450&amp;times; storage.py&lt;/li&gt;
&lt;li&gt;1,441&amp;times; file.py&lt;/li&gt;
&lt;li&gt;1,432&amp;times; versioneer.py&lt;/li&gt;
&lt;li&gt;1,401&amp;times; Dockerfile&lt;/li&gt;
&lt;li&gt;1,391&amp;times; const.py&lt;/li&gt;
&lt;li&gt;1,382&amp;times; message.py&lt;/li&gt;
&lt;li&gt;1,347&amp;times; search.py&lt;/li&gt;
&lt;li&gt;1,309&amp;times; sensor.py&lt;/li&gt;
&lt;li&gt;1,293&amp;times; helper.py&lt;/li&gt;
&lt;li&gt;1,291&amp;times; test_models.py&lt;/li&gt;
&lt;li&gt;1,273&amp;times; loader.py&lt;/li&gt;
&lt;li&gt;1,271&amp;times; functions.py&lt;/li&gt;
&lt;li&gt;1,237&amp;times; registry.py&lt;/li&gt;
&lt;li&gt;1,233&amp;times; runner.py&lt;/li&gt;
&lt;li&gt;1,222&amp;times; event.py&lt;/li&gt;
&lt;li&gt;1,219&amp;times; test_base.py&lt;/li&gt;
&lt;li&gt;1,218&amp;times; test_config.py&lt;/li&gt;
&lt;li&gt;1,185&amp;times; options.py&lt;/li&gt;
&lt;li&gt;1,185&amp;times; modules.rst&lt;/li&gt;
&lt;li&gt;1,179&amp;times; resource.py&lt;/li&gt;
&lt;li&gt;1,176&amp;times; resources.py&lt;/li&gt;
&lt;li&gt;1,165&amp;times; interface.py&lt;/li&gt;
&lt;li&gt;1,162&amp;times; utilities.py&lt;/li&gt;
&lt;li&gt;1,153&amp;times; metrics.py&lt;/li&gt;
&lt;li&gt;1,152&amp;times; defaults.py&lt;/li&gt;
&lt;li&gt;1,152&amp;times; example.py&lt;/li&gt;
&lt;li&gt;1,152&amp;times; factory.py&lt;/li&gt;
&lt;li&gt;1,143&amp;times; metadata.py&lt;/li&gt;
&lt;li&gt;1,138&amp;times; test_util.py&lt;/li&gt;
&lt;li&gt;1,133&amp;times; stats.py&lt;/li&gt;
&lt;li&gt;1,133&amp;times; shell.py&lt;/li&gt;
&lt;li&gt;1,117&amp;times; test_cli.py&lt;/li&gt;
&lt;li&gt;1,105&amp;times; context_processors.py&lt;/li&gt;
&lt;li&gt;1,088&amp;times; test_views.py&lt;/li&gt;
&lt;li&gt;1,086&amp;times; task.py&lt;/li&gt;
&lt;li&gt;1,082&amp;times; graph.py&lt;/li&gt;
&lt;li&gt;1,082&amp;times; test_client.py&lt;/li&gt;
&lt;li&gt;1,081&amp;times; meson.build&lt;/li&gt;
&lt;li&gt;1,074&amp;times; test_api.py&lt;/li&gt;
&lt;li&gt;1,070&amp;times; project.py&lt;/li&gt;
&lt;li&gt;1,068&amp;times; logging.py&lt;/li&gt;
&lt;li&gt;1,059&amp;times; hooks.py&lt;/li&gt;
&lt;li&gt;1,057&amp;times; network.py&lt;/li&gt;
&lt;li&gt;1,052&amp;times; node.py&lt;/li&gt;
&lt;li&gt;1,042&amp;times; py.typed&lt;/li&gt;
&lt;li&gt;1,041&amp;times; .editorconfig&lt;/li&gt;
&lt;li&gt;1,030&amp;times; plot.py&lt;/li&gt;
&lt;li&gt;1,029&amp;times; build.py&lt;/li&gt;
&lt;li&gt;1,014&amp;times; actions.py&lt;/li&gt;
&lt;li&gt;1,009&amp;times; rom.sha&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Community"></category><category term="PyPI"></category></entry><entry><title>Coding Fonts</title><link href="https://martin-thoma.com/coding-fonts/" rel="alternate"></link><published>2019-12-31T20:00:00+01:00</published><updated>2019-12-31T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-31:/coding-fonts/</id><summary type="html">&lt;p&gt;The font choice for developing software is important. Developers read code all
the time.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="powerline-fonts"&gt;Powerline Fonts …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;The font choice for developing software is important. Developers read code all
the time.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="powerline-fonts"&gt;Powerline Fonts&lt;/h2&gt;
&lt;p&gt;The Ubuntu &lt;a href="https://github.com/powerline/fonts"&gt;Powerline font&lt;/a&gt; is what I use:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/12/ubuntu-mono-powerline.png"&gt;&lt;img alt="Ubuntu Mono Powerline" src="../images/2019/12/ubuntu-mono-powerline.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Ubuntu Mono Powerline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="ligatures"&gt;Ligatures&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Orthographic_ligature"&gt;Ligatures&lt;/a&gt; are a design
method of combining two characters (graphemes) to get a nicer way of printing
them together. Historically, this has been done with "ff", "fi", "fl". For
code, other options are possible. I'm not saying any of those are a good idea:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Original&lt;/th&gt;
&lt;th&gt;Unicode&lt;/th&gt;
&lt;th&gt;Screenshot&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;&amp;ne;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;rarr;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;rArr;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;&amp;ge;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;&amp;le;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;How to Enable Ligatures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sublimetext.com/docs/3/ligatures.html"&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ubuntu-mono"&gt;Ubuntu Mono&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://fonts.google.com/specimen/Ubuntu+Mono"&gt;Google Fonts page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="fira-code"&gt;Fira Code&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/12/fira-code-retina.png"&gt;&lt;img alt="A jellyfish" src="../images/2019/12/fira-code-retina.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A jellyfish&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href="https://github.com/tonsky/FiraCode"&gt;FiraCode&lt;/a&gt; is licensed under SIL Open Font License 1.1.
It is a Monospaced font with programming ligatures.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fonts.google.com/specimen/Fira+Code?query=fira"&gt;Google Fonts Page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="cascadia-code"&gt;Cascadia Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ghacks.net/2019/09/19/microsoft-releases-new-open-source-font-cascadia-code/"&gt;Microsoft releases new open source font Cascadia Code&lt;/a&gt;, 2019&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/microsoft/cascadia-code"&gt;microsoft / cascadia-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.packtpub.com/microsoft-releases-cascadia-code-version-1909-16-it-is-the-latest-monospaced-font-for-windows-terminal-and-visual-studio-code/"&gt;Microsoft releases Cascadia Code version 1909.16&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;li&gt;Kayla: &lt;a href="https://devblogs.microsoft.com/commandline/cascadia-code/"&gt;Cascadia Code&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Software Development"></category></entry><entry><title>How to Speed up Docker</title><link href="https://martin-thoma.com/docker-speedup/" rel="alternate"></link><published>2019-12-31T20:00:00+01:00</published><updated>2019-12-31T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-31:/docker-speedup/</id><summary type="html">&lt;p&gt;Building a Docker container can take quite a while. However, there are some
easy parts to speed them up.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or …&lt;/div&gt;</summary><content type="html">&lt;p&gt;Building a Docker container can take quite a while. However, there are some
easy parts to speed them up.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="install-early-copy-late"&gt;Install Early, Copy Late&lt;/h2&gt;
&lt;p&gt;Make sure you install dependencies early and copy code late during building
the container. This helps to cache the dependencies.&lt;/p&gt;
&lt;p&gt;You might also want to look at dependency pinning.&lt;/p&gt;
&lt;h2 id="dockerignore"&gt;.dockerignore&lt;/h2&gt;
&lt;p&gt;Make sure you don't re-build the container with stuff you don't need.&lt;/p&gt;
&lt;p&gt;You can check the included files via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.
sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--entrypoint&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/find&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;images&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;^test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I started looking at the size of my Flask image, it was 357MB.
Without copying any of the code, it was &lt;code&gt;349MB&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codefresh.io/docker-tutorial/not-ignore-dockerignore-2/"&gt;Do not ignore .dockerignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zzz.buzz/2018/05/23/differences-of-rules-between-gitignore-and-dockerignore/"&gt;Differences of Rules Between .gitignore and .dockerignore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Docker"></category></entry><entry><title>Flask Plugins</title><link href="https://martin-thoma.com/flask-plugins/" rel="alternate"></link><published>2019-12-31T20:00:00+01:00</published><updated>2019-12-31T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-31:/flask-plugins/</id><summary type="html">&lt;p&gt;The Flask Ecosystem has &lt;a href="http://flask.pocoo.org/extensions/"&gt;a lot of extensions&lt;/a&gt;.
I'll introduce a couple I've stumbled over. There is also an &lt;a href="https://github.com/humiaozuzu/awesome-flask"&gt;awesome list&lt;/a&gt;, but it contains too many extensions and too little
explanation when to use what.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part …&lt;/div&gt;</summary><content type="html">&lt;p&gt;The Flask Ecosystem has &lt;a href="http://flask.pocoo.org/extensions/"&gt;a lot of extensions&lt;/a&gt;.
I'll introduce a couple I've stumbled over. There is also an &lt;a href="https://github.com/humiaozuzu/awesome-flask"&gt;awesome list&lt;/a&gt;, but it contains too many extensions and too little
explanation when to use what.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="databases"&gt;Databases&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;&lt;code&gt;Flask-SQLAlchemy&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://flask-migrate.readthedocs.io/en/latest/"&gt;&lt;code&gt;Flask-Migrate&lt;/code&gt;&lt;/a&gt; (Alembic)
are pretty much standard. The first one is a binding to the de-facto standard
ORM in Python (SQLAlchemy) and the second one is for creating Migrations with
Alembic.&lt;/p&gt;
&lt;h2 id="rest-api"&gt;REST API&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flask-restx.readthedocs.io/en/stable/"&gt;Flask-RESTX&lt;/a&gt; is good
for creating nice REST APIs. It also generates a swagger page 🙂&lt;/p&gt;
&lt;p&gt;&lt;a href="https://flask-restless.readthedocs.io/en/stable/index.html"&gt;flask-restless&lt;/a&gt;
works directly on the models. I haven't used it so far.&lt;/p&gt;
&lt;p&gt;Worse alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flask-Restful: &lt;a href="https://stackoverflow.com/a/41783739/562769"&gt;No autogenerated Swagger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="forms"&gt;Forms&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flask-wtf.readthedocs.io/en/stable/"&gt;Flask-WTF&lt;/a&gt; is for creating forms,
including CSRF, file upload, and reCAPTCHA.&lt;/p&gt;
&lt;h2 id="e-mail"&gt;E-Mail&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Flask-Mail/"&gt;Flask-Mail&lt;/a&gt; provides a simple interface
to set up SMTP with your Flask application and to send messages from your views
and scripts.&lt;/p&gt;
&lt;h2 id="role-management"&gt;Role Management&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Flask-Principal/"&gt;Flask-Principal&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="user-management"&gt;User management&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login&lt;/a&gt; provides user
session management for Flask. It handles the common tasks of logging in,
logging out, and remembering your users&amp;rsquo; sessions over extended periods of
time.&lt;/p&gt;
&lt;p&gt;Here is a usage example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask_login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask_login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logout_user&lt;/span&gt;

&lt;span class="n"&gt;login_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;login_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"auth.login"&lt;/span&gt;


&lt;span class="nd"&gt;@login_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loader&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@login_required&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/private"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;some_private_view&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"You can only watch this if you're logged in"&lt;/span&gt;


&lt;span class="nd"&gt;@auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"main.index"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# You have to create LoginForm on your own&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Invalid email or password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"auth.login"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember_me&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some_private_view"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"login.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/logout"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@login_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"main.index"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/register"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"main.index"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RegistrationForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# You have to write RegistrationForm on your own&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_or_404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"user_&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Congratulations, you are now a registered user!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"auth.login"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"register.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also &lt;a href="https://flask-user.readthedocs.io/en/latest/"&gt;Flask-User&lt;/a&gt; and Flask-Security which both offer you to give you
the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;li&gt;Forgotten Password&lt;/li&gt;
&lt;li&gt;Login / Logout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of using those, you might want to combine Flask-Principal, Flask-Login,
Flask-Mail.&lt;/p&gt;
&lt;h2 id="socketio"&gt;SocketIO&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flask-socketio.readthedocs.io/en/latest/"&gt;Flask-SocketIO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="translations"&gt;Translations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/Flask-Babel/"&gt;Flask-Babel&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="also"&gt;Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythonhosted.org/Flask-Security/"&gt;Flask-Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask-user.readthedocs.io/en/latest/"&gt;Flask-User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Flask"></category></entry><entry><title>Git Contribution Statistics</title><link href="https://martin-thoma.com/git-contribution-statistics/" rel="alternate"></link><published>2019-12-31T20:00:00+01:00</published><updated>2019-12-31T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-31:/git-contribution-statistics/</id><summary type="html">&lt;p&gt;I've just received a letter that the Scipy community will write a "scipy 1.0"
paper and is wondering who should be mentioned as an author. So they want to
figure out who "really" contributed something. While I think this should be a
manual process (and maybe just anybody who …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've just received a letter that the Scipy community will write a "scipy 1.0"
paper and is wondering who should be mentioned as an author. So they want to
figure out who "really" contributed something. While I think this should be a
manual process (and maybe just anybody who added a line of code / documentation
/ gave valuable feedback should be in the author list), I wondered how to do
this automatically. So here are a few ways. To keep it short, I will crop the
first ten.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="commit-count"&gt;Commit Count&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;shortlog&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;--all&lt;span class="w"&gt; &lt;/span&gt;--no-merges
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2183&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Pauli&lt;span class="w"&gt; &lt;/span&gt;Virtanen
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;1565&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Ralf&lt;span class="w"&gt; &lt;/span&gt;Gommers
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;976&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Travis&lt;span class="w"&gt; &lt;/span&gt;Oliphant
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;893&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;David&lt;span class="w"&gt; &lt;/span&gt;Cournapeau
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;708&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Evgeni&lt;span class="w"&gt; &lt;/span&gt;Burovski
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;705&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Warren&lt;span class="w"&gt; &lt;/span&gt;Weckesser
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;506&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Pearu&lt;span class="w"&gt; &lt;/span&gt;Peterson
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;484&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Alex&lt;span class="w"&gt; &lt;/span&gt;Griffing
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;376&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;Nathan&lt;span class="w"&gt; &lt;/span&gt;Bell
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;363&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;@endolith
&lt;span class="w"&gt;   &lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;-e&lt;/code&gt; for e-mails.&lt;/p&gt;
&lt;p&gt;851 people in total. 13 people made more than 50% of the commits.&lt;/p&gt;
&lt;p&gt;It would be really nice to have a waffle chart showing those numbers. so maybe
to top 10 with name / initials, everybody with more than 100 commits in one
group, everybody with more than 50 commits in another, just one commit in one
group and the rest in another group.&lt;/p&gt;
&lt;h2 id="git-stats"&gt;Git Stats&lt;/h2&gt;
&lt;p&gt;Install it via &lt;code&gt;apt-get install gitstats&lt;/code&gt; and execute &lt;code&gt;gitstats . out&lt;/code&gt;. Then
open &lt;code&gt;out/index.html&lt;/code&gt; in a browser.&lt;/p&gt;
&lt;p&gt;General:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Project name: scipy
Generated: 2019-06-19 19:00:08 (in 89 seconds)
Generator: GitStats (version 2015.10.03), git version 2.17.1, gnuplot 5.2 patchlevel 2
Report Period: 2001-02-01 09:32:30 to 2019-06-19 08:15:31
Age: 6713 days, 4227 active days (62.97%)
Total Files: 2545
Total Lines of Code: 778151 (3208814 added, 2430663 removed)
Total Commits: 21178 (average 5.0 commits per active day, 3.2 per all days)
Authors: 850 (average 24.9 commits per author)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="git-fame"&gt;Git Fame&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-pip&lt;span class="w"&gt; &lt;/span&gt;python-dev&lt;span class="w"&gt; &lt;/span&gt;build-essential
$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="w"&gt; &lt;/span&gt;git-fame
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;fame
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Total commits: 21178
Total ctimes: 22524
Total files: 9415
Total loc: 277469
| Author                            |   loc |   coms |   fils |  distribution   |
|:----------------------------------|------:|-------:|-------:|:----------------|
| Pauli Virtanen                    | 74162 |   2897 |   1236 | 26.7/13.7/13.1  |
| Abraham Escalante                 | 61316 |     94 |     27 | 22.1/ 0.4/ 0.3  |
| Travis Oliphant                   | 36595 |    977 |    665 | 13.2/ 4.6/ 7.1  |
| Andreas Kloeckner                 | 10942 |     12 |     48 | 3.9/ 0.1/ 0.5   |
| nmarais                           |  9974 |      4 |     87 | 3.6/ 0.0/ 0.9   |
| Ralf Gommers                      |  8543 |   2506 |    473 | 3.1/11.8/ 5.0   |
| Eric Moore                        |  8146 |    157 |     66 | 2.9/ 0.7/ 0.7   |
| Ian Henriksen                     |  4831 |     77 |     64 | 1.7/ 0.4/ 0.7   |
| Warren Weckesser                  |  4665 |    760 |    383 | 1.7/ 3.6/ 4.1   |
| Josh Wilson                       |  4568 |    302 |    155 | 1.6/ 1.4/ 1.6   |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="git"></category></entry><entry><title>Lynis</title><link href="https://martin-thoma.com/lynis/" rel="alternate"></link><published>2019-12-31T20:00:00+01:00</published><updated>2019-12-31T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-31:/lynis/</id><summary type="html">&lt;p&gt;&lt;a href="https://cisofy.com/documentation/lynis/get-started/"&gt;Lynis&lt;/a&gt; is a auditing tool.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;colorized-logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="problems"&gt;Problems&lt;/h2&gt;
&lt;h3 id="could-not-find-languages-directory"&gt;could not find languages directory …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://cisofy.com/documentation/lynis/get-started/"&gt;Lynis&lt;/a&gt; is a auditing tool.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;colorized-logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="problems"&gt;Problems&lt;/h2&gt;
&lt;h3 id="could-not-find-languages-directory"&gt;could not find languages directory&lt;/h3&gt;
&lt;p&gt;https://github.com/CISOfy/lynis/issues/213&lt;/p&gt;
&lt;h2 id="ubuntu-1804-audit_1"&gt;Ubuntu 18.04 Audit&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;./lynis&lt;span class="w"&gt; &lt;/span&gt;audit&lt;span class="w"&gt; &lt;/span&gt;system&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ansi2html&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/report.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="https://martin-thoma.com/pdf/lynis-report.pdf"&gt;lynis report of Ubuntu 18.04&lt;/a&gt; is super long.&lt;/p&gt;
&lt;h2 id="hardening"&gt;Hardening&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;upgrade
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;debsecan&lt;span class="w"&gt; &lt;/span&gt;debsums&lt;span class="w"&gt; &lt;/span&gt;rkhunter
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="kernels"&gt;Kernels&lt;/h3&gt;
&lt;p&gt;List Kernels:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;dpkg&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;linux-image
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-20-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-20.21&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-22-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-22.24&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-23-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-23.25&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-24-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-24.26&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-29-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-29.31&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-30-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-30.32&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-32-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-32.35&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-33-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-33.36&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-34-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-34.37&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-36-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-36.39&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-39-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-39.42&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-42-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-42.45&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-43-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-43.46&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-44-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-44.47&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-45-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-45.48&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-46-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-46.49&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-47-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-47.50&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-50-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-50.54&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-51-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-51.55&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-52-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-52.56&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-54-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-54.58&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-55-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-55.60&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-58-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-58.64&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-60-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-60.67&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
rc&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-62-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-62.69&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
ii&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-64-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-64.73&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
ii&lt;span class="w"&gt;  &lt;/span&gt;linux-image-4.15.0-65-generic&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0-65.74&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Signed&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;generic
ii&lt;span class="w"&gt;  &lt;/span&gt;linux-image-generic&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.15.0.65.67&lt;span class="w"&gt;    &lt;/span&gt;amd64&lt;span class="w"&gt;    &lt;/span&gt;Generic&lt;span class="w"&gt; &lt;/span&gt;Linux&lt;span class="w"&gt; &lt;/span&gt;kernel&lt;span class="w"&gt; &lt;/span&gt;image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one you currently use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;uname&lt;span class="w"&gt; &lt;/span&gt;-r
&lt;span class="m"&gt;4&lt;/span&gt;.15.0-65-generic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="php"&gt;PHP&lt;/h3&gt;
&lt;p&gt;Change &lt;code&gt;sublime /etc/php/7.2/apache2/php.ini&lt;/code&gt; to the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;allow_url_fopen = Off
expose_php = Off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then restart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# apache2ctl restart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nameservers"&gt;Nameservers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lrz.de/services/netzdienste/dns/"&gt;Betrieb des Nameserver-Dienstes im MWN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.privacy-handbuch.de/handbuch_93d.htm"&gt;Privacy-Handbuch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CCC: &lt;a href="https://www.ccc.de/censorship/dns-howto/"&gt;DNS Howto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ubuntuusers.de: &lt;a href="https://wiki.ubuntuusers.de/DNS-Konfiguration/"&gt;DNS-Konfiguration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-tools_1"&gt;Other Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.ubuntuusers.de/rkhunter/"&gt;&lt;code&gt;rkhunter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Lynis"></category></entry><entry><title>Face Recognition</title><link href="https://martin-thoma.com/face-recognition/" rel="alternate"></link><published>2019-12-28T20:00:00+01:00</published><updated>2019-12-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-28:/face-recognition/</id><summary type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;A few days ago, I took a flight from Nepal back to Germany. I was 3 …&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;A few days ago, I took a flight from Nepal back to Germany. I was 3 weeks
trekking. Of course, I did not take my beard trimmer with me. So what is
usually a three-day beard became a 3 week beard. And when I tried to get through
those automatic face recognition entries for EU citicenz, the machine spent like
one minute trying to recognize me (usually it takes about 5 seconds).&lt;/p&gt;
&lt;p&gt;That was when I started wondering what the current state of face recognition is.
Not only the state of the art techniques, but more what is currently available
in free software.&lt;/p&gt;
&lt;h2 id="face-recognition-tasks"&gt;Face Recognition Tasks&lt;/h2&gt;
&lt;p&gt;There are four main tasks in face recognition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Face Detection&lt;/strong&gt;: Given an image, draw an axis-aligned bounding box around each face&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Face Alignment&lt;/strong&gt;: Transform a face to be in a canonical pose&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Face Representation&lt;/strong&gt;: Find a representation for a face which is suitable for follow-up tasks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Face Verification&lt;/strong&gt;: Given two face representations, decide if they are the same&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="important-papers"&gt;Important papers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.toronto.edu/~ranzato/publications/taigman_cvpr14.pdf"&gt;Deep Face: closing the gap to human level performance&lt;/a&gt; (&lt;a href="https://www.shortscience.org/paper?bibtexKey=conf/cvpr/TaigmanYRW14#martinthoma"&gt;summary&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1503.03832"&gt;FaceNet: A unified embedding for face recognition and clustering&lt;/a&gt; (&lt;a href="https://www.shortscience.org/paper?bibtexKey=journals/corr/1503.03832"&gt;summary&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.robots.ox.ac.uk/~vgg/publications/2015/Parkhi15/parkhi15.pdf"&gt;Deep Face recognition&lt;/a&gt; (&lt;a href="https://www.shortscience.org/paper?bibtexKey=conf/bmvc/ParkhiVZ15"&gt;summary&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="problems"&gt;Problems&lt;/h2&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/04/face_recongition_error_statue.jpg"&gt;&lt;img alt="A face, but not a human" src="../images/2019/04/face_recongition_error_statue.jpg" style="width: 400px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A face, but not a human&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/04/face_recongition_error_statue-3.jpg"&gt;&lt;img alt="Again a couple of faces, but not human faces" src="../images/2019/04/face_recongition_error_statue-3.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Again a couple of faces, but not human faces&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/04/face_recongition_error_noface.jpg"&gt;&lt;img alt="No face at all - not even close" src="../images/2019/04/face_recongition_error_noface.jpg" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;No face at all - not even close&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyPI: &lt;a href="https://pypi.org/project/face_recognition/"&gt;&lt;code&gt;face_recognition&lt;/code&gt;&lt;/a&gt; uses &lt;a href="http://dlib.net/"&gt;dlib&lt;/a&gt;. It's fast, it's good. Use it.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Machine Learning"></category><category term="Computer Vision"></category></entry><entry><title>Software Stacks</title><link href="https://martin-thoma.com/software-stacks/" rel="alternate"></link><published>2019-12-28T20:00:00+01:00</published><updated>2019-12-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-28:/software-stacks/</id><summary type="html">&lt;p&gt;Software stacks are projects of software which nicely work together.
They are sometimes also called &lt;a href="https://en.wikipedia.org/wiki/Solution_stack"&gt;solution stacks&lt;/a&gt;. Here are some of which I know that they are widely spread.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published …&lt;/div&gt;</summary><content type="html">&lt;p&gt;Software stacks are projects of software which nicely work together.
They are sometimes also called &lt;a href="https://en.wikipedia.org/wiki/Solution_stack"&gt;solution stacks&lt;/a&gt;. Here are some of which I know that they are widely spread.&lt;/p&gt;
&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;h2 id="lamp"&gt;LAMP&lt;/h2&gt;
&lt;p&gt;What it is good for: Simple start for creating web services.&lt;/p&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: Operating System&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Apache_HTTP_Server"&gt;Apache&lt;/a&gt;: Web Server&lt;/li&gt;
&lt;li&gt;MySQL: Database management system&lt;/li&gt;
&lt;li&gt;PHP: Programming language&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lnmp"&gt;LNMP&lt;/h2&gt;
&lt;p&gt;What it is good for: Creating web services.&lt;/p&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: Operating System&lt;/li&gt;
&lt;li&gt;Nginx: web server&lt;/li&gt;
&lt;li&gt;MySQL / MariaDB: Database management system&lt;/li&gt;
&lt;li&gt;Perl, PHP, Python: Programming language&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mean"&gt;MEAN&lt;/h2&gt;
&lt;p&gt;What it is good for: Creating web services.&lt;/p&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB: Database&lt;/li&gt;
&lt;li&gt;Express.js: Controller layer&lt;/li&gt;
&lt;li&gt;Angular: Presentation layer&lt;/li&gt;
&lt;li&gt;Node.js: Web server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="elk"&gt;ELK&lt;/h2&gt;
&lt;p&gt;What it is good for: Search, analyze and visualize data in real time.&lt;/p&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch: search and analytics engine&lt;/li&gt;
&lt;li&gt;Logstash: server‑side data processing pipeline&lt;/li&gt;
&lt;li&gt;Kibana: let users visualize data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="android"&gt;Android&lt;/h2&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editor: &lt;a href="https://developer.android.com/studio/"&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Programming language: Java / &lt;a href="https://en.wikipedia.org/wiki/Kotlin_(programming_language)"&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ios"&gt;iOS&lt;/h2&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating System: &lt;a href="https://en.wikipedia.org/wiki/MacOS"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Editor: &lt;a href="https://en.wikipedia.org/wiki/Xcode"&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Programming language: &lt;a href="https://en.wikipedia.org/wiki/Swift_(programming_language)"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="data-science"&gt;Data Science&lt;/h2&gt;
&lt;p&gt;Although I haven't heard a catchy name, many people use similar things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/eda/"&gt;EDA&lt;/a&gt;: Pandas, Jupyter notebooks and Bash (cat, jq, head, tail)&lt;/li&gt;
&lt;li&gt;Model Building: sklearn&lt;ul&gt;
&lt;li&gt;Neural Networks: Keras / Tensorflow / (Py)Torch / CNTK&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xgboost.readthedocs.io/en/latest/"&gt;XGBoost&lt;/a&gt; / &lt;a href="https://catboost.ai/"&gt;Catboost&lt;/a&gt; / &lt;a href="https://lightgbm.readthedocs.io/en/latest/"&gt;LightGBM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Images: Matplotlib and &lt;a href="https://martin-thoma.com/python-data-visualization/"&gt;many more visualization tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cloud:&lt;ul&gt;
&lt;li&gt;AWS Stuff (S3, EC2, ECR and ECS, Cloudwatch, SSM, ...)&lt;/li&gt;
&lt;li&gt;Azure (Microsoft)&lt;/li&gt;
&lt;li&gt;GCP (Google Cloud)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then there come a lot of specialized libraries into play, depending what
you want to do.&lt;/p&gt;</content><category term="Code"></category><category term="Development"></category></entry><entry><title>Flask Chat - Part I</title><link href="https://martin-thoma.com/flask-chat-1/" rel="alternate"></link><published>2019-12-20T12:00:00+01:00</published><updated>2019-12-20T12:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-20:/flask-chat-1/</id><summary type="html">&lt;p&gt;Chat applications are everywhere nowadays. The two best-known ones are probably
Slack and WhatsApp. If you keep the amount of users low (e.g. less than 100)
and the number of features limited, then it is actually pretty easy to create
such a chat app.&lt;/p&gt;
&lt;p&gt;I've create a small proof …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Chat applications are everywhere nowadays. The two best-known ones are probably
Slack and WhatsApp. If you keep the amount of users low (e.g. less than 100)
and the number of features limited, then it is actually pretty easy to create
such a chat app.&lt;/p&gt;
&lt;p&gt;I've create a small proof of concept chat app with Flask and jQuery. It runs in
the browser.&lt;/p&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;We will keep it simple for this tutorial:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/12/chat-flask.png"&gt;&lt;img alt="Chat App" src="../images/2019/12/chat-flask.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Chat App&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We store the messages - and only that - in a single table in a SQLite database.
We have an API which has one endpoint &lt;code&gt;messages&lt;/code&gt; which allows to
&lt;code&gt;GET&lt;/code&gt; messages (filtered by id) and to &lt;code&gt;POST&lt;/code&gt; a new
message.&lt;/p&gt;
&lt;p&gt;The backend is done with Flask.&lt;/p&gt;
&lt;p&gt;The front end is partially done with &lt;a href="https://jinja.palletsprojects.com/en/2.10.x/"&gt;Jinja2&lt;/a&gt; and partially with jQuery.&lt;/p&gt;
&lt;h2 id="project-structure"&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;The folder structure is typical for Flask applications:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
&amp;boxvr;&amp;boxh;&amp;boxh; app
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; api.py
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; docs
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; main
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; routes.py
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; models.py
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; static
&amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; templates
&amp;boxvr;&amp;boxh;&amp;boxh; Dockerfile
&amp;boxvr;&amp;boxh;&amp;boxh; migrations
&amp;boxvr;&amp;boxh;&amp;boxh; pyproject.toml
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; requirements.txt
&amp;boxvr;&amp;boxh;&amp;boxh; start.sh
&amp;boxur;&amp;boxh;&amp;boxh; wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the root directory, you have a &lt;code&gt;start.sh&lt;/code&gt; which uses the
&lt;code&gt;wsgi.py&lt;/code&gt; to start a &lt;a href="https://en.wikipedia.org/wiki/Gunicorn"&gt;gunicorn&lt;/a&gt;
server. The &lt;code&gt;pyproject.toml&lt;/code&gt; gives some basic configuration.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;app&lt;/code&gt; directory, there is a single &lt;a href="https://flask.palletsprojects.com/en/1.0.x/blueprints/"&gt;blueprint&lt;/a&gt; called "main". The &lt;code&gt;models.py&lt;/code&gt;
defines the &lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/"&gt;sqlalchemy database models&lt;/a&gt;, the &lt;code&gt;api.py&lt;/code&gt; defines the REST API with &lt;a href="https://flask-restx.readthedocs.io/en/stable/"&gt;flask restx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The front end is in the templates directory.&lt;/p&gt;
&lt;h2 id="how-it-works"&gt;How it works&lt;/h2&gt;
&lt;p&gt;When a new user opens the website, they get a session variable with a unique
identifier. They receive all messages which were ever written (yes, in a
productive system this is an awful idea) and they store the latest message ID
they have seen.&lt;/p&gt;
&lt;p&gt;Locally, jQuery asks every 500ms for new messages. For this request, it gives
the latest message it has seen. This means most of the time the server returns
an empty response.&lt;/p&gt;
&lt;p&gt;When the client sends a new message, it is stored in the database.&lt;/p&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;h2 id="user-experience"&gt;User Experience&lt;/h2&gt;
&lt;h3 id="general-theme"&gt;General Theme&lt;/h3&gt;
&lt;p&gt;The key CSS classes you have are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: It can either be one you received or one you sent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conversation&lt;/code&gt;: The block that contains the stream of messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://codepen.io/swaibu/pen/QxJjwN"&gt;this codepen&lt;/a&gt; for a nice the theme
by Rumbiiha Swaibu.&lt;/p&gt;
&lt;h3 id="new-messages"&gt;New Messages&lt;/h3&gt;
&lt;p&gt;A key point that took me a bit to implement is to add the most recent messages
at the bottom and keep scrolling with the most recent ones - but only if you
didn't scroll up before.&lt;/p&gt;
&lt;h2 id="why-this-is-awful_1"&gt;Why this is awful&lt;/h2&gt;
&lt;p&gt;Missing core functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Registration and Authentication: It is important who writes something. So
  people want to know the sender. In the system above, it is super easy to
  change the ID to somebody elses ID. To have arbitrary many IDs. It is hard to
  know who writes something. This topic comes with a lot of other topics like
  single sign on (SSO), 2FA / MFA, password recovery...&lt;/li&gt;
&lt;li&gt;Formatting: Allow users to format messages (bold, italic, links, math mode, ...)&lt;/li&gt;
&lt;li&gt;Chatrooms: People want to have private conversations. Conversations splitted
  by topic.&lt;/li&gt;
&lt;li&gt;Search: Once you have different rooms, you might want to search across rooms.&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;File sharing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other missing functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Voice_over_IP"&gt;Voice over IP&lt;/a&gt; (calls) and &lt;a href="https://en.wikipedia.org/wiki/Videotelephony"&gt;Videotelephony&lt;/a&gt; (Video chat)&lt;/li&gt;
&lt;li&gt;Themes: Let users change the default looks&lt;/li&gt;
&lt;li&gt;Tennants: Besides chats / chatrooms, you might want to run the chat
  appliction as a service for organizations. They have their own (seperate)
  users and chat rooms. Maybe have some possibilities for customization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Engineering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scalability: If the database comes to its limits, you have to get a bigger
  machine. Other databases like AWS DynamoDB might have better behaviour.&lt;/li&gt;
&lt;li&gt;Backups were not even mentioned&lt;/li&gt;
&lt;li&gt;Polling: Pining the server twice per second is no big deal if you have few
  users. But the more users you get, the worse this will become.&lt;/li&gt;
&lt;li&gt;Pagination: Getting all messages in the beginning is a really bad idea.&lt;/li&gt;
&lt;li&gt;Front Ends: You might want way more. For example, native apps for smartphones.&lt;/li&gt;
&lt;li&gt;Protocols: Adding support for &lt;a href="https://en.wikipedia.org/wiki/XMPP"&gt;XMPP&lt;/a&gt; to
  allow usage of other clients
  (&lt;a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; seems to be
  outdated; &lt;a href="https://en.wikipedia.org/wiki/Matrix_(protocol)"&gt;Matrix&lt;/a&gt; could be an alternative according to &lt;a href="https://www.kuketz-blog.de/messenger-matrix-das-xmpp-fuer-hobby-admins/"&gt;this German post&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="complete-project"&gt;Complete Project&lt;/h2&gt;
&lt;p&gt;If you want to get the complete project and look at the code, here you are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/MartinThoma/flask-chat.git
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;v1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="free-chat-servers"&gt;Free Chat Servers&lt;/h2&gt;
&lt;p&gt;In case you want to look at more professional chat server projects:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;th&gt;Core Language&lt;/th&gt;
&lt;th&gt;XMPP&lt;/th&gt;
&lt;th&gt;LDAP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/RocketChat/Rocket.Chat"&gt;Rocketchat&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;MIT&lt;/td&gt;
&lt;td class="text-center"&gt;JavaScript&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/sdelements/lets-chat"&gt;Let's Chat&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;MIT&lt;/td&gt;
&lt;td class="text-center"&gt;JavaScript&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/mattermost/mattermost-server"&gt;Mattermost&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;a href="https://github.com/mattermost/mattermost-server/blob/master/LICENSE.txt"&gt;MIT / GNU AGPL v.3.0&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;Go&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;a href="https://github.com/42wim/matterbridge"&gt;not directly&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;a href="https://docs.mattermost.com/deployment/sso-ldap.html"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/vector-im/riot-web"&gt;Riot.im&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;Apache v2&lt;/td&gt;
&lt;td class="text-center"&gt;JavaScript&lt;/td&gt;
&lt;td class="text-center"&gt;No, but matrix&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;a href="https://github.com/matrix-org/matrix-synapse-ldap3"&gt;not directly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Slack_Technologies"&gt;Slack Technologies&lt;/a&gt;, 2019-12-17.&lt;/li&gt;
&lt;li&gt;Rumbiiha swaibu: &lt;a href="https://codepen.io/swaibu/pen/QxJjwN"&gt;WhatsApp in Pure CSS and JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Flask"></category></entry><entry><title>Python Itertools</title><link href="https://martin-thoma.com/itertools/" rel="alternate"></link><published>2019-12-09T20:00:00+01:00</published><updated>2019-12-09T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-12-09:/itertools/</id><summary type="html">&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html"&gt;Itertools&lt;/a&gt; is a tiny Python
module with limited functionality. But when you can use it, it is awesome. I
need to look up the names quite often. Recently, I found an
&lt;a href="https://stackoverflow.com/a/942551/562769"&gt;explanation by Ben Blank&lt;/a&gt; which is
simply beautiful.&lt;/p&gt;
&lt;h2 id="product"&gt;product&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.product"&gt;&lt;code&gt;product(*iterables, repeat=1)&lt;/code&gt;&lt;/a&gt; creates the cross product of two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html"&gt;Itertools&lt;/a&gt; is a tiny Python
module with limited functionality. But when you can use it, it is awesome. I
need to look up the names quite often. Recently, I found an
&lt;a href="https://stackoverflow.com/a/942551/562769"&gt;explanation by Ben Blank&lt;/a&gt; which is
simply beautiful.&lt;/p&gt;
&lt;h2 id="product"&gt;product&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.product"&gt;&lt;code&gt;product(*iterables, repeat=1)&lt;/code&gt;&lt;/a&gt; creates the cross product of two iterables. The length of the result is
the product of the length of all iterables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Ben Blanks Explanation&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;1,1  1,2  1,3  1,4
2,1  2,2  2,3  2,4
3,1  3,2  3,3  3,4
4,1  4,2  4,3  4,4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="permutations"&gt;permutations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.permutations"&gt;&lt;code&gt;permutations(iterable, r=None)&lt;/code&gt;&lt;/a&gt;
generates all unique orderings of unique elements. If &lt;code&gt;r&lt;/code&gt; is not specified, all
all are taken. In an &lt;a href="https://en.wikipedia.org/wiki/Urn_problem"&gt;urn model&lt;/a&gt;,
this means taking &lt;code&gt;r&lt;/code&gt; balls without replacement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ben Blanks Explanation&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; .   1,2  1,3  1,4
2,1   .   2,3  2,4
3,1  3,2   .   3,4
4,1  4,2  4,3   .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="combinations"&gt;combinations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.combinations"&gt;&lt;code&gt;combinations(iterable, r)&lt;/code&gt;&lt;/a&gt;
generates each unique pair of elements in lexicographical order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ben Blanks Explanation&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; .   1,2  1,3  1,4
 .    .   2,3  2,4
 .    .    .   3,4
 .    .    .    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="combinations_with_replacement"&gt;combinations_with_replacement&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement"&gt;&lt;code&gt;combinations_with_replacement(iterable, r)&lt;/code&gt;&lt;/a&gt;
is identical to combinations, except that one has duplicate elements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;combinations_with_replacement&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations_with_replacement&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;results in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; 1,1  1,2  1,3  1,4
  .   2,2  2,3  2,4
  .    .   3,3  3,4
  .    .    .   4,4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Python"></category><category term="itertools"></category><category term="permutations"></category><category term="combinations"></category></entry><entry><title>Bucketing in A/B-Testing</title><link href="https://martin-thoma.com/bucketing-in-ab-testing/" rel="alternate"></link><published>2019-11-28T20:00:00+01:00</published><updated>2019-11-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-11-28:/bucketing-in-ab-testing/</id><summary type="html">&lt;p&gt;Bucketing users in two groups is a key part in A/B testing. We need to randomly
assign users to a bucket. And in practice, we need to make sure a user is
assigned to the same bucket consistently.&lt;/p&gt;
&lt;p&gt;First, we need a user identifier.&lt;/p&gt;
&lt;h2 id="database-solution"&gt;Database Solution&lt;/h2&gt;
&lt;p&gt;We want to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bucketing users in two groups is a key part in A/B testing. We need to randomly
assign users to a bucket. And in practice, we need to make sure a user is
assigned to the same bucket consistently.&lt;/p&gt;
&lt;p&gt;First, we need a user identifier.&lt;/p&gt;
&lt;h2 id="database-solution"&gt;Database Solution&lt;/h2&gt;
&lt;p&gt;We want to store a variation per user in a database. Hence we have &lt;a href="https://martin-thoma.com/key-value-stores/"&gt;key-value store&lt;/a&gt; with the user-identifier as key and
the variation as value.&lt;/p&gt;
&lt;p&gt;The code then is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_variation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Some initialization / connection with a key_value_store&lt;/span&gt;
    &lt;span class="n"&gt;variation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_value_store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;variation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# The user_id was not in the key_value_store&lt;/span&gt;
        &lt;span class="n"&gt;variation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;assign_user_to_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variation&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;assign_user_to_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Assign the user_id to a variant.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    user_id : int&lt;/span&gt;
&lt;span class="sd"&gt;    distribution : Dict[str, float]&lt;/span&gt;
&lt;span class="sd"&gt;        Maps the name of a variant to a float. The sum of all should be 1.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    variant : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;user_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# in the interval [0, 1]&lt;/span&gt;
    &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;user_number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;
        &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case the &lt;code&gt;user_id&lt;/code&gt; is not an integer, you have two ways to assign one:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have another table mapping the strings to the numbers, counting up from 0.&lt;/li&gt;
&lt;li&gt;Use a hash (e.g. MD5) and convert the hexstring to a number (base 16 conversion).
   Optimizely uses a &lt;a href="https://en.wikipedia.org/wiki/MurmurHash"&gt;MurmurHash&lt;/a&gt; (Python: &lt;a href="https://pypi.org/project/mmh3/"&gt;mmh3&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="seeding-solution"&gt;Seeding Solution&lt;/h2&gt;
&lt;p&gt;The above solution is nice, because it is absolutely clear how it works. It is
not so nice that you need to access a database.&lt;/p&gt;
&lt;p&gt;Instead, you can play around with the seed of the random number generator. This
makes the database call obsolete. By seeding we can guarantee the output of
the random number generator while still having (pseudo) random numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;assign_user_to_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Assign the user_id to a variant.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    user_id : int&lt;/span&gt;
&lt;span class="sd"&gt;    distribution : Dict[str, float]&lt;/span&gt;
&lt;span class="sd"&gt;        Maps the name of a variant to a float. The sum of all should be 1.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    variant : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# in the interval [0, 1]&lt;/span&gt;
    &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;user_number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;
        &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that this has another nice property: If you change the distribution
slightly, then as many users as possible keep what they have.&lt;/p&gt;
&lt;p&gt;A potential problematic property: Always the same users get to be in the "A"
variant. So if you always choose the names "current" vs. "new", then some users
will always end up in A/B&amp;nbsp;tests. This is not good as the new variant might be
brittle or have flaws.&lt;/p&gt;
&lt;p&gt;Instead, we can give the test an unique name and thus do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;typing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mmh3&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;assign_user_to_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Assign the user_id to a variant.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    user_id : str&lt;/span&gt;
&lt;span class="sd"&gt;    test_name : str&lt;/span&gt;
&lt;span class="sd"&gt;    distribution : Dict[str, float]&lt;/span&gt;
&lt;span class="sd"&gt;        Maps the name of a variant to a float. The sum of all should be 1.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    variant : str&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mmh3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;test_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# in the interval [0, 1]&lt;/span&gt;
    &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;user_number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;
        &lt;span class="n"&gt;prob_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="random-number-generators"&gt;Random Number Generators&lt;/h2&gt;
&lt;p&gt;We might want to generate the variations across multiple systems. Most of the
code above is trivial to execute in any programming language. However, the
output of &lt;code&gt;random.seed(0); random.random()&lt;/code&gt; might differ between programming
languages or even versions of a programming language. The reason are
differences in the random number generators.&lt;/p&gt;
&lt;p&gt;A Pseudo-Random Number Generator (RNG) is a key component for the described
solution. In the following is a list of the components:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Seed&lt;/th&gt;
&lt;th&gt;Neighboring Seeds&lt;/th&gt;
&lt;th&gt;Used By&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Mersenne_Twister"&gt;Mersenne Twister&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center" style="background-color: #ccffcc"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td style="background-color: #ccffcc"&gt;Different results&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.python.org/3/library/random.html"&gt;Python 2.3 to 3.8&lt;/a&gt;, &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Random.html"&gt;R&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;Linear congruential generator&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center" style="background-color: #ccffcc"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td style="background-color: #ffd3d3"&gt;Similar results&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html"&gt;Java 8&lt;/a&gt;, &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4713.pdf"&gt;C++&lt;/a&gt;, &lt;a href="https://www.php.net/manual/en/function.rand.php"&gt;PHP?&lt;/a&gt;, &lt;a href="https://www.nu42.com/2014/05/perl-5200-brings-better-prng-to-windows.html"&gt;Perl&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Permuted_congruential_generator"&gt;Permuted Congruential Generator&lt;/a&gt; &lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td class="text-center" style="background-color: #ccffcc"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;?&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.scipy.org/doc/numpy/reference/random/bit_generators/pcg64.html"&gt;Numpy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Salsa20#ChaCha20_adoption"&gt;ChaCha20&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;?&lt;/td&gt;
&lt;td class="text-center"&gt;?&lt;/td&gt;
&lt;td&gt;&lt;a href="https://rust-random.github.io/rand/rand/rngs/struct.StdRng.html"&gt;Rust&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Xorshift"&gt;xorshift128+&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;?&lt;/td&gt;
&lt;td class="text-center"&gt;?&lt;/td&gt;
&lt;td&gt;&lt;a href="https://v8.dev/blog/math-random"&gt;JavaScript (V8)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Xoroshiro128%2B"&gt;Xoroshiro128+&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center" style="background-color: #ccffcc"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td style="background-color: #ccffcc"&gt;Different results&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Counter-based_random_number_generator_(CBRNG)"&gt;Threefry / Philox&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-center" style="background-color: #ccffcc"&gt;&lt;span style="color:green;" title="Yes"&gt;✔️&lt;/span&gt;&lt;/td&gt;
&lt;td style="background-color: #ccffcc"&gt;Different results&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I cannot properly judge the statistical quality of those, but I recommend
reading &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; and &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, I tried &lt;a href="https://pypi.org/project/java-random/"&gt;&lt;code&gt;java-random&lt;/code&gt;&lt;/a&gt; and
visualized the results (&lt;a href="https://github.com/MartinThoma/algorithms/blob/master/Python/random/generate_number_image.py"&gt;code&lt;/a&gt;).
What you see is 1000 random numbers generated. The colum is the seed, the row
are 1000 consecutive random numbers. Clearly, the numpy and the Python version
look better:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Java&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;th&gt;Numpy (PCG64)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-java.png"&gt;&lt;img alt="Java Pseudo-Random Number Generator" height="300" src="../images/2019/11/1000-random-numbers-java.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-python.png"&gt;&lt;img alt="Python Pseudo-Random Number Generator" height="300" src="../images/2019/11/1000-random-numbers-python.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-numpy.png"&gt;&lt;img alt="Numpy Pseudo-Random Number Generator" height="300" src="../images/2019/11/1000-random-numbers-numpy.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Do you see the stripes? This means neighboring seeds lead to similar sequences. Kudos to my colleague &lt;a href="http://jblewitt.com/blog/"&gt;James Blewitt&lt;/a&gt; who made me aware of this problem.&lt;/td&gt;
&lt;td colspan="2"&gt;This is how it should look like - no pattern to be seen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;MT19937&lt;/th&gt;
&lt;th&gt;Philox&lt;/th&gt;
&lt;th&gt;Xoroshiro128&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-MT19937.png"&gt;&lt;img alt="MT19937 PRNG" height="300" src="../images/2019/11/1000-random-numbers-MT19937.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-Philox.png"&gt;&lt;img alt="Philox PRNG" height="300" src="../images/2019/11/1000-random-numbers-Philox.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-Xoroshiro128.png"&gt;&lt;img alt="Xoroshiro128 PRNG" height="300" src="../images/2019/11/1000-random-numbers-Xoroshiro128.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;SFC64&lt;/th&gt;
&lt;th&gt;Xorshift1024&lt;/th&gt;
&lt;th&gt;ThreeFry&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-SFC64.png"&gt;&lt;img alt="SFC64 PRNG" height="300" src="../images/2019/11/1000-random-numbers-SFC64.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-Xorshift1024.png"&gt;&lt;img alt="Xorshift1024 PRNG" height="300" src="../images/2019/11/1000-random-numbers-Xorshift1024.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="../images/2019/11/1000-random-numbers-ThreeFry.png"&gt;&lt;img alt="ThreeFry PRNG" height="300" src="../images/2019/11/1000-random-numbers-ThreeFry.png" width="300"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Security in the sense of predictability of the sequence is also an important
property in many contexts. In the context of A/B-Testing, however, it does not
matter. State size is also interesting.&lt;/p&gt;
&lt;p&gt;PHP and Golang do either not at all or at least not clearly state what the
default random number generator is.&lt;/p&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Bucketing is easy as long as you have one system (OS and Programming language /
library) where you execute the bucketing. Once you have more, you need to take
care of how &lt;code&gt;random.random()&lt;/code&gt; actually works&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="http://www.pcg-random.org/"&gt;Random Number Generator Overview&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Melissa E. O'Neill: &lt;a href="https://www.cs.hmc.edu/tr/hmc-cs-2014-0905.pdf"&gt;PCG: A Family of Simple Fast Space-Efficient Statistically Good Algorithms for Random Number Generation&lt;/a&gt;, 2014.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Babu, Thomas: &lt;a href="https://arxiv.org/abs/1802.03201"&gt;Freestyle, a randomized version of ChaCha for resisting offline brute-force and dictionary attacks&lt;/a&gt;, 2018.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Optimizely: &lt;a href="https://docs.developers.optimizely.com/full-stack/docs/how-bucketing-works"&gt;How bucketing works&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Dario Gieselaar: &lt;a href="https://levelup.gitconnected.com/the-engineering-problem-of-a-b-testing-ac1adfd492a8"&gt;The Engineering Problem of A/B Testing&lt;/a&gt;, 2019. - Just a nice post about A/B Testing in general.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;&lt;a href="https://docs.scipy.org/doc/numpy/reference/random/bit_generators/"&gt;Bit Generators&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:6" title="Jump back to footnote 6 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;PyPI: &lt;a href="https://pypi.org/project/randomgen/"&gt;randomgen&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:7" title="Jump back to footnote 7 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/List_of_random_number_generators"&gt;List of random number generators&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:8" title="Jump back to footnote 8 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Data Science"></category><category term="A/B-Testing"></category><category term="Random Number Generator"></category></entry><entry><title>Simulated Annealing</title><link href="https://martin-thoma.com/simulated-annealing/" rel="alternate"></link><published>2019-11-28T20:00:00+01:00</published><updated>2019-11-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-11-28:/simulated-annealing/</id><summary type="html">&lt;div class="info"&gt;This article is not quite finished, but I recently wanted to share some ideas.&lt;/div&gt;
&lt;p&gt;Simulated Annealing is an optimization algorithm. It is well-suited for
combinatoric problems.&lt;/p&gt;
&lt;h2 id="confusion-matrix-ordering"&gt;Confusion Matrix Ordering&lt;/h2&gt;
&lt;p&gt;A confusion matrix contains the predictions of a classifier together with their
ground truth. The cell $(i, j)$ gives the information …&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;This article is not quite finished, but I recently wanted to share some ideas.&lt;/div&gt;
&lt;p&gt;Simulated Annealing is an optimization algorithm. It is well-suited for
combinatoric problems.&lt;/p&gt;
&lt;h2 id="confusion-matrix-ordering"&gt;Confusion Matrix Ordering&lt;/h2&gt;
&lt;p&gt;A confusion matrix contains the predictions of a classifier together with their
ground truth. The cell $(i, j)$ gives the information how often class $i$ was
predicted to be class $j$. So the diagonal $i=j$ contains the number of samples
where the classifier got it right.&lt;/p&gt;
&lt;p&gt;In this matrix, the order of classes is irrelevant. You can change it. So
instead of the order [mouse, cat, dog] you can have [cat, dog, mouse]. But for
big matrices it might be interesting to get some more structure. For example,
you might want to push the high elements close to the diagonal. This way,
you can easier see the errors. An awesome side-effect is that classes which look
similar to the classifier are closer together in the list.&lt;/p&gt;
&lt;p&gt;Changing the order of the classes can itself be seen as an optimization problem.
For example, a matrix can be scored with&lt;/p&gt;
&lt;p&gt;$$E(C) = \sum_{i=1}^n \sum_{j=1}^n (i - j)^2$$&lt;/p&gt;
&lt;p&gt;I've described the details in &lt;a href="https://arxiv.org/pdf/1707.09725.pdf"&gt;Analysis and Optimization of Convolutional Neural Network Architectures, Chapter 5.2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The simplest way to approach this problem is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;optimize_brute_force&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# initialize&lt;/span&gt;
    &lt;span class="n"&gt;best_permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Create new candidate&lt;/span&gt;
        &lt;span class="n"&gt;permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Score candidate&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Replace if it improved&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
            &lt;span class="n"&gt;best_permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;permutation&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best_permutation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this is super inefficient. The reason is that the matrix has
sub-structures which you destroy all the time. Instead of creating complete new
permutations, you could simply swap two elements of the best permutation so
far:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;optimize_greedy_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# initialize&lt;/span&gt;
    &lt;span class="n"&gt;best_permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Create new candidate&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Score candidate&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Replace if it improved&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
            &lt;span class="n"&gt;best_permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;permutation&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best_permutation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this is still not good. This problem is of a structure that can lead to
local optima, where a single swap does not improve anything, but only two or
more swaps can. To fix this, one should allow at least equal solutions to change
the currently stored one. So if two solutions $s_1, s_2$ both have a score of
3141, then the &lt;code&gt;best_solution&lt;/code&gt; should be allowed to switch between the two.&lt;/p&gt;
&lt;p&gt;You will quickly figure out that this is not enough. You need to allow the
algorithm to make the solution temporarily worse. Still, you want to improve
overall. To weight this against each other we have simulated annealing.&lt;/p&gt;
&lt;p&gt;To understand the idea, think about cooling metal. There are some constraints
on how the atoms can be arranged and what is engergetically preferable / more
stable. And while the metal is cooling, the atoms move less. To jump to a more
stable setting, the setting has to be closer to the current setting.&lt;/p&gt;
&lt;p&gt;In the algorithm, you could say that making the score worse (e.g. from 1234 to
3141), you have to be at the beginning of the optimization process. Some steps
later, it might only be possible to make it worse from 1234 to 1300. Even later
maybe only to 1250. And in the end it has to be strictly better.&lt;/p&gt;
&lt;p&gt;How does that look in code?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;optimize_greedy_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cooling_factor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.995&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# initialize&lt;/span&gt;
    &lt;span class="n"&gt;best_permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Create new candidate&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_permutation&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Score candidate&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Replace if it improved&lt;/span&gt;
        &lt;span class="n"&gt;is_better&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_score&lt;/span&gt;
        &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_hot_enough&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_better&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;is_hot_enough&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
            &lt;span class="n"&gt;best_permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;permutation&lt;/span&gt;
        &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;cooling_factor&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best_permutation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this specific problem, I noticed that the temperature-trick was way less
important than allowing to swap blocks. So once in a while, I don't swap single
elements but move a whole range.&lt;/p&gt;</content><category term="Code"></category><category term="Data Science"></category></entry><entry><title>jq</title><link href="https://martin-thoma.com/jq/" rel="alternate"></link><published>2019-11-03T12:00:00+01:00</published><updated>2019-11-03T12:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-11-03:/jq/</id><summary type="html">&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; is a command line tool for processing JSON data. It is useful when
executing small ad-hoc tasks. In this sense, it is similar to &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt; and
&lt;code&gt;grep&lt;/code&gt;. It is very good for the first step in exploratory data analysis:
Getting an idea what you actually have.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ubuntu …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; is a command line tool for processing JSON data. It is useful when
executing small ad-hoc tasks. In this sense, it is similar to &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt; and
&lt;code&gt;grep&lt;/code&gt;. It is very good for the first step in exploratory data analysis:
Getting an idea what you actually have.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ubuntu&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;jq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check if it worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;--version
jq-1.5-1-a5b5cbe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="usage-example"&gt;Usage Example&lt;/h2&gt;
&lt;p&gt;There are &lt;a href="https://github.com/jdorfman/awesome-json-datasets#movies"&gt;tons of JSON dataset examples&lt;/a&gt;. Let's use &lt;a href="https://raw.githubusercontent.com/prust/wikipedia-movie-data/master/movies.json"&gt;American movies scraped from Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Download the data&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.githubusercontent.com/prust/wikipedia-movie-data/master/movies.json

&lt;span class="c1"&gt;# What do we have here?&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;wc&lt;span class="w"&gt; &lt;/span&gt;movies.json
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;144969&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3386161&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;movies.json

&lt;span class="c1"&gt;# Everything is in one super long line. Is it a dict or a list?&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;head&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;movies.json
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;:&lt;span class="s2"&gt;"After Dark in Central Park"&lt;/span&gt;,&lt;span class="s2"&gt;"year"&lt;/span&gt;:1900,&lt;span class="s2"&gt;"cast"&lt;/span&gt;:&lt;span class="o"&gt;[]&lt;/span&gt;,&lt;span class="s2"&gt;"genres"&lt;/span&gt;:&lt;span class="o"&gt;[]}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"titl%&lt;/span&gt;

&lt;span class="s2"&gt;# List. How many movies do we have?&lt;/span&gt;
$&lt;span class="s2"&gt; cat movies.json | jq '. | length'&lt;/span&gt;
&lt;span class="s2"&gt;28795&lt;/span&gt;

&lt;span class="s2"&gt;# Let's look at the first 5 examples to see which data fields we have:&lt;/span&gt;
$&lt;span class="s2"&gt; cat movies.json | jq '.[:5]'&lt;/span&gt;
&lt;span class="s2"&gt;[&lt;/span&gt;
&lt;span class="s2"&gt;  {&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;title&lt;span class="s2"&gt;": "&lt;/span&gt;After&lt;span class="w"&gt; &lt;/span&gt;Dark&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Central&lt;span class="w"&gt; &lt;/span&gt;Park&lt;span class="s2"&gt;",&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;year&lt;span class="s2"&gt;": 1900,&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;cast&lt;span class="s2"&gt;": [],&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;genres&lt;span class="s2"&gt;": []&lt;/span&gt;
&lt;span class="s2"&gt;  },&lt;/span&gt;
&lt;span class="s2"&gt;  {&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;title&lt;span class="s2"&gt;": "&lt;/span&gt;Boarding&lt;span class="w"&gt; &lt;/span&gt;School&lt;span class="w"&gt; &lt;/span&gt;Girls&lt;span class="s1"&gt;' Pajama Parade",&lt;/span&gt;
&lt;span class="s1"&gt;    "year": 1900,&lt;/span&gt;
&lt;span class="s1"&gt;    "cast": [],&lt;/span&gt;
&lt;span class="s1"&gt;    "genres": []&lt;/span&gt;
&lt;span class="s1"&gt;  },&lt;/span&gt;
&lt;span class="s1"&gt;  {&lt;/span&gt;
&lt;span class="s1"&gt;    "title": "Buffalo Bill'&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;Wild&lt;span class="w"&gt; &lt;/span&gt;West&lt;span class="w"&gt; &lt;/span&gt;Parad&lt;span class="s2"&gt;",&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;year&lt;span class="s2"&gt;": 1900,&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;cast&lt;span class="s2"&gt;": [],&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;genres&lt;span class="s2"&gt;": []&lt;/span&gt;
&lt;span class="s2"&gt;  },&lt;/span&gt;
&lt;span class="s2"&gt;  {&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;title&lt;span class="s2"&gt;": "&lt;/span&gt;Caught&lt;span class="s2"&gt;",&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;year&lt;span class="s2"&gt;": 1900,&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;cast&lt;span class="s2"&gt;": [],&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;genres&lt;span class="s2"&gt;": []&lt;/span&gt;
&lt;span class="s2"&gt;  },&lt;/span&gt;
&lt;span class="s2"&gt;  {&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;title&lt;span class="s2"&gt;": "&lt;/span&gt;Clowns&lt;span class="w"&gt; &lt;/span&gt;Spinning&lt;span class="w"&gt; &lt;/span&gt;Hats&lt;span class="s2"&gt;",&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;year&lt;span class="s2"&gt;": 1900,&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;cast&lt;span class="s2"&gt;": [],&lt;/span&gt;
&lt;span class="s2"&gt;    "&lt;/span&gt;genres&lt;span class="s2"&gt;": []&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, I would usually switch to Pandas. However, let's see how far
we get with &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I want to see the titles. To do so, I first extract each list element. Then
I extract the &lt;code&gt;title&lt;/code&gt; field from each of them. To allow me scolling through it,
I apply &lt;code&gt;less&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.[] | .title'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;less
&lt;span class="s2"&gt;"After Dark in Central Park"&lt;/span&gt;
&lt;span class="s2"&gt;"Boarding School Girls' Pajama Parade"&lt;/span&gt;
&lt;span class="s2"&gt;"Buffalo Bill's Wild West Parad"&lt;/span&gt;
&lt;span class="s2"&gt;"Caught"&lt;/span&gt;
&lt;span class="s2"&gt;"Clowns Spinning Hats"&lt;/span&gt;
&lt;span class="s2"&gt;"Capture of Boer Battery by British"&lt;/span&gt;
&lt;span class="s2"&gt;"The Enchanted Drawing"&lt;/span&gt;
&lt;span class="s2"&gt;"Feeding Sea Lions"&lt;/span&gt;
&lt;span class="s2"&gt;"How to Make a Fat Wife Out of Two Lean Ones"&lt;/span&gt;
&lt;span class="s2"&gt;"New Life Rescue"&lt;/span&gt;
&lt;span class="s2"&gt;"New Morning Bath"&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I want to find errors in the data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.[] | .title | select(length&amp;lt;=2)'&lt;/span&gt;
&lt;span class="s2"&gt;"It"&lt;/span&gt;
&lt;span class="s2"&gt;"M"&lt;/span&gt;
&lt;span class="s2"&gt;"W"&lt;/span&gt;
&lt;span class="s2"&gt;"FM"&lt;/span&gt;
&lt;span class="s2"&gt;"10"&lt;/span&gt;
&lt;span class="s2"&gt;"Q"&lt;/span&gt;
&lt;span class="s2"&gt;"Da"&lt;/span&gt;
&lt;span class="s2"&gt;"It"&lt;/span&gt;
&lt;span class="s2"&gt;"Ed"&lt;/span&gt;
&lt;span class="s2"&gt;"54"&lt;/span&gt;
&lt;span class="s2"&gt;"Pi"&lt;/span&gt;
&lt;span class="s2"&gt;"Go"&lt;/span&gt;
&lt;span class="s2"&gt;"CQ"&lt;/span&gt;
&lt;span class="s2"&gt;"O"&lt;/span&gt;
&lt;span class="s2"&gt;"RV"&lt;/span&gt;
&lt;span class="s2"&gt;"P2"&lt;/span&gt;
&lt;span class="s2"&gt;"21"&lt;/span&gt;
&lt;span class="s2"&gt;"W."&lt;/span&gt;
&lt;span class="s2"&gt;"9"&lt;/span&gt;
&lt;span class="s2"&gt;"Up"&lt;/span&gt;
&lt;span class="s2"&gt;"42"&lt;/span&gt;
&lt;span class="s2"&gt;"XX"&lt;/span&gt;
&lt;span class="s2"&gt;"It"&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .title | length] | max'&lt;/span&gt;
&lt;span class="m"&gt;110&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.[] | .title | select(length&amp;gt;=100)'&lt;/span&gt;
&lt;span class="s2"&gt;"Cornell-Columbia-University of Pennsylvania Boat Race at Ithaca, N.Y., Showing Lehigh Valley Observation Train"&lt;/span&gt;
&lt;span class="s2"&gt;"The Green Goods Man; or, Josiah and Samanthy's Experience with the Original 'American Confidence Game'"&lt;/span&gt;

&lt;span class="c1"&gt;# Alternatively:&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'max_by(.title | length).title'&lt;/span&gt;
&lt;span class="s2"&gt;"Cornell-Columbia-University of Pennsylvania Boat Race at Ithaca, N.Y., Showing Lehigh Valley Observation Train"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WTF, &lt;a href="https://www.imdb.com/title/tt0235439/"&gt;The Green Goods Man...&lt;/a&gt; and
&lt;a href="https://www.imdb.com/title/tt0357570/"&gt;Cornell-Columbia-University ...&lt;/a&gt; are
actually movies! Also &lt;a href="https://www.imdb.com/title/tt0120577/?ref_=nv_sr_1?ref_=nv_sr_1"&gt;54&lt;/a&gt;,
&lt;a href="https://www.imdb.com/title/tt0449089/?ref_=nv_sr_1?ref_=nv_sr_1"&gt;RV&lt;/a&gt;,
&lt;a href="https://www.imdb.com/title/tt0043766/?ref_=fn_al_tt_2"&gt;M&lt;/a&gt; and
&lt;a href="https://www.imdb.com/title/tt3166542/?ref_=fn_al_tt_3"&gt;W&lt;/a&gt; are actually titles!&lt;/p&gt;
&lt;p&gt;Ok, let's see which value range the year covers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .year] | min'&lt;/span&gt;
&lt;span class="m"&gt;1900&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .year] | max'&lt;/span&gt;
&lt;span class="m"&gt;2018&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's see which ones were published in 1900:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.[] | select(.year == 1900) | .title'&lt;/span&gt;
&lt;span class="s2"&gt;"After Dark in Central Park"&lt;/span&gt;
&lt;span class="s2"&gt;"Boarding School Girls' Pajama Parade"&lt;/span&gt;
&lt;span class="s2"&gt;"Buffalo Bill's Wild West Parad"&lt;/span&gt;
&lt;span class="s2"&gt;"Caught"&lt;/span&gt;
&lt;span class="s2"&gt;"Clowns Spinning Hats"&lt;/span&gt;
&lt;span class="s2"&gt;"Capture of Boer Battery by British"&lt;/span&gt;
&lt;span class="s2"&gt;"The Enchanted Drawing"&lt;/span&gt;
&lt;span class="s2"&gt;"Feeding Sea Lions"&lt;/span&gt;
&lt;span class="s2"&gt;"How to Make a Fat Wife Out of Two Lean Ones"&lt;/span&gt;
&lt;span class="s2"&gt;"New Life Rescue"&lt;/span&gt;
&lt;span class="s2"&gt;"New Morning Bath"&lt;/span&gt;
&lt;span class="s2"&gt;"Searching Ruins on Broadway, Galveston, for Dead Bodies"&lt;/span&gt;
&lt;span class="s2"&gt;"The Tribulations of an Amateur Photographer"&lt;/span&gt;
&lt;span class="s2"&gt;"Trouble in Hogan's Alley"&lt;/span&gt;
&lt;span class="s2"&gt;"Two Old Sparks"&lt;/span&gt;
&lt;span class="s2"&gt;"The Wonder, Ching Ling Foo"&lt;/span&gt;
&lt;span class="s2"&gt;"Watermelon Contest"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, what about the &lt;code&gt;cast&lt;/code&gt; field? How often is there at least one value? What
is the maximum number of cast members we have?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | length] | max'&lt;/span&gt;
&lt;span class="m"&gt;35&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | select(length&amp;gt;=1)] | length'&lt;/span&gt;
&lt;span class="m"&gt;27871&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | select(length&amp;gt;=2)] | length'&lt;/span&gt;
&lt;span class="m"&gt;26145&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | select(length&amp;gt;=3)] | length'&lt;/span&gt;
&lt;span class="m"&gt;13755&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | select(length&amp;gt;=10)] | length'&lt;/span&gt;
&lt;span class="m"&gt;394&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | select(length&amp;gt;=20)] | length'&lt;/span&gt;
&lt;span class="m"&gt;23&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[.[] | .cast | select(length&amp;gt;=30)] | length'&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;# Get the titles for which we have at least 30 actors:&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;movies.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.[] | select(.cast|length&amp;gt;=30) | .title'&lt;/span&gt;
&lt;span class="s2"&gt;"Cars 2"&lt;/span&gt;
&lt;span class="s2"&gt;"The Twilight Saga: Breaking Dawn - Part 2"&lt;/span&gt;
&lt;span class="s2"&gt;"Anchorman 2: The Legend Continues"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I would like to see for which actors we have most titles. Also, I would
like to get a list of all actors in the dataset. However, I have no clue how to
do this with &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="workflows"&gt;Workflows&lt;/h2&gt;
&lt;p&gt;When I see json in the internet, I want my browser to display it in a nice way. &lt;a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=de"&gt;JSONView&lt;/a&gt; is good for that, but fails if the JSON becomes huge.&lt;/p&gt;
&lt;p&gt;Also, usually I start with opening it in Sublime Text. &lt;a href="https://packagecontrol.io/packages/JSON%20Reindent"&gt;JSON Reindent&lt;/a&gt; helps me to see the structure.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stedolan.github.io/jq/"&gt;Official Website&lt;/a&gt; and &lt;a href="https://github.com/stedolan/jq"&gt;git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Data analysis"></category><category term="EDA"></category><category term="JSON"></category><category term="JSONL"></category></entry><entry><title>Ansible</title><link href="https://martin-thoma.com/ansible/" rel="alternate"></link><published>2019-11-03T08:00:00+01:00</published><updated>2019-11-03T08:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-11-03:/ansible/</id><summary type="html">&lt;p&gt;Ansible is a configuration management tool maintained by Red Hat. It has to be
installed on a controll machine. On the target machine, no configuration is
needed. The control machine connects to the target machines via SSH.&lt;/p&gt;
&lt;h2 id="which-problem-does-it-solve"&gt;Which problem does it solve?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;In short&lt;/strong&gt;: Ansible makes configurations repeatable.&lt;/p&gt;
&lt;p&gt;Why this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ansible is a configuration management tool maintained by Red Hat. It has to be
installed on a controll machine. On the target machine, no configuration is
needed. The control machine connects to the target machines via SSH.&lt;/p&gt;
&lt;h2 id="which-problem-does-it-solve"&gt;Which problem does it solve?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;In short&lt;/strong&gt;: Ansible makes configurations repeatable.&lt;/p&gt;
&lt;p&gt;Why this is good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disaster Recovery: You have a web service running on AWS. Your account was
  hacked and deleted. Having your infrastructure defined as code (IaC), you can
  re-create all resources with the configuration you had before.&lt;/li&gt;
&lt;li&gt;Site Reliability: Having IaC, you can have code reviews for changes. This
  helps to reduce human error.&lt;/li&gt;
&lt;li&gt;Scalability: If we want to add more services, it is easier to repeat
  patterns. So this might help different teams at a company to keep in sync.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In long&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;If you have a web service running, you hopefully have the code for that service
under version control (e.g. &lt;code&gt;git&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Version control helps to keep the same state
everywhere, find the changes (&lt;a href="https://github.com/takluyver/bisect-demo"&gt;&lt;code&gt;git bisect&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://git-scm.com/docs/git-bisect"&gt;docs&lt;/a&gt;) / &lt;a href="https://git-scm.com/docs/git-blame"&gt;&lt;code&gt;git blame&lt;/code&gt;&lt;/a&gt;),
undo the change (&lt;a href="https://git-scm.com/docs/git-revert"&gt;&lt;code&gt;git revert&lt;/code&gt;&lt;/a&gt;). So the
version control gives you documentation and archives changes.&lt;/p&gt;
&lt;p&gt;However, if you have a web service running, the software is not the only
important thing. It has to run somewhere. This means you actually need a
physical machine. You don't need to own it / take care about the hardware, but
it needs to exist. Suppose you use Amazons Cloud AWS. Then you can use
&lt;a href="https://en.wikipedia.org/wiki/Terraform_(software)"&gt;Terraform&lt;/a&gt; / &lt;a href="https://aws.amazon.com/cloudformation"&gt;AWS CloudFormation&lt;/a&gt; to define in code on which kinds of
machines it is running. The idea to have this written in code is called
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code"&gt;Infrastructure as code&lt;/a&gt; (IaC).
It allows you to have the infrastructure under version control and get the same
benefits as were mentioned about version control for code.&lt;/p&gt;
&lt;p&gt;Next, you need to configure the machines: Add certificates, SSH keys, LDAP,
install Docker. This is where Ansible helps.&lt;/p&gt;
&lt;p&gt;You might also want to read &lt;a href="https://www.upguard.com/blog/5-configuration-management-boss"&gt;a real world example&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Ansible is written in Python. For this reason, the simplest way to install it
might be via the Python Package installer &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ansible
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test if it worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible&lt;span class="w"&gt; &lt;/span&gt;--version
ansible&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.9.0
&lt;span class="w"&gt;  &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;None
&lt;span class="w"&gt;  &lt;/span&gt;configured&lt;span class="w"&gt; &lt;/span&gt;module&lt;span class="w"&gt; &lt;/span&gt;search&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'/home/moose/.ansible/plugins/modules'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/usr/share/ansible/plugins/modules'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;ansible&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;module&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/lib/python3.6/site-packages/ansible
&lt;span class="w"&gt;  &lt;/span&gt;executable&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/moose/.local/bin/ansible
&lt;span class="w"&gt;  &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default,&lt;span class="w"&gt; &lt;/span&gt;Oct&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2019&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;:59:55&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;GCC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.3.0&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="vocabulary"&gt;Vocabulary&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Task&lt;/dt&gt;
&lt;dd&gt;A task is a command executed on the target machine. A task is a call to an Ansible module.&lt;/dd&gt;
&lt;dt&gt;Role&lt;/dt&gt;
&lt;dd&gt;A list of tasks. Every role is a directory below &lt;code&gt;/roles&lt;/code&gt; and contains a `main.yml` which defines the tasks.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html"&gt;Playbook&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Determines which task/role should be applied to which target machine. &lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variables-discovered-from-systems-facts"&gt;Facts&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Facts are information derived from speaking with your remote systems.&lt;/dd&gt;
&lt;dt&gt;Idempotency&lt;/dt&gt;
&lt;dd&gt;An idempotent operation can be applied multiple times without changing the result beyond the initial application. Basically, it means "repeatable".&lt;/dd&gt;
&lt;dt&gt;Convergence&lt;/dt&gt;
&lt;dd&gt;Bring resources to a desired state if they diverge&lt;/dd&gt;
&lt;dt&gt;Immutability&lt;/dt&gt;
&lt;dd&gt;Resources are never changed. They are only created and destroyed. (Terraform and CloudFormation work like this)&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;Ad hoc command to check the connection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;ping&lt;span class="w"&gt; &lt;/span&gt;all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ad hoc command to get the available disk space:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ansible -m [module] -a '[module options]' [target]&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;ansible&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'df -h'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ansible executes stuff with your account. If you need root, specify &lt;code&gt;-b&lt;/code&gt; and
&lt;code&gt;-k&lt;/code&gt; to ask for a password.&lt;/p&gt;
&lt;p&gt;The default project structure is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
&amp;boxvr;&amp;boxh;&amp;boxh; playbook.yml
&amp;boxur;&amp;boxh;&amp;boxh; roles
    &amp;boxvr;&amp;boxh;&amp;boxh; example-role
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; files
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; foo.txt
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; tasks
    &amp;boxv;&amp;nbsp;&amp;nbsp;     &amp;boxur;&amp;boxh;&amp;boxh; main.yml
    &amp;boxur;&amp;boxh;&amp;boxh; foo-role
        &amp;boxur;&amp;boxh;&amp;boxh; tasks
            &amp;boxur;&amp;boxh;&amp;boxh; main.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;main.yml&lt;/code&gt; files have the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Choose a descriptive name for the task as ansible will print them when&lt;/span&gt;
&lt;span class="c1"&gt;# executing&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install a list of packages&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# The ansible module&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# install the following packages&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;foo&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bar&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Add some file to the target machines&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;../files/foo.txt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/absolute/path/foo.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;playbook.yml&lt;/code&gt; file has the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# become another user; by default root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then execute the playbook via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible-playbook&lt;span class="w"&gt; &lt;/span&gt;playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="alternatives"&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Puppet_(company)#Puppet"&gt;Puppet&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Chef_(software)"&gt;Chef&lt;/a&gt; are two other configuration management tools which are often used.&lt;/p&gt;
&lt;p&gt;Where Ansible is push-based, Puppet and Chef are pull-based. So the target
machines need to have an agent running which pulls.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ben's IT Lessons: &lt;a href="https://www.youtube.com/watch?v=icR-df2Olm8"&gt;Ansible - A Beginner's Tutorial, Part 1&lt;/a&gt; / &lt;a href="https://www.youtube.com/watch?v=pRZA9ymZXn0"&gt;Part 2&lt;/a&gt;, 2017.&lt;/li&gt;
&lt;li&gt;Ansible: &lt;a href="https://docs.ansible.com/ansible/2.4/list_of_all_modules.html"&gt;List of Ansible Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;halfercode on Reddit: &lt;a href="https://www.reddit.com/r/docker/comments/5mfx0e/does_docker_make_ansible_and_similar/"&gt;Does Docker make Ansible and similar orchestration tools redundant?&lt;/a&gt;, 2017.&lt;/li&gt;
&lt;li&gt;Lou Bichard: &lt;a href="https://www.plutora.com/blog/configuration-management"&gt;Configuration Management: What Is It and Why Is It Important?&lt;/a&gt;, 2019.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="Ansible"></category><category term="DevOps"></category><category term="IaC"></category><category term="Configuration Management"></category><category term="Continuous Delivery"></category></entry><entry><title>Key-Value Stores</title><link href="https://martin-thoma.com/key-value-stores/" rel="alternate"></link><published>2019-09-29T20:00:00+02:00</published><updated>2019-09-29T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-09-29:/key-value-stores/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Key-value_database"&gt;Key-value stores&lt;/a&gt; are
specialized NoSQL databases. Essentially, they are dictionaries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="database-properties"&gt;Database Properties&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt; is a set of properties of database
transactions intended to guarantee validity even in the event of errors, power
failures, etc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;tomicity: Either all statements are applied or none. This is important for SELECTs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Key-value_database"&gt;Key-value stores&lt;/a&gt; are
specialized NoSQL databases. Essentially, they are dictionaries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="database-properties"&gt;Database Properties&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt; is a set of properties of database
transactions intended to guarantee validity even in the event of errors, power
failures, etc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;tomicity: Either all statements are applied or none. This is important for SELECTs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency: A transaction brings the DB from one valid state to another; see also &lt;a href="https://en.wikipedia.org/wiki/Eventual_consistency"&gt;eventual consistency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;solation: concurrent execution of transactions leaves the database in
  the same state that would have been obtained if the transactions were
  executed sequentially&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;urability: once a transaction has been committed, it will remain
  committed even in the case of a system failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please notice that Atomicity, Consistency and Isolation are not relevant in
many cases where you use a key-value store as you only have GET / SET for one
key.&lt;/p&gt;
&lt;h2 id="database-features"&gt;Database Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Embedded or client/server&lt;/strong&gt;: An &lt;a href="https://en.wikipedia.org/wiki/Embedded_database"&gt;embedded database&lt;/a&gt;
  is not visible to remote servers. It is embedded in the current process
  (which can, of course, make it visible).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type System&lt;/strong&gt;: Enforcing types takes time and gives guarantees. Some
  databases have very simple type systems (e.g. SQLite) and some offer more
  (e.g. MySQL)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability / Failover&lt;/strong&gt;: Systems fail. The machine which contains your database could
  simply be plugged out. How do you deal with that?&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Backup options&lt;/strong&gt;: If this is relevant at all depends very much what you
  use it for. If the key-value store is used as a cache, then backup
  options are probably not necessary. If it is used to store configuration,
  then it likely is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replication&lt;/strong&gt;: Having another machine which replicates the data is the
  only way to make sure that the system is available, even if the main
  machine breaks. See &lt;a href="https://redis.io/topics/replication"&gt;Redis Replication&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Suppose you want to store more than you can do on the hardware
  of a single machine. Do you have to buy a better machine (scale vertically)
  or is it possible to have another (cheap) machine and run the datase on two
  machines in a distributed way (scale horizontally)? This is done via &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-database-sharding"&gt;sharding&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt;: Having a user system and different databases in the same database
  management system is nice, because it allows centralisation of the service
  for different teams at the same company. Then somebody takes care of the
  database being up / being backed up and others just get a user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-cases"&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Configuration&lt;/em&gt;: Suppose you have a product which makes use of micro services.
In some cases, those micro services need some alignment in form of
configuration.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Caches&lt;/em&gt;: Web services can contain all sorts of computations which might need
longer than acceptable. Caching / pre-calculating those are a common approach
for this problem.&lt;/p&gt;
&lt;h2 id="other-benchmarks"&gt;Other Benchmarks&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.flexera.com/blog/cloud/2007/11/mysql-performance-on-amazon-ec2/"&gt;MySQL Performance on Amazon EC2&lt;/a&gt;, 2007:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2 small: 227 reads/s; 116 read+writes / s&lt;/li&gt;
&lt;li&gt;EC2 large: 430 reads/s; 310 read+writes / s&lt;/li&gt;
&lt;li&gt;EC2 xlarge: 630 reads/s; 483 read+writes / s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sysbench:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mysql
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;sbtest&lt;span class="p"&gt;;&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;sysbench&lt;span class="w"&gt; &lt;/span&gt;oltp_read_write&lt;span class="w"&gt; &lt;/span&gt;--db-driver&lt;span class="o"&gt;=&lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;--mysql-db&lt;span class="o"&gt;=&lt;/span&gt;dbtest&lt;span class="w"&gt; &lt;/span&gt;--mysql-user&lt;span class="o"&gt;=&lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;--mysql-password&lt;span class="o"&gt;=&lt;/span&gt;YOUR_PASSWORD&lt;span class="w"&gt; &lt;/span&gt;prepare
$&lt;span class="w"&gt; &lt;/span&gt;sysbench&lt;span class="w"&gt; &lt;/span&gt;oltp_read_write&lt;span class="w"&gt; &lt;/span&gt;--db-driver&lt;span class="o"&gt;=&lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;--mysql-db&lt;span class="o"&gt;=&lt;/span&gt;dbtest&lt;span class="w"&gt; &lt;/span&gt;--threads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--events&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--mysql-user&lt;span class="o"&gt;=&lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;--mysql-password&lt;span class="o"&gt;=&lt;/span&gt;YOUR_PASSWORD&lt;span class="w"&gt; &lt;/span&gt;run

$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;postgres&lt;span class="w"&gt; &lt;/span&gt;psql
&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# CREATE DATABASE sbtest;&lt;/span&gt;
&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# grant all privileges on database sbtest to example_user;&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;sysbench&lt;span class="w"&gt; &lt;/span&gt;oltp_read_write&lt;span class="w"&gt; &lt;/span&gt;--db-driver&lt;span class="o"&gt;=&lt;/span&gt;pgsql&lt;span class="w"&gt; &lt;/span&gt;--pgsql-db&lt;span class="o"&gt;=&lt;/span&gt;sbtest&lt;span class="w"&gt; &lt;/span&gt;--pgsql-user&lt;span class="o"&gt;=&lt;/span&gt;example_user&lt;span class="w"&gt; &lt;/span&gt;--pgsql-password&lt;span class="o"&gt;=&lt;/span&gt;example_password&lt;span class="w"&gt; &lt;/span&gt;prepare
$&lt;span class="w"&gt; &lt;/span&gt;sysbench&lt;span class="w"&gt; &lt;/span&gt;oltp_read_write&lt;span class="w"&gt; &lt;/span&gt;--db-driver&lt;span class="o"&gt;=&lt;/span&gt;pgsql&lt;span class="w"&gt; &lt;/span&gt;--pgsql-db&lt;span class="o"&gt;=&lt;/span&gt;sbtest&lt;span class="w"&gt; &lt;/span&gt;--threads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--events&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--pgsql-user&lt;span class="o"&gt;=&lt;/span&gt;example_user&lt;span class="w"&gt; &lt;/span&gt;--pgsql-password&lt;span class="o"&gt;=&lt;/span&gt;example_password&lt;span class="w"&gt; &lt;/span&gt;run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my Thinkpad T460p I get the following numbers. However, I'm not certain how
valuable they are as they fluctuate quite a bit between consecutive runs.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;Database&lt;/th&gt;
&lt;th rowspan="2"&gt;Transactions&lt;/th&gt;
&lt;th rowspan="2"&gt;Queries&lt;/th&gt;
&lt;th colspan="4"&gt;Latency&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Min&lt;/th&gt;
&lt;th&gt;AVG&lt;/th&gt;
&lt;th&gt;Max&lt;/th&gt;
&lt;th&gt;95th percentile&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MariaDB 15.1&lt;/td&gt;
&lt;td&gt;484.81&amp;nbsp;/&amp;nbsp;s&lt;/td&gt;
&lt;td&gt;9701.13&amp;nbsp;/&amp;nbsp;s&lt;/td&gt;
&lt;td&gt;14.25ms&lt;/td&gt;
&lt;td&gt;32.61ms&lt;/td&gt;
&lt;td&gt;137.37ms&lt;/td&gt;
&lt;td&gt;53.85ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Postgres 10.10&lt;/td&gt;
&lt;td&gt;457.44&amp;nbsp;/&amp;nbsp;s&lt;/td&gt;
&lt;td&gt;9644.38&amp;nbsp;/&amp;nbsp;s&lt;/td&gt;
&lt;td&gt;5.44ms&lt;/td&gt;
&lt;td&gt;34.90ms&lt;/td&gt;
&lt;td&gt;2052.58ms&lt;/td&gt;
&lt;td&gt;32.53ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="features"&gt;Features&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;SQLite&lt;/th&gt;
&lt;th&gt;MariaDB&lt;/th&gt;
&lt;th&gt;Postgresql&lt;/th&gt;
&lt;th&gt;Redis&lt;/th&gt;
&lt;th&gt;Memcached&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;&amp;cross;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:green;" title="Yes"&gt;✔&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Users&lt;/th&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;&amp;cross;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://mariadb.com/kb/en/library/create-user/"&gt;&lt;span style="color:green;" title="Yes"&gt;✔&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.postgresql.org/docs/9.1/sql-createuser.html"&gt;&lt;span style="color:green;" title="Yes"&gt;✔&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;&amp;cross;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span style="color:red;" title="No"&gt;&amp;cross;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="serverless-databases"&gt;Serverless Databases&lt;/h3&gt;
&lt;p&gt;Serverless Database is a fancy name for a hosted database. It is also called
DBaaS - database as a service. You don't have to worry about the underlying
machine; you pay for the usage. This usually means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;Total storage in the database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should not have to worry about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backups&lt;/li&gt;
&lt;li&gt;Scaling it up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Databases which offer this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Amazon_DynamoDB"&gt;Amazon DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Amazon_Aurora"&gt;Amazon Aurora Serverless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="benchmark_1"&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;This is not finished. You can find the &lt;a href="https://github.com/MartinThoma/algorithms/tree/master/Python/databases/benchmark"&gt;code on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you don't make the &lt;code&gt;key&lt;/code&gt; column a primary key, MariaDB is quite a
bit faster.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;Database&lt;/th&gt;
&lt;th rowspan="2"&gt;Bulk Write&lt;/th&gt;
&lt;th rowspan="2"&gt;Batched Write&lt;/th&gt;
&lt;th rowspan="2"&gt;Bulk Read&lt;/th&gt;
&lt;th colspan="4"&gt;Read Latency - Percentile&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;25%&lt;/th&gt;
&lt;th&gt;50%&lt;/th&gt;
&lt;th&gt;95%&lt;/th&gt;
&lt;th&gt;99%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style="border-bottom: 2px solid black"&gt;
&lt;td&gt;&lt;a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries"&gt;dict&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;2 639 859.62&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;-&lt;/td&gt;
&lt;td class="text-right"&gt;-&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;0&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;0&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;1&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;2&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/SQLite"&gt;SQLite&lt;/a&gt; (in-memory)&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;259 834.14&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;27 151.94&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;69 163.37&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;32&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;32&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;36&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;60&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/SQLite"&gt;SQLite&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;193 930.10&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;6181.23&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;61 012.26&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;34&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;34&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;38&amp;mu;s&lt;/td&gt;
&lt;td&gt;62&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Memcached"&gt;Memcached&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;131 635.98&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;123 937.91&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right" style="background-color: #baf6ba;"&gt;57 191.03&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;25&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;26&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;38&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;51&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Redis"&gt;Redis&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-right"&gt;5103.39&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;40 494.49&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;TODO&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #ffbebe;"&gt;52&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #ffbebe;"&gt;54&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #ffbebe;"&gt;80&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #ffbebe;"&gt;97&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/MariaDB"&gt;MariaDB&lt;/a&gt; (&lt;a href="https://en.wikipedia.org/wiki/MyISAM"&gt;MyISAM&lt;/a&gt;)&lt;/td&gt;
&lt;td class="text-right"&gt;3412.18&amp;nbsp;inserts/s,&lt;br/&gt;
                                  30 266.34&lt;sup '="" 1="" ignore="" lines;"="" title="LOAD DATA LOCAL INFILE 'data.csv' INTO TABLE KeyValue FIELDS TERMINATED BY ',' ENCLOSED BY '"&gt;🌞&lt;/sup&gt;&lt;/td&gt;
&lt;td class="text-right"&gt;4 885.09&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;41 432.73&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;32&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;33&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;36&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;60&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/MariaDB"&gt;MariaDB&lt;/a&gt; (&lt;a href="https://en.wikipedia.org/wiki/Aria_(storage_engine)"&gt;Aria&lt;/a&gt;)&lt;/td&gt;
&lt;td class="text-right"&gt;2546.49&amp;nbsp;inserts/s,&lt;br/&gt;
                                   19 708.31&lt;sup '="" 1="" ignore="" lines;"="" title="LOAD DATA LOCAL INFILE 'data.csv' INTO TABLE KeyValue FIELDS TERMINATED BY ',' ENCLOSED BY '"&gt;🌞&lt;/sup&gt;&lt;/td&gt;
&lt;td class="text-right"&gt;4309.30 inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;41 305.08&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;33&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;33&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;36&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;57&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/PostgreSQL"&gt;PostgreSQL&lt;/a&gt;&lt;/td&gt;
&lt;td class="text-right" style="background-color: #ffbebe;"&gt;1767.12&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;3529.08&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;37 732.27&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;32&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;33&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;36&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;59&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/MariaDB"&gt;MariaDB&lt;/a&gt; (&lt;a href="https://en.wikipedia.org/wiki/InnoDB"&gt;InnoDB&lt;/a&gt;)&lt;/td&gt;
&lt;td class="text-right"&gt;1152.20&amp;nbsp;inserts/s &lt;sup title="Tested only with 100k inserts"&gt;*&lt;/sup&gt;,&lt;br/&gt;
                                   14 679.97&lt;sup '="" 1="" ignore="" lines;"="" title="LOAD DATA LOCAL INFILE 'data.csv' INTO TABLE KeyValue FIELDS TERMINATED BY ',' ENCLOSED BY '"&gt;🌞&lt;/sup&gt;&lt;/td&gt;
&lt;td class="text-right" style="background-color: #ffbebe;"&gt;643.56&amp;nbsp;inserts/s&lt;/td&gt;
&lt;td class="text-right"&gt;29 405.90&amp;nbsp;selects/s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;33&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;33&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;36&amp;mu;s&lt;/td&gt;
&lt;td style="background-color: #baf6ba;"&gt;53&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For some DBs, batching improved the bulk insert quite a bit. I guess this is
because this way I can avoid swapping. Maybe changing the batch-size from 1000
to higher numbers additionally increases the throughput.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/2474746/562769"&gt;How many keys are too many in memcached?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/LevelDB"&gt;LevelDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://studio3t.com/knowledge-base/articles/nosql-database-types/"&gt;NoSQL Database Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Redis Use Cases:&lt;ul&gt;
&lt;li&gt;Todd Hoff: &lt;a href="http://highscalability.com/blog/2014/9/8/how-twitter-uses-redis-to-scale-105tb-ram-39mm-qps-10000-ins.html"&gt;How Twitter Uses Redis To Scale - 105TB RAM, 39MM QPS, 10,000+ Instances&lt;/a&gt;, 2014.&lt;/li&gt;
&lt;li&gt;Adam Bloom: &lt;a href="https://content.pivotal.io/blog/using-redis-at-pinterest-for-billions-of-relationships"&gt;Using Redis at Pinterest for Billions of Relationships&lt;/a&gt;, 2013.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Siyuan Fu: &lt;a href="https://www.quora.com/q/quoraengineering/Optimizing-Memcached-Efficiency"&gt;Optimizing Memcached Efficiency&lt;/a&gt;, 2017&lt;/li&gt;
&lt;li&gt;Andreas Wittig: &lt;a href="https://cloudonaut.io/ec2-network-performance-cheat-sheet/"&gt;EC2 Network Performance Cheat Sheet&lt;/a&gt;, 2018.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lukechilds/keyv"&gt;keyv&lt;/a&gt;: An interesting JavaScript project which abstracts the implementation of key-value stores away.&lt;/li&gt;
&lt;li&gt;MariaDB: &lt;a href="https://mariadb.com/kb/en/library/choosing-the-right-storage-engine/"&gt;Choosing the Right Storage Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jan Bodnar: &lt;a href="http://zetcode.com/databases/mysqltutorial/storageengines/"&gt;MySQL storage engines&lt;/a&gt;, 2017.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/15678406/562769"&gt;When to use MyISAM and InnoDB?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/58153472/562769"&gt;How can I speed up bulk inserts into MySQL with SQLAlchemy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Dictionaries are a fundamental data structure in Python. They are called
  &lt;em&gt;associative arrays&lt;/em&gt; in PHP and &lt;em&gt;hashtable&lt;/em&gt; in Java.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Database"></category><category term="Redis"></category><category term="MySQL"></category><category term="MariaDB"></category><category term="Postgres"></category><category term="pickledb"></category><category term="Python"></category><category term="NoSQL"></category><category term="sysbench"></category><category term="DBaaS"></category></entry><entry><title>pyproject.toml</title><link href="https://martin-thoma.com/pyproject-toml/" rel="alternate"></link><published>2019-07-30T20:00:00+02:00</published><updated>2019-07-30T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-07-30:/pyproject-toml/</id><summary type="html">&lt;p&gt;The &lt;code&gt;pyproject.toml&lt;/code&gt; file allows package creators to define the build system as
a dependency as well as a projects metadata.
Also, other kinds of meta-data and the install requirements can be
defined in it.&lt;/p&gt;
&lt;p&gt;If you are interested in a sample project, try &lt;a href="https://github.com/pypa/sampleproject"&gt;pypa/sampleproject&lt;/a&gt; or try the &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;packaging …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;code&gt;pyproject.toml&lt;/code&gt; file allows package creators to define the build system as
a dependency as well as a projects metadata.
Also, other kinds of meta-data and the install requirements can be
defined in it.&lt;/p&gt;
&lt;p&gt;If you are interested in a sample project, try &lt;a href="https://github.com/pypa/sampleproject"&gt;pypa/sampleproject&lt;/a&gt; or try the &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;packaging tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[project]&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"infer_pyproject"&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Create a pyproject.toml file for an existing project."&lt;/span&gt;
&lt;span class="na"&gt;authors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;{name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Martin Thoma"&lt;/span&gt;&lt;span class="na"&gt;, email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"info@martin-thoma.de"&lt;/span&gt;&lt;span class="na"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;{email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"info@example.com"&lt;/span&gt;&lt;span class="na"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;license = {file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"LICENSE.txt"&lt;/span&gt;&lt;span class="na"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;readme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"README.md"&lt;/span&gt;
&lt;span class="na"&gt;requires-python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;=3.6"&lt;/span&gt;

&lt;span class="na"&gt;keywords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;["packaging", "dependency", "infer", "pyproject.toml"]&lt;/span&gt;

&lt;span class="na"&gt;classifiers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;"Topic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;: Software Development"&lt;/span&gt;
&lt;span class="na"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Requirements: This is done differently by poetry!&lt;/span&gt;
&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;"Click&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;7.0"&lt;/span&gt;
&lt;span class="na"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;[project.optional-dependencies]&lt;/span&gt;
&lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;"black&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;18.3-alpha.0",&lt;/span&gt;
&lt;span class="na"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;[project.urls]&lt;/span&gt;
&lt;span class="na"&gt;homepage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"https://github.com/MartinThoma/infer_pyproject"&lt;/span&gt;
&lt;span class="na"&gt;documentation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"https://github.com/MartinThoma/infer_pyproject"&lt;/span&gt;
&lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"https://github.com/MartinThoma/infer_pyproject"&lt;/span&gt;

&lt;span class="k"&gt;[project.scripts]&lt;/span&gt;
&lt;span class="na"&gt;poetry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"infer_pyproject.cli:main"&lt;/span&gt;

&lt;span class="k"&gt;[build-system]&lt;/span&gt;
&lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;"setuptools &amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;35.0.2",&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;"setuptools_scm &amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;2.0.0, &amp;lt;3"&lt;/span&gt;
&lt;span class="na"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;build-backend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"setuptools.build_meta"&lt;/span&gt;

&lt;span class="k"&gt;[tool.black]&lt;/span&gt;
&lt;span class="na"&gt;line-length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;88&lt;/span&gt;
&lt;span class="na"&gt;target_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;['py36']&lt;/span&gt;
&lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'\.pyi?$'&lt;/span&gt;
&lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="na"&gt;'&lt;/span&gt;

&lt;span class="na"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;/(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="na"&gt;\.eggs         # exclude a few common directories in the&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| \.git          # root of the project&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| \.hg&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| \.mypy_cache&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| \.tox&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| \.venv&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| _build&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| buck-out&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| build&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;| dist&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;)/&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;| foo.py           # also separately exclude a file named foo.py in&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;# the root of the project&lt;/span&gt;
&lt;span class="na"&gt;)&lt;/span&gt;
&lt;span class="na"&gt;'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="history"&gt;History&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1990-08-09: First commit of &lt;a href="https://github.com/python/cpython/commit/7f777ed95a19224294949e1b4ce56bbffcb1fe9f"&gt;cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1998: distutils was drafted in IPC7 (&lt;a href="https://www.python.org/community/sigs/current/distutils-sig/doc/ipc7_devday/"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1999-03-22: First &lt;a href="https://github.com/python/cpython/commit/2689e3ddce7"&gt;distutil commit to cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2000-11-16: &lt;a href="https://www.python.org/dev/peps/pep-0229/#implementation"&gt;PEP 229 -- Using Distutils to Build Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2003-07-06: First capture of pypi.org found on &lt;a href="https://web.archive.org/web/20030706220147/http://www.pypi.org/"&gt;waybackmachine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2004-03-19: First commit of &lt;a href="https://github.com/pypa/setuptools/commit/8423e1ed14ac1691c2863c6e8cac9230cf558d7b"&gt;setuptools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2006-05-13: First version of &lt;a href="https://pypi.org/project/setuptools"&gt;setuptools&lt;/a&gt; was released&lt;/li&gt;
&lt;li&gt;2007-09-14: First commit of &lt;a href="https://github.com/pypa/virtualenv/commit/e02aa46f4f0eb5321c31641e89bde2c9b92547bb"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2008-10-16: First commit of &lt;a href="https://github.com/pypa/pip/commit/c2000d7de68ef955a85cf8f5f6e78d4f25c10103"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2013-08-13: First commit of &lt;a href="https://github.com/pypa/twine/commit/fafe960cae661ab9e3ac8837803777ba9aadd831"&gt;twine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2015-01-24: First commit of &lt;a href="https://github.com/pypa/warehouse/commit/41358eaf559c1011fc3e94149e716e1dfc79e391"&gt;PyPI warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2015-03-16: First version of &lt;a href="https://pypi.org/project/flit"&gt;flit&lt;/a&gt; was released&lt;/li&gt;
&lt;li&gt;2015-09-30: &lt;a href="https://www.python.org/dev/peps/pep-0517/"&gt;PEP 517 -- A build-system independent format for source trees&lt;/a&gt; (provisional)&lt;/li&gt;
&lt;li&gt;2015-10-26: &lt;a href="https://www.python.org/dev/peps/pep-0516/"&gt;PEP 516 -- Build system abstraction for pip/conda etc&lt;/a&gt; (rejected)&lt;/li&gt;
&lt;li&gt;2015-11-11: &lt;a href="https://www.python.org/dev/peps/pep-0508/"&gt;PEP 508 -- Dependency specification for Python Software Packages&lt;/a&gt; (active)&lt;/li&gt;
&lt;li&gt;2016-05-10: &lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518 -- Specifying Minimum Build System Requirements for Python Projects&lt;/a&gt; (provisional)&lt;/li&gt;
&lt;li&gt;2016-11-18: First commit of &lt;a href="https://github.com/pypa/pipfile/commit/8bfff2988d0575cacae8a15ae22fd3f9749c5055"&gt;pipfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2017-01-20: First commit of &lt;a href="https://github.com/pypa/pipenv/commit/be4b70e646e6232834e9f9917fdc1adde2156f47"&gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-02-28: First version of &lt;a href="https://pypi.org/project/poetry"&gt;Poetry&lt;/a&gt; was released&lt;/li&gt;
&lt;li&gt;2020-06-22: &lt;a href="https://peps.python.org/pep-0621/"&gt;PEP 621&lt;/a&gt; - still not supported by poetry in August 2022 (&lt;a href="https://github.com/python-poetry/poetry/issues/3332"&gt;#3332&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Python Package&lt;/dt&gt;
&lt;dd&gt;A bundle of software. This includes code and meta-data, such as requirements, a short and a long description, the license. It also contains instructions how to build the software. Formerly this was done with distutils.&lt;/dd&gt;
&lt;dt id="distutils"&gt;distutils&lt;/dt&gt;
&lt;dd&gt;Lets you create source distributions (&lt;code&gt;python setup.py sdist&lt;/code&gt;). Sometime building takes a long time, so you might want to share already built distributions. You can do that with &lt;code&gt;python setup.py bdist&lt;/code&gt;.&lt;/dd&gt;
&lt;dt id="setuptools"&gt;setuptools&lt;/dt&gt;
&lt;dd&gt;Like distutils, but a 3rd party library. It is de-facto standard, but does not come with Python.&lt;/dd&gt;
&lt;dt id="setup.py"&gt;&lt;code&gt;setup.py&lt;/code&gt; &lt;span class="label label-danger"&gt;dependency declaration&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;Python file which specifies a package. As it can be arbitrary code, there is no way to know the dependencies of a package for sure without executing &lt;code&gt;setup.py&lt;/code&gt;.&lt;/dd&gt;
&lt;dt id="pypi"&gt;PyPI (Python Packaging Index) &lt;span class="label label-secondary"&gt;software repository&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;PyPI is the official third-party software repository for Python. Here people can share their code in form of Python packages.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;easy_install&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Easy_install is a package manager which is replaced by pip, because it could not uninstall and did not know what was installed. Other &lt;a href="https://packaging.python.org/discussions/pip-vs-easy-install/"&gt;reasons&lt;/a&gt; as well.&lt;/dd&gt;
&lt;dt&gt;egg distribution &lt;span class="label label-primary"&gt;distribution format&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;"Egg" is a single-file importable distribution format for Python-related projects. Eggs are to Pythons as Jars are to Java, but eggs are richer than jars; they hold interesting metadata such as licensing details, release dependencies, ... (&lt;a href="https://wiki.python.org/moin/egg"&gt;source&lt;/a&gt;). It is a zip file.&lt;/dd&gt;
&lt;dt id="pip"&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;pip is a de facto standard package manager for Python. It allows to install packages and installs required packages. pip introduced &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/dd&gt;
&lt;dt id="requirements.txt"&gt;&lt;code&gt;requirements.txt&lt;/code&gt; &lt;span class="label label-danger"&gt;dependency declaration&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;It allows pinning versions of a dependency. The &lt;code&gt;setup.py&lt;/code&gt; includes abstract requirements, the &lt;code&gt;requirements.txt&lt;/code&gt; includes concrete ones. Abstract requirements are more flexible, concrete ones are stable.&lt;/dd&gt;
&lt;dt id="wheel"&gt;wheel distribution  &lt;span class="label label-primary"&gt;distribution format&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;The wheel binary package format is specified in &lt;a href="https://www.python.org/dev/peps/pep-0427/"&gt;PEP 427&lt;/a&gt;. It is similar to egg distributions. It is a zip file.&lt;/dd&gt;
&lt;dt id="twine"&gt;twine&lt;/dt&gt;
&lt;dd&gt;Allowed to securely upload a package to PyPI.&lt;/dd&gt;
&lt;dt id="conda"&gt;conda&lt;/dt&gt;
&lt;dd&gt;conda is a Python-agnostic packaging tool and installer. If you need more than Python / if you don't have Python installed. It supports C, Fortran, R, Perl, Java, ...&lt;/dd&gt;
&lt;dt id="pipfile"&gt;pipfile and pipfile.lock &lt;span class="label label-danger"&gt;dependency declaration&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;A pipfile should be easier to maintain than multiple &lt;code&gt;requirements.txt&lt;/code&gt; files, e.g. for testing / environments (dev, stage, prod). The pipfile.lock is automatically generated and tracks interdependencies of the required packages; it is similar to &lt;a href="https://bundler.io/v1.7/rationale.html#checking-your-code-into-version-control"&gt;&lt;code&gt;gemfile.lock&lt;/code&gt;&lt;/a&gt; in Ruby and &lt;a href="https://yarnpkg.com/lang/en/docs/yarn-lock/"&gt;&lt;code&gt;yarn.lock&lt;/code&gt;&lt;/a&gt; in JavaScript. pipenv is the tool to use with those files. SO-Questions: &lt;a href="https://stackoverflow.com/questions/tagged/pipfile"&gt;28 for pipfile&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/tagged/pipenv"&gt;485 for pipenv&lt;/a&gt;&lt;/dd&gt;
&lt;dt id="pyproject.toml"&gt;&lt;code&gt;pyproject.toml&lt;/code&gt; &lt;span class="label label-danger"&gt;dependency declaration&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;A build-system independent way to specify project dependencies. &lt;code&gt;setup.py&lt;/code&gt; is bad as it is 3rd party and requires code execution. It is a way to step away from distutils / setuptools. The specified build system can be setuptools as well. The pyproject.toml is similar to the &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html"&gt;Cargo.toml of Rust&lt;/a&gt;&lt;/dd&gt;
&lt;dt id="pyenv"&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Install different Python versions. It is similar to rbenv from Ruby.&lt;/dd&gt;
&lt;dt id="pipenv"&gt;pipenv&lt;/dt&gt;
&lt;dd&gt;Wrapper for virtualenv. Has &lt;a href="https://stackoverflow.com/questions/tagged/pipenv"&gt;485 questions on SO&lt;/a&gt;. See pipfile for more info.&lt;/dd&gt;
&lt;dt id="virtualenvwrapper"&gt;&lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Another virtuelenv wrapper. Has &lt;a href="https://stackoverflow.com/questions/tagged/virtualenvwrapper"&gt;570 questions on SO&lt;/a&gt;.&lt;/dd&gt;
&lt;dt id="poetry"&gt;&lt;a href="https://poetry.eustace.io/docs/pyproject/"&gt;Poetry&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Meant to be a successor of pipenv, but seems not production-ready yet (&lt;a href="https://frostming.com/2019/01-04/pipenv-poetry"&gt;source&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/tagged/python-poetry"&gt;13 SO questions&lt;/a&gt;).&lt;/dd&gt;
&lt;dt id="dephell"&gt;&lt;a href="https://dephell.org/"&gt;DepHell&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A Python project management tool. Can convert between setup.py &amp;lt;-&amp;gt; pyproject.toml.&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://flit.readthedocs.io/en/latest/"&gt;flit&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Flit is a way to put Python packages and modules on PyPI. It is a 3rd party replacement for setuptools, but has &lt;a href="https://stackoverflow.com/questions/tagged/flit"&gt;no SO tag&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jeff Triplett: &lt;a href="https://opensource.com/article/18/2/why-python-devs-should-use-pipenv"&gt;Why Python devs should use Pipenv&lt;/a&gt;, 2018-02-28.&lt;/li&gt;
&lt;li&gt;Sarahan, McCormick, Fillion-Robin: &lt;a href="https://www.youtube.com/watch?v=xiI1i525ljE"&gt;The Sheer Joy of Packaging&lt;/a&gt;, 2018.&lt;/li&gt;
&lt;li&gt;Poetry: &lt;a href="https://poetry.eustace.io/docs/pyproject/"&gt;The pyproject.toml file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Frost Ming: &lt;a href="https://frostming.com/2019/01-04/pipenv-poetry"&gt;A deeper look into Pipenv and Poetry&lt;/a&gt;, 2019-01-04.&lt;/li&gt;
&lt;li&gt;Chad Smith: &lt;a href="https://medium.com/@grassfedcode/five-myths-about-pipenv-698c5f198e4b"&gt;Five Myths About Pipenv&lt;/a&gt;, 2018-11-30.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="packaging"></category></entry><entry><title>How to analyze Set Data</title><link href="https://martin-thoma.com/analyze-set-data/" rel="alternate"></link><published>2019-07-06T20:00:00+02:00</published><updated>2019-07-06T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-07-06:/analyze-set-data/</id><summary type="html">&lt;p&gt;Exploratory Data Analysis (EDA) is nice and easy, if the entities you look at
are of one of the typical levels of measurement (see below). But if one feature
is a set, it becomes harder. In this post, I want to show a couple of
possibilities.&lt;/p&gt;
&lt;h2 id="level-of-measurement"&gt;Level of measurement&lt;/h2&gt;
&lt;p&gt;If …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Exploratory Data Analysis (EDA) is nice and easy, if the entities you look at
are of one of the typical levels of measurement (see below). But if one feature
is a set, it becomes harder. In this post, I want to show a couple of
possibilities.&lt;/p&gt;
&lt;h2 id="level-of-measurement"&gt;Level of measurement&lt;/h2&gt;
&lt;p&gt;If you have features of this &lt;a href="https://en.wikipedia.org/wiki/Level_of_measurement"&gt;level of measurement&lt;/a&gt;.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th rowspan="3"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th colspan="5"&gt;Scale&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th colspan="2"&gt;Qualitative (categorical)&lt;/th&gt;
&lt;th colspan="3"&gt;Quantitative (metric)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Nominal-&lt;/th&gt;
&lt;th&gt;Ordinal-&lt;/th&gt;
&lt;th&gt;Intervall-&lt;/th&gt;
&lt;th&gt;Ratio-&lt;/th&gt;
&lt;th&gt;Absolute&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Empirical relations&lt;/th&gt;
&lt;td&gt;Equivalence&lt;/td&gt;
&lt;td&gt;Equivalence&lt;br/&gt;order&lt;/td&gt;
&lt;td&gt;Equivalence&lt;br/&gt;order&lt;br/&gt;emp. addition&lt;/td&gt;
&lt;td&gt;Equivalence&lt;br/&gt;order&lt;br/&gt;emp. addition&lt;br/&gt;emp. multipliation&lt;/td&gt;
&lt;td&gt;Equivalence&lt;br/&gt;order&lt;br/&gt;emp. addition&lt;br/&gt;emp. multipliation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Allowed transformationen&lt;/th&gt;
&lt;td&gt;m' = f(m)&lt;br/&gt;f bijektive&lt;/td&gt;
&lt;td&gt;m' = f(m)&lt;br/&gt;f strictly monotonous&lt;/td&gt;
&lt;td&gt;m' = am+b&lt;br/&gt;with a&amp;gt;0&lt;/td&gt;
&lt;td&gt;m' = am&lt;br/&gt;with a&amp;gt;0&lt;/td&gt;
&lt;td&gt;m' = m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Examples of this scale&lt;/th&gt;
&lt;td&gt;Telephone numbers, license plates, types, postal codes, gender&lt;/td&gt;
&lt;td&gt;Grades, Degrees of hardness, wind force&lt;/td&gt;
&lt;td&gt;Temp. in &amp;deg;C, &amp;deg;F, calendar time, geographic height&lt;/td&gt;
&lt;td&gt;Mass, length, el. current&lt;/td&gt;
&lt;td&gt;Number of particles, number of errors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Values of m&lt;/th&gt;
&lt;td&gt;numbers, names, symbols&lt;/td&gt;
&lt;td&gt;usually natural numbers&lt;/td&gt;
&lt;td&gt;usually real numbers&lt;/td&gt;
&lt;td&gt;usually real numbers &amp;gt; 0&lt;/td&gt;
&lt;td&gt;usually natural numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="datasets"&gt;Datasets&lt;/h2&gt;
&lt;h3 id="dblp"&gt;dblp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/DBLP"&gt;dblp&lt;/a&gt; is a bibliography website which
contains publication data from almost 2 million publications.&lt;/p&gt;
&lt;p&gt;Use &lt;a href="https://github.com/IsaacChanghau/DBLPParser"&gt;DBLPParser&lt;/a&gt; to create a CSV
file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pandas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;progressbar&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;networkx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;clana.io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;clana.visualize_cm&lt;/span&gt;

&lt;span class="c1"&gt;# Load the data&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"articles.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"::"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Analyze the data&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isna&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;author_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Publications: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Unique elements: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Most common:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;most_common&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"    &lt;/span&gt;&lt;span class="si"&gt;{:&amp;gt;4}&lt;/span&gt;&lt;span class="s2"&gt;x &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;unique_authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_biggest_clusters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;progressbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progressbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;10_000&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Edges were added"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n2i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
    &lt;span class="c1"&gt;# node to index&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n2i&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_biggest_clusters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Biggest clusters: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;component_w_publications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;component_w_publications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;component_w_publications&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;component_w_publications&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1_00&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;clana&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visualize_cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"coauthors.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;perm_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1_000_000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;labels_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"labels.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;zero_diagonal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cm-ordered.pdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clana&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_cm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"coauthors.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clana&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"labels.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* Publications: 2,054,474
* Unique elements: 1,475,717
* Most common
    1181x H. Vincent Poor
     789x Lajos Hanzo
     767x Witold Pedrycz
     747x Mohamed-Slim Alouini
     615x Chin-Chen Chang 0001
     607x Dacheng Tao
     591x Victor C. M. Leung
     570x Wei Zhang
     562x Wei Li
     554x Wei Wang
* Biggest clusters (under first 10^6 publications): [761987, 52, 45, 44, 32, 31, 29, 28, 28, 28]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can apply confusion matrix ordering to find authors who often work
together (click on it to see large version):&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../pdf/dblp-1000-cmo.pdf"&gt;&lt;img alt="Similar Authors found with CMO" src="../images/2019/07/dblp-cmo.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Similar Authors found with CMO&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The CMO technique is described in&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thoma, Martin. "Analysis and optimization of convolutional neural network architectures." &lt;a href="https://arxiv.org/pdf/1707.09725.pdf"&gt;arXiv preprint arXiv:1707.09725&lt;/a&gt; (2017). Chapter 5.2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="movielens-20m_1"&gt;MovieLens 20M&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pandas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;progressbar&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;networkx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;clana.io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;clana.visualize_cm&lt;/span&gt;

&lt;span class="c1"&gt;# Load the data&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"movies.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Analyze the data&lt;/span&gt;
&lt;span class="n"&gt;list_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;valueset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;valueset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;value_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Movies: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Unique genres: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Most common:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;most_common&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"    &lt;/span&gt;&lt;span class="si"&gt;{:&amp;gt;4}&lt;/span&gt;&lt;span class="s2"&gt;x &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;unique_genres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_biggest_clusters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;authorset&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;progressbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progressbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;10_000&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Edges were added"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n2i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
    &lt;span class="c1"&gt;# node to index&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n2i&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;n2i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_biggest_clusters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"* Biggest clusters: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;component_w_publications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;component_w_publications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;component_w_publications&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;component_w_publications&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1_00&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;clana&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_cm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"genre-combinations.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clana&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"labels.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clana&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visualize_cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"genre-combinations.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;perm_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1_000_000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;labels_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"labels.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;zero_diagonal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cm-genre-combinations.pdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* Movies: 27278
* Unique genres: 20
* Most common:
    13344x Drama
     8374x Comedy
     4178x Thriller
     4127x Romance
     3520x Action
     2939x Crime
     2611x Horror
     2471x Documentary
     2329x Adventure
     1743x Sci-Fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CMO:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/07/cmo-genre-combinations.png"&gt;&lt;img alt="Genre-Combinations" src="../images/2019/07/cmo-genre-combinations.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Genre-Combinations&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://datascience.stackexchange.com/q/55181/8820"&gt;What is the level of measurement / name of the scale of list-features?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="EDA"></category><category term="CMO"></category></entry><entry><title>TLS and Nginx</title><link href="https://martin-thoma.com/tls-and-nginx/" rel="alternate"></link><published>2019-06-16T20:00:00+02:00</published><updated>2019-06-16T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-06-16:/tls-and-nginx/</id><summary type="html">&lt;p&gt;Transport security is an important topic nowadays. We don't want a man in the
middle (MITM) to be able to read our communication with banks, our e-mails, or our
medical apps. Hence we need encryption of our data at the transport layer
level.&lt;/p&gt;
&lt;h2 id="the-problem-of-internet-connections"&gt;The Problem of Internet Connections&lt;/h2&gt;
&lt;p&gt;The internet …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Transport security is an important topic nowadays. We don't want a man in the
middle (MITM) to be able to read our communication with banks, our e-mails, or our
medical apps. Hence we need encryption of our data at the transport layer
level.&lt;/p&gt;
&lt;h2 id="the-problem-of-internet-connections"&gt;The Problem of Internet Connections&lt;/h2&gt;
&lt;p&gt;The internet is a network. It is not connecting your machine with every other
one directly, but uses nodes in between. As it is basically connecting everybody,
you also have some attackers within the network:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/internet.png"&gt;&lt;img alt="The Internet: Connecting you with Services and Attackers" src="../images/2019/06/internet.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;The Internet: Connecting you with Services and Attackers&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The internet is engineered in a way that very often you can imagine the
connection between you and a service as a direct one, although it is not
direct. That connection is not save. At the very least you can imagine people
reading your traffic (e.g. when you use a wireless connection that's called &lt;a href="https://en.wikipedia.org/wiki/Packet_analyzer"&gt;WLAN Sniffing&lt;/a&gt;, the same thing works
when you're in the same network). In a worse case they might be able to change
your communication. These types of attacks are called &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;Man-in-the-middle attack&lt;/a&gt;:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/man-in-the-middle.png"&gt;&lt;img alt="A Man in the Middle Attack" src="../images/2019/06/man-in-the-middle.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A Man in the Middle Attack&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="the-solution-public-key-cryptography"&gt;The Solution: Public-key cryptography&lt;/h2&gt;
&lt;p&gt;There is a super neat technique called &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;Public-key cryptography&lt;/a&gt;.
It enables you to generate two keys. We call one of them the public key and the
other the private key.&lt;/p&gt;
&lt;p&gt;Imaginethem as a combination of keys / locks:
* Stuff that is encrypted (locked) with the private key can only be decrypted
  (unlocked) with the public key
* Stuff that is encrypted with the public key can only be decrypted with the
  private key.&lt;/p&gt;
&lt;p&gt;So we make the pulic key ... well, public. Meaning we share the public key with
the world. Whenever somebody wants to send us a message, they can use our
public key and only we will be able to read it as long as we keep the private
key private.&lt;/p&gt;
&lt;h2 id="the-problem-of-manipulating-mitm"&gt;The Problem of Manipulating MITM&lt;/h2&gt;
&lt;p&gt;Public-key cryptography is awesome, once we have shared the public key with the
world. But we might not even get that far, if an attacker manages to intercept
our messages. The attacker could share his public key with the world instead.
Then, when somebody wants to have a private communcation with us, they use the
attackers public key. The attacker reads the message, decrypts it with our
public key and we think everything was fine.&lt;/p&gt;
&lt;h2 id="the-solution-certificate-authorities"&gt;The Solution: Certificate Authorities&lt;/h2&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority"&gt;Certificate Authority&lt;/a&gt;
(CA) is a trusted third party. A certificate is a digital document which says
"This public key belongs to that domain". It is bascially again public key
cryptography, but with a trusted third party. The website owner sends their
public key to the certificate authority. The authority makes sure that it was
actually send from the domain. If that is the case, the CA signs the public key
with their private key. The public key of the CA is well known (e.g. delivered
with the browser at installation).&lt;/p&gt;
&lt;h2 id="the-problem-compromised-certificates"&gt;The Problem: Compromised Certificates&lt;/h2&gt;
&lt;p&gt;It can happen that an attacker gets temporary access to the web services server.
Then the attacker can copy the private key of the service.&lt;/p&gt;
&lt;h2 id="the-solution-ocsp-stapling"&gt;The Solution: OCSP Stapling&lt;/h2&gt;
&lt;p&gt;The web service has to revoke the certificate. This means it has to tell the CA
that the private key was compromized. But how does the client (user) get to
know about this?&lt;/p&gt;
&lt;p&gt;Three possibilities: CRL, OCSP,  &amp;amp; &lt;a href="https://en.wikipedia.org/wiki/OCSP_stapling"&gt;OCSP stapling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a pretty good video about &lt;a href="https://www.youtube.com/watch?v=WXNKQ_otO_g"&gt;Revocation of digital certificates: CRL, OCSP, OCSP stapling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Essentially, OCSP stapling means that the server lets the CA not only certify
the private key, but also add a timestamp.&lt;/p&gt;
&lt;h2 id="overview-of-certificate-authorities"&gt;Overview of Certificate Authorities&lt;/h2&gt;
&lt;p&gt;You can see the Certificate Authority in Chrome by clicking on the lock icon
left of the URL:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/chrome-ca.png"&gt;&lt;img alt="Checking the Certificate Authority in Chrome" src="../images/2019/06/chrome-ca.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Checking the Certificate Authority in Chrome&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Commonly used Certificate Authorities are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Let%27s_Encrypt"&gt;Let's Encrypt&lt;/a&gt;: Used by BMW, StackOverflow, ccc.de, kit.edu&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/DigiCert"&gt;DigiCert&lt;/a&gt;: Used by Reddit, Twitter, Audi, Amazon, mozilla.org, Instagram, live.com, netflix.com, ebay.com, emirates.com, paypal.com, n26.com, deutsche-bank.de&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GlobalSign"&gt;GlobalSign&lt;/a&gt;: Used by Wikpedia, Baidu.com, qq.com, post.de&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GeoTrust"&gt;GeoTrust&lt;/a&gt;: nokia.com, tk.de, sixt.com, qantas.com, mit.edu&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Entrust"&gt;Entrust&lt;/a&gt;: comdirect.com&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Comodo_Group"&gt;Comodo&lt;/a&gt;: namecheap.com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also some German ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bundesdruckerei"&gt;D-Trust&lt;/a&gt;: sparkasse.de, elster.de, bundesdruckerei.de&lt;/li&gt;
&lt;li&gt;&lt;a href="https://de.wikipedia.org/wiki/ZIVIT"&gt;ZIVIT&lt;/a&gt;: bund.de&lt;/li&gt;
&lt;li&gt;&lt;a href="https://de.wikipedia.org/wiki/Telesec"&gt;Telesec&lt;/a&gt;: bundesregierung.de, telekom.de&lt;/li&gt;
&lt;li&gt;&lt;a href="https://de.wikipedia.org/wiki/DFN-Verein"&gt;DFN-Verein&lt;/a&gt;: tum.de, uni-muenchen.de, uni-heidelberg.de, charite.de, rwth-aachen.de, fernuni-hagen.de&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Microsoft and Google have their own CA. It's a bit weird that Microsoft uses
Digicert for live.com.&lt;/p&gt;
&lt;p&gt;You might also be interested in &lt;a href="https://premium.wpmudev.org/blog/ssl-certificate-authorities-reviewed/"&gt;features of a CA&lt;/a&gt;.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;CA&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Founded in&lt;/th&gt;
&lt;th&gt;Employees&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Let's encrypt&lt;/th&gt;
&lt;td&gt;Free&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;DigiCert&lt;/th&gt;
&lt;td&gt;$218 / Year&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;1000+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GeoTrust&lt;/th&gt;
&lt;td&gt;$149 / Year&lt;/td&gt;
&lt;td&gt;2001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;GlobalSign&lt;/th&gt;
&lt;td&gt;$349 / Year&lt;/td&gt;
&lt;td&gt;1996&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Entrust&lt;/th&gt;
&lt;td&gt;$199 / Year&lt;/td&gt;
&lt;td&gt;1994&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Comodo&lt;/th&gt;
&lt;td&gt;$89 / Year&lt;/td&gt;
&lt;td&gt;1998&lt;/td&gt;
&lt;td&gt;1200+&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I was not happy with the usage numbers. Let's encrypt claims to have
152&amp;thinsp;288&amp;thinsp;000 domains (2018-12-30, &lt;a href="https://letsencrypt.org/stats/#growth"&gt;source&lt;/a&gt;), but &lt;a href="https://w3techs.com/technologies/overview/ssl_certificate/all"&gt;w3techs.com&lt;/a&gt; says they have a market share of 0.1%. According
to them, IdenTrust has a market share of 49.9%, Sectigo of 25.0% and Digicert of
13.6%.&lt;/p&gt;
&lt;h2 id="ssl-tls-and-https"&gt;SSL, TLS and HTTPS&lt;/h2&gt;
&lt;p&gt;Here are super short explanations what the important terms mean:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;SSL (Secure Sockets Layer)&lt;/dt&gt;
&lt;dd&gt;A cryptographic protocol used for network traffic&lt;/dd&gt;
&lt;dt&gt;TLS (Transport Layer Security)&lt;/dt&gt;
&lt;dd&gt;An updated version of SSL.&lt;/dd&gt;
&lt;dt&gt;HTTPS (Hypertext Transfer Protocol Secure)&lt;/dt&gt;
&lt;dd&gt;Using HTTP with transport layer encription (e.g. SSL or TLS)&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Public_key_certificate"&gt;Certificate&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;An electronic document used to prove the ownership of a public key.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="nginx-ssl-options"&gt;Nginx SSL options&lt;/h2&gt;
&lt;p&gt;You can find options for nginx at &lt;a href="https://cipherli.st/"&gt;cipherli.st&lt;/a&gt;,
&lt;a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/"&gt;mozilla.github.io&lt;/a&gt; as well as in &lt;a href="https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/options-ssl-nginx.conf"&gt;certbot&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Config&lt;/th&gt;
&lt;th&gt;&lt;a href="https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https"&gt;Miguel Grinberg&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://cipherli.st/"&gt;cipherli.st&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/options-ssl-nginx.conf"&gt;certbot&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_timeout"&gt;ssl_session_timeout&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1d&lt;/td&gt;
&lt;td&gt;10m&lt;/td&gt;
&lt;td&gt;1d&lt;/td&gt;
&lt;td&gt;The lower this value, the higher the load on your&lt;br/&gt;&amp;nbsp; server and the higher the security.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssl_prefer_server_ciphers&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;tell the client that we have a preferred order of cipher suites&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssl_protocols&lt;/td&gt;
&lt;td&gt;TLSv1 TLSv1.1 TLSv1.2&lt;/td&gt;
&lt;td&gt;TLSv1.3&lt;/td&gt;
&lt;td&gt;TLSv1 TLSv1.1 TLSv1.2&lt;/td&gt;
&lt;td&gt;The higher this value, the more likely there are some devices which don't support it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_ciphers"&gt;ssl_ciphers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;MANY!&lt;/td&gt;
&lt;td&gt;EECDH + AESGCM:EDH + AESGCM&lt;/td&gt;
&lt;td&gt;MANY!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache"&gt;ssl_session_cache&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;shared:SSL:50m&lt;/td&gt;
&lt;td&gt;shared:SSL:10m&lt;/td&gt;
&lt;td&gt;shared:le_nginx_SSL:1m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_tickets"&gt;ssl_session_tickets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling"&gt;ssl_stapling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;OCSP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling_verify"&gt;ssl_stapling_verify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;verification of the OCSP responses received from the CA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;add_header Strict-Transport-Security max-age=15768000;&lt;/td&gt;
&lt;td&gt;add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Tell the client that we don't like HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;add_header X-Frame-Options DENY;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;make sure it is not embedded in a frame or iframe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;add_header X-Content-Type-Options nosniff;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;See &lt;a href="https://en.wikipedia.org/wiki/Content_sniffing"&gt;Content sniffing&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"&gt;mozilla.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;add_header X-XSS-Protection "1; mode=block";&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection"&gt;mozilla.org&lt;/a&gt;, &lt;a href="https://stackoverflow.com/q/9090577/562769"&gt;stackoverflow&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You might also want to redirect http to https (&lt;code&gt;return 301 https://$host$request_uri;&lt;/code&gt;). HSTS is the more secure option, though.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Philipp: &lt;a href="https://medium.com/@pentacent/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71"&gt;Nginx and Let&amp;rsquo;s Encrypt with Docker in Less Than 5 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brett Thorson: &lt;a href="https://www.youtube.com/watch?v=g_kLD2BQGSI"&gt;How SSL and OCSP Work&lt;/a&gt; on YouTube. 18.09.2015.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/q/971627/113899"&gt;How can I decide which ssl_protocols and ssl_ciphers to set with nginx?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bjornjohansen.no/optimizing-https-nginx"&gt;Optimizing HTTPS on Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/23040408/562769"&gt;When should HSTS be enabled?&lt;/a&gt; and &lt;a href="https://security.stackexchange.com/q/17264/3286"&gt;HSTS extra security over HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="nginx"></category><category term="SSL"></category><category term="TLS"></category><category term="Security"></category></entry><entry><title>Celery</title><link href="https://martin-thoma.com/celery/" rel="alternate"></link><published>2019-06-10T20:00:00+02:00</published><updated>2019-06-10T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-06-10:/celery/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Celery_(software)"&gt;Celery&lt;/a&gt; is a task queue. I
was experimenting with it today and want to share some insights.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Think of YouTube. Users can upload videos, but before they are shown on the
platform they need to get processed. Converting the format, checking for
illegal content. This takes a considerable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Celery_(software)"&gt;Celery&lt;/a&gt; is a task queue. I
was experimenting with it today and want to share some insights.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Think of YouTube. Users can upload videos, but before they are shown on the
platform they need to get processed. Converting the format, checking for
illegal content. This takes a considerable amount of time, so you don't want to
let the user stare at a loading screen while you create the backup. So simply
having a synchronous call is not working, as those tasks can easily take more
than one minute and thus the user might get a timeout. And for sure the user
would not like it, if he didn't get any feedback. Also, it might create
considerable work and thus you might not want to run it on the same machine.&lt;/p&gt;
&lt;h2 id="solution-1-conversion-server"&gt;Solution 1: Conversion Server&lt;/h2&gt;
&lt;p&gt;To solve the load and the waiting time problem of the file conversion, we can
create a "conversion server". Another machine which takes care of file
conversions. Then instead of letting the user wait, we just tell him "conversion is in progress".
We make a call to the conversion server with our video id (vid) and wait for the
response.&lt;/p&gt;
&lt;p&gt;Then we need to somehow call that conversion server. There are several
approaches to this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Synchronous call&lt;/em&gt;: We could make a small REST API, but then we would again
have the problem that the conversion can take arbitrary long.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/conversion-server-sync.png"&gt;&lt;img alt="Communication by a synchronous request with a conversion server" src="../images/2019/06/conversion-server-sync.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Communication by a synchronous request with a conversion server&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Polling&lt;/em&gt;: We could make the web app poll, hence give the conversion server
&lt;code&gt;/videos/&amp;lt;id&amp;gt;&lt;/code&gt; and let it return &lt;code&gt;{"status": 0.0}&lt;/code&gt;, &lt;code&gt;{"status": 0.5}&lt;/code&gt;, ...,
&lt;code&gt;{"status": 1.0, "result_uri": "s3://bucket/42.mpg"}&lt;/code&gt;. The disadvantage of
polling is that the web app needs to administrate it. For example, maybe you
want to send the user an e-mail once the conversion is done. You want to send
this e-mail ASAP. So you need to keep polling once the request was sent. During
peak times the number of videos in the conversion queue might get longer and
thus we might end up polling a lot of videos, putting unnecessary load on the
(internal) API of the conversion server.&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/conversion-server-polling.png"&gt;&lt;img alt="Communication by polling" src="../images/2019/06/conversion-server-polling.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Communication by polling&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Callback&lt;/em&gt;: Instead of having to ask again and again if the conversion is done,
we could give the conversion server a callback URL. Once it is done, it calls
the callback back. Hence callback. It works like this:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/conversion-server-callback.png"&gt;&lt;img alt="Communication by a callback" src="../images/2019/06/conversion-server-callback.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Communication by a callback&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="solution-2-message-queue"&gt;Solution 2: Message Queue&lt;/h2&gt;
&lt;p&gt;All three variants of the first solution have one fundamental problem: They
don't scale well. Assume suddenly you get from several dozend users to tens of
thousands. You will have peak times during which you need to convert way more
videos. So you would like to spin up new instances and basically be able to
do double the work with double the amount of machines.&lt;/p&gt;
&lt;p&gt;How would you do that, starting with a single conversion server?&lt;/p&gt;
&lt;p&gt;You would probably create a conversion service:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/06/conversion-service-callback-api.png"&gt;&lt;img alt="A file conversion service based on callbacks" src="../images/2019/06/conversion-service-callback-api.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;A file conversion service based on callbacks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here the API and the load balancer are overhead. And it is not clear how the
"load balancer" would actually work.&lt;/p&gt;
&lt;p&gt;Just store the kind of work you want to do somewhere and let "workers" pick up
the task. This means you need to pass messages between the web app which
contains the upload form / the dashboard for the user and between the workers.&lt;/p&gt;
&lt;p&gt;Instead of having the API and the load balancer, you can use a message broker system like
&lt;a href="https://en.wikipedia.org/wiki/RabbitMQ"&gt;RabbitMQ&lt;/a&gt;,
&lt;a href="https://redis.io/topics/pubsub"&gt;Redis&lt;/a&gt; or
&lt;a href="https://en.wikipedia.org/wiki/Amazon_Simple_Queue_Service"&gt;Amazon SQS&lt;/a&gt; (&lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/sqs-example-sending-receiving-msgs.html"&gt;code sample&lt;/a&gt;). The core
of those message broker systems is that you can send and receive messages.
Sometimes you send it to a topic, in other system it is called a queue.
Consumers / clients can read / listen to those queues / topics.&lt;/p&gt;
&lt;h2 id="celery"&gt;Celery&lt;/h2&gt;
&lt;p&gt;Celery is a task queue. While not being to deep in the topic, I would say the
main advantage of celery compared to usuing the message brokers directly is
simplicity. It's easier to use than rabbitmq directly. Additionally, you get
flexibility to change the message broker.&lt;/p&gt;
&lt;p&gt;It comes with a monitoring tool called &lt;a href="https://flower.readthedocs.io/en/latest/"&gt;flower&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Structurally, my app looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
&amp;boxvr;&amp;boxh;&amp;boxh; celery_worker.py
&amp;boxvr;&amp;boxh;&amp;boxh; docker-compose.yml
&amp;boxvr;&amp;boxh;&amp;boxh; Dockerfile
&amp;boxur;&amp;boxh;&amp;boxh; web
    &amp;boxvr;&amp;boxh;&amp;boxh; Dockerfile
    &amp;boxvr;&amp;boxh;&amp;boxh; my_project
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; app.py
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; config.py
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; main (other flask Blueprints look similar)
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; routes.py
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; static
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; templates
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; models.py
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; static
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxvr;&amp;boxh;&amp;boxh; templates
    &amp;boxv;&amp;nbsp;&amp;nbsp; &amp;boxur;&amp;boxh;&amp;boxh; wsgi.py
    &amp;boxvr;&amp;boxh;&amp;boxh; Makefile
    &amp;boxvr;&amp;boxh;&amp;boxh; setup.cfg
    &amp;boxur;&amp;boxh;&amp;boxh; setup.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And I ran it either with &lt;code&gt;docker-compose up&lt;/code&gt; or via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;celery_worker.py&lt;span class="w"&gt; &lt;/span&gt;worker&lt;span class="w"&gt; &lt;/span&gt;--loglevel&lt;span class="o"&gt;=&lt;/span&gt;debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the following, I give some details about how I adjusted the listed files.&lt;/p&gt;
&lt;h3 id="setuppy"&gt;setup.py&lt;/h3&gt;
&lt;p&gt;Add the new requirement: &lt;code&gt;celery==4.3.0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="docker-composeyml"&gt;docker-compose.yml&lt;/h3&gt;
&lt;p&gt;I've added the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;broker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"rabbitmq:3-management"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;broker&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"5672:5672"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"15672:15672"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'rabbitmq_data:/data'&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;flower&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mher/flower&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;flower&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"flower"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"--broker=amqp://guest:guest@broker:5672//"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"--port=8888"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;8888:8888&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;worker&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;broker&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;db&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;CELERY_HOST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;broker&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MYSQL_PORT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;foo&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bar&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MYSQL_HOST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;db&lt;/span&gt;
&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;rabbitmq_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, there is also the "web" service which I cropped out here for keeping
it simple.&lt;/p&gt;
&lt;h3 id="configpy"&gt;config.py&lt;/h3&gt;
&lt;p&gt;I've added the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CELERY_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CELERY_HOST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"amqp://guest:guest@&lt;/span&gt;&lt;span class="si"&gt;{host}&lt;/span&gt;&lt;span class="s2"&gt;:5672//"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CELERY_HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CELERY_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlalchemy"&lt;/span&gt;
&lt;span class="n"&gt;CELERY_RESULT_DBURI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqla+"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="apppy"&gt;app.py&lt;/h3&gt;
&lt;p&gt;I followed the application factory pattern (&lt;code&gt;create_app&lt;/code&gt;). On the global level
of &lt;code&gt;app.py&lt;/code&gt; (not hidden in a function), I've added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;celery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and within the &lt;code&gt;create_app&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# some stuff ...&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"templates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"static"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# some stuff ...&lt;/span&gt;
    &lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="celery_workerpy"&gt;celery_worker.py&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;my_project.app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dockerfile"&gt;Dockerfile&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;python:3.7-slim&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"info@martin-thoma.de"&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"This is for executing a celery worker"&lt;/span&gt;

&lt;span class="c"&gt;# Copy projects code&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;web/&lt;span class="w"&gt; &lt;/span&gt;/opt/app
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;celery_worker.py&lt;span class="w"&gt; &lt;/span&gt;/opt/app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/opt/app&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--no-cache-dir

&lt;span class="c"&gt;# Start worker&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"celery -A celery_worker.celery worker --loglevel=debug"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tasks"&gt;Tasks&lt;/h3&gt;
&lt;p&gt;In one of the &lt;code&gt;routes.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;my_project.app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;celery&lt;/span&gt;


&lt;span class="nd"&gt;@backup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/videos/&amp;lt;vid&amp;gt;/convert"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@login_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Convert a video. This can take time"""&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Started converting video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;convert_video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns almost instantly&lt;/span&gt;


&lt;span class="nd"&gt;@celery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"convert_video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;convert_video&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Executing this is what takes long&lt;/span&gt;
    &lt;span class="c1"&gt;# ... put the file conversion in here!&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Flask: &lt;a href="http://flask.pocoo.org/docs/1.0/patterns/celery/"&gt;Celery Background Tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Flask Mega-Tutorial Part XXII: &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xxii-background-jobs"&gt;Background Jobs&lt;/a&gt; by Miguel Grinberg&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/9077687/562769"&gt;Why use Celery instead of RabbitMQ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/42151544/562769"&gt;Is there any reason to use RabbitMQ over Kafka?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Message Queue"></category><category term="inter-process communication"></category><category term="Architecture"></category></entry><entry><title>SQL Connection Strings</title><link href="https://martin-thoma.com/sql-connection-strings/" rel="alternate"></link><published>2019-06-02T20:00:00+02:00</published><updated>2019-06-02T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-06-02:/sql-connection-strings/</id><summary type="html">&lt;p&gt;When you want to connect to a database in SQLAlchemy, you need a connection
string. It usually has the form&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dialect[+driver]://user:password@host/dbname[?key=value..]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quite often, the &lt;code&gt;user&lt;/code&gt; is &lt;code&gt;root&lt;/code&gt; and the &lt;code&gt;host&lt;/code&gt; is &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have the valid connection string, you can &lt;strong&gt;test if …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you want to connect to a database in SQLAlchemy, you need a connection
string. It usually has the form&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dialect[+driver]://user:password@host/dbname[?key=value..]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quite often, the &lt;code&gt;user&lt;/code&gt; is &lt;code&gt;root&lt;/code&gt; and the &lt;code&gt;host&lt;/code&gt; is &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have the valid connection string, you can &lt;strong&gt;test if it works&lt;/strong&gt; via this script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_names&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="sqlite"&gt;SQLite&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt;: None&lt;/p&gt;
&lt;p&gt;Connection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlite:///absolute_filepath"&lt;/span&gt;

&lt;span class="c1"&gt;# Example:&lt;/span&gt;
&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlite:////tmp/test.db"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first two slashes come from the seperator of dialect and driver, the third
one from the separation between credentials+host and dbname, the fourth one is
the path which is kind of the name of the database.&lt;/p&gt;
&lt;p&gt;If you want an in-memory SQLite DB, just specify an empty URL (&lt;a href="https://docs.sqlalchemy.org/en/13/core/engines.html#sqlite"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlite://"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mysql-and-mariadb"&gt;MySQL and MariaDB&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PyMySQL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Connection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mysql+pymysql://user:password@host/dbname"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a lot of &lt;a href="https://docs.sqlalchemy.org/en/13/dialects/mysql.html"&gt;other MySQL drivers&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/MySQL-python/"&gt;&lt;code&gt;mysqldb&lt;/code&gt;&lt;/a&gt;: C extension; does not work with Python 3 (&lt;a href="https://stackoverflow.com/a/14076841/562769"&gt;reasons for pymysql&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.mysql.com/doc/connector-python/en/"&gt;&lt;code&gt;mysqlconnector&lt;/code&gt;&lt;/a&gt;: Officially provided by MySQL; worst performance and not downloadable via PyPI (&lt;a href="https://stackoverflow.com/a/46396881/562769"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="others"&gt;Others&lt;/h2&gt;
&lt;p&gt;I haven't tried it, but &lt;a href="https://docs.sqlalchemy.org/en/13/dialects/index.html"&gt;sqlalchemy lists more&lt;/a&gt; like Oracle, Microsoft SQL Server and Sybase.&lt;/p&gt;</content><category term="Code"></category><category term="SQLAlchemy"></category><category term="Database"></category><category term="MySQL"></category></entry><entry><title>Gunicorn</title><link href="https://martin-thoma.com/gunicorn/" rel="alternate"></link><published>2019-05-24T20:00:00+02:00</published><updated>2019-05-24T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-05-24:/gunicorn/</id><summary type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th rowspan="2"&gt;sync&lt;/th&gt;
&lt;th colspan="2"&gt;Async Workers&lt;/th&gt;
&lt;th rowspan="2"&gt;tornado&lt;/th&gt;
&lt;th colspan="2"&gt;AsyncIO Workers&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;worker&lt;/td&gt;
&lt;td&gt;gevent&lt;/td&gt;
&lt;td&gt;eventlet&lt;/td&gt;
&lt;td&gt;gaiohttp&lt;/td&gt;
&lt;td&gt;gthread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;core characteristic&lt;/td&gt;
&lt;td&gt;* Per request a process&lt;br/&gt;* Blocks other requests until it is finished&lt;/td&gt;
&lt;td&gt;*&amp;nbsp;based on the Greenlet library&lt;br/&gt;* Program-level threads&lt;/td&gt;
&lt;td&gt;*&amp;nbsp;based on the Greenlet library&lt;br/&gt;* Program-level threads&lt;/td&gt;
&lt;td&gt;*provides async I/O non-blocking design model&lt;br/&gt;*&amp;nbsp;ideal for handling long requests …&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th rowspan="2"&gt;sync&lt;/th&gt;
&lt;th colspan="2"&gt;Async Workers&lt;/th&gt;
&lt;th rowspan="2"&gt;tornado&lt;/th&gt;
&lt;th colspan="2"&gt;AsyncIO Workers&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;worker&lt;/td&gt;
&lt;td&gt;gevent&lt;/td&gt;
&lt;td&gt;eventlet&lt;/td&gt;
&lt;td&gt;gaiohttp&lt;/td&gt;
&lt;td&gt;gthread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;core characteristic&lt;/td&gt;
&lt;td&gt;* Per request a process&lt;br/&gt;* Blocks other requests until it is finished&lt;/td&gt;
&lt;td&gt;*&amp;nbsp;based on the Greenlet library&lt;br/&gt;* Program-level threads&lt;/td&gt;
&lt;td&gt;*&amp;nbsp;based on the Greenlet library&lt;br/&gt;* Program-level threads&lt;/td&gt;
&lt;td&gt;*provides async I/O non-blocking design model&lt;br/&gt;*&amp;nbsp;ideal for handling long requests&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;* Per request a thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;workload&lt;/td&gt;
&lt;td&gt;* No long I/O&lt;br/&gt;* No heavy CPU&lt;br/&gt;* No requests to external pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;http://www.gevent.org/&lt;/td&gt;
&lt;td&gt;https://eventlet.net/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;https://aiohttp.readthedocs.io/en/stable/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;p&gt;Performance can be measured in at least three ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;throughput (requests per second),&lt;/li&gt;
&lt;li&gt;latency (minimum),&lt;/li&gt;
&lt;li&gt;latency (average)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use locust with a hatch rate so that in 10s all users are hatched to get some
numbers. I use the following &lt;code&gt;locustfile.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;locust&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;WebsiteTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;WebsiteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebsiteTasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had to execute &lt;code&gt;ulimit -S -n 10240&lt;/code&gt; in order to test the 10,000 users. Otherwise
I got&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[2019-05-26 12:25:03,499] pc07/ERROR/stderr: OSError: [Errno 16] Device or resource busy
[2019-05-26 12:25:03,499] pc07/ERROR/stderr:
[2019-05-26 12:25:03,499] pc07/ERROR/stderr: 2019-05-26T10:25:03Z
[2019-05-26 12:25:03,499] pc07/ERROR/stderr:
[2019-05-26 12:25:03,499] pc07/ERROR/stderr: (&amp;lt;ThreadPool at 0x7fc2e275d4a8 0/10/10 hub=&amp;lt;Hub at 0x7fc2e7c84780 thread_ident=0x140475181328192&amp;gt;&amp;gt;, &amp;lt;built-in function getaddrinfo&amp;gt;) failed with OSError
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="constant-response"&gt;Constant Response&lt;/h3&gt;
&lt;p&gt;The following &lt;code&gt;app.py&lt;/code&gt; is probably the simplest one possible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"hello world!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's first have a look at the median response time by the number of users:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Users&lt;/th&gt;
&lt;th&gt;Development Server&lt;/th&gt;
&lt;th&gt;gevent (1 worker, 1000 connections)&lt;/th&gt;
&lt;th&gt;gevent (4 workers, 1000 connections)&lt;/th&gt;
&lt;th&gt;gevent (12 workers, 1000 connections)&lt;/th&gt;
&lt;th&gt;sync (4 workers)&lt;/th&gt;
&lt;th&gt;gthread (4 workers)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8ms - 9ms; 1 Req/ s&lt;/td&gt;
&lt;td&gt;8ms - 9ms; 1 Req/ s&lt;/td&gt;
&lt;td&gt;8ms - 11ms; 1 Req/ s&lt;/td&gt;
&lt;td&gt;6ms - 10ms; 1 Req/ s&lt;/td&gt;
&lt;td&gt;7ms - 9ms; 1 Req/s&lt;/td&gt;
&lt;td&gt;6ms - 12ms; 1 Req/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10ms; 10 Req/s&lt;/td&gt;
&lt;td&gt;8ms - 9ms; 10 Req/s&lt;/td&gt;
&lt;td&gt;8ms - 9ms; 10 Req/s&lt;/td&gt;
&lt;td&gt;8ms - 9ms; 10 Req/s&lt;/td&gt;
&lt;td&gt;7ms - 9ms; 10 Req/s&lt;/td&gt;
&lt;td&gt;8ms - 12ms; 10 Req/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;12ms - 30ms; 100 Req/s&lt;/td&gt;
&lt;td&gt;8ms - 12ms; 100 Req/s&lt;/td&gt;
&lt;td&gt;7ms - 10ms; 100 Req/s&lt;/td&gt;
&lt;td&gt;5ms - 12ms; 100 Req/s&lt;/td&gt;
&lt;td&gt;6ms - 8ms; 100 Req/s&lt;/td&gt;
&lt;td&gt;8ms - 11ms; 100 Req/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&amp;thinsp;000&lt;/td&gt;
&lt;td&gt;150ms - 34000ms; 170 - 270 Req/s&lt;/td&gt;
&lt;td&gt;8100ms - 41000ms; 220 - 440 Req/s&lt;/td&gt;
&lt;td&gt;340ms - 11000ms; 200 - 625 Req/s&lt;/td&gt;
&lt;td&gt;150ms - 96000ms; 130 - 410 Req/s&lt;/td&gt;
&lt;td&gt;81ms - 101000ms; 220 - 750 Req/s&lt;/td&gt;
&lt;td&gt;350ms - 93000ms; 270 - 533 Req/s&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You can clearly see that there is no real difference up to 100 users. At 1000
users, the development server gets slow. gevent does not care about it. At
10,000 users, gevent gets slow. But the real difference was the 95-percentile
response time. This varies over time. A lot.&lt;/p&gt;
&lt;h3 id="io-bound"&gt;I/O Bound&lt;/h3&gt;
&lt;p&gt;Let's say our workload was I/O bound. Maybe we need to request another API
before we can answer. To simulate this, I let the request sleep for 1s before
it answers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"hello world!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Development Server&lt;/th&gt;
&lt;th&gt;gevent (1 worker, 1000 connections)&lt;/th&gt;
&lt;th&gt;gevent (4 workers, 1000 connections)&lt;/th&gt;
&lt;th&gt;gevent (12 workers, 1000 connections)&lt;/th&gt;
&lt;th&gt;sync (4 workers)&lt;/th&gt;
&lt;th&gt;gthread (4 workers)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;1000ms; 1000-1200ms&lt;/td&gt;
&lt;td&gt;1000ms; 1000-1100ms&lt;/td&gt;
&lt;td&gt;1000ms; 1000ms&lt;/td&gt;
&lt;td&gt;1000ms; 1s-1.1ms&lt;/td&gt;
&lt;td&gt;32s-37s;35s-97s&lt;/td&gt;
&lt;td&gt;Fails&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10,000&lt;/td&gt;
&lt;td&gt;3.2s-8.4ms;5.2ms-76s&lt;/td&gt;
&lt;td&gt;2.4s-8.5s; 28s - 132s&lt;/td&gt;
&lt;td&gt;2.8s-9.7s; 16s-290s&lt;/td&gt;
&lt;td&gt;1.8s - 11s; 6.7s - 150s&lt;/td&gt;
&lt;td&gt;29s - 131s;45s-183s&lt;/td&gt;
&lt;td&gt;Fails&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="cpu-bound"&gt;CPU Bound&lt;/h3&gt;
&lt;p&gt;Let's say our workload was CPU bound:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"hello world!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="alternatives_1"&gt;Alternatives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/UWSGI"&gt;uWSGI&lt;/a&gt; (&lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/"&gt;docs&lt;/a&gt; )is both a protocol and an application server; the application server can serve uWSGI, FastCGI, and HTTP protocols. Seems to be used together with gevent.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tornado_(web_server)"&gt;Tornado&lt;/a&gt;: a scalable, non-blocking web server and web application framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I searched, I also found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TWISTED WEB&lt;/li&gt;
&lt;li&gt;CHERRYPY&lt;/li&gt;
&lt;li&gt;WAITRESS&lt;/li&gt;
&lt;li&gt;CHAUSSETTE&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mopemope/meinheld"&gt;meinheld&lt;/a&gt;: a high performance asynchronous WSGI Web Server (based on picoev)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gevent_pywsgi&lt;/code&gt; and &lt;code&gt;gevent_wsgi&lt;/code&gt; are the same.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gevent&lt;/code&gt; uses the gunicorn event parser, while &lt;code&gt;gevent_wsgi&lt;/code&gt; uses the event
  parser within itself.&lt;sup id="fnref2:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;If you need to handle a high volume of concurrent requests and your
  application performs a lot of waiting on I/O (database, streaming responses,
  upstream requests, etc) then gevent can be a good choice.&lt;sup id="fnref3:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;I didn't include Sanic, because it is less tested then Flask.[^2]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2018-01-30: &lt;a href="https://medium.com/@genchilu/brief-introduction-about-the-types-of-worker-in-gunicorn-and-respective-suitable-scenario-67b0c0e7bd62"&gt;Brief introduction about the types of worker in gunicorn and respective suitable scenario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2015-01-20: &lt;a href="https://www.spirulasystems.com/blog/2015/01/20/gunicorn-worker-types/"&gt;Gunicorn Worker Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2017-01-17: Reddit-comment by &lt;a href="https://www.reddit.com/r/Python/comments/5og4hl/is_there_any_reason_to_use_flask_over_sanic/dcjbqml/"&gt;desmoulinmichel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2012-09-12: &lt;a href="https://ivan-site.com/2012/09/benchmark-uwsgi-vs-gunicorn-for-async-workers/"&gt;Benchmark uWSGI vs gunicorn for async workers&lt;/a&gt; by Ivan Dyedov&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Randall Leeds: &lt;a href="https://github.com/benoitc/gunicorn/issues/305#issuecomment-469345296"&gt;Github, 2019-03-04&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="gunicorn"></category><category term="Flask"></category></entry><entry><title>Simple Operations and Basic Numbers</title><link href="https://martin-thoma.com/simple-operations/" rel="alternate"></link><published>2019-04-17T20:00:00+02:00</published><updated>2019-04-17T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-04-17:/simple-operations/</id><summary type="html">&lt;p&gt;I just wondered how fast some simple operations are (in Python). Like the lookup of an
element in a dictionary. Here you have some, tested on my ThinkPad T460p (&lt;a href="https://ark.intel.com/content/www/de/de/ark/products/88967/intel-core-i7-6700hq-processor-6m-cache-up-to-3-50-ghz.html"&gt;i7-6700HQ&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="arithmethic"&gt;Arithmethic&lt;/h2&gt;
&lt;p&gt;I added/subtracted/multiplied/divided a thousand pairs of numbers to test the
speed of basic arithmetic operations. I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just wondered how fast some simple operations are (in Python). Like the lookup of an
element in a dictionary. Here you have some, tested on my ThinkPad T460p (&lt;a href="https://ark.intel.com/content/www/de/de/ark/products/88967/intel-core-i7-6700hq-processor-6m-cache-up-to-3-50-ghz.html"&gt;i7-6700HQ&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="arithmethic"&gt;Arithmethic&lt;/h2&gt;
&lt;p&gt;I added/subtracted/multiplied/divided a thousand pairs of numbers to test the
speed of basic arithmetic operations. I expected them to be FAST; essentially&lt;/p&gt;
&lt;p&gt;Let's have a look at the adding function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The disassembled cPython Byte-Code looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7feabba81300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add.&amp;lt;locals&amp;gt;.&amp;lt;listcomp&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;MAKE_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;0&lt;/span&gt;
              &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;LOAD_FAST&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;GET_ITER&lt;/span&gt;
             &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;1&lt;/span&gt;
             &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you can see that it does more than &lt;code&gt;BINARY_ADD&lt;/code&gt;. Still, the basic arithmetic
operations are FAST. I think the tuple unpacking might actually have dominated
the time here.&lt;/p&gt;
&lt;p&gt;Here are the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;add                 : min: 177.3&amp;mu;s, mean: 200.3&amp;mu;s, max:  522.2&amp;mu;s
subtract            : min: 168.4&amp;mu;s, mean: 190.9&amp;mu;s, max:  538.8&amp;mu;s
multiply            : min: 165.4&amp;mu;s, mean: 199.7&amp;mu;s, max:  515.8&amp;mu;s
divide              : min: 176.3&amp;mu;s, mean: 213.7&amp;mu;s, max:  518.9&amp;mu;s

2**int (0..20)      : min: 546.4&amp;mu;s, mean: 597.5&amp;mu;s, max:  945.3&amp;mu;s
3**int (0..20)      : min: 591.4&amp;mu;s, mean: 648.8&amp;mu;s, max: 1091.0&amp;mu;s &amp;lt;- BigInt
3.131**int (0..20)  : min: 295.0&amp;mu;s, mean: 304.2&amp;mu;s, max:  602.3&amp;mu;s
2**float            : min: 343.1&amp;mu;s, mean: 371.9&amp;mu;s, max:  769.7&amp;mu;s
3**float            : min: 347.3&amp;mu;s, mean: 375.0&amp;mu;s, max:  748.9&amp;mu;s
3.131**float        : min: 275.3&amp;mu;s, mean: 299.3&amp;mu;s, max:  586.4&amp;mu;s

add_vectors         : min:   3.5&amp;mu;s, mean:   4.0&amp;mu;s, max:   34.8&amp;mu;s
subtract_vectors    : min:   3.4&amp;mu;s, mean:   4.1&amp;mu;s, max:   28.5&amp;mu;s
multiply_vectors    : min:   4.0&amp;mu;s, mean:   4.3&amp;mu;s, max:   30.7&amp;mu;s
divide_vectors      : min:  17.2&amp;mu;s, mean:  18.2&amp;mu;s, max:   71.9&amp;mu;s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see how bad this measure is with something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;durations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"4+500000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which gives&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;add                 : min: 0.08&amp;mu;s, mean: 0.15&amp;mu;s, max:   1.38&amp;mu;s
subtract            : min: 0.08&amp;mu;s, mean: 0.15&amp;mu;s, max:   1.51&amp;mu;s
multiply            : min: 0.06&amp;mu;s, mean: 0.14&amp;mu;s, max:   1.77&amp;mu;s
divide              : min: 0.06&amp;mu;s, mean: 0.13&amp;mu;s, max:   1.36&amp;mu;s
modulo              : min: 0.08&amp;mu;s, mean: 0.15&amp;mu;s, max:   1.59&amp;mu;s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm not sure if this test "suffers" from caching, especially as the max is way
higher than the min and mean, but I guess it is save to say that all four
basic arithmetic operations are about the same execution time and are less than
2&amp;mu;s. That would be about 5200 CPU cycles of my machine.&lt;/p&gt;
&lt;h2 id="element-lookup"&gt;Element lookup&lt;/h2&gt;
&lt;p&gt;Timing how quickly one can retrieve the element from a &lt;a href="https://en.wikipedia.org/wiki/Random_access"&gt;direct access&lt;/a&gt;
data structure by index. Not very surprisingly, lists are fastest. A bit surprising
is that numpy arrays are quite a bit worse.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lookup(list)        : min: 134.0&amp;mu;s, mean: 157.0&amp;mu;s, max:  482.0&amp;mu;s
lookup(dict)        : min: 355.8&amp;mu;s, mean: 407.3&amp;mu;s, max: 1895.2&amp;mu;s
lookup(np array)    : min: 711.1&amp;mu;s, mean: 855.7&amp;mu;s, max: 1665.5&amp;mu;s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="algorithms"&gt;Algorithms&lt;/h2&gt;
&lt;h3 id="sorting"&gt;Sorting&lt;/h3&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/04/sorting-speed.png"&gt;&lt;img alt="Sorting speed in Python" src="../images/2019/04/sorting-speed.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Sorting speed in Python&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Samples&lt;/th&gt;
&lt;th&gt;min&lt;/th&gt;
&lt;th&gt;median&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1.6&amp;mu;s&lt;/td&gt;
&lt;td&gt;2.1&amp;mu;s&lt;/td&gt;
&lt;td&gt;191.7&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;16.6&amp;mu;s&lt;/td&gt;
&lt;td&gt;24.9&amp;mu;s&lt;/td&gt;
&lt;td&gt;121.7&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;110.6&amp;mu;s&lt;/td&gt;
&lt;td&gt;115.2&amp;mu;s&lt;/td&gt;
&lt;td&gt;467.9&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;246.1&amp;mu;s&lt;/td&gt;
&lt;td&gt;258.6&amp;mu;s&lt;/td&gt;
&lt;td&gt;1133.4&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;543.1&amp;mu;s&lt;/td&gt;
&lt;td&gt;562.6&amp;mu;s&lt;/td&gt;
&lt;td&gt;934.5&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;859.8&amp;mu;s&lt;/td&gt;
&lt;td&gt;913.8&amp;mu;s&lt;/td&gt;
&lt;td&gt;2933.8&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4000&lt;/td&gt;
&lt;td&gt;1188.0&amp;mu;s&lt;/td&gt;
&lt;td&gt;1258.0&amp;mu;s&lt;/td&gt;
&lt;td&gt;2859.0&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;1519.6&amp;mu;s&lt;/td&gt;
&lt;td&gt;1631.4&amp;mu;s&lt;/td&gt;
&lt;td&gt;2828.4&amp;mu;s&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;durations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"sorted(arr)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"import numpy as np;arr = np.random.random(100_000)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"min: &lt;/span&gt;&lt;span class="si"&gt;{min:5.1f}&lt;/span&gt;&lt;span class="s2"&gt;&amp;mu;s, mean: &lt;/span&gt;&lt;span class="si"&gt;{mean:5.1f}&lt;/span&gt;&lt;span class="s2"&gt;&amp;mu;s, max: &lt;/span&gt;&lt;span class="si"&gt;{max:6.1f}&lt;/span&gt;&lt;span class="s2"&gt;&amp;mu;s"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;durations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;durations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;durations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="networks_1"&gt;Networks&lt;/h2&gt;
&lt;p&gt;When you talk about "speed" in a network context, there are two important values:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Network_delay"&gt;Latency&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Latency is measured in milli-seconds (ms) and answers the question: How long does it take for the first bit to be transmitted?&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://en.wikipedia.org/wiki/Throughput"&gt;Throughput&lt;/a&gt; (Bandwidth)&lt;/dt&gt;
&lt;dd&gt;Throughput is measured in kB/s and answers the question: If the first bit already arrived, how quickly will the rest be transfered?&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="latency"&gt;Latency&lt;/h3&gt;
&lt;p&gt;Typical values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessing a CPU register: Less than 1ns!&lt;/li&gt;
&lt;li&gt;Accessing L1 / L2 CPU caches: 1ns - 10ns&lt;/li&gt;
&lt;li&gt;Accessing L3 CPU cache: 10ns - 100ns&lt;/li&gt;
&lt;li&gt;Ethernet Switch Latency: 50&amp;mu;s - 125&amp;mu;s&lt;/li&gt;
&lt;li&gt;Cable: Essentially non-existant as the signal travels with the speed of light&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And some other corner stones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ping (via WLAN) in average&lt;ul&gt;
&lt;li&gt;My router: 2.3ms&lt;/li&gt;
&lt;li&gt;joyn.de: 19.4ms&lt;/li&gt;
&lt;li&gt;twitter.com: 25.7ms&lt;/li&gt;
&lt;li&gt;google.de: 26.3ms&lt;/li&gt;
&lt;li&gt;wikipedia.org: 29.1ms&lt;/li&gt;
&lt;li&gt;martin-thoma.de: 29.4ms&lt;/li&gt;
&lt;li&gt;martin-thoma.com: 30.3ms&lt;/li&gt;
&lt;li&gt;netflix.com: 50.8ms&lt;/li&gt;
&lt;li&gt;write-math.com: 248.0ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static pages with network:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://martin-thoma.de"&gt;http://martin-thoma.de via hosting.de&lt;/a&gt;: 52ms - 61ms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.de"&gt;https://google.de&lt;/a&gt;: 110ms - 170ms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joyn.de/"&gt;https://joyn.de&lt;/a&gt;: 130ms - 190ms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.fefe.de/"&gt;https://blog.fefe.de&lt;/a&gt;: 150ms - 180ms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/"&gt;https://martin-thoma.com&lt;/a&gt; via GitHub: 320ms - 420ms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflix.com/"&gt;https://netflix.com&lt;/a&gt;: 230ms - 500ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API request with network:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://write-math.com"&gt;https://write-math.com&lt;/a&gt; via namecheap; a symbol classification request: 550ms - 820ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="throughput"&gt;Throughput&lt;/h3&gt;
&lt;p&gt;And some throughput values (partially measured, partially looked up / calculated):&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th rowspan="2"&gt;Connection&lt;/th&gt;
&lt;th colspan="2"&gt;Throughput&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Download&lt;/th&gt;
&lt;th&gt;Upload&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gigabit Ethernet&lt;/td&gt;
&lt;td&gt;1000 MBit/s&lt;/td&gt;
&lt;td&gt;1000 MBit/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;My Internet Connection&lt;/td&gt;
&lt;td&gt;&amp;nbsp;285 MBit/s&lt;/td&gt;
&lt;td&gt;&amp;nbsp;25 MBit/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;My Internet Connection (&lt;a href="https://www.speedtest.net/result/9272895784"&gt;2020-04-12&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;96 MBit/s&lt;/td&gt;
&lt;td&gt;&amp;nbsp;7 MBit/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LTE (peak)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;37 MB/s&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;9 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LTE (measured)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;14 MB/s&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;2 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio Streaming (Low,&amp;nbsp;96kbps)&lt;/td&gt;
&lt;td colspan="2"&gt;&amp;nbsp;&amp;nbsp;0.012 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio Streaming (Normal,&amp;nbsp;160kbps)&lt;/td&gt;
&lt;td colspan="2"&gt;&amp;nbsp;&amp;nbsp;0.020 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio Streaming (High,&amp;nbsp;320kbps)&lt;/td&gt;
&lt;td colspan="2"&gt;&amp;nbsp;&amp;nbsp;0.040 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Video Streaming (Low, 360)&lt;/td&gt;
&lt;td colspan="2"&gt;0.083 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Video Streaming (Normal, 720p)&lt;/td&gt;
&lt;td colspan="2"&gt;0.250 MB/s (2.0 MBit/s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Video Streaming (High, 1080p)&lt;/td&gt;
&lt;td colspan="2"&gt;0.417 MB/s (3.3 MBit/s)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you think about which internet contract to get, you might be wondering
which speed is acceptable. The highest speed is probably necessary for video
streaming:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Speed&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0.5 Mbit/s&lt;/td&gt;
&lt;td&gt;Minimum required for Netfix&lt;sup&gt;&lt;a href="#fn-1" name="fnref-1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.5 Mbit/s&lt;/td&gt;
&lt;td&gt;Recommended speed for Netflix&lt;sup&gt;&lt;a href="#fn-1" name="fnref-1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.0 Mbit/s&lt;/td&gt;
&lt;td&gt;Recommended speed for Netflix with standard resolution&lt;sup&gt;&lt;a href="#fn-1" name="fnref-1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.0 Mbit/s&lt;/td&gt;
&lt;td&gt;Recommended speed for Netflix with HD resolution&lt;sup&gt;&lt;a href="#fn-1" name="fnref-1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25.0 Mbit/s&lt;/td&gt;
&lt;td&gt;Recommended speed for Netflix with Ultra-HD resolution&lt;sup&gt;&lt;a href="#fn-1" name="fnref-1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="combinations"&gt;Combinations&lt;/h3&gt;
&lt;p&gt;Some measurements how quickly I get web pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;get_webpage (martin-thoma.de,     2.3kB): min:  353ms, mean:  367ms, max:  390ms
get_webpage (google.de,          11.3kB): min:  532ms, mean:  548ms, max:  574ms
get_webpage (stackoverflow.com, 273.5kB): min: 1331ms, mean: 1686ms, max: 2462ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="see-also"&gt;See also&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Enhanced_Data_Rates_for_GSM_Evolution"&gt;Enhanced Data Rates for GSM Evolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/UMTS"&gt;UMTS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code_1"&gt;Code&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/MartinThoma/algorithms/blob/master/Python/timing/lookup.py"&gt;Github&lt;/a&gt; for the snippet.&lt;/p&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Netflix: &lt;a href="https://help.netflix.com/en/node/306"&gt;Internet Connection Speed Recommendations&lt;/a&gt;, read 2019-08-30.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;larrhk;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="Python"></category><category term="Network"></category><category term="speed"></category><category term="Internet"></category><category term="Traffic"></category></entry><entry><title>Python Puzzle 4</title><link href="https://martin-thoma.com/python-puzzle-4/" rel="alternate"></link><published>2019-02-25T20:00:00+01:00</published><updated>2019-02-25T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-02-25:/python-puzzle-4/</id><summary type="html">&lt;p&gt;What is the output of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;bar=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;kwargs=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Test 1:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holla&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Test 2:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holla&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Test 1:
    bar=12
    kwargs={'holla': 13}
Test 2:
    bar=12
    kwargs={'holla' …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;What is the output of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;bar=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;kwargs=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Test 1:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holla&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Test 2:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holla&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Test 1:
    bar=12
    kwargs={'holla': 13}
Test 2:
    bar=12
    kwargs={'holla': 13}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Programming"></category><category term="Python"></category><category term="puzzle"></category></entry><entry><title>Code Optimization</title><link href="https://martin-thoma.com/code-optimization/" rel="alternate"></link><published>2019-01-28T20:00:00+01:00</published><updated>2019-01-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2019-01-28:/code-optimization/</id><summary type="html">&lt;p&gt;Code optimization is about making programs run faster. In this article, I'll
give some basic ideas how to do it.&lt;/p&gt;
&lt;div class="info"&gt;This article is NOT about &lt;a href="https://martin-thoma.com/optimization-basics/"&gt;optimization problems&lt;/a&gt;. It is also not about compression. Neither is it about churn rates (making users / companies happy).&lt;/div&gt;
&lt;p&gt;There is a ton of different ways …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code optimization is about making programs run faster. In this article, I'll
give some basic ideas how to do it.&lt;/p&gt;
&lt;div class="info"&gt;This article is NOT about &lt;a href="https://martin-thoma.com/optimization-basics/"&gt;optimization problems&lt;/a&gt;. It is also not about compression. Neither is it about churn rates (making users / companies happy).&lt;/div&gt;
&lt;p&gt;There is a ton of different ways how to speed up things. You can use algorithms
and data structures that scale better. You can avoid some operations
completely, because you actually don't use the results. Caching is also a
technique that quite often helps to avoid repeating costly operations. In some
cases it is completely fine to have computationally intensive parts, but you
want to pre-compute them. So maybe you can just change the point in time when
the costly operation is done.&lt;/p&gt;
&lt;h2 id="scalability"&gt;Scalability&lt;/h2&gt;
&lt;p&gt;You should know how your code scales. When you write a data structure, you
should document the Big-O notation of its operations. When you write functions,
you should do the same.&lt;/p&gt;
&lt;p&gt;So much about nice an innocent thoughts. In reality, you probably get
distracted or simply have more important things to do than noting the runtime
complexity of your code. It's clear anyway, right?&lt;/p&gt;
&lt;p&gt;The truth is between those extremes. You should always look for potential
scalability issues. In contrast to programming challenges, you have only a
vague idea about the size of the inputs. Then rather assume an order of
magnitude too much than too little. And think about in which direction you
have to scale: More calls or calls with bigger arguments?&lt;/p&gt;
&lt;h2 id="measuring-performance"&gt;Measuring Performance&lt;/h2&gt;
&lt;p&gt;Measuring performance has two aspects: Profiling the overall program to find
which parts most time is spend on and then improving that part. For profiling
in Python, I use &lt;code&gt;cProfile&lt;/code&gt;. For improving I compare solutions via &lt;code&gt;timeit&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="cprofile"&gt;cProfile&lt;/h3&gt;
&lt;p&gt;Create a profile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;cProfile&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;profile_output&lt;span class="w"&gt; &lt;/span&gt;your_script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;View the profile in a web browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cprofilev&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;profile_output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="timeit"&gt;timeit&lt;/h3&gt;
&lt;p&gt;You might wonder for two solutions which one is the faster one. While this can
be incredible hard to answer for arbitary hardware, even for your machine with
roughly the same load it is a tough question. You need to execute the stuff
multiple times, have the same setup (to make sure that the same stuff is
cached) and then look at the measured results.&lt;/p&gt;
&lt;p&gt;For example, take the question &lt;a href="https://stackoverflow.com/q/54345897/562769"&gt;Fastest way to count non spacing chars in Unicode text in Python&lt;/a&gt; with the following solutions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;unicodedata&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;UNICODE_NSM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0300&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0301&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0302&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0303&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0304&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0305&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0306&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0307&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0308&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0309&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0310&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0311&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0312&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0313&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0314&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0315&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0316&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0317&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0318&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0319&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0320&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0321&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0322&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0323&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0324&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0325&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0326&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0327&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0328&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0329&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0330&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0331&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0332&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0333&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0334&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0335&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0336&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0337&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0338&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0339&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0340&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0341&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0342&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0343&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0344&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0345&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0346&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0347&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0348&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0349&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0350&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0351&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0352&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0353&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0354&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0355&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0356&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0357&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0358&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0359&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0360&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0361&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0362&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0363&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0364&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0365&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0366&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0367&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0368&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0369&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0483&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0484&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0485&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0486&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0487&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0591&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0592&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0593&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0594&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0595&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0596&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0597&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0598&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0599&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0610&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0611&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0612&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0613&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0614&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0615&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0616&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0617&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0618&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0619&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u061A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0650&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0651&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0652&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0653&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0654&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0655&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0656&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0657&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0658&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0659&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0670&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0711&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0730&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0731&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0732&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0733&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0734&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0735&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0736&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0737&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0738&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0739&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0740&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0741&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0742&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0743&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0744&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0745&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0746&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0747&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0748&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0749&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u074A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0816&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0817&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0818&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0819&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0820&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0821&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0822&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0823&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0825&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0826&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0827&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0829&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0859&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u085A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u085B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0900&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0901&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0902&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u093A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u093C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u093E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0941&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0942&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0943&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0944&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0945&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0946&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0947&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0948&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u094D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0951&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0952&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0953&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0954&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0955&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0956&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0957&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0962&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0963&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0981&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09CD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A3C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A41&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A47&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A48&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A4B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A51&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A70&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A71&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A75&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A81&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A82&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ABC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ACD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B3C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B3F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B41&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B43&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B44&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B56&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B63&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B82&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0BC0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0BCD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C3E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C3F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C40&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C46&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C47&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C48&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C55&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C56&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C63&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CBC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CBF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CC6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CCC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CCD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D41&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D43&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D44&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D63&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DCA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E31&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E34&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E35&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E38&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E3A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E47&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E48&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E49&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EBB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EBC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EC8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EC9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F18&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F19&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F35&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F71&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F72&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F73&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F74&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F75&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F76&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F77&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F78&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F79&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F80&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F81&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F82&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F83&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F84&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F86&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F87&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F8D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F8E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F8F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F90&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F91&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F92&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F93&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F94&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F95&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F96&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F97&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F99&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FBA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FBB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FBC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FC6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u102D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u102E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u102F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1030&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1032&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1033&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1034&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1035&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1036&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1037&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1039&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u103A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u103D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u103E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1058&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1059&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u105E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u105F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1060&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1071&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1072&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1073&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1074&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1082&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1085&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1086&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u108D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u109D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u135D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u135E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u135F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1712&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1713&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1714&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1732&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1733&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1734&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1752&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1753&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1772&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1773&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17C6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17C9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17DD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u180B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u180C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u180D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u18A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1920&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1921&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1922&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1927&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1928&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1932&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1939&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u193A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u193B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A17&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A18&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A56&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A58&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A59&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A60&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A65&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A66&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A67&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A68&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A69&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A6A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A6B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A6C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A73&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A74&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A75&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A76&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A77&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A78&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A79&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B00&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B34&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B38&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B3A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B3C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B70&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B71&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B72&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B73&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B80&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B81&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BAB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BE9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BEF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BF0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BF1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C30&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C31&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C32&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C33&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CF4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20DA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20DB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20DC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2CEF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2CF0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2CF1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2D7F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u3099&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u309A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA66F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA674&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA675&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA676&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA677&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA678&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA679&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA69F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA6F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA6F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA802&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA806&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA80B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA825&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA826&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA926&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA927&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA928&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA929&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA947&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA948&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA949&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA950&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA951&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA980&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA981&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA982&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA29&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA31&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA32&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA35&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA43&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAABE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAABF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAC1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAEC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAF6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uABE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uABE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uABED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFB1E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE00&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE04&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE05&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE06&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE07&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE08&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE09&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE20&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE21&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE22&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE23&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE24&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE25&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE26&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000101FD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A05&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A06&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A38&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A3A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A3F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011001&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011038&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011039&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011040&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011041&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011042&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011043&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011044&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011045&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011046&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011080&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011081&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011100&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011101&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011102&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011127&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011128&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011129&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011130&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011131&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011132&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011133&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011134&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011180&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011181&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F8F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F90&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F91&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F92&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D167&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D168&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D169&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D180&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D181&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D182&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D185&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D186&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D187&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D188&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D189&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D18A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D18B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D242&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D243&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D244&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0100&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0101&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0102&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0103&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0104&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0106&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0107&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0108&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0109&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0110&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0111&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0112&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0113&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0114&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0115&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0116&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0117&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0118&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0119&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0120&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0121&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0122&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0123&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0124&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0125&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0126&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0127&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0128&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0129&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uE012&lt;/span&gt;&lt;span class="s1"&gt;C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0130&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0131&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0132&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0133&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0134&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0135&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0136&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0137&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0138&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0139&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0140&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0141&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0142&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0143&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0144&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0145&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0146&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0147&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0148&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0149&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0150&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0151&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0152&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0153&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0154&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0155&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0156&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0157&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0158&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0159&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0160&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0161&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0162&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0163&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0164&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0165&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0166&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0167&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0168&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0169&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0170&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0171&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0172&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0173&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0174&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0175&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0176&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0177&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0178&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0179&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0180&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0181&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0182&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0183&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0184&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0185&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uE018&lt;/span&gt;&lt;span class="s1"&gt;6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0187&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0188&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0189&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0190&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0191&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0192&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0193&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0194&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0195&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0196&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0197&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0198&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0199&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;MARK_SET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxunicode&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;generator_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;UNICODE_NSM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;loop_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 1769137&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;UNICODE_NSM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;markset_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;MARK_SET&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;category_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"Mn"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides the fact that two make a list-lookups and the other two make set lookups,
it might be hard to tell how much of a difference that makes. So I took
&lt;a href="https://github.com/loretoparisi/unicode_marks/blob/master/UnicodeData.txt"&gt;a big text file&lt;/a&gt; for
comparison and used &lt;code&gt;timeit&lt;/code&gt;. As different runs have different times, I counted
a couple of them and created &lt;a href="https://en.wikipedia.org/wiki/Box_plot"&gt;Box plots&lt;/a&gt;
to show the distribution of execution times. I also made sure that the algorithm
is correct (never forget that when you optimize code!).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;unicodedata&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;UNICODE_NSM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0300&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0301&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0302&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0303&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0304&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0305&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0306&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0307&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0308&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0309&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u030F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0310&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0311&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0312&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0313&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0314&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0315&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0316&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0317&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0318&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0319&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u031F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0320&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0321&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0322&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0323&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0324&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0325&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0326&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0327&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0328&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0329&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u032F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0330&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0331&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0332&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0333&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0334&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0335&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0336&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0337&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0338&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0339&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u033F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0340&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0341&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0342&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0343&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0344&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0345&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0346&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0347&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0348&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0349&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u034F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0350&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0351&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0352&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0353&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0354&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0355&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0356&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0357&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0358&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0359&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u035F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0360&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0361&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0362&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0363&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0364&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0365&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0366&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0367&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0368&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0369&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u036F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0483&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0484&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0485&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0486&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0487&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0591&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0592&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0593&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0594&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0595&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0596&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0597&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0598&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0599&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u059F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05AF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05BF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u05C7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0610&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0611&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0612&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0613&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0614&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0615&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0616&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0617&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0618&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0619&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u061A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u064F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0650&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0651&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0652&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0653&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0654&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0655&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0656&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0657&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0658&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0659&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u065F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0670&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06D9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06DF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u06ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0711&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0730&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0731&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0732&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0733&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0734&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0735&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0736&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0737&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0738&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0739&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u073F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0740&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0741&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0742&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0743&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0744&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0745&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0746&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0747&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0748&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0749&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u074A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07AF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u07F3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0816&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0817&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0818&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0819&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u081F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0820&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0821&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0822&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0823&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0825&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0826&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0827&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0829&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u082D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0859&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u085A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u085B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08F9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u08FE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0900&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0901&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0902&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u093A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u093C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u093E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0941&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0942&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0943&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0944&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0945&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0946&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0947&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0948&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u094D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0951&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0952&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0953&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0954&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0955&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0956&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0957&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0962&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0963&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0981&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09CD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u09E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A3C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A41&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A47&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A48&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A4B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A51&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A70&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A71&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A75&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A81&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0A82&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ABC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AC8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ACD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0AE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B3C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B3F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B41&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B43&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B44&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B56&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B63&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0B82&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0BC0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0BCD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C3E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C3F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C40&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C46&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C47&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C48&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C55&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C56&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0C63&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CBC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CBF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CC6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CCC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CCD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0CE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D41&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D43&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D44&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0D63&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DCA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0DD6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E31&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E34&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E35&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E38&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E3A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E47&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E48&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E49&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0E4E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EB9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EBB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EBC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EC8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0EC9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0ECD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F18&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F19&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F35&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F71&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F72&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F73&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F74&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F75&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F76&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F77&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F78&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F79&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F7E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F80&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F81&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F82&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F83&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F84&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F86&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F87&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F8D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F8E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F8F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F90&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F91&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F92&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F93&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F94&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F95&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F96&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F97&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F99&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0F9F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FA9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FAF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FB9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FBA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FBB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FBC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0FC6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u102D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u102E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u102F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1030&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1032&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1033&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1034&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1035&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1036&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1037&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1039&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u103A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u103D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u103E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1058&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1059&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u105E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u105F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1060&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1071&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1072&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1073&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1074&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1082&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1085&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1086&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u108D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u109D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u135D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u135E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u135F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1712&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1713&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1714&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1732&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1733&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1734&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1752&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1753&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1772&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1773&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17C6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17C9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17CF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17D3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u17DD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u180B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u180C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u180D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u18A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1920&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1921&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1922&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1927&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1928&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1932&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1939&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u193A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u193B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A17&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A18&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A56&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A58&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A59&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A5E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A60&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A62&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A65&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A66&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A67&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A68&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A69&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A6A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A6B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A6C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A73&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A74&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A75&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A76&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A77&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A78&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A79&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1A7F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B00&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B34&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B38&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B3A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B3C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B42&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B6F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B70&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B71&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B72&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B73&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B80&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1B81&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BA9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BAB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BE9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BEF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BF0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1BF1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C2F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C30&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C31&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C32&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C33&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1C37&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CD9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CDF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1CF4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DC9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DCF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DD9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DDF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u1DFF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20D9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20DA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20DB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20DC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u20F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2CEF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2CF0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2CF1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2D7F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DE9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DEF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DF9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u2DFF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u302D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u3099&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u309A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA66F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA674&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA675&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA676&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA677&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA678&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA679&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA67D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA69F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA6F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA6F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA802&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA806&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA80B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA825&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA826&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8F0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA8F1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA926&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA927&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA928&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA929&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA92D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA947&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA948&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA949&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA94F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA950&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA951&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA980&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA981&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA982&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uA9BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA29&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA2E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA31&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA32&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA35&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA36&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA43&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAA4C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAB8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAABE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAABF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAC1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAEC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uAAF6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uABE5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uABE8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uABED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFB1E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE00&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE04&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE05&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE06&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE07&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE08&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE09&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE0F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE20&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE21&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE22&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE23&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE24&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE25&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uFE26&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000101FD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A01&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A02&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A05&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A06&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A0F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A38&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A39&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A3A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00010A3F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011001&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011038&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011039&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001103F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011040&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011041&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011042&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011043&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011044&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011045&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011046&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011080&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011081&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000110BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011100&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011101&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011102&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011127&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011128&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011129&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001112F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011130&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011131&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011132&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011133&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011134&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011180&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00011181&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000111BE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000116B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F8F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F90&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F91&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U00016F92&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D167&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D168&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D169&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D17F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D180&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D181&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D182&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D185&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D186&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D187&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D188&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D189&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D18A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D18B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D1AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D242&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D243&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U0001D244&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0100&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0101&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0102&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0103&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0104&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0106&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0107&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0108&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0109&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E010F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0110&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0111&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0112&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0113&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0114&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0115&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0116&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0117&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0118&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0119&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E011F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0120&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0121&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0122&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0123&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0124&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0125&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0126&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0127&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0128&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0129&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uE012&lt;/span&gt;&lt;span class="s1"&gt;C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E012F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0130&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0131&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0132&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0133&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0134&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0135&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0136&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0137&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0138&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0139&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E013F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0140&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0141&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0142&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0143&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0144&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0145&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0146&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0147&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0148&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0149&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E014F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0150&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0151&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0152&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0153&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0154&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0155&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0156&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0157&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0158&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0159&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E015F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0160&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0161&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0162&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0163&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0164&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0165&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0166&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0167&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0168&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0169&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E016F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0170&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0171&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0172&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0173&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0174&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0175&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0176&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0177&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0178&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0179&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E017F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0180&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0181&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0182&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0183&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0184&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0185&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\uE018&lt;/span&gt;&lt;span class="s1"&gt;6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0187&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0188&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0189&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E018F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0190&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0191&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0192&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0193&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0194&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0195&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0196&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0197&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0198&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E0199&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019A&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019B&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019C&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019D&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E019F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01A9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01AF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01B9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01BF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01C9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01CF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01D9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DD&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01DF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E0&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E1&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E2&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E3&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E4&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E5&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E6&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E7&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E8&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01E9&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EA&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EB&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EC&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01ED&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EE&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\U000E01EF&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;MARK_SET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxunicode&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"M"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(UNICODE_NSM) = &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNICODE_NSM&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"len(MARK_SET) = &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MARK_SET&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"UnicodeData.txt"&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ground_truth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"loop_count"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"generator_count"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"category_count"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markset_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"markset_count"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;duration_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_correct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ground_truth&lt;/span&gt;
        &lt;span class="n"&gt;durations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kp"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_correct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;correctness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"correct"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;correctness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"NOT correct"&lt;/span&gt;
        &lt;span class="n"&gt;duration_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;durations&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{func:&amp;lt;20}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{correctness}&lt;/span&gt;&lt;span class="s2"&gt;, "&lt;/span&gt;
            &lt;span class="s2"&gt;"min: &lt;/span&gt;&lt;span class="si"&gt;{min:0.3f}&lt;/span&gt;&lt;span class="s2"&gt;s, mean: &lt;/span&gt;&lt;span class="si"&gt;{mean:0.3f}&lt;/span&gt;&lt;span class="s2"&gt;s, max: &lt;/span&gt;&lt;span class="si"&gt;{max:0.3f}&lt;/span&gt;&lt;span class="s2"&gt;s"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;correctness&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;correctness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;durations&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;durations&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;durations&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;create_boxplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;create_boxplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;seaborn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;sns&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;plt&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;operator&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"k"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"whitegrid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sorted_keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sorted_vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;flierprops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;markerfacecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.75"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markersize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sorted_vals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flierprops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;flierprops&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Time in s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yticks&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sorted_keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"output.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/02/timeit-boxplot-4.png"&gt;&lt;img alt="Performance comparison of 4 algorithms." src="../images/2019/02/timeit-boxplot-4.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Performance comparison of 4 algorithms. The filled part of the four box-plots shows where 50% of the data is. The line in the middle of the filled part is the median.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can clearly see that the markset_count and the category_count are way
faster than the generator_count and the loop_count. Also the speed of the
latter two varies way more. Interestingly, the generator_count is slower than
the loop_count.&lt;/p&gt;
&lt;p&gt;The markset_count is a bit faster than the category_count. I think that is the
case because looking up the category and doing the string comparison also takes
a bit of time. The difference is way more clear when you only plot the two and
increase the text length:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2019/02/timeit-boxplot-2.png"&gt;&lt;img alt="Performance comparison of markset_count and category_count." src="../images/2019/02/timeit-boxplot-2.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;Performance comparison of markset_count and category_count.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="hints_1"&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vectorization&lt;/strong&gt;: Gives the hell of a speedup. See &lt;a href="https://datascience.blog.wzb.eu/2018/02/02/vectorization-and-parallelization-in-python-with-numpy-and-pandas/"&gt;Vectorization and Parallelization in Python with Numpy and Pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutable data structures&lt;/strong&gt;: Strings are often immutable (e.g. in Python).
  You might want to use a String Builder, in Python there is an article about
  &lt;a href="https://waymoot.org/home/python_string/"&gt;Efficient String Concatenation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallelization&lt;/strong&gt;: Again, a huge speedup is possible. My &lt;a href="https://ark.intel.com/content/www/us/en/ark/products/88967/intel-core-i7-6700hq-processor-6m-cache-up-to-3-50-ghz.html"&gt;Intel i7-6700HQ&lt;/a&gt; allows 8 threads, so an 8x speedup is possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="website-optimization"&gt;Website Optimization&lt;/h2&gt;
&lt;p&gt;This is a super wide topic&lt;/p&gt;
&lt;p&gt;See:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hanselminutes.com/175/optimizing-your-website-with-jeff-atwood-and-stackoverflow"&gt;Optimizing Your Website with Jeff Atwood and Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Program_optimization"&gt;Program optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael E. Lee: &lt;a href="http://icps.u-strasbg.fr/~bastoul/local_copies/lee.html"&gt;Optimization of Computer Programs in C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Software Engineering"></category><category term="Productivity"></category></entry><entry><title>Code Quality</title><link href="https://martin-thoma.com/code-quality/" rel="alternate"></link><published>2018-12-30T20:00:00+01:00</published><updated>2018-12-30T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-12-30:/code-quality/</id><summary type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Here are some rules that help you to write code of high quality. They are
inspired …&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Here are some rules that help you to write code of high quality. They are
inspired by &lt;a href="https://www.youtube.com/watch?v=UjhX2sVf0eg"&gt;Michael Toppa - 10 Tips For Clean Code&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose meaningful variable names&lt;/li&gt;
&lt;li&gt;Boy Scout Principle: Leave the code base cleaner than you found it&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle: A function / method does only one thing&lt;/li&gt;
&lt;li&gt;Write Tests&lt;/li&gt;
&lt;li&gt;Independent Architecture&lt;/li&gt;
&lt;li&gt;Many arguments -&amp;gt; pass object,&lt;/li&gt;
&lt;li&gt;Signal to noise ratio: How much of the desired signal is there compared to
  parts you don't want?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The principles layed out below can be grouped in several categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Mental Load&lt;/span&gt;: Understanding code is
  difficult. Some principles help to reduce the difficulty.&lt;/li&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Speed&lt;/span&gt;: Make the code run faster&lt;/li&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Extendability&lt;/span&gt;: Code is rarely ever
  finished. New features have to be added all the time. Principles with this
  tag make it easier to extend the code in a clean way.&lt;/li&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Debugging&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dictionaries"&gt;Dictionaries&lt;/h2&gt;
&lt;h3 id="get"&gt;Get&lt;/h3&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"key"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a_dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"a default value"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;foobar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a default value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easier to read, because less lines of code &lt;span class="label label-info"&gt;Mental Load&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Looking up 'key' only once &lt;span class="label label-info"&gt;Speed&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="error-case-checking_1"&gt;Error case checking&lt;/h2&gt;
&lt;p&gt;A common problem is to check many error-cases until you do whatever you want to
do.&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"xy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"xy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason why code structured like this is because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Mental Load&lt;/span&gt; Easier to read - first
  error checking, then the stuff that needs to be done&lt;/li&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Extendability&lt;/span&gt;: Imagine there was
  another error case you forgot that needs to be checked in the beginning.
  Then, using the pattern above, you would need to reindent all of the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="make-variable-names-pronouncable"&gt;Make Variable Names Pronouncable&lt;/h2&gt;
&lt;p&gt;Bad: &lt;code&gt;cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Good: &lt;code&gt;config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="label label-info"&gt;Mental Load&lt;/span&gt;&lt;/p&gt;
&lt;h2 id="comments"&gt;Comments&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Mental Load&lt;/span&gt; When you write a comment,
   could it rather be a better variable name?&lt;/li&gt;
&lt;li&gt;When you write a comment, should it be a log statement?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="namedtuples-instead-of-tuples"&gt;NamedTuples instead of Tuples&lt;/h2&gt;
&lt;p&gt;Bad: tuple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better: &lt;a href="https://docs.python.org/2/library/collections.html#collections.namedtuple"&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Point'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;133&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;133&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Extendability&lt;/span&gt; In places that might be
  far from the point of creation of the tuple, it is way easier to understand
  what this was about.&lt;/li&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Debugging&lt;/span&gt; In places that might be
  far from the point of creation of the tuple, it is way easier to understand
  what this was about&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="keyword-arguments-instead-of-positional-arguments"&gt;Keyword-Arguments instead of positional arguments&lt;/h2&gt;
&lt;h2 id="minimum-variable-length"&gt;Minimum variable length&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;grep&lt;/code&gt; a lot when I develop. For projects I work on I have a very rough
call graph in mind, so I know a bit how my projects modules / objects interact
with each other. When I want to extend functionality, I grep for the part where
I need to adjust things (or I simply use &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;f&lt;/kbd&gt;).
Hence, for every semantically meaningful variable it is good to have variables
which are not parts of other words. A common one where it is fine to have a
short name is having iterators that are just &lt;code&gt;i&lt;/code&gt; (an index integer). A common
one which I don't like is &lt;code&gt;tmp&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="naming-constants"&gt;Naming constants&lt;/h2&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_code&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;execution_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_code&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;SECONDS_IN_A_HOUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;
&lt;span class="n"&gt;execution_time_in_hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SECONDS_IN_A_HOUR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reasons why it is better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="label label-info"&gt;Extendability&lt;/span&gt; It is easier to
  understand which formats are converted here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even better: Use a unit library like &lt;a href="https://pint.readthedocs.io/en/latest/index.html"&gt;pint&lt;/a&gt;.
This way, it is guaranteed that the units will not accidentially be used in the
wrong way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pint&lt;/span&gt;

&lt;span class="n"&gt;ureg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnitRegistry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;execution_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ureg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="n"&gt;execution_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ureg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;magnitude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="first-list-pop"&gt;First List Pop&lt;/h2&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;list_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;list_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better: use &lt;a href="https://docs.python.org/3/library/collections.html#collections.deque"&gt;&lt;code&gt;deque&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reason: &lt;span class="label label-info"&gt;Speed&lt;/span&gt; - see &lt;a href="https://wiki.python.org/moin/TimeComplexity"&gt;time complexity of data structure operations&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="avoid-mental-mapping"&gt;Avoid Mental Mapping&lt;/h2&gt;
&lt;p&gt;Worst:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;list_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a@de.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foobar@fg.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hot@martin.com"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;list_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a@de.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foobar@fg.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hot@martin.com"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;email_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a@de.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foobar@fg.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hot@martin.com"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;email_addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="label label-info"&gt;Mental Complexity&lt;/span&gt; Here we don't iterate
over an integer number. We iterate over items. Those items have a semantic
type. What would we say in natural language to describe the code? Surely
something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To each email address which we gathered before, we send a mail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last one is was closer to this natural form than the other two ones are.&lt;/p&gt;
&lt;h2 id="ignored"&gt;ignored&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with ignored:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;only&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dont-add-unnecessary-prefixes-suffixes"&gt;Don't add unnecessary prefixes / suffixes&lt;/h2&gt;
&lt;p&gt;For example, a &lt;code&gt;Person&lt;/code&gt; class does not need a &lt;code&gt;person_id&lt;/code&gt; property. It is
simply an id.&lt;/p&gt;
&lt;h2 id="use-at-most-3-function-parameters"&gt;Use at most 3 function parameters&lt;/h2&gt;
&lt;p&gt;This is not a hard rule, but certainly one that most often is a good idea.
Functions with many parameters are super hard to digest. Often, it makes more
sense to pass the function an object, e.g. a &lt;a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"&gt;namedtuple&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Ways to store Data</title><link href="https://martin-thoma.com/ways-to-store-data/" rel="alternate"></link><published>2018-12-30T20:00:00+01:00</published><updated>2018-12-30T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-12-30:/ways-to-store-data/</id><summary type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Data is one core element of machine learning. Hence it is worth to think about
ways …&lt;/p&gt;</summary><content type="html">&lt;div class="info"&gt;This is an article I had for quite a while as a draft. As part of my yearly cleanup, I've published it without finishing it. It might not be finished or have other problems.&lt;/div&gt;
&lt;p&gt;Data is one core element of machine learning. Hence it is worth to think about
ways to store it. This post is inspired by some news of really big datasets being published (&lt;a href="https://www.reddit.com/r/MachineLearning/comments/6a97pt/n_new_massive_medical_image_dataset_coming_from/"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="hardware"&gt;Hardware&lt;/h2&gt;
&lt;p&gt;This post is not about hardware. Well, not mainly. The only thing I would
like to mention are some rough scales:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Hardware&lt;/th&gt;
&lt;th&gt;Backup&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 250GB&lt;/td&gt;
&lt;td&gt;SSD&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;250 GB - 10 TB&lt;/td&gt;
&lt;td&gt;HDD&lt;/td&gt;
&lt;td&gt;Ok&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10 TB - 32 TB&lt;/td&gt;
&lt;td&gt;HDD + RAID&lt;/td&gt;
&lt;td&gt;Difficult&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;more than 32 TB&lt;/td&gt;
&lt;td&gt;Tapes? SANs?&lt;/td&gt;
&lt;td&gt;Extremely difficult&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A short overview of some RAID levels:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;RAID&lt;/th&gt;
&lt;th&gt;Stripes&lt;/th&gt;
&lt;th&gt;Mirror&lt;/th&gt;
&lt;th&gt;Parity&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Blocks&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Just chaining the disks. You can easily loose data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Blocks&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;You can only use half the storage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Blocks&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;(1/n)th of the storage is used for parity, where n is the number of disks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Blocks&lt;/td&gt;
&lt;td&gt;Blocks&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Raid 1 and 0 combined&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You might be interested in&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=uykMPICGeqw"&gt;Unboxing a PETABYTE of Storage - HOLY $H!T Ep. 16&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dell.com/support/article/us/en/4/SLN129581/understanding-hard-drive-types--raid-and-raid-controllers-on-dell-poweredge-and-blade-chassis-servers?lang=EN"&gt;RAID levels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/q/365355/4784"&gt;Why is ext4 only recommended up to 16 TB?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://superuser.com/q/1209642/64857"&gt;What limits the number of drives in RAID?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've heard you can store much more on &lt;a href="https://en.wikipedia.org/wiki/Tape_drive"&gt;tape drives&lt;/a&gt;.
It might be necessary to physically go there and put a tape in / out.&lt;/p&gt;
&lt;h2 id="file-formats"&gt;File formats&lt;/h2&gt;
&lt;p&gt;Having talked about limitations on the upper scale of the amount of data, I
would like to go down several levels. Let's talk about file formats.&lt;/p&gt;
&lt;h3 id="structured-data"&gt;Structured Data&lt;/h3&gt;
&lt;p&gt;Structured data has a schema. It is organized and thus usually easier to search
than unstructured data. Relational Databases structure data, but the contents
of columns can contain unstructured data (e.g. a free text field).&lt;/p&gt;
&lt;h3 id="unstructured-data"&gt;Unstructured data&lt;/h3&gt;
&lt;p&gt;There are too many file formats for unstructured data to name them all. Here
are a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text files: e-mails&lt;/li&gt;
&lt;li&gt;Images: JPG, PNG, GIF, BMP, ...&lt;/li&gt;
&lt;li&gt;Documents: PDF, PS, ...&lt;/li&gt;
&lt;li&gt;Video, Audio, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="databases_1"&gt;Databases&lt;/h2&gt;
&lt;p&gt;Databases are a nice way to store data. Types of databases are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL-based: MySQL / MariaDB, PostgreSQL, ...&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Document-oriented_database"&gt;Document-oriented database&lt;/a&gt;: CouchDB, MongoDB, Elasticsearch&lt;/li&gt;
&lt;li&gt;Graph databases: Neo4j, ...&lt;/li&gt;
&lt;li&gt;Key-Value databases: Reddis, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="data-warehouse"&gt;Data Warehouse&lt;/h2&gt;
&lt;p&gt;Classical usecases of data warehouses are operational and financial reporting.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Data_warehouse"&gt;Data Warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fact_table"&gt;FACT table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="data-lake"&gt;Data Lake&lt;/h2&gt;
&lt;p&gt;The idea of a &lt;em&gt;data lake&lt;/em&gt; is that it is a large container. Several sources add
data to the lake. The type of data might be structured or unstructured, machine
generated or log files.&lt;/p&gt;
&lt;p&gt;Data lakes have 5 core principles according to &lt;a href="https://www.youtube.com/watch?v=zlBZrG8dDMM"&gt;Evan Shelley&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingest: Ability to collect all data you care about&lt;/li&gt;
&lt;li&gt;Store: Getting data in one place (e.g. with file system like Hadoop)&lt;/li&gt;
&lt;li&gt;Analyze: Find relations you care about&lt;/li&gt;
&lt;li&gt;Surface: Display results found in data&lt;/li&gt;
&lt;li&gt;Act: Help the customer to make more money&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hadoop is a key tool for data lakes.&lt;/p&gt;
&lt;h2 id="frameworks"&gt;Frameworks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Apache Hadoop: Map-Reduce framework for distributed computing&lt;/li&gt;
&lt;li&gt;Apache Spark: Framework for cluster computing&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cassandra.apache.org/"&gt;Apache Cassandra&lt;/a&gt;: distributed, wide column store, NoSQL database management system&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Machine Learning"></category><category term="Data"></category></entry><entry><title>Type Systems</title><link href="https://martin-thoma.com/type-systems/" rel="alternate"></link><published>2018-11-26T20:00:00+01:00</published><updated>2018-11-26T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-11-26:/type-systems/</id><summary type="html">&lt;p&gt;The topic of type system keeps comming up when I hear people discuss
programming languages. So let's summarize it.&lt;/p&gt;
&lt;h2 id="dynamic-vs-static-typing"&gt;Dynamic vs Static Typing&lt;/h2&gt;
&lt;div style="background-color: #cdcdcd"&gt;Rule of thumb: Statically typed languages check their types at compile time,
while dynamically typed languages check their types at runtime.&lt;/div&gt;
&lt;p&gt;I like the definition of &lt;a href="https://pythonconquerstheuniverse.wordpress.com/2009/10/03/static-vs-dynamic-typing-of-programming-languages/"&gt;pythonconquerstheuniverse …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The topic of type system keeps comming up when I hear people discuss
programming languages. So let's summarize it.&lt;/p&gt;
&lt;h2 id="dynamic-vs-static-typing"&gt;Dynamic vs Static Typing&lt;/h2&gt;
&lt;div style="background-color: #cdcdcd"&gt;Rule of thumb: Statically typed languages check their types at compile time,
while dynamically typed languages check their types at runtime.&lt;/div&gt;
&lt;p&gt;I like the definition of &lt;a href="https://pythonconquerstheuniverse.wordpress.com/2009/10/03/static-vs-dynamic-typing-of-programming-languages/"&gt;pythonconquerstheuniverse&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a &lt;strong&gt;statically typed&lt;/strong&gt; language, every variable name is bound both
a type (at compile time, by means of a data declaration) and an object.&lt;/p&gt;
&lt;p&gt;In a &lt;strong&gt;dynamically typed&lt;/strong&gt; language, every variable name is bound only to an
object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Something you can do in a dynamic language, but not in a static language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the model you have in mind is different. In statically typed languages you
imagine variables as containers for specific types of information. In dynamically
typed languages, you imagine variables as post-it notes.&lt;/p&gt;
&lt;p&gt;The advantage of statically typed languages is less confusion.&lt;/p&gt;
&lt;h2 id="strong-vs-weak-typing"&gt;Strong vs Weak Typing&lt;/h2&gt;
&lt;div style="background-color: #cdcdcd"&gt;Rule of thumb: Weakly typed languages do type coercion.&lt;/div&gt;
&lt;p&gt;Continuing with the definition of &lt;a href="https://pythonconquerstheuniverse.wordpress.com/2009/10/03/static-vs-dynamic-typing-of-programming-languages/"&gt;pythonconquerstheuniverse&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a weakly typed language, variables can be implicitly coerced to unrelated
types, whereas in a strongly typed language they cannot, and an explicit
conversion is required.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What you can do in weakly typed languages, but not in strongly typed languages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead, the strongly typed language needs something like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is a spectrum, but the example from above is where I draw the
line.&lt;/p&gt;
&lt;p&gt;I'd say strong is to be prefered, but not too strong. For example, if I add
a float and a double I would not want to get an exception. Maybe.&lt;/p&gt;
&lt;h2 id="explicit-vs-implicit-typing"&gt;Explicit vs Implicit Typing&lt;/h2&gt;
&lt;p&gt;In an &lt;strong&gt;explicitly typed&lt;/strong&gt; language, all variable types are directly given by
the developer.&lt;/p&gt;
&lt;p&gt;In an &lt;strong&gt;implicitly typed&lt;/strong&gt; language, the language can infer some of the types.&lt;/p&gt;
&lt;p&gt;Note that dynamically typed languages are always implicitly typed. Python likes
to call that "duck typing": If it walks like a duck and quacks like a duck, it
is a duck.&lt;/p&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Static&lt;/th&gt;
&lt;th&gt;Strength&lt;/th&gt;
&lt;th&gt;Type Expression&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;strong&lt;/td&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/book/first-edition/variable-bindings.html"&gt;implicit&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;strong&lt;/td&gt;
&lt;td&gt;explicit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;weak&lt;/td&gt;
&lt;td&gt;explicit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;strong&lt;/td&gt;
&lt;td&gt;explicit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;dynamic&lt;/td&gt;
&lt;td&gt;strong&lt;/td&gt;
&lt;td&gt;implicit, since Python 3.5 optionally explicit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td&gt;dynamic&lt;/td&gt;
&lt;td&gt;weak&lt;/td&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var"&gt;implicit&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;td&gt;dynamic&lt;/td&gt;
&lt;td&gt;weak&lt;/td&gt;
&lt;td&gt;implicit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_by_type_system"&gt;Comparison of programming languages by type system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Programming Languages"></category></entry><entry><title>Python Package Versions</title><link href="https://martin-thoma.com/python-package-versions/" rel="alternate"></link><published>2018-11-13T20:00:00+01:00</published><updated>2018-11-13T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-11-13:/python-package-versions/</id><summary type="html">&lt;p&gt;Python packages should (must?) have a version. It would be best if that
version string was a &lt;a href="https://semver.org"&gt;semantic version&lt;/a&gt;, but this article
is not about how your version string should look like. It's about how to have
a consistent &lt;strong&gt;version string on PyPI&lt;/strong&gt; and &lt;strong&gt;accessible via
&lt;code&gt;[yourpackage].__version__&lt;/code&gt;&lt;/strong&gt; - and preferably …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python packages should (must?) have a version. It would be best if that
version string was a &lt;a href="https://semver.org"&gt;semantic version&lt;/a&gt;, but this article
is not about how your version string should look like. It's about how to have
a consistent &lt;strong&gt;version string on PyPI&lt;/strong&gt; and &lt;strong&gt;accessible via
&lt;code&gt;[yourpackage].__version__&lt;/code&gt;&lt;/strong&gt; - and preferably make sure it is the same as used
in &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging"&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt; should have the version string in the setup function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having this makes sure that the correct version is on PyPI and you can work
with that version via pip (e.g. &lt;code&gt;pip freeze&lt;/code&gt;). But if you import the package
via &lt;code&gt;import [yourpackage]&lt;/code&gt; and execute &lt;code&gt;[yourpackage].__version__&lt;/code&gt; it might not
be present. Also, if you have a command line application, you have to make sure
yourself that there is a &lt;code&gt;--version&lt;/code&gt; command. And you definitely should do
that; it comes in handy.&lt;/p&gt;
&lt;p&gt;There is an &lt;a href="https://packaging.python.org/guides/single-sourcing-package-version/"&gt;official guide&lt;/a&gt;
for "single-sourcing the package version". So it is a know problem with known
solutions. I only wrap them up here.&lt;/p&gt;
&lt;h2 id="the-manual-approach"&gt;The Manual Approach&lt;/h2&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/&lt;strong&gt;init&lt;/strong&gt;.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Positive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No new dependencies&lt;/li&gt;
&lt;li&gt;It is super simple to understand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Negative:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can easily get inconsistencies by forgetting something&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="version-python-file"&gt;Version Python File&lt;/h2&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[yourpackage]/_version.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/&lt;strong&gt;init&lt;/strong&gt;.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yourpackage._version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/_version.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Positive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No new dependencies&lt;/li&gt;
&lt;li&gt;Relatively simple&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Negative:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You use &lt;code&gt;exec&lt;/code&gt;, about which linters complain as it is a security risk if used
  wrong.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mypy&lt;/code&gt; cannot know that the &lt;code&gt;__version__&lt;/code&gt; variable is set in the &lt;code&gt;setup.py&lt;/code&gt;.
  It will give &lt;code&gt;error: Name '__version__' is not defined&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="version-text-file"&gt;Version Text File&lt;/h2&gt;
&lt;p&gt;Similar to the solution above, we use a text file which only contains the
version string.&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Read a text file and return the content as a string."""&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[yourpackage]/version.txt"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/&lt;strong&gt;init&lt;/strong&gt;.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yourpackage._version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/_version.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="reading-setuppy"&gt;Reading setup.py&lt;/h2&gt;
&lt;p&gt;This approach is so bad that I don't want to post an example here. The idea
is that you can have the version in the &lt;code&gt;setup(version='fooversion')&lt;/code&gt; and read
that within the package to set the &lt;code&gt;__version__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Reasons why I strongly suggest not to do so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your package source could be simply copied, not installed. For example, if
  things run on AWS Lambda. In this case, there is not &lt;code&gt;setup.py&lt;/code&gt; file. So all
  solutions with this break.&lt;/li&gt;
&lt;li&gt;You have to write rather complex parsers to be robust to changes in
  &lt;code&gt;setup.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="external-build-tools"&gt;External Build Tools&lt;/h2&gt;
&lt;p&gt;There are &lt;a href="https://pypi.org/project/bumpversion/"&gt;bumpversion&lt;/a&gt;,
&lt;a href="https://pypi.org/project/changes/"&gt;changes&lt;/a&gt; and &lt;a href="https://pypi.org/project/zest.releaser/"&gt;zest.releaser&lt;/a&gt;.
I don't have experience with those tools, but from a very quick first look I
don't think they the first two look reliable enough to give them a try. And
&lt;code&gt;zest.releaser&lt;/code&gt; looks a bit complicated.&lt;/p&gt;
&lt;h2 id="package-import"&gt;Package import&lt;/h2&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yourpackage&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yourpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/&lt;strong&gt;init&lt;/strong&gt;.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;yourpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Positive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No new dependencies&lt;/li&gt;
&lt;li&gt;Very simple simple&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Negative:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fails, if you import a dependency in the &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="version-control-integration"&gt;Version Control Integration&lt;/h2&gt;
&lt;p&gt;You can use &lt;a href="https://pypi.org/project/setuptools_scm/"&gt;&lt;code&gt;setuptools_scm&lt;/code&gt;&lt;/a&gt;
and do the following:&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_scm_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"setuptools_scm"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[yourpackage]/&lt;strong&gt;init&lt;/strong&gt;.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pkg_resources&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_distribution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DistributionNotFound&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_distribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;DistributionNotFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# package is not installed&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Positive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git tags: You might have to / be able to use git tags to keep consistent
  versions. I'm not sure if this is the case, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Negative:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your package source could be simply copied, not installed. For example, if
  things run on AWS Lambda. In this case, there is not &lt;code&gt;setup.py&lt;/code&gt; file. So all
  solutions with this break.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reading &lt;a href="https://blog.mozilla.org/warner/2012/01/31/version-string-management-in-python-introducing-python-versioneer/"&gt;Version String Management in Python: Introducing python-versioneer&lt;/a&gt;, I want to highlight some parts:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thinking about how I use git these days, I realized that I want my release
process to have one step: &amp;ldquo;git tag&amp;rdquo; (well, and a &amp;ldquo;git push&amp;rdquo; to tell the world
about it). Everything else should be automated: building tarballs, uploading
them to a release server, updating a web page, sending an announcement email,
pypi registration, etc. What really matters is the release manager making the
decision to bless some well-tested revision id with a public name of some
sort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-others-do"&gt;What others do&lt;/h2&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;setup.py&lt;/th&gt;
&lt;th&gt;package&lt;/th&gt;
&lt;th&gt;Versioning Scheme&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scipy&lt;/td&gt;
&lt;td&gt;Manual&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numpy&lt;/td&gt;
&lt;td&gt;Manual&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/python-pillow/Pillow"&gt;Pillow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;exec py&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/boto/boto3"&gt;boto3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;regex `__init__.py`&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/SethMMorton/natsort"&gt;natsort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/matplotlib/matplotlib"&gt;mantplotlib&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;versioneer&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/pandas-dev/pandas"&gt;Pandas&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;versioneer&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/scikit-learn/scikit-learn"&gt;scikit-learn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;import of sklearn.__version__&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/tensorflow/tensorflow"&gt;tensorflow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/pytorch/pytorch"&gt;pytorch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seaborn&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/pallets/flask"&gt;Flask&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;regex `__init__.py`&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/django/django"&gt;Django&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;import of django.__version__&lt;/td&gt;
&lt;td&gt;manual&lt;/td&gt;
&lt;td&gt;semantic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/pytest-dev/pytest"&gt;pytest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;`use_scm_version`&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/tox-dev/tox"&gt;tox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;`use_scm_version`&lt;/td&gt;
&lt;td&gt;pluggy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/warner"&gt;Brian Warner&lt;/a&gt;: &lt;a href="https://blog.mozilla.org/warner/2012/01/31/version-string-management-in-python-introducing-python-versioneer/"&gt;Version String Management in Python: Introducing python-versioneer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Pythons str vs repr</title><link href="https://martin-thoma.com/str-vs-repr/" rel="alternate"></link><published>2018-10-28T20:00:00+01:00</published><updated>2018-10-28T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-10-28:/str-vs-repr/</id><summary type="html">&lt;p&gt;The goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous and the goal of &lt;code&gt;__str__&lt;/code&gt; is to be readable. Bonus points, if &lt;code&gt;__repr__&lt;/code&gt; returns what is needed to create the object. Some examples are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s1"&gt;'[42, 1337]'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;'{1337, 42}'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Location'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'lon' …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous and the goal of &lt;code&gt;__str__&lt;/code&gt; is to be readable. Bonus points, if &lt;code&gt;__repr__&lt;/code&gt; returns what is needed to create the object. Some examples are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s1"&gt;'[42, 1337]'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;'{1337, 42}'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Location'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'lon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'lat'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'Location(lon=12, lat=34)'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s2"&gt;"re.compile('foo')"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In all of those cases the unambiguous representation and the readable string
are the same.&lt;/p&gt;
&lt;h2 id="where-its-used"&gt;Where it's used&lt;/h2&gt;
&lt;p&gt;The following code sample shows how &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; are used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"__repr__"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"__str__"&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Playing with this gives the following insights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If neither &lt;code&gt;__repr__&lt;/code&gt; nor &lt;code&gt;__str__&lt;/code&gt; is implemented, then &lt;code&gt;bar&lt;/code&gt; is printed as
  &lt;code&gt;&amp;lt;__main__.Foo object at 0x7f42319379e8&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If either of them is implemented, then &lt;code&gt;print(bar)&lt;/code&gt; uses that one.&lt;/li&gt;
&lt;li&gt;If both of them are implemented, then &lt;code&gt;print(bar)&lt;/code&gt; uses &lt;code&gt;__str__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The REPL uses &lt;code&gt;__repr__&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3rd-party-libraries"&gt;3rd Party Libraries&lt;/h2&gt;
&lt;p&gt;It's a bit different once you get to third party libraries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'[  42 1337]'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'array([  42, 1337])'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some - like Pandas Dataframes have a very different string representation.&lt;/p&gt;
&lt;p&gt;Others just don't care to implement somehting reasonable at all:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;keras.models&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequential&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'&amp;lt;keras.engine.sequential.Sequential object at 0x7f8d86b8eb70&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="enums"&gt;Enums&lt;/h2&gt;
&lt;p&gt;Also - sadly - it is not done well with Enums:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ExistsStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Strategies what to do when a file already exists."""&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;RAISE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'raise'&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;REPLACE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ABORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'abort'&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExistsStrategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAISE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExistsStrategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAISE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;str&lt;/code&gt; gives &lt;code&gt;ExistsStrategy.RAISE&lt;/code&gt; which is awesome. The &lt;code&gt;repr&lt;/code&gt; gives
&lt;code&gt;&amp;lt;ExistsStrategy.RAISE: 'raise'&amp;gt;&lt;/code&gt;. I don't understand why it doesn't give
the same result as the &lt;code&gt;str&lt;/code&gt; representation.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/1436703/562769"&gt;Difference between &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Closures</title><link href="https://martin-thoma.com/closures/" rel="alternate"></link><published>2018-10-19T20:00:00+02:00</published><updated>2018-10-19T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-10-19:/closures/</id><summary type="html">&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt; is a
technique for implementing lexically scoped name binding in a language with
first-class functions.&lt;/p&gt;
&lt;h2 id="pairs"&gt;Pairs&lt;/h2&gt;
&lt;p&gt;This post is triggered by &lt;a href="https://stackoverflow.com/q/52481607/562769"&gt;this question&lt;/a&gt;
and the nice answer by Martijn Pieters.&lt;/p&gt;
&lt;p&gt;Here is a super short example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt; is a
technique for implementing lexically scoped name binding in a language with
first-class functions.&lt;/p&gt;
&lt;h2 id="pairs"&gt;Pairs&lt;/h2&gt;
&lt;p&gt;This post is triggered by &lt;a href="https://stackoverflow.com/q/52481607/562769"&gt;this question&lt;/a&gt;
and the nice answer by Martijn Pieters.&lt;/p&gt;
&lt;p&gt;Here is a super short example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;return_first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cdr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;return_last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;cons_return&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cons_return&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cons_return&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cdr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cons_return&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is the output of the 3 print statements? Why?&lt;/p&gt;
&lt;p&gt;As there are not too many possible answers, you can easily guess it. But can
you explain it?&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pair&lt;/code&gt; is a function, hence &lt;code&gt;cons&lt;/code&gt; returns a function. Note that it
   returns the function, not the return value of the function. So the first
   output is something like &lt;code&gt;&amp;lt;function cons.&amp;lt;locals&amp;gt;.pair at 0x7f63aa5fa840&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;pair&lt;/code&gt; is called, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are set in this name space. Hence
   &lt;code&gt;cons&lt;/code&gt; can return different functions!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; are basically the same, so let's just focus on &lt;code&gt;car&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;car&lt;/code&gt; has a function as its parameter. It calls this function and gives
   it a function that wants two parameters. This parameter function just
   returns its first argument.&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;car&lt;/code&gt; is called, the new function &lt;code&gt;pair&lt;/code&gt; is called with the local
   context of &lt;code&gt;cons&lt;/code&gt;. Then &lt;code&gt;return_first&lt;/code&gt; is called within that context.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you print some intermediate results you get a better understanding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cons called with a=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, b=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pair called with a=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, b=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, f=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"car called with pair=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; (a, b are undefined)"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;return_first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"return_first called with x=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, y=&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cdr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;return_last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;cons_return&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cons_return&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cons_return&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cons called with a=42, b=1337
&amp;lt;function cons.&amp;lt;locals&amp;gt;.pair at 0x7fbb5fe7c840&amp;gt;

car called with pair=&amp;lt;function cons.&amp;lt;locals&amp;gt;.pair at 0x7fbb5fe7c840&amp;gt; (a, b are undefined)
pair called with a=42, b=1337, f=&amp;lt;function car.&amp;lt;locals&amp;gt;.return_first at 0x7fbb5fe7c8c8&amp;gt;
return_first called with x=42, y=1337
42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don't know about you, but this really gives me headaches. I'm don't know why,
but closures are super popular in JavaScript.&lt;/p&gt;
&lt;p&gt;Let's see the one example I know they are super useful for.&lt;/p&gt;
&lt;h2 id="partial"&gt;partial&lt;/h2&gt;
&lt;p&gt;Pythons &lt;a href="https://docs.python.org/3/library/functools.html#functools.partial"&gt;&lt;code&gt;functools.partial&lt;/code&gt;&lt;/a&gt;
can be used to create simpler functions where some of the arguments are already
filled.&lt;/p&gt;
&lt;p&gt;It's implementation is roughly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;newfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newfunc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you can use it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;functools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;exponent&lt;/span&gt;


&lt;span class="n"&gt;basetwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basetwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# prints 1024&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that the call &lt;code&gt;basetwo(10)&lt;/code&gt; gives the error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
  File "/home/moose/foobar.py", line 8, in &amp;lt;module&amp;gt;
    print(basetwo(10))  # prints 1024
TypeError: power() got multiple values for argument 'base'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as you supply power both as a keyword-argument and as a position-based
argument.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Software Engineering"></category></entry><entry><title>Python property</title><link href="https://martin-thoma.com/python-property/" rel="alternate"></link><published>2018-10-19T20:00:00+02:00</published><updated>2018-10-19T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-10-19:/python-property/</id><summary type="html">&lt;p&gt;Python has a built-in decorator &lt;code&gt;@property&lt;/code&gt;. In this article, you will learn
why and how to use it.&lt;/p&gt;
&lt;p&gt;The following super basic &lt;code&gt;Location&lt;/code&gt; class is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="getters-and-setters"&gt;Getters and Setters&lt;/h2&gt;
&lt;p&gt;Let's say, you want to add a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python has a built-in decorator &lt;code&gt;@property&lt;/code&gt;. In this article, you will learn
why and how to use it.&lt;/p&gt;
&lt;p&gt;The following super basic &lt;code&gt;Location&lt;/code&gt; class is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="getters-and-setters"&gt;Getters and Setters&lt;/h2&gt;
&lt;p&gt;Let's say, you want to add a range check for the properties of the class. You
could make something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"latitude was &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, but has to be in [-90, 90]"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"longitude was &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, but has to be in [-180, 180]"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which would then be called like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;48.137222222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;11.575555555556&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Update after a while&lt;/span&gt;
&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;48.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;42.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what Java developers would do. Note that there is only the convention
that tells you that the &lt;code&gt;latitude&lt;/code&gt; property has a &lt;code&gt;set_latitude&lt;/code&gt; setter and
a &lt;code&gt;get_latitude&lt;/code&gt; getter.&lt;/p&gt;
&lt;h2 id="property-class"&gt;Property class&lt;/h2&gt;
&lt;p&gt;With Python 2.2, the &lt;code&gt;property&lt;/code&gt; class was added to simplify it (&lt;a href="https://www.python.org/download/releases/2.2.2/descrintro/#property"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;With that, you can change the class to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Representation of a point on Earth."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"latitude was &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, but has to be in [-90, 90]"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;set_longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"longitude was &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, but has to be in [-180, 180]"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_latitude&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_longitude&lt;/span&gt;

    &lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Usage&lt;/span&gt;
&lt;span class="n"&gt;my_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;48.137222222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;11.575555555556&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;48.2&lt;/span&gt;
&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;42.6&lt;/span&gt;

&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="c1"&gt;# Fails&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is how the &lt;code&gt;help&lt;/code&gt; of this class looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Help on class Location in module __main__:

class Location(builtins.object)
 |  Representation of a point on Earth.
 |
 |  Methods defined here:
 |
 |  __init__(self, longitude, latitude)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  get_latitude(self)
 |
 |  get_longitude(self)
 |
 |  set_latitude(self, latitude)
 |
 |  set_longitude(self, longitude)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  latitude
 |
 |  longitude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="info"&gt;You should note the single leading underscore - that is Pythons way to denote private properties. It is not meant as the public interface of the class.&lt;br/&gt;
&lt;br/&gt;
There is also a leading double underscore. The interpreter changes the name of the attribute to prevent naming colisions. Just have a look at `dir(some_example_class)`. See also: [What's the meaning of underscores (_ &amp;amp; __) in Python variable names?](https://www.youtube.com/watch?v=ALZmCy2u0jQ)&lt;/div&gt;
&lt;p&gt;And then note how the objects attribte &lt;code&gt;latitude&lt;/code&gt; now is not a float anymore, but a class!&lt;/p&gt;
&lt;p&gt;This makes use of &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__setattr__"&gt;&lt;code&gt;__setattr__&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__"&gt;&lt;code&gt;__getattr__&lt;/code&gt;&lt;/a&gt;. So by using this, there is a strong relationship
between the getter/setter and the attribute!&lt;/p&gt;
&lt;p&gt;So we simplified using the class, but the class itself now looks not so nice
anymore. Also, the &lt;code&gt;help&lt;/code&gt; is polluted by the getters and setters.&lt;/p&gt;
&lt;h2 id="property-decorator"&gt;Property decorator&lt;/h2&gt;
&lt;p&gt;The property decorator is what should be used in Python (&lt;a href="https://stackoverflow.com/a/52947521/562769"&gt;source&lt;/a&gt;).
It makes the behaviour less error-prone when you inherit from such a class.&lt;/p&gt;
&lt;p&gt;Here is how it is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Representation of a point on Earth."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Latitude of the location. North is positive, south is negative."""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_latitude&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Longitude of the location. East is positive, west is negative."""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_longitude&lt;/span&gt;

    &lt;span class="nd"&gt;@latitude&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"latitude was &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, but has to be in [-90, 90]"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latitude&lt;/span&gt;

    &lt;span class="nd"&gt;@longitude&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"longitude was &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, but has to be in [-180, 180]"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longitude&lt;/span&gt;


&lt;span class="c1"&gt;# Usage&lt;/span&gt;
&lt;span class="n"&gt;my_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;48.137222222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;11.575555555556&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;48.2&lt;/span&gt;
&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;42.6&lt;/span&gt;

&lt;span class="n"&gt;my_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="c1"&gt;# Fails&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is how the &lt;code&gt;help&lt;/code&gt; of this class looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Help on class Location in module __main__:

class Location(builtins.object)
 |  Representation of a point on Earth.
 |
 |  Methods defined here:
 |
 |  __init__(self, longitude, latitude)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  latitude
 |      Latitude of the location. North is positive, south is negative.
 |
 |  longitude
 |      Longitude of the location. East is positive, west is negative.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/q/52899509/562769"&gt;Is there an advantage of using the property decorator compared to the property class?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Command Line</title><link href="https://martin-thoma.com/command-line/" rel="alternate"></link><published>2018-10-09T20:00:00+02:00</published><updated>2018-10-09T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-10-09:/command-line/</id><summary type="html">&lt;p&gt;As a software developer, I work daily many hours on the command line. This
article summarizes some tools and tricks to speed up this work.&lt;/p&gt;
&lt;h2 id="the-basics"&gt;The basics&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://tiswww.case.edu/php/chet/bash/bashtop.html"&gt;Bash&lt;/a&gt;, &lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;, &lt;a href="https://fishshell.com/"&gt;Fish&lt;/a&gt; are Linux shells.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;Oh-my-ZSH&lt;/a&gt; is a plugin for ZSH which is AWESOME!&lt;/p&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;h3 id="basics"&gt;Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: Change directory, e.g. &lt;code&gt;cd …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;As a software developer, I work daily many hours on the command line. This
article summarizes some tools and tricks to speed up this work.&lt;/p&gt;
&lt;h2 id="the-basics"&gt;The basics&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://tiswww.case.edu/php/chet/bash/bashtop.html"&gt;Bash&lt;/a&gt;, &lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;, &lt;a href="https://fishshell.com/"&gt;Fish&lt;/a&gt; are Linux shells.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;Oh-my-ZSH&lt;/a&gt; is a plugin for ZSH which is AWESOME!&lt;/p&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;h3 id="basics"&gt;Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: Change directory, e.g. &lt;code&gt;cd ..&lt;/code&gt;, &lt;code&gt;cd /home&lt;/code&gt;, &lt;code&gt;cd foo/bar/baz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt;: Print the working directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: List the contents of the current directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man&lt;/code&gt;: show manual / help page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;: Show the last commands executed in the shell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm filename.ext&lt;/code&gt; removes &lt;code&gt;filename.ext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv filename.ext newname.jpg&lt;/code&gt;: Rename a file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="advanced"&gt;Advanced&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep&lt;/code&gt;: Pattern search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat filename&lt;/code&gt;: print the contents of &lt;code&gt;filename&lt;/code&gt; to the output&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linfo.org/watch.html"&gt;&lt;code&gt;watch&lt;/code&gt;&lt;/a&gt;: run any designated command at regular intervals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free&lt;/code&gt;: Memory consumption&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt; and &lt;code&gt;htop&lt;/code&gt;: display Linux processes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/wandering-through-the-depths-of-find/"&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;locate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tree&lt;/code&gt;: Print a directory tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloc&lt;/code&gt;: count lines of code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wc&lt;/code&gt; : word count (or lines or characters)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="professional"&gt;Professional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;&amp;nbsp;- terminal multiplexer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/direnv/direnv"&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="internet"&gt;Internet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ping martin-thoma.com&lt;/code&gt;: Check if you can reach a domain&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh 123.168.0.1&lt;/code&gt;: Connect to the IP &lt;code&gt;123.168.0.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;screen&lt;/code&gt;: Create a new terminal session that can be detached / re-attached&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt; - configure a network interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hardware-analysis"&gt;Hardware Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lsusb&lt;/code&gt;, &lt;code&gt;lspci&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="alias_1"&gt;Alias&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pbcopy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'xclip -selection clipboard'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pbpaste&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'xclip -selection clipboard -o'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="the-bang"&gt;The Bang&lt;/h2&gt;
&lt;p&gt;There are various commands with the "bang" &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt;: Execute the last executed command in the bash history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!*&lt;/code&gt;: Execute the command with all the arguments passed to the previous command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&amp;circ;&lt;/code&gt;: Get the first argument of the last executed command in the bash history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!$&lt;/code&gt;: Get the last argument of the last executed command in the bash history&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-dash"&gt;The Dash&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cd -&lt;/code&gt; jumps back to the directory in which you were before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/home/moose$ cd foobar
/home/moose/foobar$ cd -
/home/moose$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git checkout -&lt;/code&gt; jumps back to the branch in which you were before.&lt;/p&gt;
&lt;h2 id="dotfiles-git-repository"&gt;.dotfiles git repository&lt;/h2&gt;
&lt;p&gt;Dotfiles a files which start with a &lt;code&gt;.&lt;/code&gt;. Those files are hidden in Linux and
often contain configuration files. Here is &lt;a href="https://github.com/MartinThoma/dotfiles"&gt;mine&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.yorhel.nl/ncdu"&gt;&lt;code&gt;ncdu&lt;/code&gt;&lt;/a&gt;: Find what is eating your disk space and delete it on the fly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://httpie.org/"&gt;&lt;code&gt;httpie&lt;/code&gt;&lt;/a&gt;: Command line HTTP client&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stedolan.github.io/jq/"&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt;: JSON query tool&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ranger.github.io/"&gt;&lt;code&gt;ranger&lt;/code&gt;&lt;/a&gt;: console file manager&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/MohamedAlaa/2961058"&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/working-terminal/"&gt;Working with Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/working-at-fzi/"&gt;Working at FZI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martin-thoma.com/converting-files-with-linux/"&gt;Converting Files with Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Development"></category><category term="Command line"></category></entry><entry><title>How old am I?</title><link href="https://martin-thoma.com/age-calculation/" rel="alternate"></link><published>2018-10-03T20:00:00+02:00</published><updated>2018-10-03T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-10-03:/age-calculation/</id><summary type="html">&lt;p&gt;Calculating the age of a person in a web service is harder than one might think
to get right. Things you must be aware of are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time zones&lt;/strong&gt;: The time zone at the client is likely not the same as on your
machine. Hence it could be that the person …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Calculating the age of a person in a web service is harder than one might think
to get right. Things you must be aware of are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time zones&lt;/strong&gt;: The time zone at the client is likely not the same as on your
machine. Hence it could be that the person is under-age in their country, but
already an adult in the server time zone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calendar years&lt;/strong&gt;: Usually we think of one year as 365 days. Hence
calculating the age of a person sounds as simple as calculating the days since
their birth, dividing by 365 and that's it. Execept that we don't think of age
like this.&lt;/p&gt;
&lt;p&gt;I challenge you to create a program that solves the following task. I'm interested
in your solutions, so please share a link to a &lt;a href="https://gist.github.com/"&gt;gist&lt;/a&gt;, &lt;a href="https://pastebin.com/"&gt;pastebin&lt;/a&gt;
or wherever you solved the task.&lt;/p&gt;
&lt;h2 id="task"&gt;Task&lt;/h2&gt;
&lt;p&gt;Write a program that takes the following input as a &lt;code&gt;;&lt;/code&gt; separated string:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Birthday as &lt;code&gt;YYYY-MM-DDTHH:mm:ss&lt;/code&gt;, assuming the time zone given&lt;/li&gt;
&lt;li&gt;Timezone of Birth (&lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;IANA name&lt;/a&gt;, e.g. &lt;code&gt;Europe/Berlin&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Current time as &lt;code&gt;YYYY-MM-DDTHH:mm:ssZ&lt;/code&gt; (UTC)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and prints the age in years (a single integer).&lt;/p&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;get_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"1996-02-29T15:45:54;Europe/Berlin;2018-10-03T09:47:50"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;get_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2008-04-28T15:45:54;Europe/Berlin;2018-10-03T09:47:50"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;get_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2008-11-28T15:45:54;Europe/Berlin;2018-10-03T09:47:50"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;get_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2006-03-01T00:00:00;Europe/Berlin;2008-02-29T23:59:59"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="solutions"&gt;Solutions&lt;/h2&gt;
&lt;p&gt;I hope to see many solutions in different programming languages.&lt;/p&gt;
&lt;h3 id="python-solution"&gt;Python Solution&lt;/h3&gt;
&lt;p&gt;Author: Martin Thoma&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Calculate the age of a person&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dateutil.parser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytz&lt;/span&gt;

    &lt;span class="c1"&gt;# parse input&lt;/span&gt;
    &lt;span class="n"&gt;born&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;born_tz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;born_tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;born&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;born&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# age logic&lt;/span&gt;
    &lt;span class="n"&gt;year_not_finished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;born&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;born&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;born&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year_not_finished&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Software Engineering"></category><category term="Datetime"></category></entry><entry><title>Bugs</title><link href="https://martin-thoma.com/bugs/" rel="alternate"></link><published>2018-08-21T20:00:00+02:00</published><updated>2018-08-21T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-08-21:/bugs/</id><summary type="html">&lt;p&gt;Every software project which is not absolutely tiny likely has (or had) bugs,
but astonishingly I learned very little about bugs during my university
studies. So let's summarize a few important things.&lt;/p&gt;
&lt;h2 id="what-are-bugs"&gt;What are bugs&lt;/h2&gt;
&lt;p&gt;I define a bug like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;software bug&lt;/em&gt; is a fault in software that …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Every software project which is not absolutely tiny likely has (or had) bugs,
but astonishingly I learned very little about bugs during my university
studies. So let's summarize a few important things.&lt;/p&gt;
&lt;h2 id="what-are-bugs"&gt;What are bugs&lt;/h2&gt;
&lt;p&gt;I define a bug like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;software bug&lt;/em&gt; is a fault in software that causes incorrect behaviour.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An example would be this &lt;code&gt;sum.py&lt;/code&gt; executed with Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;print("Please enter two numbers you would like to add:")
n1 = input()
n2 = input()
print("The summ of those two numbers is {}".format(n1 + n2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you enter &lt;code&gt;42&lt;/code&gt; and &lt;code&gt;1337&lt;/code&gt; it will give &lt;code&gt;421337&lt;/code&gt;. The reason for this
behavior is that &lt;code&gt;input()&lt;/code&gt; returns a string, not a number. So clearly neither
the developer nor the user want this behaviour. But it is not always that easy.
Sometimes the design of the application might be misleading. Is that a bug as
well? I tend to say "no" if the developer wanted the behaviour to be as it is.
Then it is just bad design.&lt;/p&gt;
&lt;h2 id="types-of-bugs"&gt;Types of Bugs&lt;/h2&gt;
&lt;p&gt;I would like to give you some ideas which types of bugs can happen and - if
possible - how to prevent them.&lt;/p&gt;
&lt;h3 id="functional-bugs"&gt;Functional Bugs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Off by one errors&lt;/strong&gt; are super common: Smaller or smaller equal? Greater or
greater equal? Smaller or greater? They are a logic error which can often be
covered by calling the function using it by example input and checking the
actual output againts known example output. Those off-by-one errors can also
easily lead to infinite loops.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Units of measure&lt;/strong&gt; are a common one as well. Is "time" measured in hours or
seconds? Do we use miles or kilometers? Famously, NASA lost a 125,000,000 USD Mars orbiter due to this bug (&lt;a href="https://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure"&gt;source&lt;/a&gt;).
Luckily, this one can be prevented
by using unit libraries like &lt;a href="https://pint.readthedocs.io/en/latest/"&gt;Pythons Pint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Race conditions&lt;/strong&gt; are one of the ugly bugs that only appear sometimes, even
if you call the program with exactly the same input. They might even disappear
completely when you try to investigate them. As an example, imagine a bank
account. You have one process P-in which receives ingoing transactions and
another process P-out that handles outgoing transactions:&lt;/p&gt;
&lt;p&gt;P1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;transfer_money&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pay_amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# L0&lt;/span&gt;
    &lt;span class="n"&gt;current_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_current_total&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# L1&lt;/span&gt;
    &lt;span class="n"&gt;updated_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pay_amount&lt;/span&gt;  &lt;span class="c1"&gt;# L2&lt;/span&gt;
    &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_current_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updated_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# L3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;P2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;receive_money&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# L4&lt;/span&gt;
    &lt;span class="n"&gt;current_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_current_total&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# L5&lt;/span&gt;
    &lt;span class="n"&gt;updated_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;get_amount&lt;/span&gt;  &lt;span class="c1"&gt;# L6&lt;/span&gt;
    &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_current_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updated_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# L7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You have 3141 EUR on that account identified by 'FortKnox'. At midnight in the
beginning of year 2018, you receive 42 EUR from your awesome company as a gift
for the New Year and you have to pay 1337 EUR in rent. Both happen pretty much
at the same time. They are not really in parallel, but interleaved:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Relevant Memory&lt;/th&gt;
&lt;th&gt;Bank Account&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S1&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.000&lt;/td&gt;
&lt;td&gt;L0&lt;/td&gt;
&lt;td&gt;account = 'Martin', pay_amount = 1337&lt;/td&gt;
&lt;td&gt;3141&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S2&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.022&lt;/td&gt;
&lt;td&gt;L4&lt;/td&gt;
&lt;td&gt;account = 'Martin', get_amount = 42&lt;/td&gt;
&lt;td&gt;3141&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S3&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.030&lt;/td&gt;
&lt;td&gt;L5&lt;/td&gt;
&lt;td&gt;get_amount = 42, current_total = 3141&lt;/td&gt;
&lt;td&gt;3141&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S4&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.051&lt;/td&gt;
&lt;td&gt;L1&lt;/td&gt;
&lt;td&gt;pay_amount = 1337, &lt;span style="color: red"&gt;current_total = 3141&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;3141&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S5&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.072&lt;/td&gt;
&lt;td&gt;L2&lt;/td&gt;
&lt;td&gt;updated_total = 1804&lt;/td&gt;
&lt;td&gt;3141&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S6&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.180&lt;/td&gt;
&lt;td&gt;L3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S7&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.193&lt;/td&gt;
&lt;td&gt;L6&lt;/td&gt;
&lt;td&gt;updated_total = 3183&lt;/td&gt;
&lt;td&gt;1804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S8&lt;/td&gt;
&lt;td&gt;2018-01-01 00:00:00.237&lt;/td&gt;
&lt;td&gt;L7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="background-color: #ffa9a9;"&gt;3183&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Two resources access the same data - the current value of the bank account.
This is problematic. You can prevent this by making both of the functions atomic, e.g. by locking
or by using &lt;a href="https://en.wikipedia.org/wiki/Atomicity_(database_systems)"&gt;atomic database operations&lt;/a&gt;.
Rust introduced the concept of ownership to solve this (&lt;a href="https://doc.rust-lang.org/nomicon/races.html"&gt;details&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arithmetic errors&lt;/strong&gt; are division by zero or taking the logarithm of something
non-positive. It can be prevented in some cases by adding a small positive
constant, but it depends a lot on the usecase if this is valid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Uninitialized resources&lt;/strong&gt; (e.g. Nullpointer Exception or &lt;code&gt;KeyError&lt;/code&gt; in Python)
I think are mostly covered by line coverage in unit tests.&lt;/p&gt;
&lt;h3 id="non-functional-bugs"&gt;Non-Functional Bugs&lt;/h3&gt;
&lt;p&gt;One of the most common non-functional bugs is that the code is &lt;strong&gt;too slow&lt;/strong&gt;.
You can get a grasp of this with &lt;a href="https://pypi.org/project/pytest-benchmark/"&gt;&lt;code&gt;pytest-benchmark&lt;/code&gt;&lt;/a&gt;,
but the problem is that it depends on the hardware and what you run at the same
time on the machine.&lt;/p&gt;
&lt;p&gt;Another one I see often with browsers is that it is &lt;strong&gt;too memory intensive&lt;/strong&gt;.
I guess that is a problem for smartphones as well.&lt;/p&gt;
&lt;p&gt;Speaking of smartphones, &lt;strong&gt;too power intensive&lt;/strong&gt; is certainly another one.&lt;/p&gt;
&lt;h2 id="bug-reporting_1"&gt;Bug reporting&lt;/h2&gt;
&lt;p&gt;When reporting bugs, please don't only say "it doesn't work" or "it's broken".
That doesn't help. what does help, is answers to the following questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What did you do?&lt;/li&gt;
&lt;li&gt;What did you expect to happen?&lt;/li&gt;
&lt;li&gt;What actually happened?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ideally, you can figure out a minimal setting how to reproduce it.&lt;/p&gt;
&lt;p&gt;If you have a Stacktrace or some error code that is good as well.&lt;/p&gt;
&lt;h2 id="logging"&gt;Logging&lt;/h2&gt;
&lt;p&gt;Developers have to think about the potential of bugs before they happen in
production. Which information will be useful to see if a bug occurs?&lt;/p&gt;
&lt;p&gt;For web services, it is often some kind of user ID. We want to know who
experienced the issue.&lt;/p&gt;
&lt;h2 id="triaging-bugs"&gt;Triaging Bugs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.codinghorror.com/not-all-bugs-are-worth-fixing/"&gt;Not all bugs are worth fixing&lt;/a&gt;,
as Jeff Atwood nicely formulated it in 2006. According to &lt;a href="https://ericsink.com/articles/Four_Questions.html"&gt;Eric Sink&lt;/a&gt;
you should answer four questions if you want to figure out if a bug is worth
being fixed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Severity&lt;/strong&gt;: When this bug happens, how bad is the impact?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: How often does this bug happen?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: How much effort would be required to fix this bug?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk&lt;/strong&gt;: What is the risk of fixing this bug?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the first two seem very obvious to me and the cost question of course
is important as well, the risk is harder to understand. What risk could fixing
a bug potentially have?&lt;/p&gt;
&lt;p&gt;Regression bugs. By touching any code, you can break something. If you touch
something that was super hard to get right or that inherently has risk (e.g.
deleting stuff permanently), then any bug related to those has a high risk.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_software_bugs"&gt;List of software bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Software Engineering"></category><category term="Bugs"></category></entry><entry><title>Flask and Gunicorn</title><link href="https://martin-thoma.com/flask-gunicorn/" rel="alternate"></link><published>2018-07-11T20:00:00+02:00</published><updated>2018-07-11T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-07-11:/flask-gunicorn/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Flask_(web_framework)"&gt;Flask&lt;/a&gt; is a Python
web framework and &lt;a href="https://en.wikipedia.org/wiki/Gunicorn"&gt;Gunicorn&lt;/a&gt;
is a Python Web Server Gateway Interface (WSGI) HTTP server.&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Install the requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;flask&lt;span class="w"&gt; &lt;/span&gt;gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create an &lt;code&gt;exampleproject.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Flask_(web_framework)"&gt;Flask&lt;/a&gt; is a Python
web framework and &lt;a href="https://en.wikipedia.org/wiki/Gunicorn"&gt;Gunicorn&lt;/a&gt;
is a Python Web Server Gateway Interface (WSGI) HTTP server.&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Install the requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;flask&lt;span class="w"&gt; &lt;/span&gt;gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create an &lt;code&gt;exampleproject.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and an &lt;code&gt;wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;exampleproject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gunicorn&lt;span class="w"&gt; &lt;/span&gt;--bind&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:5000&lt;span class="w"&gt; &lt;/span&gt;wsgi:app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="benchmarking-it"&gt;Benchmarking it&lt;/h2&gt;
&lt;p&gt;I want to see when this fails. So I test it with ApacheBench (&lt;code&gt;ab&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;apache2-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then run 50&amp;thinsp;000 requests with different concurrency.&lt;/p&gt;
&lt;h2 id="seen-errors"&gt;Seen Errors&lt;/h2&gt;
&lt;h3 id="connection-reset-by-peer-104"&gt;Connection reset by peer (104)&lt;/h3&gt;
&lt;p&gt;I got a lot of &lt;code&gt;apr_socket_recv: Connection reset by peer (104)&lt;/code&gt; with
gunicorn.&lt;/p&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m.do.co/c/b5dd0c5d61b9"&gt;digitalocean.com&lt;/a&gt;: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-16-04"&gt;How To Serve Flask Applications with Gunicorn and Nginx on Ubuntu 16.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
https://engineering.gosquared.com/optimising-nginx-node-js-and-networking-for-heavy-workloads
https://blog.kgriffs.com/2012/12/12/gevent-vs-tornado-benchmarks.html
http://flask.pocoo.org/docs/1.0/deploying/wsgi-standalone/
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-16-04
https://medium.com/ymedialabs-innovation/deploy-flask-app-with-nginx-using-gunicorn-and-supervisor-d7a93aa07c18
--&gt;</content><category term="Code"></category><category term="Flask"></category><category term="gunicorn"></category></entry><entry><title>Git - Version Control Done Right</title><link href="https://martin-thoma.com/git/" rel="alternate"></link><published>2018-07-08T20:00:00+02:00</published><updated>2018-07-08T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-07-08:/git/</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Git"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; is a (the!) version control system.
In this article I'll try to show in a short way how to improve your usage of
it.&lt;/p&gt;
&lt;p&gt;I assume you already know &lt;a href="https://git-scm.com/docs/git-clone"&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-commit"&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-push"&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-pull"&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://git-scm.com/docs/git-branch"&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-version-control"&gt;Why Version Control&lt;/h2&gt;
&lt;p&gt;When you write software, you usually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Git"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; is a (the!) version control system.
In this article I'll try to show in a short way how to improve your usage of
it.&lt;/p&gt;
&lt;p&gt;I assume you already know &lt;a href="https://git-scm.com/docs/git-clone"&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-commit"&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-push"&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://git-scm.com/docs/git-pull"&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://git-scm.com/docs/git-branch"&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-version-control"&gt;Why Version Control&lt;/h2&gt;
&lt;p&gt;When you write software, you usually can't write it from beginning to end in
one stream. Instead, you will have different directions in which you go. And
you will work one day on feature A, then on next day you have to fix something
but you already changed a bit - not everything to implement A. Hence you need
to go back.&lt;/p&gt;
&lt;p&gt;Or you are not sure if the thing you're trying to do actually improves things.
So you want to save the current state to be able to go back.&lt;/p&gt;
&lt;p&gt;In the past, people did so by copy-and-paste. But then you end in your file
system having directories like &lt;code&gt;awesome-project&lt;/code&gt;, &lt;code&gt;awesome-project-copy&lt;/code&gt;,
&lt;code&gt;awesome-project-1990-04-28&lt;/code&gt;, &lt;code&gt;awesome-project-feature-a&lt;/code&gt;, ...&lt;/p&gt;
&lt;p&gt;So you want to be able to manage that properly and jump back and compare
different versions.&lt;/p&gt;
&lt;h2 id="change-steps"&gt;Change steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Working directory&lt;/em&gt;: &lt;code&gt;git add&lt;/code&gt; to add it to staging&lt;/li&gt;
&lt;li&gt;Staging: &lt;code&gt;git commit&lt;/code&gt; to move it to the local repository&lt;/li&gt;
&lt;li&gt;Local repository: &lt;code&gt;git push&lt;/code&gt; to move it to a remote repository, &lt;code&gt;git fetch&lt;/code&gt; to get it from remote.&lt;/li&gt;
&lt;li&gt;Remote repository&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-its-not-for"&gt;What it's not for&lt;/h2&gt;
&lt;p&gt;In general, I would not use git for things where you can't reasonably make a
diff. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary files: Ipython notebooks, compiled code&lt;/li&gt;
&lt;li&gt;Big files (&amp;gt; 5 MB): Data.&lt;/li&gt;
&lt;li&gt;Auto-generated files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, there are exceptions. Just keep it practical.&lt;/p&gt;
&lt;h2 id="commit-messages"&gt;Commit Messages&lt;/h2&gt;
&lt;p&gt;Commit messages are intended for developers to understand what was changed.&lt;/p&gt;
&lt;p&gt;I like the &lt;a href="https://docs.scipy.org/doc/numpy-1.13.0/dev/gitwash/development_workflow.html#writing-the-commit-message"&gt;SciPy commit message guide&lt;/a&gt;.
They start every message with a prefix. Copied from this page, here is how their
messages look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ENH: add functionality X to numpy.&amp;lt;submodule&amp;gt;.

The first line of the commit message starts with a capitalized acronym
(options listed below) indicating what type of commit this is.  Then a blank
line, then more text if needed.  Lines shouldn't be longer than 72
characters.  If the commit is related to a ticket, indicate that with
"See #3456", "See ticket 3456", "Closes #3456" or similar.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The prefixes I suggest to have, are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;API: an (incompatible) API change
BUG: bug fix
DEP: deprecate something, or remove a deprecated object
DEV: development tool or utility
DOC: documentation
ENH: enhancement
MAINT: maintenance commit (refactoring, typos, etc.)
REV: revert an earlier commit
STY: style fix (whitespace, PEP8)
TST: addition or modification of tests
REL: related to releasing the project, e.g. change of a version number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also suggest to keep those messages shorter than 80 characters.&lt;/p&gt;
&lt;p&gt;Services like GitHub can directly connect commits with issues if you reference
the issues like &lt;code&gt;issue #123&lt;/code&gt; in the commit message.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://whatthecommit.com"&gt;WhatTheCommit.com&lt;/a&gt;: Funny commit messages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git-log"&gt;git log&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-log"&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/a&gt; shows you the commit messages and
other logged changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;commit e44ed1e8e5bdcada8534369c5135e77677253de1 (HEAD -&amp;gt; master, origin/master, origin/HEAD)
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Fri Jul 6 07:21:10 2018 +0200

    DOC: Fix documentation of string return values

commit 8cf8c8d4b168ef3b0a32617917195a352f4ce723
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Fri Jul 6 07:15:32 2018 +0200

    REL: v0.9.0

commit de71db384b5e08c65067937744bfe26a822796b1
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Fri Jul 6 07:13:33 2018 +0200

    ENH: Add string.str2bool_or_none, str2float_or_none, str2int_or_none

    Closes #31

commit 31bd14cbe7e317226ff7be15ec7d68df93665688
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Wed Jul 4 22:46:16 2018 +0200

    ENH: Add prime number generator

commit bb56e82fa402827b3de8140783e0c4fc95e3699d
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Wed Jul 4 07:21:02 2018 +0200

    DOC: document mpu.path

commit 9d929238ef04ecb866775b3e687d782090c484bf
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Wed Jul 4 06:51:40 2018 +0200

    STY: Fix issues discovered by codacy

commit c31f575d3835049c65b8ab6c7fe909191779a912 (tag: v0.8.0)
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Tue Jul 3 23:22:37 2018 +0200

    REL: Release v0.8.0

commit f3f7f1192a7b495f74156977bda1bd220a87e4eb
Author: Martin Thoma &amp;lt;info@martin-thoma.de&amp;gt;
Date:   Tue Jul 3 23:21:01 2018 +0200

    ENH: Add mpu.path.get_all_files

    See issue #14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also adjust the output to your needs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline

e44ed1e8e5bdcada8534369c5135e77677253de1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;HEAD&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;master,&lt;span class="w"&gt; &lt;/span&gt;origin/master,&lt;span class="w"&gt; &lt;/span&gt;origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DOC:&lt;span class="w"&gt; &lt;/span&gt;Fix&lt;span class="w"&gt; &lt;/span&gt;documentation&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;string&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;values
8cf8c8d4b168ef3b0a32617917195a352f4ce723&lt;span class="w"&gt; &lt;/span&gt;REL:&lt;span class="w"&gt; &lt;/span&gt;v0.9.0
de71db384b5e08c65067937744bfe26a822796b1&lt;span class="w"&gt; &lt;/span&gt;ENH:&lt;span class="w"&gt; &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;string.str2bool_or_none,&lt;span class="w"&gt; &lt;/span&gt;str2float_or_none,&lt;span class="w"&gt; &lt;/span&gt;str2int_or_none
31bd14cbe7e317226ff7be15ec7d68df93665688&lt;span class="w"&gt; &lt;/span&gt;ENH:&lt;span class="w"&gt; &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;prime&lt;span class="w"&gt; &lt;/span&gt;number&lt;span class="w"&gt; &lt;/span&gt;generator
bb56e82fa402827b3de8140783e0c4fc95e3699d&lt;span class="w"&gt; &lt;/span&gt;DOC:&lt;span class="w"&gt; &lt;/span&gt;document&lt;span class="w"&gt; &lt;/span&gt;mpu.path
9d929238ef04ecb866775b3e687d782090c484bf&lt;span class="w"&gt; &lt;/span&gt;STY:&lt;span class="w"&gt; &lt;/span&gt;Fix&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;discovered&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;codacy
c31f575d3835049c65b8ab6c7fe909191779a912&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;tag:&lt;span class="w"&gt; &lt;/span&gt;v0.8.0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;REL:&lt;span class="w"&gt; &lt;/span&gt;Release&lt;span class="w"&gt; &lt;/span&gt;v0.8.0
f3f7f1192a7b495f74156977bda1bd220a87e4eb&lt;span class="w"&gt; &lt;/span&gt;ENH:&lt;span class="w"&gt; &lt;/span&gt;Add&lt;span class="w"&gt; &lt;/span&gt;mpu.path.get_all_files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="git-diff"&gt;git diff&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-diff"&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/a&gt; compares two commits, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;e44ed1e8e5bdcada8534369c5135e77677253de1..8cf8c8d4b168ef3b0a32617917195a352f4ce723
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking up the git hashes (&lt;code&gt;e44ed1...&lt;/code&gt; and &lt;code&gt;8cf8c8d...&lt;/code&gt;) is cumbersome, so
there are shortcuts. For example &lt;code&gt;HEAD&lt;/code&gt; is the latest version. And &lt;code&gt;^&lt;/code&gt; gives
you the version before. Hence&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;HEAD^..HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compares the current version with that before.&lt;/p&gt;
&lt;h2 id="git-blame"&gt;git blame&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-blame"&gt;&lt;code&gt;git blame&lt;/code&gt;&lt;/a&gt; gives you an overview who
last edited which line. It can be used to "blame" somebody for a change. Or,
better, to find the person who to ask why something was done the way it
currently is in the repository.&lt;/p&gt;
&lt;p&gt;For the a part of the &lt;code&gt;filters.py&lt;/code&gt; in SciPy ndimages it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;e2fbe76393 scipy/ndimage/filters.py   (Jaime Fernandez         2018-03-07 01:15:11 +0100  298) @_ni_docstrings.docfiller
a1a629221f scipy/ndimage/filters.py   (Tim Leslie              2013-04-12 11:36:45 +0000  299) def prewitt(input, axis=-1, output=None, mode="reflect", cval=0.0):
ca465a651f Lib/ndimage/Lib/filters.py (Ed Schofield            2006-03-18 13:52:58 +0000  300)     """Calculate a Prewitt filter.
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  301)
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  302)     Parameters
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  303)     ----------
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  304)     %(input)s
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  305)     %(axis)s
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  306)     %(output)s
7fb0a279ac scipy/ndimage/filters.py   (Alvaro Sanchez-Gonzalez 2016-11-25 10:03:14 +0000  307)     %(mode_multiple)s
a4eba7aeaf scipy/ndimage/filters.py   (Matthew Brett           2008-12-14 11:51:37 +0000  308)     %(cval)s
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  309)
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  310)     Examples
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  311)     --------
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  312)     &amp;gt;&amp;gt;&amp;gt; from scipy import ndimage, misc
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  313)     &amp;gt;&amp;gt;&amp;gt; import matplotlib.pyplot as plt
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  314)     &amp;gt;&amp;gt;&amp;gt; fig = plt.figure()
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  315)     &amp;gt;&amp;gt;&amp;gt; plt.gray()  # show the filtered result in grayscale
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  316)     &amp;gt;&amp;gt;&amp;gt; ax1 = fig.add_subplot(121)  # left side
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  317)     &amp;gt;&amp;gt;&amp;gt; ax2 = fig.add_subplot(122)  # right side
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  318)     &amp;gt;&amp;gt;&amp;gt; ascent = misc.ascent()
d197708c0c scipy/ndimage/filters.py   (Martin Thoma            2016-06-12 17:18:59 +0200  319)     &amp;gt;&amp;gt;&amp;gt; result = ndimage.prewitt(ascent)
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  320)     &amp;gt;&amp;gt;&amp;gt; ax1.imshow(ascent)
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  321)     &amp;gt;&amp;gt;&amp;gt; ax2.imshow(result)
f0f55115ff scipy/ndimage/filters.py   (Martin Thoma            2016-11-13 12:14:38 +0100  322)     &amp;gt;&amp;gt;&amp;gt; plt.show()
ca465a651f Lib/ndimage/Lib/filters.py (Ed Schofield            2006-03-18 13:52:58 +0000  323)     """
ee4db9c301 Lib/ndimage/filters.py     (Robert Kern             2006-09-24 09:05:13 +0000  324)     input = numpy.asarray(input)
ca465a651f Lib/ndimage/Lib/filters.py (Ed Schofield            2006-03-18 13:52:58 +0000  325)     axis = _ni_support._check_axis(axis, input.ndim)
6f3089c43b scipy/ndimage/filters.py   (Jaime Fernandez         2018-02-22 00:47:21 +0100  326)     output = _ni_support._get_output(output, input)
7fb0a279ac scipy/ndimage/filters.py   (Alvaro Sanchez-Gonzalez 2016-11-25 10:03:14 +0000  327)     modes = _ni_support._normalize_sequence(mode, input.ndim)
7fb0a279ac scipy/ndimage/filters.py   (Alvaro Sanchez-Gonzalez 2016-11-25 10:03:14 +0000  328)     correlate1d(input, [-1, 0, 1], axis, output, modes[axis], cval, 0)
ca465a651f Lib/ndimage/Lib/filters.py (Ed Schofield            2006-03-18 13:52:58 +0000  329)     axes = [ii for ii in range(input.ndim) if ii != axis]
ca465a651f Lib/ndimage/Lib/filters.py (Ed Schofield            2006-03-18 13:52:58 +0000  330)     for ii in axes:
7fb0a279ac scipy/ndimage/filters.py   (Alvaro Sanchez-Gonzalez 2016-11-25 10:03:14 +0000  331)         correlate1d(output, [1, 1, 1], ii, output, modes[ii], cval, 0,)
6f3089c43b scipy/ndimage/filters.py   (Jaime Fernandez         2018-02-22 00:47:21 +0100  332)     return output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="git-squash"&gt;git squash&lt;/h2&gt;
&lt;p&gt;The git commit history should be kept clean. If you develop a new feature you
might want to push the latest state - even if something is not working - from
time to time to the server so that your co-workers can have a look at it. But in
the &lt;code&gt;master&lt;/code&gt; branch it would be nice if every single commit was a single new
feature.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/51049029/562769"&gt;Commit squashing&lt;/a&gt; allows you to
change multiple commits into a single one. This needs to re-write the version
history which cannot be undone. Thus you need to force-push which will cause
problems for everybody who had the version you were changing.&lt;/p&gt;
&lt;p&gt;So as a general guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never force-push on master&lt;/li&gt;
&lt;li&gt;Avoid force-push on branches where multiple people work&lt;/li&gt;
&lt;li&gt;Squash commits, if you are the only one working on it and if it makes it
  easier to understand what you did.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similar, but simpler is &lt;code&gt;git commit --amend&lt;/code&gt;. It lets you add something to the
latest commit in the current branch and edit the commit message.&lt;/p&gt;
&lt;h2 id="merging"&gt;Merging&lt;/h2&gt;
&lt;p&gt;When you are currently in a merge, git will tell you form time to time that
something cannot be auto-merged. Then you can execute &lt;a href="https://git-scm.com/docs/git-mergetool"&gt;&lt;code&gt;git mergetool&lt;/code&gt;&lt;/a&gt;
which will start whichever tool you configured. In my case, it is &lt;a href="http://meldmerge.org"&gt;&lt;code&gt;meld&lt;/code&gt;&lt;/a&gt;.
See my &lt;a href="https://martin-thoma.com/software-versioning-cheat-sheet/#nice-diffs_1"&gt;Software Versioning Cheat Sheet&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="tagging"&gt;Tagging&lt;/h2&gt;
&lt;p&gt;Git gives your versions a hash. This is ok most of the time, but sometimes you
actually want to note that your software has a specific version. You can use
&lt;a href="https://git-scm.com/docs/git-tag"&gt;&lt;code&gt;git tag -a v1.4&lt;/code&gt;&lt;/a&gt; (see &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging"&gt;book&lt;/a&gt;)
for that.&lt;/p&gt;
&lt;p&gt;Github marks those tags as releases. See my &lt;a href="https://github.com/MartinThoma/mpu/releases"&gt;mpu releases&lt;/a&gt;,
for example.&lt;/p&gt;
&lt;p&gt;You can also show diffs / logs with the tags, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;v0.2.0..v0.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="git-hooks"&gt;Git Hooks&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Hooking"&gt;Software Hooks&lt;/a&gt; are a plugin-technique.
Hooks allow users to alter and extend the software. In git, there are many
different hooks. They follow the naming schema &lt;code&gt;[pre/post]-[event]&lt;/code&gt; hook. Here
are some with possible use-cases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre-commit&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;Check the commit message for spelling errors&lt;/li&gt;
&lt;li&gt;Apply a linter to check for coding standards&lt;/li&gt;
&lt;li&gt;Execute (fast) tests to ensure correctnes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-receive&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;Enforce project coding standards.&lt;/li&gt;
&lt;li&gt;Enforce working tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-commit&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;Notify team members of a new commit (e.g. via e-mail or slack)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-receive&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;Push the code to production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also: &lt;a href="https://githooks.com/"&gt;githooks.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="workflows"&gt;Workflows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;Git Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.github.com/introduction/flow/"&gt;Github Flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://files.zeroturnaround.com/pdf/zt_git_cheat_sheet.pdf"&gt;Rebellabs git Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf"&gt;Github Git Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-lfs.github.com"&gt;git LFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Code"></category><category term="git"></category></entry><entry><title>Testing in Python</title><link href="https://martin-thoma.com/testing-python-code/" rel="alternate"></link><published>2018-07-03T20:00:00+02:00</published><updated>2018-07-03T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-07-03:/testing-python-code/</id><summary type="html">&lt;p&gt;Testing code is important for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;: You checked at least some cases if they work. So others can have
  more trust in the quality of your work and youself can also put more trust in
  it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Changes&lt;/strong&gt;: For a bigger project, it is sometimes hard to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Testing code is important for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;: You checked at least some cases if they work. So others can have
  more trust in the quality of your work and youself can also put more trust in
  it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Changes&lt;/strong&gt;: For a bigger project, it is sometimes hard to have
  every part in mind. By writing tests, you make it easier to change something
  and see if / where things break.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Style&lt;/strong&gt;: When you know that you have to write tests, you write some
  things slightly different. Those slight differences usually improve the
  coding style. Sometimes, they are crucial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When testing, there are two important measures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line coverage: How many of the lines of code were touched during the
  execution of tests?&lt;/li&gt;
&lt;li&gt;Branch coverage: For if-statements, how many of the branches were taken?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually, I aim for more than 95% line coverage.&lt;/p&gt;
&lt;h2 id="why-you-should-test"&gt;Why you should test&lt;/h2&gt;
&lt;p&gt;Besides trust, preventing breaking changes and code style, I want to give two
concrete examples how writing tests with the aim of a high test coverage
improved my code.&lt;/p&gt;
&lt;h3 id="reproducibility"&gt;Reproducibility&lt;/h3&gt;
&lt;p&gt;Suppose you have to test a function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then you have a problem. The execution of this depends on the current state of
the world. That is hard to test. While there is &lt;a href="https://github.com/spulec/freezegun"&gt;&lt;code&gt;freezegun&lt;/code&gt;&lt;/a&gt;,
the simpler change is to add an argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the code is easy to test. As a side effect, the function is more flexible.
You could generate the "today" datetime object before, log its value and rerun
everything.&lt;/p&gt;
&lt;h3 id="complexity"&gt;Complexity&lt;/h3&gt;
&lt;p&gt;Imagine you have a function with 300&amp;nbsp;lines of code, conditionally executed
code in multiple levels and for loops. It will be a mess to test everything.&lt;/p&gt;
&lt;p&gt;A very extreme point of view is hold &lt;a href="https://softwareengineering.stackexchange.com/a/195992/25699"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If, when describing the activity of the code to another programmer you use
the word 'and', the method needs to be split into at least one more part.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="how-to-test_1"&gt;How to Test&lt;/h2&gt;
&lt;h3 id="doctests"&gt;Doctests&lt;/h3&gt;
&lt;p&gt;Python has a module called &lt;a href="https://docs.python.org/3/library/doctest.html"&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt;.
It executes code which is after the promt &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A simple example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Calculate the n-th fibonacci number.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fibonacci(0)&lt;/span&gt;
&lt;span class="sd"&gt;    0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fibonacci(6)&lt;/span&gt;
&lt;span class="sd"&gt;    8&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;doctest&lt;/span&gt;

    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you execute this, it will directly check if the documentation matches actual
execution. Try it by changing &lt;code&gt;8&lt;/code&gt; to something else.&lt;/p&gt;
&lt;p&gt;Why it is nice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's simple&lt;/li&gt;
&lt;li&gt;You have written both, documentation and a test&lt;/li&gt;
&lt;li&gt;It's guaranteed not to get outdated (otherwise the tests will fail)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The drawbacks of this solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It compares directly the output as shown on the console. If this is not
  deterministic (e.g. as with the set datatype), you need to check for
  equality.&lt;/li&gt;
&lt;li&gt;In many cases, it is hard to set things up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My recommendation: Use doctests when it looks simple and you don't have to
set up a lot of initial variables. Once you need to interact with anything,
this is not a good solution anymore.&lt;/p&gt;
&lt;h3 id="unittests"&gt;unittests&lt;/h3&gt;
&lt;p&gt;Python comes with &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;,
which is the default module for unit testing. It is inspired by JUnit. The
following text is partially directly copied from the documentation.&lt;/p&gt;
&lt;p&gt;Unit tests are the fundament of the testing pyramid. The should be isolated
from other software, be fast to execute, relatively easy to write and thus
rather cheap. If the test is not isolated, then it is an integration test. A
typical integration test is when you interact with a database.&lt;/p&gt;
&lt;p&gt;There are four concepts which are supported by &lt;code&gt;unittest&lt;/code&gt;:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;test case&lt;/dt&gt;
&lt;dd&gt;A test case is the individual unit of testing. It checks for a specific response to a particular set of inputs. unittest provides a base class, TestCase, which may be used to create new test cases.&lt;/dd&gt;
&lt;dt&gt;test fixture&lt;/dt&gt;
&lt;dd&gt;A test fixture represents the preparation needed to perform one or more tests, and any associate cleanup actions. This may involve, for example, creating temporary or proxy databases, directories, or starting a server process.&lt;/dd&gt;
&lt;dt&gt;test suite&lt;/dt&gt;
&lt;dd&gt;A test suite is a collection of test cases, test suites, or both. It is used to aggregate tests that should be executed together.&lt;/dd&gt;
&lt;dt&gt;test runner&lt;/dt&gt;
&lt;dd&gt;A test runner is a component which orchestrates the execution of tests and provides the outcome to the user. The runner may use a graphical interface, a textual interface, or return a special value to indicate the results of executing the tests.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;To put it into context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You write a test case.&lt;/li&gt;
&lt;li&gt;It might be neccessary or convenient to &lt;code&gt;setUp&lt;/code&gt; things. This is the test
  fixture.&lt;/li&gt;
&lt;li&gt;You combine tests to a test suite.&lt;/li&gt;
&lt;li&gt;The test runner executes the tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your &lt;a href="https://martin-thoma.com/python-projects/"&gt;project structure&lt;/a&gt; should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;foo_module : the git repository root dir
&amp;boxvr;&amp;boxh;&amp;boxh; configs
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; module.yaml
&amp;boxvr;&amp;boxh;&amp;boxh; docker-compose.yml
&amp;boxvr;&amp;boxh;&amp;boxh; Dockerfile
&amp;boxvr;&amp;boxh;&amp;boxh; foo_module
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; api.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; cli.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; config.yaml
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; controller.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; credentials.yaml
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; utils.py
&amp;boxvr;&amp;boxh;&amp;boxh; tox.ini
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; requirements.txt
&amp;boxvr;&amp;boxh;&amp;boxh; setup.cfg
&amp;boxvr;&amp;boxh;&amp;boxh; setup.py
&amp;boxur;&amp;boxh;&amp;boxh; tests &amp;lt;--------------------------
    &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
    &amp;boxur;&amp;boxh;&amp;boxh; test_utils.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple unittest is usually stored in &lt;code&gt;tests/test_themodule_name.py&lt;/code&gt; and might
look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;ThemoduleNameTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Set things up for the test."""&lt;/span&gt;
        &lt;span class="c1"&gt;# e.g. initialize database mock&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Clean things up after the test."""&lt;/span&gt;
        &lt;span class="c1"&gt;# e.g. remove a file&lt;/span&gt;

    &lt;span class="c1"&gt;# test routine A&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_abc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Test routine A"""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FooTest:testA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# test routine B&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;testB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Test routine B"""&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FooTest:testB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pytest"&gt;pytest&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/latest/"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; is a framework which makes
testing with Python WAY easier. You can simply add files &lt;code&gt;test_&amp;lt;modulename&amp;gt;.py&lt;/code&gt;
with &lt;code&gt;text_xyz()&lt;/code&gt; functions and assert statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;text_xy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mymodule&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you execute &lt;code&gt;pytest&lt;/code&gt; in the project folder (without any arguments) and
it runs your tests!&lt;/p&gt;
&lt;h4 id="pytest-plugins"&gt;pytest plugins&lt;/h4&gt;
&lt;p&gt;pytest also comes with some neat plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ftobia/pytest-ordering"&gt;&lt;code&gt;pytest-ordering&lt;/code&gt;&lt;/a&gt;: Executing
  tests in a given order is nice when you have some super fast ones and some
  rather slow ones.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-dependency/"&gt;&lt;code&gt;pytest-dependency&lt;/code&gt;&lt;/a&gt;: I hate it
  when I break one thing and a thousand tests fail. This makes it hard to find
  the root cause. By defining dependencies you can skip tests conditionally
  on the outcome of another test.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pytest-cov.readthedocs.io/en/latest/"&gt;&lt;code&gt;pytest-cov&lt;/code&gt;&lt;/a&gt;: Creating coverage
  reports with pytest.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-mccabe/"&gt;&lt;code&gt;pytest-mccabe&lt;/code&gt;&lt;/a&gt;: Check which
  functions are too complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recommend to add the following to your &lt;code&gt;setup.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool:pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;./tests/ --doctest-modules --mccabe --cov=./mpu --cov-append --cov-report html:tests/reports/coverage-html --cov-report xml:tests/reports/coverage.xml --pep8 --ignore=docs/&lt;/span&gt;
&lt;span class="na"&gt;doctest_encoding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;utf-8&lt;/span&gt;
&lt;span class="na"&gt;mccabe-complexity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;

&lt;span class="k"&gt;[pydocstyle]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;D104, D105, D107, D301, D413, D203, D212, D100&lt;/span&gt;
&lt;span class="na"&gt;match_dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;mpu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might wonder how it relates to &lt;code&gt;nose&lt;/code&gt;. The main thing you should remember
is that &lt;a href="https://nose.readthedocs.io/en/latest/#note-to-users"&gt;nose is no longer maintained&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="radon"&gt;radon&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/radon/"&gt;&lt;code&gt;radon&lt;/code&gt;&lt;/a&gt; computes several maintainability
measures. The best one is the maintainability index. Here is how I use it
for my &lt;code&gt;mpu&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;radon&lt;span class="w"&gt; &lt;/span&gt;mi&lt;span class="w"&gt; &lt;/span&gt;mpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tox"&gt;tox&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Tox_(Python_testing_wrapper)"&gt;&lt;code&gt;tox&lt;/code&gt;&lt;/a&gt; is a
testing tool which helps you to discover if you forgot to add dependencies to
your &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can install &lt;a href="https://pypi.org/project/tox/"&gt;&lt;code&gt;tox&lt;/code&gt;&lt;/a&gt; via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="coverage-reports_1"&gt;Coverage Reports&lt;/h2&gt;
&lt;p&gt;The &lt;a href="http://coverage.readthedocs.io/en/latest/"&gt;&lt;code&gt;coverage&lt;/code&gt;&lt;/a&gt; package and its
&lt;a href="https://pytest-cov.readthedocs.io/en/latest/"&gt;&lt;code&gt;pytest-cov&lt;/code&gt;&lt;/a&gt; plugin allow you
to generate coverage reports.&lt;/p&gt;
&lt;p&gt;I recommend creating a &lt;code&gt;.coveragerc&lt;/code&gt; file in your projects root directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[run]&lt;/span&gt;
&lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;mpu&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# folder where your project is&lt;/span&gt;
&lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;[report]&lt;/span&gt;
&lt;span class="c1"&gt;# Regexes for lines to exclude from consideration&lt;/span&gt;
&lt;span class="na"&gt;exclude_lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Have to re-enable the standard pragma&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pragma&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;no cover&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Don't complain about missing debug-only code:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;def __repr__&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;def __str__&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;if self\.debug&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Don't complain if tests don't hit defensive assertion code:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;raise AssertionError&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;raise NotImplementedError&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Don't complain if non-runnable code isn't run:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;if 0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;if __name__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;= .__main__.:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;branch = True&lt;/code&gt; enables the creation of branch coverage reports.&lt;/p&gt;
&lt;h2 id="the-tricky-cases"&gt;The Tricky Cases&lt;/h2&gt;
&lt;h3 id="file-system-interactions"&gt;File System Interactions&lt;/h3&gt;
&lt;p&gt;The two solutions are temporary files with &lt;a href="https://docs.python.org/3/library/tempfile.html"&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://docs.python.org/3/library/unittest.mock.html"&gt;&lt;code&gt;unittest.mock&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href="https://stackoverflow.com/q/19672138/562769"&gt;How do I mock the filesystem in Python unit tests?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="web-interactions"&gt;Web Interactions&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://docs.python.org/3/library/unittest.mock.html"&gt;&lt;code&gt;unittest.mock&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="credentials"&gt;Credentials&lt;/h3&gt;
&lt;p&gt;Having credentials as environment variables seems to be the cleanest solution
so far. You might want to have a look at &lt;a href="https://direnv.net"&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt;. To
give later developers (including yourself) later a hint, you could create a
&lt;code&gt;template.envrc&lt;/code&gt; file which contains all relevant attributes, but not the
values.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;FOOBAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you should &lt;em&gt;not&lt;/em&gt; add the &lt;code&gt;.envrc&lt;/code&gt; file to your git repository.&lt;/p&gt;
&lt;p&gt;For AWS, there is &lt;a href="https://aws.amazon.com/kms/"&gt;KMS&lt;/a&gt; to store
credentials.&lt;/p&gt;
&lt;h2 id="mutation-testing_1"&gt;Mutation Testing&lt;/h2&gt;
&lt;p&gt;Mutation Testing is a nice idea how to test your tests. You "mutate" your code
slightly and want at least one test to fail.&lt;/p&gt;
&lt;p&gt;So you change constants (off-by-one), you change the order of operations.&lt;/p&gt;
&lt;p&gt;There is &lt;a href="https://github.com/sixty-north/cosmic-ray"&gt;&lt;code&gt;cosmic-ray&lt;/code&gt;&lt;/a&gt;, but last
time I checked it didn't quite help me.&lt;/p&gt;
&lt;p&gt;There is also &lt;a href="https://pypi.org/project/mutmut/"&gt;&lt;code&gt;mutmut&lt;/code&gt;&lt;/a&gt;, but I haven't even
tried that one.&lt;/p&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pythonsheets.com/notes/python-tests.html"&gt;Python test cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Hitchhiker&amp;rsquo;s Guide to Python: &lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;Testing Your Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://www.360logica.com/blog/sneak-peek-test-framework-test-pyramid-testing-pyramid/ --&gt;</content><category term="Code"></category><category term="Code"></category><category term="Testing"></category><category term="tox"></category><category term="pytest"></category><category term="coverage"></category></entry><entry><title>Python Style Guide</title><link href="https://martin-thoma.com/python-style-guide/" rel="alternate"></link><published>2018-07-01T20:00:00+02:00</published><updated>2018-07-01T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-07-01:/python-style-guide/</id><summary type="html">&lt;p&gt;Having a consistent code style for a project is important as it allows
developers to code correctly without thinking too much about it. It makes code
&lt;strong&gt;easier to read, maintain&lt;/strong&gt; and after becomming used to the style also
&lt;strong&gt;easier to write&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Most of the time, it is not too important …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having a consistent code style for a project is important as it allows
developers to code correctly without thinking too much about it. It makes code
&lt;strong&gt;easier to read, maintain&lt;/strong&gt; and after becomming used to the style also
&lt;strong&gt;easier to write&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Most of the time, it is not too important which standards to follow, but to
decide in the team which ones you want to have and follow those consistently.
To cite from PEP8:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A style guide is about consistency. Consistency with [PEP8] is important.
Consistency within a project is more important. Consistency within one module
or function is the most important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python has standards for general coding as well as for docstrings.&lt;/p&gt;
&lt;h2 id="general-coding"&gt;General Coding&lt;/h2&gt;
&lt;h3 id="pep8"&gt;PEP8&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; was posted in July 2001
and got an update in 2013.&lt;/p&gt;
&lt;h3 id="pyflakes"&gt;PyFlakes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://launchpad.net/pyflakes"&gt;PyFlakes&lt;/a&gt; is a very common tool to check
Python code for potential errors. I've added the codes to the long table below.&lt;/p&gt;
&lt;h2 id="docstrings_1"&gt;Docstrings&lt;/h2&gt;
&lt;p&gt;Python packages are usually documented on a function / class / method / package
level directly in the code. The stuff in &lt;code&gt;docs/&lt;/code&gt; is often only for building
HTML out of the Python code, organzinging things (e.g. which package to show
first) and a user manual.&lt;/p&gt;
&lt;p&gt;There is &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;PEP257&lt;/a&gt; which defines some
basic stuff. Building on this, there are two docstring style guides which
cannot be combined: NumpyDoc an Google.&lt;/p&gt;
&lt;p&gt;Tools like &lt;a href="http://sphinxcontrib-napoleon.readthedocs.io/en/latest/"&gt;napoleon&lt;/a&gt;
in combination with Sphinx can automatically create nice docs of both of them.&lt;/p&gt;
&lt;h3 id="numpydoc"&gt;NumpyDoc&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/numpy/numpy/blob/254c50af3a52c8b1444e46857e9ec59fcb212a41/doc/HOWTO_DOCUMENT.rst.txt"&gt;GitHub&lt;/a&gt; for the guide.&lt;/p&gt;
&lt;p&gt;It looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get meta-information of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo&lt;/span&gt;
&lt;span class="sd"&gt;    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis&lt;/span&gt;
&lt;span class="sd"&gt;    parturient montes, nascetur ridiculus mus.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    filepath : str&lt;/span&gt;
&lt;span class="sd"&gt;        Get metadata from this file&lt;/span&gt;
&lt;span class="sd"&gt;    a_number : int&lt;/span&gt;
&lt;span class="sd"&gt;        Some more details&lt;/span&gt;
&lt;span class="sd"&gt;    a_dict : dict&lt;/span&gt;
&lt;span class="sd"&gt;        Configuration&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    meta : dict&lt;/span&gt;
&lt;span class="sd"&gt;        Extracted meta information&lt;/span&gt;

&lt;span class="sd"&gt;    Raises&lt;/span&gt;
&lt;span class="sd"&gt;    ------&lt;/span&gt;
&lt;span class="sd"&gt;    IOError&lt;/span&gt;
&lt;span class="sd"&gt;        File could not be read&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="google-style-docstrings"&gt;Google Style Docstrings&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings"&gt;Github&lt;/a&gt;
for the documentation.&lt;/p&gt;
&lt;p&gt;It looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Get meta-information of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo&lt;/span&gt;
&lt;span class="sd"&gt;    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis&lt;/span&gt;
&lt;span class="sd"&gt;    parturient montes, nascetur ridiculus mus.&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        filepath: Get metadata from this file.&lt;/span&gt;
&lt;span class="sd"&gt;        a_number: Some more details.&lt;/span&gt;
&lt;span class="sd"&gt;        a_dict: Configuration.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;        Extracted meta information:&lt;/span&gt;

&lt;span class="sd"&gt;    Raises:&lt;/span&gt;
&lt;span class="sd"&gt;        IOError: File could not be read.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sphinxdocstring"&gt;SphinxDocString&lt;/h3&gt;
&lt;p&gt;It's super ugly and I find it hard to read, but this docstring type is also out
there. &lt;a href="https://github.com/JetBrains/intellij-community/blob/210e0ed138627926e10094bb9c76026319cec178/python/src/com/jetbrains/python/documentation/docstrings/SphinxDocString.java"&gt;SphinxDocString&lt;/a&gt;. They use &lt;a href="https://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get meta-information of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo&lt;/span&gt;
&lt;span class="sd"&gt;    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis&lt;/span&gt;
&lt;span class="sd"&gt;    parturient montes, nascetur ridiculus mus.&lt;/span&gt;

&lt;span class="sd"&gt;    :param filepath: Get metadata from this file&lt;/span&gt;
&lt;span class="sd"&gt;    :type filepath: str&lt;/span&gt;
&lt;span class="sd"&gt;    :param a_number: Some more details&lt;/span&gt;
&lt;span class="sd"&gt;    :type a_number: int&lt;/span&gt;
&lt;span class="sd"&gt;    :param a_dict: Configuration&lt;/span&gt;
&lt;span class="sd"&gt;    :type a_dict: dict&lt;/span&gt;

&lt;span class="sd"&gt;    :returns: dict -- Extracted meta information&lt;/span&gt;

&lt;span class="sd"&gt;    :raises: IOError&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mccabe-code-complexity_1"&gt;McCabe code complexity&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;McCabe complexity&lt;/a&gt;
measures how difficult it is to read your code. To quote from Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a quantitative measure of the number of linearly independent paths
through a program's source code.
[...]
One of McCabe's original applications was to limit the complexity of routines
during program development; he recommended that programmers should count the
complexity of the modules they are developing, and split them into smaller
modules whenever the cyclomatic complexity of the module exceeded 10.[2] This
practice was adopted by the NIST Structured Testing methodology, with an
observation that since McCabe's original publication, the figure of 10 had
received substantial corroborating evidence, but that in some circumstances
it may be appropriate to relax the restriction and permit modules with a
complexity as high as 15.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think McCabe complexity is one way to find spots where the could could be
improved for readability, but I'm not certain how often that actually works.&lt;/p&gt;
&lt;p&gt;There is a &lt;a href="https://pypi.org/project/pytest-mccabe/"&gt;mccabe pytest plugin&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="linters"&gt;Linters&lt;/h2&gt;
&lt;p&gt;Linters are tools for static code analysis. Static code analysis is the task of
analyzing a computer program without executing it. With executing the program,
it would be dynamic code analysis which is done by coverage testing tools.&lt;/p&gt;
&lt;p&gt;Common Python linters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pycodestyle/"&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/a&gt; which replaces &lt;code&gt;pep8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/pycodestyle"&gt;&lt;code&gt;pydocstyle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flake8/"&gt;&lt;code&gt;flake8&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pyrama/"&gt;&lt;code&gt;pyrama&lt;/code&gt;&lt;/a&gt; for checking package structure&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rubik/radon"&gt;&lt;code&gt;radon&lt;/code&gt;&lt;/a&gt;: Measuring the code complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What you should forget&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pylama/"&gt;&lt;code&gt;pylama&lt;/code&gt;&lt;/a&gt;: Only wraps some other tools.
  Use the pytest-plugins for those tools instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="info"&gt;Don't forget the &lt;a href="https://github.com/psf/black"&gt;Black Auto-Formatter&lt;/a&gt;. It is maintained by the Python Software Foundation, works well and has reasonable defaults. Makes you think and discuss less about formatting and solves many of the things linters complain about.&lt;/div&gt;
&lt;h3 id="error-codes"&gt;Error Codes&lt;/h3&gt;
&lt;p&gt;The following error codes are from &lt;a href="http://pycodestyle.pycqa.org/en/latest/intro.html"&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/a&gt; and
&lt;a href="http://pep257.readthedocs.io/en/latest/error_codes.html"&gt;&lt;code&gt;pydocstyle&lt;/code&gt;&lt;/a&gt;.
I added to a couple why they exist and added a suggestion if I think you should take them
(from &amp;checkmark;&amp;checkmark; for a strong YES to ✘✘ for a strong NO). Please also have a
look at &lt;a href="https://lintlyci.github.io/Flake8Rules/"&gt;lintlyci.github.io/Flake8Rules&lt;/a&gt;
which gives a lot of good examples for those rules.&lt;/p&gt;
&lt;p&gt;There are also two footnotes for some codes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(*) In the default configuration, the checks E121, E123, E126, E133, E226,
E241, E242, E704, W503, W504 and W505 are ignored because they are not rules
unanimously accepted, and PEP 8 does not enforce them. Please note that if
the option &amp;ndash;ignore=errors is used, the default configuration will be
overridden and ignore only the check(s) you skip. The check W503 is mutually
exclusive with check W504. The check E133 is mutually exclusive with check
E123. Use switch --hang-closing to report E133 instead of E123. Use switch
--max-doc-length=n to report W505.&lt;/p&gt;
&lt;p&gt;(^) These checks can be disabled at the line level using the # noqa special
comment. This possibility should be reserved for special cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Suggestion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;E1&lt;/th&gt;
&lt;th&gt;Indentation&lt;/th&gt;
&lt;td&gt;Indentation carries a meaning in Python - if code is in a block or not.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E101&lt;/td&gt;
&lt;td&gt;indentation contains mixed spaces and tabs&lt;br/&gt;
                Why: When you mix spaces and tabs, you will get different indentation for different editor settings.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E111&lt;/td&gt;
&lt;td&gt;indentation is not a multiple of four&lt;br/&gt;
                Why: My guess is that 95% of all projects use 4 spaces - a single spaces is hard to read and more than
                four is something you don't want to type that often&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E112&lt;/td&gt;
&lt;td&gt;expected an indented block&lt;br/&gt;
                Why: A bug&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E113&lt;/td&gt;
&lt;td&gt;unexpected indentation&lt;br/&gt;
                Why: A bug&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E114&lt;/td&gt;
&lt;td&gt;indentation is not a multiple of four (comment)&lt;br/&gt;
                Why: Easily leads to bugs&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E115&lt;/td&gt;
&lt;td&gt;expected an indented block (comment)&lt;br/&gt;
                Why: Easily leads to bugs&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E116&lt;/td&gt;
&lt;td&gt;unexpected indentation (comment)&lt;br/&gt;
                Why: Easily leads to bugs&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E121 (*^)&lt;/td&gt;
&lt;td&gt;continuation line under-indented for hanging indent&lt;br/&gt;
                Why: Usual code style&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E122 (^)&lt;/td&gt;
&lt;td&gt;continuation line missing indentation or outdented&lt;br/&gt;
                Why: Usual code style&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E123 (*)&lt;/td&gt;
&lt;td&gt;closing bracket does not match indentation of opening bracket's line&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E124 (^)&lt;/td&gt;
&lt;td&gt;closing bracket does not match visual indentation&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E125 (^)&lt;/td&gt;
&lt;td&gt;continuation line with same indent as next logical line&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E126 (*^)&lt;/td&gt;
&lt;td&gt;continuation line over-indented for hanging indent&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E127 (^)&lt;/td&gt;
&lt;td&gt;continuation line over-indented for visual indent&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E128 (^)&lt;/td&gt;
&lt;td&gt;continuation line under-indented for visual indent&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E129 (^)&lt;/td&gt;
&lt;td&gt;visually indented line with same indent as next logical line&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E131 (^)&lt;/td&gt;
&lt;td&gt;continuation line unaligned for hanging indent&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E133 (*)&lt;/td&gt;
&lt;td&gt;closing bracket is missing indentation&lt;br/&gt;
                Why: Readability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;E2&lt;/th&gt;
&lt;th&gt;Whitespace&lt;/th&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E201.html"&gt;E201&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;whitespace after &lt;code&gt;(&lt;/code&gt;&lt;br/&gt;
                Why: Usual code style&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E202&lt;/td&gt;
&lt;td&gt;whitespace before &lt;code&gt;)&lt;/code&gt;&lt;br/&gt;
                Why: Usual code style&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E203&lt;/td&gt;
&lt;td&gt;whitespace before &lt;code&gt;&lt;/code&gt;&lt;br/&gt;
                Why: Usual code style&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E211&lt;/td&gt;
&lt;td&gt;whitespace before &lt;code&gt;(&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E221&lt;/td&gt;
&lt;td&gt;multiple spaces before operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E222&lt;/td&gt;
&lt;td&gt;multiple spaces after operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E223&lt;/td&gt;
&lt;td&gt;tab before operator&lt;br/&gt;
                Why: Try to avoid tabs in Python&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E224&lt;/td&gt;
&lt;td&gt;tab after operator&lt;br/&gt;
                Why: Try to avoid tabs in Python&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E225&lt;/td&gt;
&lt;td&gt;missing whitespace around operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E226 (*)&lt;/td&gt;
&lt;td&gt;missing whitespace around arithmetic operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E227&lt;/td&gt;
&lt;td&gt;missing whitespace around bitwise or shift operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E228&lt;/td&gt;
&lt;td&gt;missing whitespace around modulo operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E231&lt;/td&gt;
&lt;td&gt;missing whitespace after &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, or &lt;code&gt;:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E241 (*)&lt;/td&gt;
&lt;td&gt;multiple spaces after &lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E242.html"&gt;E242&lt;/a&gt; (*)&lt;/td&gt;
&lt;td&gt;tab after &lt;code&gt;,&lt;/code&gt;&lt;br/&gt;
                Why: Try to avoid tabs in Python&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E251&lt;/td&gt;
&lt;td&gt;unexpected spaces around keyword / parameter equals&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E261&lt;/td&gt;
&lt;td&gt;at least two spaces before inline comment&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E262&lt;/td&gt;
&lt;td&gt;inline comment should start with &lt;code&gt;# &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E265.html"&gt;E265&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;block comment should start with &lt;code&gt;# &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E266&lt;/td&gt;
&lt;td&gt;too many leading &lt;code&gt;#&lt;/code&gt; for block comment&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E271&lt;/td&gt;
&lt;td&gt;multiple spaces after keyword&lt;br/&gt;
                Why: I can see the reason for one space ... but many?&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E272&lt;/td&gt;
&lt;td&gt;multiple spaces before keyword&lt;br/&gt;
                Why: I can see the reason for one space, but not for multiple&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E273&lt;/td&gt;
&lt;td&gt;tab after keyword&lt;br/&gt;
                Why: Try to avoid tabs in Python&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E274&lt;/td&gt;
&lt;td&gt;tab before keyword&lt;br/&gt;
                Why: Try to avoid tabs in Python&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E275&lt;/td&gt;
&lt;td&gt;missing whitespace after keyword&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;E3&lt;/th&gt;
&lt;th&gt;Blank line&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E301.html"&gt;E301&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;expected 1 blank line, found 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E302&lt;/td&gt;
&lt;td&gt;expected 2 blank lines, found 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E303&lt;/td&gt;
&lt;td&gt;too many blank lines (3)&lt;br/&gt;
                Why: Don't make your code too stretched out. If you want to
                separate code, make a new module.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E304&lt;/td&gt;
&lt;td&gt;blank lines found after function decorator&lt;br/&gt;
                Why: This is confusing. A function decorator changes the function
                being decorated. If you separate them, I might miss that it
                is there.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E305&lt;/td&gt;
&lt;td&gt;expected 2 blank lines after end of function or class&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E306&lt;/td&gt;
&lt;td&gt;expected 1 blank line before a nested definition&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;E4&lt;/th&gt;
&lt;th&gt;Import&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E401.html"&gt;E401&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;multiple imports on one line&lt;br/&gt;
                Why: It's more readable to have one import per line, you can
                structure them more easily and your editor can tell you which
                one you're not using&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E402.html"&gt;&lt;/a&gt;E402&lt;/td&gt;
&lt;td&gt;module level import not at top of file&lt;br/&gt;
                Why: You should have all your imports at the top of your file.
                However, there could be other code as well in between imports.
                For example, setting the seed of &lt;code&gt;random&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;✘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;E5&lt;/th&gt;
&lt;th&gt;Line length&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E501.html"&gt;E501&lt;/a&gt; (^)&lt;/td&gt;
&lt;td&gt;line too long (&amp;gt; 79 characters)&lt;br/&gt;
                Why: See below.
            &lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E502&lt;/td&gt;
&lt;td&gt;the backslash is redundant between brackets&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;E7&lt;/th&gt;
&lt;th&gt;Statement&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E701.html"&gt;&lt;/a&gt;E701&lt;/td&gt;
&lt;td&gt;multiple statements on one line (colon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E702&lt;/td&gt;
&lt;td&gt;multiple statements on one line (semicolon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E703&lt;/td&gt;
&lt;td&gt;statement ends with a semicolon&lt;br/&gt;
                Why: Likely unnecessary and due to a C / C++ / Java developer
                (trying to) write Python code.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E704 (*)&lt;/td&gt;
&lt;td&gt;multiple statements on one line (def)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E711 (^)&lt;/td&gt;
&lt;td&gt;comparison to None should be &lt;code&gt;if cond is None:&lt;/code&gt;&lt;br/&gt;
                Why: &lt;a href="https://stackoverflow.com/a/14247383/562769"&gt;Example&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E712 (^)&lt;/td&gt;
&lt;td&gt;comparison to True should be &lt;code&gt;if cond is True:&lt;/code&gt; or &lt;code&gt;if cond:&lt;/code&gt;&lt;br/&gt;
                Why: Because &lt;code&gt;if cond&lt;/code&gt; is way easier to read&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E713&lt;/td&gt;
&lt;td&gt;test for membership should be &lt;code&gt;not in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E714&lt;/td&gt;
&lt;td&gt;test for object identity should be &lt;code&gt;is not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E721 (^)&lt;/td&gt;
&lt;td&gt;do not compare types, use &lt;code&gt;isinstance()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E722&lt;/td&gt;
&lt;td&gt;do not use bare except, specify exception instead&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E731&lt;/td&gt;
&lt;td&gt;do not assign a lambda expression, use a def&lt;br/&gt;
                Why: &lt;a href="https://stackoverflow.com/a/25010243/562769"&gt;Example&lt;/a&gt;, DRY&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E741&lt;/td&gt;
&lt;td&gt;do not use variables named &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;, or &lt;code&gt;I&lt;/code&gt;&lt;br/&gt;
                Why: Those letters are hard to distinguish in some fonts.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E742&lt;/td&gt;
&lt;td&gt;do not define classes named &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;, or &lt;code&gt;I&lt;/code&gt;&lt;br/&gt;
                Why: Those letters are hard to distinguish in some fonts.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E743&lt;/td&gt;
&lt;td&gt;do not define functions named &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;, or &lt;code&gt;I&lt;/code&gt;&lt;br/&gt;
                Why: Those letters are hard to distinguish in some fonts.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #ff000055"&gt;
&lt;th&gt;E9&lt;/th&gt;
&lt;th&gt;Runtime&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #ff000055"&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/E901.html"&gt;E901&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SyntaxError or IndentationError&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #ff000055"&gt;
&lt;td&gt;E902&lt;/td&gt;
&lt;td&gt;IOError&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;W1&lt;/th&gt;
&lt;th&gt;Indentation warning&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/W191.html"&gt;W191&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;indentation contains tabs&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;W2&lt;/th&gt;
&lt;th&gt;Whitespace warning&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W291&lt;/td&gt;
&lt;td&gt;trailing whitespace&lt;br/&gt;
                Why: It just adds noise to &lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W292&lt;/td&gt;
&lt;td&gt;no newline at end of file&lt;br/&gt;
                Why: &lt;a href="https://stackoverflow.com/a/729795/562769"&gt;answer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W293&lt;/td&gt;
&lt;td&gt;blank line contains whitespace&lt;br/&gt;
                Why: It just adds noise to &lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;W3&lt;/th&gt;
&lt;th&gt;Blank line warning&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W391&lt;/td&gt;
&lt;td&gt;blank line at end of file&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;W5&lt;/th&gt;
&lt;th&gt;Line break warning&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W503 (*)&lt;/td&gt;
&lt;td&gt;line break before binary operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W504 (*)&lt;/td&gt;
&lt;td&gt;line break after binary operator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W505 (*^)&lt;/td&gt;
&lt;td&gt;doc line too long (82 &amp;gt; 79 characters)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;W6&lt;/th&gt;
&lt;th&gt;Deprecation warning&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/W601.html"&gt;W601&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;.has_key() is deprecated, use &lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W602&lt;/td&gt;
&lt;td&gt;deprecated form of raising exception&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W603&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is deprecated, use &lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://lintlyci.github.io/Flake8Rules/rules/W604.html"&gt;W604&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;backticks are deprecated, use &lt;code&gt;repr()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W605&lt;/td&gt;
&lt;td&gt;invalid escape sequence &lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W606&lt;/td&gt;
&lt;td&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are reserved keywords starting with Python 3.7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;F4&lt;/th&gt;
&lt;th&gt;Flake8 module import&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #ffff0055"&gt;
&lt;td&gt;F401&lt;/td&gt;
&lt;td&gt;module imported but unused&lt;br/&gt;
                Why: Might keep unnecessary dependencies&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #ffff0055"&gt;
&lt;td&gt;F402&lt;/td&gt;
&lt;td&gt;import module from line N shadowed by loop variable&lt;br/&gt;
                Why: Potential bug.&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F403&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from module import *&lt;/code&gt; used; unable to detect undefined names&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F404&lt;/td&gt;
&lt;td&gt;future import(s) name after other statements&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;td&gt;Flake8 name errors&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #ffff0055"&gt;
&lt;td&gt;F811&lt;/td&gt;
&lt;td&gt;redefinition of unused name from line N&lt;br/&gt;
                Why: Potentially unused code.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F812&lt;/td&gt;
&lt;td&gt;list comprehension redefines name from line N&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F821&lt;/td&gt;
&lt;td&gt;undefined name name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F822&lt;/td&gt;
&lt;td&gt;undefined name name in __all__&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F823&lt;/td&gt;
&lt;td&gt;local variable name ... referenced before assignment&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F831&lt;/td&gt;
&lt;td&gt;duplicate argument name in function definition&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F841&lt;/td&gt;
&lt;td&gt;local variable name is assigned to but never used&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;N8&lt;/th&gt;
&lt;th&gt;Naming conventions&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N801&lt;/td&gt;
&lt;td&gt;class names should use CapWords convention&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N802&lt;/td&gt;
&lt;td&gt;function name should be lowercase&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N803&lt;/td&gt;
&lt;td&gt;argument name should be lowercase&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N804&lt;/td&gt;
&lt;td&gt;first argument of a classmethod should be named &lt;code&gt;cls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N805&lt;/td&gt;
&lt;td&gt;first argument of a method should be named &lt;code&gt;self&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N806&lt;/td&gt;
&lt;td&gt;variable in function should be lowercase&lt;/td&gt;
&lt;td&gt;&amp;checkmark;&amp;checkmark;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N807&lt;/td&gt;
&lt;td&gt;function name should not start or end with &lt;code&gt;__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N811&lt;/td&gt;
&lt;td&gt;constant imported as non constant&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N812&lt;/td&gt;
&lt;td&gt;lowercase imported as non lowercase&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N813&lt;/td&gt;
&lt;td&gt;camelcase imported as lowercase&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N814&lt;/td&gt;
&lt;td&gt;camelcase imported as constant&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;D1&lt;/th&gt;
&lt;th&gt;Missing Docstrings&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D100&lt;/td&gt;
&lt;td&gt;Missing docstring in public module&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D101&lt;/td&gt;
&lt;td&gt;Missing docstring in public class&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D102&lt;/td&gt;
&lt;td&gt;Missing docstring in public method&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D103&lt;/td&gt;
&lt;td&gt;Missing docstring in public function&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D104&lt;/td&gt;
&lt;td&gt;Missing docstring in public package&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D105&lt;/td&gt;
&lt;td&gt;Missing docstring in magic method&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;D2&lt;/th&gt;
&lt;th&gt;Whitespace Issues&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D200&lt;/td&gt;
&lt;td&gt;One-line docstring should fit on one line with quotes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D201&lt;/td&gt;
&lt;td&gt;No blank lines allowed before function docstring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D202&lt;/td&gt;
&lt;td&gt;No blank lines allowed after function docstring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D203&lt;/td&gt;
&lt;td&gt;1 blank line required before class docstring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D204&lt;/td&gt;
&lt;td&gt;1 blank line required after class docstring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D205&lt;/td&gt;
&lt;td&gt;1 blank line required between summary line and description&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D206&lt;/td&gt;
&lt;td&gt;Docstring should be indented with spaces, not tabs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D207&lt;/td&gt;
&lt;td&gt;Docstring is under-indented&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D208&lt;/td&gt;
&lt;td&gt;Docstring is over-indented&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D209&lt;/td&gt;
&lt;td&gt;Multi-line docstring closing quotes should be on a separate line&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D210&lt;/td&gt;
&lt;td&gt;No whitespaces allowed surrounding docstring text&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D211&lt;/td&gt;
&lt;td&gt;No blank lines allowed before class docstring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D212&lt;/td&gt;
&lt;td&gt;Multi-line docstring summary should start at the first line&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D213&lt;/td&gt;
&lt;td&gt;Multi-line docstring summary should start at the second line&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;D3&lt;/th&gt;
&lt;th&gt;Quotes Issues&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D300&lt;/td&gt;
&lt;td&gt;Use &amp;ldquo;&amp;rdquo;&amp;ldquo;triple double quotes&amp;rdquo;&amp;ldquo;&amp;rdquo;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D301&lt;/td&gt;
&lt;td&gt;Use r&amp;rdquo;&amp;ldquo;&amp;rdquo; if any backslashes in a docstring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D302&lt;/td&gt;
&lt;td&gt;Use u&amp;rdquo;&amp;ldquo;&amp;rdquo; for Unicode docstrings&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;D4&lt;/th&gt;
&lt;th&gt;Docstring Content Issues&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D400&lt;/td&gt;
&lt;td&gt;First line should end with a period&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D401&lt;/td&gt;
&lt;td&gt;First line should be in imperative mood&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D402&lt;/td&gt;
&lt;td&gt;First line should not be the functions signature&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D403&lt;/td&gt;
&lt;td&gt;First word of the first line should be properly capitalized&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="editor-support_1"&gt;Editor Support&lt;/h2&gt;
&lt;p&gt;You should let your editor do as many automatic formatting changes as you can.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sublime Text: Python Flake8 Lint (tested, works fine) and &lt;a href="https://github.com/wistful/SublimeAutoPEP8"&gt;Auto PEP8&lt;/a&gt; (not tested)&lt;/li&gt;
&lt;li&gt;Spyder: &lt;a href="https://github.com/spyder-ide/spyder-autopep8"&gt;Auto PEP8&lt;/a&gt; (not tested)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="notes-on-details"&gt;Notes on Details&lt;/h2&gt;
&lt;h3 id="maximum-line-length"&gt;Maximum Line Length&lt;/h3&gt;
&lt;p&gt;You might consider a maximum line lenght of 80 characters too extreme /
outdated.&lt;/p&gt;
&lt;p&gt;Well, please have a look how a &lt;a href="https://stackoverflow.com/q/4129049/562769"&gt;3-way merge&lt;/a&gt; would look like on your machine. This
is how it looks like on mine:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/07/3-way-merge-80-chars.png"&gt;&lt;img alt="3-way merge with 80 character lines" src="../images/2018/07/3-way-merge-80-chars.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;3-way merge with 80 character lines&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And now look at files with 100 characters:&lt;/p&gt;
&lt;figure class="wp-caption aligncenter img-thumbnail"&gt;
&lt;a href="../images/2018/07/3-way-merge-100-chars.png"&gt;&lt;img alt="3-way merge with 100 character lines" src="../images/2018/07/3-way-merge-100-chars.png" style="width: 512px;"/&gt;&lt;/a&gt;
&lt;figcaption class="text-center"&gt;3-way merge with 100 character lines&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Sure, you can still do it. But for sure it also is less comfortable.&lt;/p&gt;
&lt;p&gt;Let's see how famous projects do it (&lt;a href="https://github.com/MartinThoma/algorithms/blob/master/Python/linelength_check.py"&gt;code on GitHub&lt;/a&gt;):&lt;/p&gt;
&lt;table class="table"&gt;
&lt;tr&gt;
&lt;th&gt;Project&lt;/th&gt;
&lt;th&gt;95%-line length&lt;/th&gt;
&lt;th&gt;99%-line length&lt;/th&gt;
&lt;th&gt;100%-line length&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/numpy/numpy"&gt;numpy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/numpy/numpy/blob/master/numpy/core/tests/test_multiarray.py#L3568"&gt;589&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/scipy/scipy"&gt;scipy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/scipy/scipy/blob/master/scipy/signal/tests/test_windows.py#L471"&gt;5223&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/pandas-dev/pandas"&gt;pandas&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/pandas-dev/pandas/blob/master/pandas/tests/io/formats/test_to_html.py#L52"&gt;801&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/python-pillow/Pillow"&gt;Pillow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/python-pillow/Pillow/blob/master/src/PIL/PdfParser.py#L181"&gt;185&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zzzeek/sqlalchemy"&gt;sqlalchemy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/dialects/postgresql/base.py#L477"&gt;144&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/requests/requests"&gt;requests&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;77&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/requests/requests/blob/master/requests/api.py#L22"&gt;172&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/python/cpython"&gt;cpython&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;81&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/python/cpython/blob/master/Lib/test/test_bz2.py#L61"&gt;1182&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, all projects try to be below 79&amp;nbsp;characters per line. They
only break it for tests and documentation. Not for code. While I admit there
are some cases where you will get above the 79&amp;nbsp;character threshold, in
most cases it just means that you should change the way you wrote your code.
I've often seen it when you have many nested loops or conditions.&lt;/p&gt;
&lt;p&gt;Another argument against longer line lengths is readability. Long lines are
just harder to read. Newspapers could also have way longer lines and less
columns. But they don't do that. Websites also make columns. Let's look at the
number of characters in a line for a couple:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Characters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;Focus.de&lt;/td&gt;
&lt;td&gt;News&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;washingtonpost.com&lt;/td&gt;
&lt;td&gt;News&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sueddeutsche.de&lt;/td&gt;
&lt;td&gt;News&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Medium.com&lt;/td&gt;
&lt;td&gt;Blog posts&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</content><category term="Code"></category><category term="Python"></category><category term="Style Guide"></category><category term="Flake8"></category><category term="PEP8"></category></entry><entry><title>Make Python Objects JSON serializable</title><link href="https://martin-thoma.com/make-json-serializable/" rel="alternate"></link><published>2018-06-27T20:00:00+02:00</published><updated>2018-06-27T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-27:/make-json-serializable/</id><summary type="html">&lt;p&gt;When you're developing a service which has to communicate with a REST endpoint,
it is very likely that it will come in handy if you can convert some of your
objects to JSON (and back). Until recently, I always created a dictionary and
used &lt;code&gt;json.dumps&lt;/code&gt; in that case. Also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you're developing a service which has to communicate with a REST endpoint,
it is very likely that it will come in handy if you can convert some of your
objects to JSON (and back). Until recently, I always created a dictionary and
used &lt;code&gt;json.dumps&lt;/code&gt; in that case. Also, when I wanted to log an object to
AWS Cloudwatch which has structured logs (json logs).&lt;/p&gt;
&lt;p&gt;Instead of doing it completely manually, you should use a pattern described
by &lt;a href="https://github.com/simplejson/simplejson/issues/52#issuecomment-23667961"&gt;jaraco&lt;/a&gt;
(and fixed by me):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;MyCustom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;__json__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"__python__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"mymodule.submodule:MyCustom.from_json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;for_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__json__&lt;/span&gt;  &lt;span class="c1"&gt;# supported by simplejson&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that, the following workflow is possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;simplejson&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyCustom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;for_json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Two-step loading&lt;/span&gt;
&lt;span class="n"&gt;obj2_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyCustom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj2_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Make sure we have the correct thing&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyCustom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we need two steps for loading. For now, the &lt;code&gt;__python__&lt;/code&gt; property
is not used.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Software Engineering"></category><category term="JSON"></category></entry><entry><title>Stages of Software Development</title><link href="https://martin-thoma.com/software-development-stages/" rel="alternate"></link><published>2018-06-09T20:00:00+02:00</published><updated>2018-06-09T20:00:00+02:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-06-09:/software-development-stages/</id><summary type="html">&lt;p&gt;Pythons Trove Classifiers have 7 stages of software development:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Development Status :: 1 - Planning
Development Status :: 2 - Pre-Alpha
Development Status :: 3 - Alpha
Development Status :: 4 - Beta
Development Status :: 5 - Production/Stable
Development Status :: 6 - Mature
Development Status :: 7 - Inactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this mini-article I try to describe what those stages are.&lt;/p&gt;
&lt;h2 id="semantic-versioning"&gt;Semantic …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Pythons Trove Classifiers have 7 stages of software development:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Development Status :: 1 - Planning
Development Status :: 2 - Pre-Alpha
Development Status :: 3 - Alpha
Development Status :: 4 - Beta
Development Status :: 5 - Production/Stable
Development Status :: 6 - Mature
Development Status :: 7 - Inactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this mini-article I try to describe what those stages are.&lt;/p&gt;
&lt;h2 id="semantic-versioning"&gt;Semantic Versioning&lt;/h2&gt;
&lt;p&gt;There are a couple of different ways to set a version string:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git hash: &lt;code&gt;409b48b0d49c6b5d82ec8711b9341fc99b31ff98&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Counting upwards: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, ...&lt;/li&gt;
&lt;li&gt;Yearly versions:&lt;ul&gt;
&lt;li&gt;Ubuntu: &lt;code&gt;16.04&lt;/code&gt;, &lt;code&gt;16.10&lt;/code&gt;, &lt;code&gt;17.04&lt;/code&gt;, &lt;code&gt;17.10&lt;/code&gt;, ...&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytz/"&gt;pytz&lt;/a&gt;: &lt;code&gt;2016.10&lt;/code&gt;, &lt;code&gt;2017.2&lt;/code&gt;, &lt;code&gt;2017.3&lt;/code&gt;, &lt;code&gt;2018.3&lt;/code&gt;, &lt;code&gt;2018.4&lt;/code&gt;, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semantic versioning: &lt;code&gt;0.19.1&lt;/code&gt;, &lt;code&gt;1.0.0&lt;/code&gt;, &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.1.0&lt;/code&gt;,... as used by &lt;a href="https://github.com/scipy/scipy/releases"&gt;scipy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;git hashes are only there to have an identifier for a commit which can be
(ab)used as a version string. The other versioning ways are better because
you can directly see which version is more recent.&lt;/p&gt;
&lt;p&gt;Yearly versions and semantic versioning are better than simply counting
upwards, because the version string carries additional information. Instead of
only knowing that something is the next version, you either know how much time
has passed or which type of change was done.&lt;/p&gt;
&lt;p&gt;I suggest taking 5 minutes to read &lt;a href="https://semver.org"&gt;semver.org&lt;/a&gt;, but the
bare minimum you need to know about it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="development-stages"&gt;Development Stages&lt;/h2&gt;
&lt;h3 id="1-planning"&gt;1 - Planning&lt;/h3&gt;
&lt;p&gt;Having this trove classifier online basically means you only reserved the name
on PyPI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Required properties&lt;/strong&gt;: There is no software package, no content whatsoever.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typical steps&lt;/strong&gt;: Creating wireframes (e.g. with &lt;a href="https://balsamiq.com"&gt;Balsamiq&lt;/a&gt;),
  drafting architectures and expected workflows (e.g. UML diagrams), writing user
  stories, defining features, defining which features NOT to have&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic version&lt;/strong&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?q=&amp;amp;o=&amp;amp;c=Development+Status+%3A%3A+1+-+Planning"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 2172 projects - noting I know of&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-pre-alpha"&gt;2 - Pre-Alpha&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Required properties&lt;/strong&gt;: There is already some software that gives an idea what
  it is supposed to do.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typical steps&lt;/strong&gt;: Drafting ideas, adding new features, refactoring a lot.
  Here, the complete architecture of the software might still change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic version&lt;/strong&gt;: 0.X.X&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?q=&amp;amp;o=&amp;amp;c=Development+Status+%3A%3A+2+-+Pre-Alpha"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 5067 projects - noting I know of&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-alpha"&gt;3 - Alpha&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Required properties&lt;/strong&gt;: The software has the minimal required set of features
  to be useful. The architecture of the software is clear.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typical steps&lt;/strong&gt;: Internal testing. People close to the developers can use
  the software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic version&lt;/strong&gt;: 0.X.X&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?q=&amp;amp;o=&amp;amp;c=Development+Status+%3A%3A+3+-+Alpha"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 10,000+ projects, including &lt;a href="https://pypi.org/project/Lasagne/"&gt;Lasagne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-beta"&gt;4 - Beta&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Required properties&lt;/strong&gt;: Software is feature complete&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typical steps&lt;/strong&gt;: External testing, fixing bugs and performance problems.
  Usability testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic version&lt;/strong&gt;: 0.X.X&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?q=&amp;amp;o=&amp;amp;c=Development+Status+%3A%3A+4+-+Beta"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 10,000+ projects, including &lt;a href="https://pypi.org/project/Pint/"&gt;pint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-productionstable"&gt;5 - Production/Stable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Required properties&lt;/strong&gt;: No major bugs known, tests cover the most important
  cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typical steps&lt;/strong&gt;: Fixing bugs, adding updates and new features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic version&lt;/strong&gt;: &amp;ge; 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?q=&amp;amp;o=&amp;amp;c=Development+Status+%3A%3A+5+-+Production%2FStable"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 10,000+ projects, including &lt;a href="https://pypi.org/project/SQLAlchemy/"&gt;SQLAlchemy&lt;/a&gt;, &lt;a href="https://pypi.org/project/numpy/"&gt;numpy&lt;/a&gt;, &lt;a href="https://pypi.org/project/pandas/"&gt;pandas&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="6-mature"&gt;6 - Mature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Required properties&lt;/strong&gt;: Software was in production for more than a year. No
  new features were required, no major/critical bugs are open.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typical steps&lt;/strong&gt;: Fixing minor bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic version&lt;/strong&gt;: &amp;ge; 1.0.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?c=Development+Status+%3A%3A+6+-+Mature"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 415 projects, including &lt;a href="https://en.wikipedia.org/wiki/Zope"&gt;Zope&lt;/a&gt;, &lt;a href="https://pypi.org/project/pytz/"&gt;pytz&lt;/a&gt; and &lt;a href="https://pypi.org/project/Pillow/"&gt;Pillow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="7-inactive"&gt;7 - Inactive&lt;/h3&gt;
&lt;p&gt;At some point the developers will not add updates to software. Maybe it was a
free-time project and they are not interested in it anymore. Maybe the company
doesn't get enough money from that project. It can still be valuable to keep
the software in the repository. Marking it as "inactive" tells developers that
it's unlikely known issues will be fixed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://pypi.org/search/?q=&amp;amp;o=&amp;amp;c=Development+Status+%3A%3A+7+-+Inactive"&gt;PyPI&lt;/a&gt;&lt;/strong&gt;: 283 projects, including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/async/"&gt;async&lt;/a&gt;: deprecated&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/aws-cyrpto/"&gt;aws-cyrpto&lt;/a&gt;, &lt;a href="https://pypi.org/project/aws-crytpo/"&gt;aws-crytpo&lt;/a&gt;, &lt;a href="https://pypi.org/project/awscrytpo/"&gt;awscrytpo&lt;/a&gt;: Trying to prevent users from typos&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/bs4/"&gt;bs4&lt;/a&gt;: A dummy package&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/image_cleaner/"&gt;&lt;code&gt;image_cleaner&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/memtop/"&gt;&lt;code&gt;memtop&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/asr/"&gt;&lt;code&gt;asr&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/pyspell/"&gt;&lt;code&gt;pyspell&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/lumixmaptool/"&gt;&lt;code&gt;lumixmaptool&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/hwrt/"&gt;&lt;code&gt;hwrt&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pypi.org/project/geocodertools/"&gt;&lt;code&gt;geocodertools&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/TensorVision/TensorVision"&gt;TensorVision&lt;/a&gt;, &lt;a href=""&gt;&lt;code&gt;vin_decoder&lt;/code&gt;&lt;/a&gt;: Projects I'm no longer interested in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Important to note here: It is, of course, always possible that it switches back
to any of the other development stages&lt;/p&gt;
&lt;h2 id="see-also_1"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Coding Horror: &lt;a href="https://blog.codinghorror.com/alpha-beta-and-sometimes-gamma/"&gt;Alpha, Beta, and Sometimes Gamma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Software_release_life_cycle"&gt;Software release life cycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Software Engineering"></category></entry><entry><title>Pandas: Merge, join, concatenate</title><link href="https://martin-thoma.com/pandas-merge-join-concatenate/" rel="alternate"></link><published>2018-03-14T20:00:00+01:00</published><updated>2018-03-14T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-03-14:/pandas-merge-join-concatenate/</id><summary type="html">&lt;p&gt;I always get confused about the different methods how to join Pandas
dataframes. So here are some examples that should make it crystal clear.&lt;/p&gt;
&lt;p&gt;First, we create two dataframes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pandas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Germany"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"France"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Indonesia"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inhabitants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;82.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;66.9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I always get confused about the different methods how to join Pandas
dataframes. So here are some examples that should make it crystal clear.&lt;/p&gt;
&lt;p&gt;First, we create two dataframes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pandas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Germany"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"France"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Indonesia"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inhabitants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;82.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;66.9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;255.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;capitals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Berlin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Paris"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Jakarta"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;df1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"inhabitant"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inhabitants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"capital"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;capitals&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df1&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"capital"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"inhabitant"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Germany"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Italy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Spain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Austria"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;capitals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Berlin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Rome"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Madrid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Vienna"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;hdis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.926&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.897&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.844&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.893&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"capital"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;capitals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"HDI"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hdis&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"capital"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"HDI"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So &lt;code&gt;df1&lt;/code&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;     country  capital   inhabitant
0    Germany   Berlin   82500000.0
1     France    Paris   66900000.0
2  Indonesia  Jakarta  255500000.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;df2&lt;/code&gt; is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   country capital    HDI
0  Germany  Berlin  0.926
1    Italy    Rome  0.897
2    Spain  Madrid  0.844
3  Austria  Vienna  0.893
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="merge"&gt;Merge&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html"&gt;pandas docs&lt;/a&gt;
tell you that it has the syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; df1.merge(df2, on='country', how='inner')
   country capital_x  inhabitant capital_y    HDI
0  Germany    Berlin  82500000.0    Berlin  0.926
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that the column &lt;code&gt;capital&lt;/code&gt; was duplicated as it is in both tables&lt;/p&gt;
&lt;p&gt;Then you can do all of the usual operations we know from SQL JOINs, e.g. a LEFT JOIN:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; df1.merge(df2, on='country', how='left')
     country capital_x   inhabitant capital_y    HDI
0    Germany    Berlin   82500000.0    Berlin  0.926
1     France     Paris   66900000.0       NaN    NaN
2  Indonesia   Jakarta  255500000.0       NaN    NaN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A RIGHT JOIN:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; df1.merge(df2, on='country', how='right')
   country capital_x  inhabitant capital_y    HDI
0  Germany    Berlin  82500000.0    Berlin  0.926
1    Italy       NaN         NaN      Rome  0.897
2    Spain       NaN         NaN    Madrid  0.844
3  Austria       NaN         NaN    Vienna  0.893
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OUTER JOIN:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; df1.merge(df2, on='country', how='outer')
     country capital_x   inhabitant capital_y    HDI
0    Germany    Berlin   82500000.0    Berlin  0.926
1     France     Paris   66900000.0       NaN    NaN
2  Indonesia   Jakarta  255500000.0       NaN    NaN
3      Italy       NaN          NaN      Rome  0.897
4      Spain       NaN          NaN    Madrid  0.844
5    Austria       NaN          NaN    Vienna  0.893
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="join"&gt;Join&lt;/h2&gt;
&lt;p&gt;Join is just a convenience method, which uses merge and should be used if you
want to merge on the index:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The related DataFrame.join method, uses merge internally for the
index-on-index and index-on-column(s) joins, but joins on indexes by default
rather than trying to join on common columns (the default behavior for
merge). If you are joining on index, you may wish to use DataFrame.join to
save yourself some typing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html"&gt;pandas join operation&lt;/a&gt;
states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DataFrame.join(other, on=None, how='left', lsuffix='', rsuffix='', sort=False)&lt;/p&gt;
&lt;p&gt;Join columns with other DataFrame either on index or on a key column.
Efficiently Join multiple DataFrame objects by index at once by passing a
list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having a look at the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; df1.join(df2, on='country', how='outer', lsuffix='_df1')
  country_df1 capital_df1   inhabitant country capital    HDI
0     Germany      Berlin   82500000.0     NaN     NaN    NaN
1      France       Paris   66900000.0     NaN     NaN    NaN
2   Indonesia     Jakarta  255500000.0     NaN     NaN    NaN
2         NaN         NaN          NaN       0  Berlin  0.926
2         NaN         NaN          NaN       1    Rome  0.897
2         NaN         NaN          NaN       2  Madrid  0.844
2         NaN         NaN          NaN       3  Vienna  0.893
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would say join and merge look extremely similar. You can notice differences
in the function signature when you look at the help, but the difference in the
output is more subtile. It's the index: For merge, you still have the typical
index where each element is unique. For join, if you merge on a column, you
don't have that anymore.&lt;/p&gt;
&lt;h2 id="concatenate"&gt;Concatenate&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html"&gt;Pandas Documentation&lt;/a&gt;
and the example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; pd.concat([df1, df2])
     HDI  capital    country   inhabitant
0    NaN   Berlin    Germany   82500000.0
1    NaN    Paris     France   66900000.0
2    NaN  Jakarta  Indonesia  255500000.0
0  0.926   Berlin    Germany          NaN
1  0.897     Rome      Italy          NaN
2  0.844   Madrid      Spain          NaN
3  0.893   Vienna    Austria          NaN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="see-also"&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/merging.html"&gt;Merge, join, and concatenate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/37891437/562769"&gt;What is the difference between join and merge in Pandas?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Pandas"></category></entry><entry><title>Datetime</title><link href="https://martin-thoma.com/datetime/" rel="alternate"></link><published>2018-01-27T20:00:00+01:00</published><updated>2018-01-27T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-01-27:/datetime/</id><summary type="html">&lt;p&gt;Specifying a point in time is a pretty common task. And it is extraordinary
difficult. Lets have a look at the different ways to specify a point in time.&lt;/p&gt;
&lt;div&gt;If you want to learn more about time, read my summary &lt;a href="https://zenodo.org/record/1443533"&gt;What every developer should know about time&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;Imagine the following …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Specifying a point in time is a pretty common task. And it is extraordinary
difficult. Lets have a look at the different ways to specify a point in time.&lt;/p&gt;
&lt;div&gt;If you want to learn more about time, read my summary &lt;a href="https://zenodo.org/record/1443533"&gt;What every developer should know about time&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;Imagine the following scenario: We record some events, e.g. actions of a credit
card user. In case of potential fraud, an automatic system locks the card and a
human has a look at the actions and times. The human monitoring system requests
all data related to this credit card user. Of course, most if it has time
stamps. As it is another system, the time has to be transfered from the
recording system to the monitoring system. And it might well be that one does
not want to give direct database access but rather a REST-like API endpoint.
Thus the way to serialize the datetime has to be a string.&lt;/p&gt;
&lt;p&gt;Now... how do you encode a datetime to a string?&lt;/p&gt;
&lt;h2 id="unix-time"&gt;Unix Time&lt;/h2&gt;
&lt;p&gt;The Unix Time is the number of seconds that have elapsed since 00:00:00
Coordinated Universal Time (UTC), Thursday, 1 January 1970, minus the number
of leap seconds that have taken place since then.&lt;/p&gt;
&lt;p&gt;Problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; Not human-readable&lt;/li&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; &lt;a href="https://en.wikipedia.org/wiki/Year_2038_problem"&gt;Year 2038 problem&lt;/a&gt; for 32-bit systems.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; Everything before the 1st of January in 1970 is not representable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Especially the last point is a killer criterium against Unix time in many
applications.&lt;/p&gt;
&lt;h2 id="calendar-systems"&gt;Calendar systems&lt;/h2&gt;
&lt;p&gt;Most countries use the &lt;a href="https://en.wikipedia.org/wiki/Gregorian_calendar"&gt;Gregorian calendar&lt;/a&gt;
today,&lt;sup&gt;[&lt;a href="#ref-1" name="ref-1-anchor"&gt;1&lt;/a&gt;]&lt;/sup&gt; so the type of
calendar is at least something we don't have to worry about. But then the problems begin.
I thought &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; would be a simple,
human-readable, unabiguous format that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;2018-01-27T16:45:01+00:00
2018-01-27T16:45:01+00:00
1990-12-31T23:59:59+00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But due to leap seconds / days and due to changes in timezones I'm pretty sure
there is one point in time which has two different ISO 8601 time stamps. Please
let me know in the comments if you see one (best if it can be shown with some
programming languages).&lt;/p&gt;
&lt;p&gt;So the TL;DR about ISO 8601:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="color: green;"&gt;&amp;oplus;&lt;/span&gt; Lexicographical ordering is also
  the ordering by time.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: green;"&gt;&amp;oplus;&lt;/span&gt; It is human readable&lt;/li&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; ISO 8601 does not only have
  &lt;code&gt;2018-01-27T16:45:01+00:00&lt;/code&gt; but also &lt;code&gt;2018-01-27T16:45:01Z&lt;/code&gt; and
  &lt;code&gt;20180127T164501Z&lt;/code&gt; were Z means Zero offset for UTC. So there are multiple
  representations for the same point in time.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; Anything before
  &lt;code&gt;0000-01-01T00:00:00+00:00&lt;/code&gt; is not representable.&lt;sup&gt;[&lt;a href="#ref-2" name="ref-2-anchor"&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; &lt;a href="https://en.wikipedia.org/wiki/Year_zero"&gt;Year zero doesn't exist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="falsehood-programmer-beliefies"&gt;Falsehood Programmer beliefies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Months have either 30 or 31 days.&lt;ul&gt;
&lt;li&gt;False! You forgot February.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Years have 365 days.&lt;ul&gt;
&lt;li&gt;False! You forgot February again! There are &lt;a href="https://en.wikipedia.org/wiki/Leap_year"&gt;leap years&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A given geographic point (e.g. a city) has always the same time zone.&lt;ul&gt;
&lt;li&gt;False! You forgot &lt;a href="https://en.wikipedia.org/wiki/Daylight_saving_time"&gt;DST&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Let's check that with Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'0001-11-01T00:00:00'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'9999-11-01T00:00:00'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'2017-12-24T00:00:00'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'2017-12-24T00:00:00+00:00'&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;'t subtract offset-naive and offset-aware datetimes&lt;/span&gt;

&lt;span class="c1"&gt;## Parsing stuff&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0020-11-01T00:00:00'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;T%H:%M:%S'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By now, &lt;a href="https://stackoverflow.com/questions/tagged/datetime-parsing+python"&gt;Datetime parsing with Python&lt;/a&gt; is usually done like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dateutil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dateparser&lt;/span&gt;

&lt;span class="n"&gt;date_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dateparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Tue May 08 15:14:45 +0800 2012"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things that are unintuitive for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; Why don't all datetime objects have
  timezone information? (See &lt;a href="https://stackoverflow.com/q/48478879/562769"&gt;SO question&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span style="color: red;"&gt;&amp;odash;&lt;/span&gt; Python can create a format it can't consume again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://strftime.org"&gt;Python's strftime directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tz_database"&gt;Olson database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0321/"&gt;PEP 321&lt;/a&gt;: Date/Time Parsing and Formatting&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0431/"&gt;PEP 431&lt;/a&gt;: Time zone support improvements (Withdrawn)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pytz"&gt;&lt;code&gt;pytz&lt;/code&gt;&lt;/a&gt;: In case you need anything for time zones&lt;/li&gt;
&lt;li&gt;&lt;a href="https://howchoo.com/g/ywi5m2vkodk/working-with-datetime-objects-and-timezones-in-python"&gt;Working with datetime objects and timezones in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="javascript"&gt;JavaScript&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives &lt;code&gt;2018-01-27T22:51:17.691Z&lt;/code&gt;. So it is a ISO 8601 datetime with miliseconds
and zero offset. Nice!&lt;/p&gt;
&lt;p&gt;You can also find this in the &lt;a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15"&gt;ECMA specification&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ECMAScript defines a string interchange format for date-times based upon a
simplification of the ISO 8601 Extended Format. The format is as follows:&lt;/p&gt;
&lt;p&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="php5"&gt;PHP5&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;php&lt;span class="w"&gt; &lt;/span&gt;-a
Interactive&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;enabled

php&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;DateTime&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
php&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$dt&lt;/span&gt;-&amp;gt;format&lt;span class="o"&gt;(&lt;/span&gt;DateTime::ATOM&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="m"&gt;2018&lt;/span&gt;-01-27T23:58:12+01:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that PHP gives you the ISO 8601 string with the zone offset, but
not the milliseconds.&lt;/p&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="#ref-1-anchor" name="ref-1"&gt;1&lt;/a&gt;] I've heard the &lt;a href="https://en.wikipedia.org/wiki/Islamic_calendar"&gt;Islamic calendar&lt;/a&gt; is used in Saudi Arabia.&lt;/li&gt;
&lt;li&gt;[&lt;a href="#ref-2-anchor" name="ref-2"&gt;2&lt;/a&gt;] Or only by mutual agreement... which is the same as breaking the standard, if you ask me.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="Python"></category><category term="date"></category><category term="time"></category><category term="datetime"></category></entry><entry><title>Python Projects</title><link href="https://martin-thoma.com/python-projects/" rel="alternate"></link><published>2018-01-18T20:00:00+01:00</published><updated>2018-01-18T20:00:00+01:00</updated><author><name>Martin Thoma</name></author><id>tag:martin-thoma.com,2018-01-18:/python-projects/</id><summary type="html">&lt;p&gt;I recently thought a bit about what makes software good. Not from a functional
perspective, but from a developers perspective. As I did quite some work with
data science, machine learning and Python my view is a bit biased. Having said
that, here is my personal "best practices" guide.&lt;/p&gt;
&lt;h2 id="naming"&gt;Naming …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;I recently thought a bit about what makes software good. Not from a functional
perspective, but from a developers perspective. As I did quite some work with
data science, machine learning and Python my view is a bit biased. Having said
that, here is my personal "best practices" guide.&lt;/p&gt;
&lt;h2 id="naming"&gt;Naming&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There are 2 hard problems in computer science: cache invalidation, naming
things, and off-by-1 errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I prefer names which have the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can't be confused with something else and the name is available at PyPI.
  I'm looking at you, GTK (&lt;a href="https://stackoverflow.com/q/44213921/562769"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;They are short, but can be googled. Looking at you &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;Go&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;They are completely lowercase: Please don't make me think how to import your
  package. Is it &lt;code&gt;pypdf2&lt;/code&gt;, &lt;code&gt;PyPDF2&lt;/code&gt;, &lt;code&gt;pyPDF2&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;They are either max 4 letters or pronouncable. Something like &lt;code&gt;tensorflow&lt;/code&gt; is
  longer, but that's ok because I remember it as one thing. &lt;code&gt;lidtk&lt;/code&gt; is
  borderline as I remember it as &lt;code&gt;lid..tk&lt;/code&gt; - how I say it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, assume your module is called &lt;code&gt;foo_module&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="project-structure"&gt;Project structure&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;foo_module : the git repository root dir
&amp;boxvr;&amp;boxh;&amp;boxh; configs
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; module.yaml
&amp;boxvr;&amp;boxh;&amp;boxh; docker-compose.yml
&amp;boxvr;&amp;boxh;&amp;boxh; Dockerfile
&amp;boxvr;&amp;boxh;&amp;boxh; foo_module
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; api.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; cli.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; config.yaml
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; controller.py
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; credentials.yaml
&amp;boxv;   &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; utils.py
&amp;boxvr;&amp;boxh;&amp;boxh; tox.ini
&amp;boxvr;&amp;boxh;&amp;boxh; README.md
&amp;boxvr;&amp;boxh;&amp;boxh; requirements.txt
&amp;boxvr;&amp;boxh;&amp;boxh; setup.cfg
&amp;boxvr;&amp;boxh;&amp;boxh; setup.py
&amp;boxur;&amp;boxh;&amp;boxh; tests
    &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py
    &amp;boxur;&amp;boxh;&amp;boxh; test_utils.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Having a &lt;code&gt;Dockerfile&lt;/code&gt; and a &lt;code&gt;docker-compose.yml&lt;/code&gt; might be nice if you have
  not purely Python dependencies. See &lt;a href="https://martin-thoma.com/docker/"&gt;my Docker article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;foo_module/__init__.py&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pkg_resources&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_distribution&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_distribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"lidtk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Not installed"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;setup.py&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;setuptools&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"install_requires"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"click&amp;gt;=6.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"numpy&amp;gt;=1.14.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"scipy&amp;gt;=1.0.0"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;"tests_require"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"pytest&amp;gt;=3.3.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"pytest-cov&amp;gt;=2.5.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"pytest-pep8&amp;gt;=1.0.6"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Machine Learning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Data Science"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;"download_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/MartinThoma/language-identification"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"classifiers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"Development Status :: 1 - Planning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Environment :: Console"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Intended Audience :: Developers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Intended Audience :: Science/Research"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Intended Audience :: Information Technology"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"License :: OSI Approved :: MIT License"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Natural Language :: English"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Programming Language :: Python :: 3.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Topic :: Scientific/Engineering :: Information Analysis"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Topic :: Software Development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Topic :: Utilities"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;"zip_safe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;cli.py&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="c1"&gt;# Third party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;click&lt;/span&gt;

&lt;span class="c1"&gt;# First party modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;foo_module&lt;/span&gt;


&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;foo_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;entry_point&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Awesomeproject spreads pure awesomeness."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The setup.cfg should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[metadata]&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;foo_module&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;0.1.0&lt;/span&gt;

&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Martin Thoma&lt;/span&gt;
&lt;span class="na"&gt;author_email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;info@martin-thoma.de&lt;/span&gt;
&lt;span class="na"&gt;maintainer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Martin Thoma&lt;/span&gt;
&lt;span class="na"&gt;maintainer_email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;info@martin-thoma.de&lt;/span&gt;

&lt;span class="na"&gt;platforms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Linux&lt;/span&gt;

&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;https://github.com/MartinThoma/language-identification&lt;/span&gt;
&lt;span class="na"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;MIT&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Language identification Toolkit&lt;/span&gt;
&lt;span class="na"&gt;long_description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;file: README.md&lt;/span&gt;
&lt;span class="na"&gt;long_description_content_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;text/markdown&lt;/span&gt;

&lt;span class="k"&gt;[options]&lt;/span&gt;
&lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;find:&lt;/span&gt;

&lt;span class="k"&gt;[options.entry_points]&lt;/span&gt;
&lt;span class="na"&gt;console_scripts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;foo_module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;foo_module.cli:entry_point&lt;/span&gt;

&lt;span class="k"&gt;[tool:pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;./tests/ --doctest-modules --cov=./foo_module --cov-report html:tests/reports/coverage-html --pep8&lt;/span&gt;
&lt;span class="na"&gt;doctest_encoding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;utf-8&lt;/span&gt;

&lt;span class="k"&gt;[pydocstyle]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;D104, D413, D212, D100&lt;/span&gt;
&lt;span class="na"&gt;match_dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;foo_module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Documentation is important as Python does not have type information directly
visible in the code. So you want all functions to &lt;strong&gt;have a Docstring&lt;/strong&gt; which
documents which type the parameter and the return value has.
Decide on a format. I like the &lt;a href="https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt"&gt;numpydoc convention&lt;/a&gt;.
Stick to that.&lt;/p&gt;
&lt;p&gt;Every project should &lt;strong&gt;have a README.md&lt;/strong&gt; which answers the following questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the project about?&lt;/li&gt;
&lt;li&gt;What do I need to run it?&lt;/li&gt;
&lt;li&gt;Usage example&lt;/li&gt;
&lt;li&gt;Developer guide:&lt;ol&gt;
&lt;li&gt;What are TODOs / where can I find them?&lt;/li&gt;
&lt;li&gt;How do I run the tests&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="logging"&gt;Logging&lt;/h2&gt;
&lt;p&gt;Use the &lt;a href="https://docs.python.org/3/library/logging.html"&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;Add the logging configuration to the modules configuration file (&lt;code&gt;configs/module.yaml&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;LOGGING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;disable_existing_loggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;formatters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%(asctime)s&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;%(name)s&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;%(levelname)s&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;%(message)s"&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;logging.StreamHandler&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;DEBUG&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;simple&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ext://sys.stdout&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;info_file_handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;INFO&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;simple&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lidtk.info.log&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;maxBytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10485760&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 10MB&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;backupCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;20&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;utf8&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;error_file_handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ERROR&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;simple&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lidtk.errors.log&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;maxBytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10485760&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 10MB&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;backupCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;20&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;utf8&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;loggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;my_module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ERROR&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;propagate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;INFO&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info_file_handler&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;error_file_handler&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In your main script &lt;code&gt;bin/foo_module&lt;/code&gt;, you should load this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# core modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;logging.config&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pkg_resources&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pkg_resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo_module"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"configs/module.yaml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LOGGING"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;p&gt;Tests are written for three purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Correctness&lt;/em&gt;: Having more tests gives you more certainty that you actually
   did the right thing.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Documentation&lt;/em&gt;: If documentation is bad, developers can have a look at your
   tests. They might show what was not directly doucmented.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Flexibility&lt;/em&gt;: Once another developer gets to see code which is used in
   production, one hasitates to change it. You might break things. Having many
   tests and a high test coverage gives the project more flexibility as people
   see faster where things break. And keep in mind: That future developer might
   be yourself, after not having worked with your code for a while.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use &lt;a href="https://docs.pytest.org/en/latest/"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://tox.readthedocs.io/en/latest/index.html"&gt;&lt;code&gt;tox&lt;/code&gt;&lt;/a&gt;.
The &lt;code&gt;tox.ini&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;py35, py36&lt;/span&gt;
&lt;span class="na"&gt;skip_missing_interpreters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pytest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pytest-cov&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pytest-pep8&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pydocstyle&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pip install -e .&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pytest .&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pydocstyle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="anti-patterns"&gt;Anti-Patterns&lt;/h2&gt;
&lt;h3 id="print-vs-logging"&gt;Print vs Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logging.XY(msg)&lt;/code&gt; should be used, when there is information about the flow
  of the program. The reason for having logging is to analyze why something
  went wrong or if everything went right. So debugging / monitoring.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(msg)&lt;/code&gt; should be used, when there is output by the program. So output
  that is the purpose of the program. The purpose of &lt;code&gt;print(msg)&lt;/code&gt; is as the
  message is why the user called the program in the first place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I do quite often is to print stuff when I should actually use
&lt;code&gt;logging.debug(msg)&lt;/code&gt;. I want to change it.&lt;/p&gt;
&lt;h3 id="assert-vs-exception"&gt;assert vs Exception&lt;/h3&gt;
&lt;p&gt;To quote from &lt;a href="https://softwareengineering.stackexchange.com/a/15518/25699"&gt;softwareengineering.stackexchange.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assertions&lt;/strong&gt; should only be used to verify conditions that should be
logically impossible to be false (read: &lt;strong&gt;sanity checks&lt;/strong&gt;). These conditions
should only be based on inputs generated by your own code. Any checks based
on external inputs should use exceptions.&lt;/p&gt;
&lt;p&gt;A simple rule that I tend to follow is verifying private functions' arguments
with asserts, and using &lt;strong&gt;exceptions for public/protected functions&lt;/strong&gt;'
arguments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="setuppy-vs-requirementstxt"&gt;setup.py vs requirements.txt&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;setup.py&lt;/code&gt; file defines abstract dependencies. &lt;code&gt;pip install&lt;/code&gt; will look at
those and try to install them, if some are missing.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;requirements.txt&lt;/code&gt; is for deployment. It has concrete dependencies.&lt;/p&gt;
&lt;p&gt;If you don't need this distinction, you can make a &lt;code&gt;requirements.txt&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;--index-url https://pypi.python.org/simple/

-e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://caremad.io/posts/2013/07/setup-vs-requirement/"&gt;this blogpost&lt;/a&gt; for
details.&lt;/p&gt;
&lt;h3 id="multiple-main"&gt;Multiple &lt;strong&gt;main&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A Python package should at most contain one &lt;code&gt;__main__&lt;/code&gt;. That should be the
&lt;code&gt;bin/foo_module&lt;/code&gt;. All other files should either be pure "library files" or be
connected to the main command. I like &lt;a href="http://click.pocoo.org/6/"&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt; for
creating the CLI. See my &lt;a href="https://github.com/MartinThoma/clana"&gt;clana project&lt;/a&gt;
as an example.&lt;/p&gt;
&lt;h3 id="comments"&gt;Comments&lt;/h3&gt;
&lt;p&gt;Once in a while, I see many comments when there should be refactoring. If you
have to explain things, there might be a couple of reasons for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Something is unintuitive. Make it intuitive.&lt;/li&gt;
&lt;li&gt;It's too complicated. Make it simpler. For example, split the function up.&lt;/li&gt;
&lt;li&gt;Your naming is bad. Rename your variables / functions.&lt;/li&gt;
&lt;li&gt;The damn thing is just complicated. You actually need a comment to clarify.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="outdated-dependencies"&gt;Outdated dependencies&lt;/h3&gt;
&lt;p&gt;Check your dependencies with &lt;code&gt;piprot requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="bad-package-structure"&gt;Bad package structure&lt;/h3&gt;
&lt;p&gt;Check your package with &lt;a href="https://github.com/regebro/pyroma"&gt;&lt;code&gt;pyroma .&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Architecture"></category><category term="Software Engineering"></category><category term="Python"></category></entry></feed>